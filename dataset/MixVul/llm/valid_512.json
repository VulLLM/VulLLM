[
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "flatpak_context_features_to_string (FlatpakContextFeatures features, FlatpakContextFeatures valid)\n{\n  return flatpak_context_bitmask_to_string (features, valid, flatpak_context_features);\n}",
        "output": "0",
        "idx": 317
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mov_text_cleanup_ftab(MovTextContext *m)\n\n{\n\n    int i;\n\n    for(i = 0; i < m->count_f; i++) {\n\n        av_freep(&m->ftab[i]->font);\n\n        av_freep(&m->ftab[i]);\n\n    }\n\n    av_freep(&m->ftab);\n\n}\n",
        "output": "1",
        "idx": 3211
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err hmhd_box_read(GF_Box *s,GF_BitStream *bs)\n{\n\tGF_HintMediaHeaderBox *ptr = (GF_HintMediaHeaderBox *)s;\n\n\tISOM_DECREASE_SIZE(ptr, 16);\n\tptr->maxPDUSize = gf_bs_read_u16(bs);\n\tptr->avgPDUSize = gf_bs_read_u16(bs);\n\tptr->maxBitrate = gf_bs_read_u32(bs);\n\tptr->avgBitrate = gf_bs_read_u32(bs);\n\tptr->slidingAverageBitrate = gf_bs_read_u32(bs);\n\treturn GF_OK;\n}",
        "output": "0",
        "idx": 4904
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_P(Http2MetadataIntegrationTest, DecodingHeadersOnlyRequestWithRequestMetadataEmptyData) {\n  addFilters({request_metadata_filter, decode_headers_only});\n\n  // Send a request with body, and body size is 0.\n  runHeaderOnlyTest(true, 0);\n  verifyHeadersOnlyTest();\n}",
        "output": "0",
        "idx": 5004
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gnutls_handshake_set_hook_function(gnutls_session_t session,\n\t\t\t\t   unsigned int htype,\n\t\t\t\t   int when,\n\t\t\t\t   gnutls_handshake_hook_func func)\n{\n\tsession->internals.h_hook = func;\n\tsession->internals.h_type = htype;\n\tsession->internals.h_post = when;\n}",
        "output": "0",
        "idx": 1150
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void memory_region_allocate_system_memory(MemoryRegion *mr, Object *owner,\n                                          const char *name,\n                                          uint64_t ram_size)\n{\n    uint64_t addr = 0;\n    int i;\n    if (nb_numa_nodes == 0 || !have_memdevs) {\n        allocate_system_memory_nonnuma(mr, owner, name, ram_size);\n        return;\n    memory_region_init(mr, owner, name, ram_size);\n    for (i = 0; i < MAX_NODES; i++) {\n        Error *local_err = NULL;\n        uint64_t size = numa_info[i].node_mem;\n        HostMemoryBackend *backend = numa_info[i].node_memdev;\n        if (!backend) {\n            continue;\n        MemoryRegion *seg = host_memory_backend_get_memory(backend, &local_err);\n        if (local_err) {\n            qerror_report_err(local_err);\n        memory_region_add_subregion(mr, addr, seg);\n        vmstate_register_ram_global(seg);\n        addr += size;",
        "output": "1",
        "idx": 5537
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qemu_rbd_close(BlockDriverState *bs)\n\n{\n\n    BDRVRBDState *s = bs->opaque;\n\n\n\n    close(s->fds[0]);\n\n    close(s->fds[1]);\n\n    qemu_aio_set_fd_handler(s->fds[RBD_FD_READ], NULL, NULL, NULL);\n\n\n\n    rbd_close(s->image);\n\n    rados_ioctx_destroy(s->io_ctx);\n\n    g_free(s->snap);\n\n    rados_shutdown(s->cluster);\n\n}\n",
        "output": "1",
        "idx": 1902
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ism_write_packet(AVFormatContext *s, AVPacket *pkt)\n\n{\n\n    SmoothStreamingContext *c = s->priv_data;\n\n    AVStream *st = s->streams[pkt->stream_index];\n\n    OutputStream *os = &c->streams[pkt->stream_index];\n\n    int64_t end_dts = (c->nb_fragments + 1) * c->min_frag_duration;\n\n    int ret;\n\n\n\n    if (st->first_dts == AV_NOPTS_VALUE)\n\n        st->first_dts = pkt->dts;\n\n\n\n    if ((!c->has_video || st->codec->codec_type == AVMEDIA_TYPE_VIDEO) &&\n\n        av_compare_ts(pkt->dts - st->first_dts, st->time_base,\n\n                      end_dts, AV_TIME_BASE_Q) >= 0 &&\n\n        pkt->flags & AV_PKT_FLAG_KEY && os->packets_written) {\n\n\n\n        if ((ret = ism_flush(s, 0)) < 0)\n\n            return ret;\n\n        c->nb_fragments++;\n\n    }\n\n\n\n    os->packets_written++;\n\n    return ff_write_chained(os->ctx, 0, pkt, s);\n\n}\n",
        "output": "1",
        "idx": 3471
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    X509_LOOKUP* X509_STORE_add_lookup(X509_STORE*, X509_LOOKUP_METHOD*)\n    {\n        // TODO:\n        return 0;\n    }",
        "output": "0",
        "idx": 842
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static u32 __ipv6_select_ident(struct net *net,\n\t\t\t       const struct in6_addr *dst,\n\t\t\t       const struct in6_addr *src)\n{\n\tconst struct {\n\t\tstruct in6_addr dst;\n\t\tstruct in6_addr src;\n\t} __aligned(SIPHASH_ALIGNMENT) combined = {\n\t\t.dst = *dst,\n\t\t.src = *src,\n\t};\n\tu32 hash, id;\n\n\t/* Note the following code is not safe, but this is okay. */\n\tif (unlikely(siphash_key_is_zero(&net->ipv4.ip_id_key)))\n\t\tget_random_bytes(&net->ipv4.ip_id_key,\n\t\t\t\t sizeof(net->ipv4.ip_id_key));\n\n\thash = siphash(&combined, sizeof(combined), &net->ipv4.ip_id_key);\n\n\t/* Treat id of 0 as unset and if we get 0 back from ip_idents_reserve,\n\t * set the hight order instead thus minimizing possible future\n\t * collisions.\n\t */\n\tid = ip_idents_reserve(hash, 1);\n\tif (unlikely(!id))\n\t\tid = 1 << 31;\n\n\treturn id;\n}",
        "output": "1",
        "idx": 3786
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cd_read_sector(IDEState *s, int lba, uint8_t *buf, int sector_size)\n\n{\n\n    int ret;\n\n\n\n    switch(sector_size) {\n\n    case 2048:\n\n        block_acct_start(blk_get_stats(s->blk), &s->acct,\n\n                         4 * BDRV_SECTOR_SIZE, BLOCK_ACCT_READ);\n\n        ret = blk_read(s->blk, (int64_t)lba << 2, buf, 4);\n\n        block_acct_done(blk_get_stats(s->blk), &s->acct);\n\n        break;\n\n    case 2352:\n\n        block_acct_start(blk_get_stats(s->blk), &s->acct,\n\n                         4 * BDRV_SECTOR_SIZE, BLOCK_ACCT_READ);\n\n        ret = blk_read(s->blk, (int64_t)lba << 2, buf + 16, 4);\n\n        block_acct_done(blk_get_stats(s->blk), &s->acct);\n\n        if (ret < 0)\n\n            return ret;\n\n        cd_data_to_raw(buf, lba);\n\n        break;\n\n    default:\n\n        ret = -EIO;\n\n        break;\n\n    }\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 429
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void OPPROTO op_check_addo (void)\n\n{\n\n    if (likely(!(((uint32_t)T2 ^ (uint32_t)T1 ^ UINT32_MAX) &\n\n                 ((uint32_t)T2 ^ (uint32_t)T0) & (1UL << 31)))) {\n\n        xer_ov = 0;\n\n    } else {\n\n        xer_so = 1;\n\n        xer_ov = 1;\n\n    }\n\n    RETURN();\n\n}\n",
        "output": "1",
        "idx": 1941
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "netscreen_seek_read(wtap *wth, gint64 seek_off,\n\tstruct wtap_pkthdr *phdr, Buffer *buf,\n\tint *err, gchar **err_info)\n{\n\tint\t\tpkt_len;\n\tchar\t\tline[NETSCREEN_LINE_LENGTH];\n\tchar\t\tcap_int[NETSCREEN_MAX_INT_NAME_LENGTH];\n\tgboolean\tcap_dir;\n\tchar\t\tcap_dst[13];\n\n\tif (file_seek(wth->random_fh, seek_off, SEEK_SET, err) == -1) {\n\t\treturn FALSE;\n\t}\n\n\tif (file_gets(line, NETSCREEN_LINE_LENGTH, wth->random_fh) == NULL) {\n\t\t*err = file_error(wth->random_fh, err_info);\n\t\tif (*err == 0) {\n\t\t\t*err = WTAP_ERR_SHORT_READ;\n\t\t}\n\t\treturn FALSE;\n\t}\n\n\tpkt_len = parse_netscreen_rec_hdr(phdr, line, cap_int, &cap_dir,\n\t    cap_dst, err, err_info);\n\tif (pkt_len == -1)\n\t\treturn FALSE;\n\n\tif (!parse_netscreen_hex_dump(wth->random_fh, pkt_len, cap_int,\n\t    cap_dst, phdr, buf, err, err_info))\n\t\treturn FALSE;\n\treturn TRUE;\n}",
        "output": "1",
        "idx": 1417
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cms_env_set_version(CMS_EnvelopedData *env)\n{\n    int i;\n    CMS_RecipientInfo *ri;\n\n    /*\n     * Can't set version higher than 4 so if 4 or more already nothing to do.\n     */\n    if (env->version >= 4)\n        return;\n\n    cms_env_set_originfo_version(env);\n\n    if (env->version >= 3)\n        return;\n\n    for (i = 0; i < sk_CMS_RecipientInfo_num(env->recipientInfos); i++) {\n        ri = sk_CMS_RecipientInfo_value(env->recipientInfos, i);\n        if (ri->type == CMS_RECIPINFO_PASS || ri->type == CMS_RECIPINFO_OTHER) {\n            env->version = 3;\n            return;\n        } else if (ri->type != CMS_RECIPINFO_TRANS\n                   || ri->d.ktri->version != 0) {\n            env->version = 2;\n        }\n    }\n    if (env->version == 2)\n        return;\n    if (env->originatorInfo || env->unprotectedAttrs)\n        env->version = 2;\n    env->version = 0;\n}",
        "output": "0",
        "idx": 5413
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void list_proxy(char *server, void *data __attribute__((unused)), void *rock)\n{\n    struct enum_rock *erock = (struct enum_rock *) rock;\n    struct backend *be;\n    int r;\n    char *result;\n\n    be = proxy_findserver(server, &nntp_protocol,\n\t\t\t  nntp_userid ? nntp_userid : \"anonymous\",\n\t\t\t  &backend_cached, &backend_current, NULL, nntp_in);\n    if (!be) return;\n\n    prot_printf(be->out, \"LIST %s %s\\r\\n\", erock->cmd, erock->wild);\n\n    r = read_response(be, 0, &result);\n    if (!r && !strncmp(result, \"215 \", 4)) {\n\twhile (!(r = read_response(be, 0, &result)) && result[0] != '.') {\n\t    prot_printf(nntp_out, \"%s\", result);\n\t}\n    }\n}",
        "output": "1",
        "idx": 5847
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)\n{\n# ifdef USE_RWLOCK\n    if (pthread_rwlock_wrlock(lock) != 0)\n        return 0;\n# else\n    if (pthread_mutex_lock(lock) != 0)\n        return 0;\n# endif\n\n    return 1;\n}",
        "output": "0",
        "idx": 1784
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void flush_trace_file(void)\n\n{\n\n    /* If the trace file is not open yet, open it now */\n\n    if (!trace_fp) {\n\n        trace_fp = fopen(trace_file_name, \"w\");\n\n        if (!trace_fp) {\n\n            /* Avoid repeatedly trying to open file on failure */\n\n            trace_file_enabled = false;\n\n            return;\n\n        }\n\n        write_header(trace_fp);\n\n    }\n\n\n\n    if (trace_fp) {\n\n        size_t unused; /* for when fwrite(3) is declared warn_unused_result */\n\n        unused = fwrite(trace_buf, trace_idx * sizeof(trace_buf[0]), 1, trace_fp);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 615
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )\r\n{\r\n    BaseType_t xReturn;\r\n    Queue_t * const pxQueue = xQueue;\r\n\r\n    configASSERT( pxQueue );\r\n\r\n    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )\r\n    {\r\n        xReturn = pdTRUE;\r\n    }\r\n    else\r\n    {\r\n        xReturn = pdFALSE;\r\n    }\r\n\r\n    return xReturn;\r\n} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */\r",
        "output": "0",
        "idx": 1853
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int copy_kernel_to_xregs_err(struct xregs_state *xstate, u64 mask)\n{\n\tu32 lmask = mask;\n\tu32 hmask = mask >> 32;\n\tint err;\n\n\tXSTATE_OP(XRSTOR, xstate, lmask, hmask, err);\n\n\treturn err;\n}",
        "output": "0",
        "idx": 4877
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t virtio_balloon_get_features(VirtIODevice *vdev)\n\n{\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4429
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void hci_le_ext_adv_report_evt(struct hci_dev *hdev, struct sk_buff *skb)\n{\n\tu8 num_reports = skb->data[0];\n\tvoid *ptr = &skb->data[1];\n\n\thci_dev_lock(hdev);\n\n\twhile (num_reports--) {\n\t\tstruct hci_ev_le_ext_adv_report *ev = ptr;\n\t\tu8 legacy_evt_type;\n\t\tu16 evt_type;\n\n\t\tevt_type = __le16_to_cpu(ev->evt_type);\n\t\tlegacy_evt_type = ext_evt_type_to_legacy(hdev, evt_type);\n\t\tif (legacy_evt_type != LE_ADV_INVALID) {\n\t\t\tprocess_adv_report(hdev, legacy_evt_type, &ev->bdaddr,\n\t\t\t\t\t   ev->bdaddr_type, NULL, 0, ev->rssi,\n\t\t\t\t\t   ev->data, ev->length);\n\t\t}\n\n\t\tptr += sizeof(*ev) + ev->length;\n\t}\n\n\thci_dev_unlock(hdev);\n}",
        "output": "1",
        "idx": 2259
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int v9fs_synth_unlinkat(FsContext *ctx, V9fsPath *dir,\n\n                               const char *name, int flags)\n\n{\n\n    errno = EPERM;\n\n    return -1;\n\n}\n",
        "output": "0",
        "idx": 1377
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qmp_output_type_null(Visitor *v, const char *name, Error **errp)\n\n{\n\n    QmpOutputVisitor *qov = to_qov(v);\n\n    qmp_output_add_obj(qov, name, qnull());\n\n}\n",
        "output": "0",
        "idx": 5900
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BalloonInfo *qmp_query_balloon(Error **errp)\n\n{\n\n    BalloonInfo *info;\n\n\n\n    if (kvm_enabled() && !kvm_has_sync_mmu()) {\n\n        error_set(errp, QERR_KVM_MISSING_CAP, \"synchronous MMU\", \"balloon\");\n\n        return NULL;\n\n    }\n\n\n\n    info = g_malloc0(sizeof(*info));\n\n\n\n    if (qemu_balloon_status(info) == 0) {\n\n        error_set(errp, QERR_DEVICE_NOT_ACTIVE, \"balloon\");\n\n        qapi_free_BalloonInfo(info);\n\n        return NULL;\n\n    }\n\n\n\n    return info;\n\n}\n",
        "output": "0",
        "idx": 596
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void readCoord(u8 *p, RtreeCoord *pCoord){\n  assert( ((((char*)p) - (char*)0)&3)==0 );  /* p is always 4-byte aligned */\n#if SQLITE_BYTEORDER==1234 && MSVC_VERSION>=1300\n  pCoord->u = _byteswap_ulong(*(u32*)p);\n#elif SQLITE_BYTEORDER==1234 && GCC_VERSION>=4003000\n  pCoord->u = __builtin_bswap32(*(u32*)p);\n#elif SQLITE_BYTEORDER==4321\n  pCoord->u = *(u32*)p;\n#else\n  pCoord->u = (\n    (((u32)p[0]) << 24) + \n    (((u32)p[1]) << 16) + \n    (((u32)p[2]) <<  8) + \n    (((u32)p[3]) <<  0)\n  );\n#endif\n}",
        "output": "0",
        "idx": 5368
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fw_cfg_data_mem_write(void *opaque, target_phys_addr_t addr,\n\n                                  uint64_t value, unsigned size)\n\n{\n\n    fw_cfg_write(opaque, (uint8_t)value);\n\n}\n",
        "output": "0",
        "idx": 5994
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cleanup(void)\n{\n#if defined(JAS_USE_JAS_INIT)\n\tjas_cleanup();\n#else\n\tjas_cleanup_thread();\n\tjas_cleanup_library();\n#endif\n}",
        "output": "0",
        "idx": 3851
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_timeout_ns_to_ms(int64_t ns)\n\n{\n\n    int64_t ms;\n\n    if (ns < 0) {\n\n        return -1;\n\n    }\n\n\n\n    if (!ns) {\n\n        return 0;\n\n    }\n\n\n\n    /* Always round up, because it's better to wait too long than to wait too\n\n     * little and effectively busy-wait\n\n     */\n\n    ms = DIV_ROUND_UP(ns, SCALE_MS);\n\n\n\n    /* To avoid overflow problems, limit this to 2^31, i.e. approx 25 days */\n\n    if (ms > (int64_t) INT32_MAX) {\n\n        ms = INT32_MAX;\n\n    }\n\n\n\n    return (int) ms;\n\n}\n",
        "output": "0",
        "idx": 2065
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    if (ret == WS_SUCCESS) {\n        WMEMSET((byte*)&fd, 0, sizeof(HANDLE));\n        WMEMCPY((byte*)&fd, data + idx, sz);\n        idx += sz;\n\n        /* get offset into file */\n        WMEMSET(&offset, 0, sizeof(OVERLAPPED));\n        ato32(data + idx, &sz);\n        idx += UINT32_SZ;\n        offset.OffsetHigh = (DWORD)sz;\n        ato32(data + idx, &sz);\n        idx += UINT32_SZ;\n        offset.Offset = (DWORD)sz;\n\n        /* get length to be written */\n        ato32(data + idx, &sz);\n        idx += UINT32_SZ;\n\n        if (WriteFile(fd, data + idx, sz, &bytesWritten, &offset) == 0) {\n            WLOG(WS_LOG_SFTP, \"Error writing to file\");\n            res  = err;\n            type = WOLFSSH_FTP_FAILURE;\n            ret  = WS_INVALID_STATE_E;\n        }\n        else {\n            ret = WS_SUCCESS;\n        }\n    }",
        "output": "1",
        "idx": 1025
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void Compute(OpKernelContext* ctx) override {\n    const Tensor& input = ctx->input(0);\n    const float input_min_float = ctx->input(1).flat<float>()(0);\n    const float input_max_float = ctx->input(2).flat<float>()(0);\n    Tensor* output_min = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(0, TensorShape({}), &output_min));\n    Tensor* output_max = nullptr;\n    OP_REQUIRES_OK(ctx, ctx->allocate_output(1, TensorShape({}), &output_max));\n\n    qint32 used_min_quantized;\n    qint32 used_max_quantized;\n    CalculateUsedRange(input, &used_min_quantized, &used_max_quantized);\n\n    // We want to make sure that the minimum is no larger than zero, so that the\n    // convolution operation can run efficiently.\n    const float used_min_float = std::min(\n        0.0f,\n        QuantizedToFloat(used_min_quantized, input_min_float, input_max_float));\n    const float used_max_float =\n        QuantizedToFloat(used_max_quantized, input_min_float, input_max_float);\n\n    output_min->flat<float>().setConstant(used_min_float);\n    output_max->flat<float>().setConstant(used_max_float);\n  }",
        "output": "1",
        "idx": 4942
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ofputil_uninit_group_mod(struct ofputil_group_mod *gm)\n{\n    ofputil_bucket_list_destroy(&gm->buckets);\n    ofputil_group_properties_destroy(&gm->props);\n}",
        "output": "0",
        "idx": 1479
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int webm_dash_manifest_write_trailer(AVFormatContext *s)\n\n{\n\n    WebMDashMuxContext *w = s->priv_data;\n\n    int i;\n\n    for (i = 0; i < w->nb_as; i++) {\n\n        av_freep(&w->as[i].streams);\n\n    }\n\n    av_freep(&w->as);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 776
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MagickExport void *AcquireQuantumMemory(const size_t count,const size_t quantum)\n{\n  size_t\n    extent;\n\n  if (CheckMemoryOverflow(count,quantum) != MagickFalse)\n    return((void *) NULL);\n  extent=count*quantum;\n  return(AcquireMagickMemory(extent));\n}",
        "output": "1",
        "idx": 4937
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Tracing::Reason getTraceReason(const Http::RequestHeaderMap&) override {\n    return Tracing::Reason::Sampling;\n  }",
        "output": "0",
        "idx": 5388
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_watchpoint_remove_by_ref(CPUState *env, CPUWatchpoint *watchpoint)\n\n{\n\n    TAILQ_REMOVE(&env->watchpoints, watchpoint, entry);\n\n\n\n    tlb_flush_page(env, watchpoint->vaddr);\n\n\n\n    qemu_free(watchpoint);\n\n}\n",
        "output": "0",
        "idx": 5530
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int stbi__hdr_test(stbi__context* s)\n{\n   int r = stbi__hdr_test_core(s, \"#?RADIANCE\\n\");\n   stbi__rewind(s);\n   if(!r) {\n       r = stbi__hdr_test_core(s, \"#?RGBE\\n\");\n       stbi__rewind(s);\n   }\n   return r;\n}",
        "output": "0",
        "idx": 2793
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "wait_for_single_pid (pid)\n     pid_t pid;\n{\n  pid_t got_pid;\n  WAIT status;\n  int pstatus, flags;\n\n  pstatus = find_status_by_pid (pid);\n\n  if (pstatus == PROC_BAD)\n    {\n      internal_error (_(\"wait: pid %ld is not a child of this shell\"), (long)pid);\n      return (127);\n    }\n\n  if (pstatus != PROC_STILL_ALIVE)\n    {\n      if (pstatus > 128)\n\tlast_command_exit_signal = find_termsig_by_pid (pid);\n      return (pstatus);\n    }\n\n  siginterrupt (SIGINT, 1);\n  while ((got_pid = WAITPID (pid, &status, 0)) != pid)\n    {\n      CHECK_TERMSIG;\n      CHECK_WAIT_INTR;\n      if (got_pid < 0)\n\t{\n\t  if (errno != EINTR && errno != ECHILD)\n\t    {\n\t      siginterrupt (SIGINT, 0);\n\t      sys_error (\"wait\");\n\t    }\n\t  break;\n\t}\n      else if (got_pid > 0)\n\tset_pid_status (got_pid, status);\n    }\n\n  if (got_pid > 0)\n    {\n      set_pid_status (got_pid, status);\n      set_pid_flags (got_pid, PROC_NOTIFIED);\n    }\n\n  siginterrupt (SIGINT, 0);\n  QUIT;\n\n  return (got_pid > 0 ? process_exit_status (status) : -1);\n}",
        "output": "1",
        "idx": 1770
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int kvm_irqchip_remove_irqfd(KVMState *s, int fd, int virq)\n\n{\n\n    return -ENOSYS;\n\n}\n",
        "output": "0",
        "idx": 1684
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qdict_do_flatten(QDict *qdict, QDict *target, const char *prefix)\n\n{\n\n    QObject *value;\n\n    const QDictEntry *entry, *next;\n\n    const char *new_key;\n\n    bool delete;\n\n\n\n    entry = qdict_first(qdict);\n\n\n\n    while (entry != NULL) {\n\n\n\n        next = qdict_next(qdict, entry);\n\n        value = qdict_entry_value(entry);\n\n        new_key = NULL;\n\n        delete = false;\n\n\n\n        if (prefix) {\n\n            qobject_incref(value);\n\n            new_key = g_strdup_printf(\"%s.%s\", prefix, entry->key);\n\n            qdict_put_obj(target, new_key, value);\n\n            delete = true;\n\n        }\n\n\n\n        if (qobject_type(value) == QTYPE_QDICT) {\n\n            qdict_do_flatten(qobject_to_qdict(value), target,\n\n                             new_key ? new_key : entry->key);\n\n            delete = true;\n\n        }\n\n\n\n        if (delete) {\n\n            qdict_del(qdict, entry->key);\n\n\n\n            /* Restart loop after modifying the iterated QDict */\n\n            entry = qdict_first(qdict);\n\n            continue;\n\n        }\n\n\n\n        entry = next;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 751
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void destroy_con_cq_qp(struct rtrs_clt_con *con)\n{\n\tstruct rtrs_clt_path *clt_path = to_clt_path(con->c.path);\n\n\t/*\n\t * Be careful here: destroy_con_cq_qp() can be called even\n\t * create_con_cq_qp() failed, see comments there.\n\t */\n\tlockdep_assert_held(&con->con_mutex);\n\trtrs_cq_qp_destroy(&con->c);\n\tif (con->rsp_ius) {\n\t\trtrs_iu_free(con->rsp_ius, clt_path->s.dev->ib_dev,\n\t\t\t     con->queue_num);\n\t\tcon->rsp_ius = NULL;\n\t\tcon->queue_num = 0;\n\t}\n\tif (clt_path->s.dev_ref && !--clt_path->s.dev_ref) {\n\t\trtrs_ib_dev_put(clt_path->s.dev);\n\t\tclt_path->s.dev = NULL;\n\t}\n}",
        "output": "0",
        "idx": 2009
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vhost_commit(MemoryListener *listener)\n\n{\n\n}\n",
        "output": "1",
        "idx": 4663
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void get_xsrf_token(const char *username, const char *pass,\n\t\t    const char *formname, time_t xsrf_time, char token_str[33])\n{\n\tMD5_CTX md5_ctx;\n\tuint8_t token[16];\n\tint i;\n\n\ttoken_str[0] = '\\0';\n\tZERO_STRUCT(md5_ctx);\n\tMD5Init(&md5_ctx);\n\n\tMD5Update(&md5_ctx, (uint8_t *)formname, strlen(formname));\n\tMD5Update(&md5_ctx, (uint8_t *)&xsrf_time, sizeof(time_t));\n\tif (username != NULL) {\n\t\tMD5Update(&md5_ctx, (uint8_t *)username, strlen(username));\n\t}\n\tif (pass != NULL) {\n\t\tMD5Update(&md5_ctx, (uint8_t *)pass, strlen(pass));\n\t}\n\n\tMD5Final(token, &md5_ctx);\n\n\tfor(i = 0; i < sizeof(token); i++) {\n\t\tchar tmp[3];\n\n\t\tsnprintf(tmp, sizeof(tmp), \"%02x\", token[i]);\n\t\tstrlcat(token_str, tmp, sizeof(tmp));\n\t}\n}",
        "output": "1",
        "idx": 554
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int uio_mmap_physical(struct vm_area_struct *vma)\n{\n\tstruct uio_device *idev = vma->vm_private_data;\n\tint mi = uio_find_mem_index(vma);\n\tif (mi < 0)\n\t\treturn -EINVAL;\n\n\tvma->vm_ops = &uio_physical_vm_ops;\n\n\tvma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);\n\n\treturn remap_pfn_range(vma,\n\t\t\t       vma->vm_start,\n\t\t\t       idev->info->mem[mi].addr >> PAGE_SHIFT,\n\t\t\t       vma->vm_end - vma->vm_start,\n\t\t\t       vma->vm_page_prot);\n}",
        "output": "1",
        "idx": 2806
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "u32reset ()\n{\n  u32init = 0;\n  utf8locale = 0;\n}",
        "output": "1",
        "idx": 5478
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void _db_level_get(struct db_arg_chain_tree *node)\n{\n\tstruct db_arg_chain_tree *iter = node;\n\n\twhile (iter->lvl_prv != NULL)\n\t\titer = iter->lvl_prv;\n\n\twhile (iter) {\n\t\t_db_tree_get(iter);\n\t\titer = iter->lvl_nxt;\n\t}\n}",
        "output": "1",
        "idx": 409
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QPDF::parse_xrefFirst(std::string const& line,\n                      int& obj, int& num, int& bytes)\n{\n    // is_space and is_digit both return false on '\\0', so this will\n    // not overrun the null-terminated buffer.\n    char const* p = line.c_str();\n    char const* start = line.c_str();\n\n    // Skip zero or more spaces\n    while (QUtil::is_space(*p))\n    {\n        ++p;\n    }\n    // Require digit\n    if (! QUtil::is_digit(*p))\n    {\n        return false;\n    }\n    // Gather digits\n    std::string obj_str;\n    while (QUtil::is_digit(*p))\n    {\n        obj_str.append(1, *p++);\n    }\n    // Require space\n    if (! QUtil::is_space(*p))\n    {\n        return false;\n    }\n    // Skip spaces\n    while (QUtil::is_space(*p))\n    {\n        ++p;\n    }\n    // Require digit\n    if (! QUtil::is_digit(*p))\n    {\n        return false;\n    }\n    // Gather digits\n    std::string num_str;\n    while (QUtil::is_digit(*p))\n    {\n        num_str.append(1, *p++);\n    }\n    // Skip any space including line terminators\n    while (QUtil::is_space(*p))\n    {\n        ++p;\n    }\n    bytes = p - start;\n    obj = QUtil::string_to_int(obj_str.c_str());\n    num = QUtil::string_to_int(num_str.c_str());\n    return true;\n}",
        "output": "1",
        "idx": 5269
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void migrate_compress_threads_create(void)\n\n{\n\n    int i, thread_count;\n\n\n\n    if (!migrate_use_compression()) {\n\n        return;\n\n    }\n\n    quit_comp_thread = false;\n\n    compression_switch = true;\n\n    thread_count = migrate_compress_threads();\n\n    compress_threads = g_new0(QemuThread, thread_count);\n\n    comp_param = g_new0(CompressParam, thread_count);\n\n    comp_done_cond = g_new0(QemuCond, 1);\n\n    comp_done_lock = g_new0(QemuMutex, 1);\n\n    qemu_cond_init(comp_done_cond);\n\n    qemu_mutex_init(comp_done_lock);\n\n    for (i = 0; i < thread_count; i++) {\n\n        /* com_param[i].file is just used as a dummy buffer to save data, set\n\n         * it's ops to empty.\n\n         */\n\n        comp_param[i].file = qemu_fopen_ops(NULL, &empty_ops);\n\n        comp_param[i].done = true;\n\n        qemu_mutex_init(&comp_param[i].mutex);\n\n        qemu_cond_init(&comp_param[i].cond);\n\n        qemu_thread_create(compress_threads + i, \"compress\",\n\n                           do_data_compress, comp_param + i,\n\n                           QEMU_THREAD_JOINABLE);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 917
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const char* RtmpProtocol::handle_S0S1S2(const char *data, size_t len, const function<void()> &func) {\n    if (len < 1 + 2 * C1_HANDSHARK_SIZE) {\n        //\u6570\u636e\u4e0d\u591f\n        return nullptr;\n    }\n    if (data[0] != HANDSHAKE_PLAINTEXT) {\n        throw std::runtime_error(\"only plaintext[0x03] handshake supported\");\n    }\n    //\u53d1\u9001 C2\n    const char *pcC2 = data + 1;\n    onSendRawData(obtainBuffer(pcC2, C1_HANDSHARK_SIZE));\n    //\u63e1\u624b\u7ed3\u675f\n    _next_step_func = [this](const char *data, size_t len) {\n        //\u63e1\u624b\u7ed3\u675f\u5e76\u4e14\u5f00\u59cb\u8fdb\u5165\u89e3\u6790\u547d\u4ee4\u6a21\u5f0f\n        return handle_rtmp(data, len);\n    };\n    func();\n    return data + 1 + 2 * C1_HANDSHARK_SIZE;\n}",
        "output": "0",
        "idx": 3831
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void eepro100_write(void *opaque, target_phys_addr_t addr,\n\n                           uint64_t data, unsigned size)\n\n{\n\n    EEPRO100State *s = opaque;\n\n\n\n    switch (size) {\n\n    case 1:\n\n        eepro100_write1(s, addr, data);\n\n        break;\n\n    case 2:\n\n        eepro100_write2(s, addr, data);\n\n        break;\n\n    case 4:\n\n        eepro100_write4(s, addr, data);\n\n        break;\n\n    default:\n\n        abort();\n\n    }\n\n}\n",
        "output": "0",
        "idx": 512
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_change(const char *device, const char *target)\n\n{\n\n    if (strcmp(device, \"vnc\") == 0) {\n\n\tdo_change_vnc(target);\n\n    } else {\n\n\tdo_change_block(device, target);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2520
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void free_input_threads(void)\n\n{\n\n    int i;\n\n\n\n    if (nb_input_files == 1)\n\n        return;\n\n\n\n    transcoding_finished = 1;\n\n\n\n    for (i = 0; i < nb_input_files; i++) {\n\n        InputFile *f = input_files[i];\n\n        AVPacket pkt;\n\n\n\n        if (f->joined)\n\n            continue;\n\n\n\n        pthread_mutex_lock(&f->fifo_lock);\n\n        while (av_fifo_size(f->fifo)) {\n\n            av_fifo_generic_read(f->fifo, &pkt, sizeof(pkt), NULL);\n\n            av_free_packet(&pkt);\n\n        }\n\n        pthread_cond_signal(&f->fifo_cond);\n\n        pthread_mutex_unlock(&f->fifo_lock);\n\n\n\n        pthread_join(f->thread, NULL);\n\n        f->joined = 1;\n\n\n\n        while (av_fifo_size(f->fifo)) {\n\n            av_fifo_generic_read(f->fifo, &pkt, sizeof(pkt), NULL);\n\n            av_free_packet(&pkt);\n\n        }\n\n        av_fifo_free(f->fifo);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4802
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void exit_creds(struct task_struct *tsk)\n{\n\tstruct cred *cred;\n\n\tkdebug(\"exit_creds(%u,%p,%p,{%d,%d})\", tsk->pid, tsk->real_cred, tsk->cred,\n\t       atomic_read(&tsk->cred->usage),\n\t       read_cred_subscribers(tsk->cred));\n\n\tcred = (struct cred *) tsk->real_cred;\n\ttsk->real_cred = NULL;\n\tvalidate_creds(cred);\n\talter_cred_subscribers(cred, -1);\n\tput_cred(cred);\n\n\tcred = (struct cred *) tsk->cred;\n\ttsk->cred = NULL;\n\tvalidate_creds(cred);\n\talter_cred_subscribers(cred, -1);\n\tput_cred(cred);\n}",
        "output": "1",
        "idx": 176
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int MOD_EXP_CTIME_COPY_FROM_PREBUF(BIGNUM *b, int top,\n                                          unsigned char *buf, int idx,\n                                          int width)\n{\n    size_t i, j;\n\n    if (bn_wexpand(b, top) == NULL)\n        return 0;\n\n    for (i = 0, j = idx; i < top * sizeof b->d[0]; i++, j += width) {\n        ((unsigned char *)b->d)[i] = buf[j];\n    }\n\n    b->top = top;\n    bn_correct_top(b);\n    return 1;\n}",
        "output": "1",
        "idx": 975
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "apr_byte_t oidc_util_spaced_string_equals(apr_pool_t *pool, const char *a,\n\t\tconst char *b) {\n\n\t/* parse both entries as hash tables */\n\tapr_hash_t *ht_a = oidc_util_spaced_string_to_hashtable(pool, a);\n\tapr_hash_t *ht_b = oidc_util_spaced_string_to_hashtable(pool, b);\n\n\t/* first compare the length of both response_types */\n\tif (apr_hash_count(ht_a) != apr_hash_count(ht_b))\n\t\treturn FALSE;\n\n\t/* then loop over all entries */\n\tapr_hash_index_t *hi;\n\tfor (hi = apr_hash_first(NULL, ht_a); hi; hi = apr_hash_next(hi)) {\n\t\tconst char *k;\n\t\tconst char *v;\n\t\tapr_hash_this(hi, (const void**) &k, NULL, (void**) &v);\n\t\tif (apr_hash_get(ht_b, k, APR_HASH_KEY_STRING) == NULL)\n\t\t\treturn FALSE;\n\t}\n\n\t/* if we've made it this far, a an b are equal in length and every element in a is in b */\n\treturn TRUE;\n}",
        "output": "0",
        "idx": 586
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dwg_section_wtype (const DWGCHAR *restrict wname)\n{\n  DWGCHAR *wp;\n  char name[24];\n  uint16_t c;\n  int i = 0;\n\n  if (wname == NULL)\n    return SECTION_UNKNOWN; // but could also be INFO or SYSTEM_MAP\n  wp = (DWGCHAR *)wname;\n  while ((c = *wp++))\n    {\n      name[i++] = (char)(c & 0xff);\n      if (i >= 24)\n        return SECTION_UNKNOWN;\n    }\n  name[i] = '\\0';\n  return dwg_section_type (name);\n}",
        "output": "0",
        "idx": 1394
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_put_h264_qpel16_mc23_msa(uint8_t *dst, const uint8_t *src,\n\n                                 ptrdiff_t stride)\n\n{\n\n    avc_luma_midv_qrt_16w_msa(src - (2 * stride) - 2,\n\n                              stride, dst, stride, 16, 1);\n\n}\n",
        "output": "0",
        "idx": 788
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kvm_invoke_set_guest_debug(void *data)\n\n{\n\n    struct kvm_set_guest_debug_data *dbg_data = data;\n\n    CPUState *env = dbg_data->env;\n\n\n\n    if (env->kvm_vcpu_dirty) {\n\n        kvm_arch_put_registers(env);\n\n        env->kvm_vcpu_dirty = 0;\n\n    }\n\n    dbg_data->err = kvm_vcpu_ioctl(env, KVM_SET_GUEST_DEBUG, &dbg_data->dbg);\n\n}\n",
        "output": "1",
        "idx": 5217
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "parsediropres(netdissect_options *ndo,\n              const uint32_t *dp)\n{\n\tint er;\n\n\tif (!(dp = parsestatus(ndo, dp, &er)))\n\t\treturn (0);\n\tif (er)\n\t\treturn (1);\n\n\tdp = parsefh(ndo, dp, 0);\n\tif (dp == NULL)\n\t\treturn (0);\n\n\treturn (parsefattr(ndo, dp, ndo->ndo_vflag, 0) != NULL);\n}",
        "output": "0",
        "idx": 91
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct pathelem *add_entry(struct pathelem *root, const char *name,\n\n                                  unsigned type)\n\n{\n\n    struct pathelem **e;\n\n\n\n    root->num_entries++;\n\n\n\n    root = realloc(root, sizeof(*root)\n\n                   + sizeof(root->entries[0])*root->num_entries);\n\n    e = &root->entries[root->num_entries-1];\n\n\n\n    *e = new_entry(root->pathname, root, name);\n\n    if (is_dir_maybe(type)) {\n\n        *e = add_dir_maybe(*e);\n\n    }\n\n\n\n    return root;\n\n}\n",
        "output": "1",
        "idx": 467
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int crypto_pcomp_report(struct sk_buff *skb, struct crypto_alg *alg)\n{\n\tstruct crypto_report_comp rpcomp;\n\n\tsnprintf(rpcomp.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"pcomp\");\n\n\tif (nla_put(skb, CRYPTOCFGA_REPORT_COMPRESS,\n\t\t    sizeof(struct crypto_report_comp), &rpcomp))\n\t\tgoto nla_put_failure;\n\treturn 0;\n\nnla_put_failure:\n\treturn -EMSGSIZE;\n}",
        "output": "1",
        "idx": 3049
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char* problem_data_save(problem_data_t *pd)\n{\n    load_abrt_conf();\n\n    struct dump_dir *dd = NULL;\n\n    if (g_settings_privatereports)\n        dd = create_dump_dir_from_problem_data_ext(pd, g_settings_dump_location, 0);\n    else\n        dd = create_dump_dir_from_problem_data(pd, g_settings_dump_location);\n\n    char *problem_id = NULL;\n    if (dd)\n    {\n        problem_id = xstrdup(dd->dd_dirname);\n        dd_close(dd);\n    }\n\n    log_info(\"problem id: '%s'\", problem_id);\n    return problem_id;\n}",
        "output": "0",
        "idx": 702
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode0(GetByteContext *gb, RangeCoder *rc, unsigned cumFreq, unsigned freq, unsigned total_freq)\n\n{\n\n    int t;\n\n\n\n    if (total_freq == 0)\n\n        return AVERROR_INVALIDDATA;\n\n\n\n    t = rc->range * (uint64_t)cumFreq / total_freq;\n\n\n\n    rc->code1 += t + 1;\n\n    rc->range = rc->range * (uint64_t)(freq + cumFreq) / total_freq - (t + 1);\n\n\n\n    while (rc->range < TOP && bytestream2_get_bytes_left(gb) > 0) {\n\n        unsigned byte = bytestream2_get_byte(gb);\n\n        rc->code = (rc->code << 8) | byte;\n\n        rc->code1 <<= 8;\n\n        rc->range <<= 8;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 574
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "management_client_pf(void *arg,\n                     const unsigned long cid,\n                     struct buffer_list *pf_config)  /* ownership transferred */\n{\n    struct multi_context *m = (struct multi_context *) arg;\n    struct multi_instance *mi = lookup_by_cid(m, cid);\n    bool ret = false;\n\n    if (mi && pf_config)\n    {\n        ret = pf_load_from_buffer_list(&mi->context, pf_config);\n    }\n\n    if (pf_config)\n    {\n        buffer_list_free(pf_config);\n    }\n    return ret;\n}",
        "output": "0",
        "idx": 3267
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nvdimm_build_nfit(GSList *device_list, GArray *table_offsets,\n\n                              GArray *table_data, GArray *linker)\n\n{\n\n    GArray *structures = nvdimm_build_device_structure(device_list);\n\n    void *header;\n\n\n\n    acpi_add_table(table_offsets, table_data);\n\n\n\n    /* NFIT header. */\n\n    header = acpi_data_push(table_data, sizeof(NvdimmNfitHeader));\n\n    /* NVDIMM device structures. */\n\n    g_array_append_vals(table_data, structures->data, structures->len);\n\n\n\n    build_header(linker, table_data, header, \"NFIT\",\n\n                 sizeof(NvdimmNfitHeader) + structures->len, 1, NULL);\n\n    g_array_free(structures, true);\n\n}\n",
        "output": "1",
        "idx": 2865
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t cmd646_data_read(void *opaque, target_phys_addr_t addr,\n\n                                 unsigned size)\n\n{\n\n    CMD646BAR *cmd646bar = opaque;\n\n\n\n    if (size == 1) {\n\n        return ide_ioport_read(cmd646bar->bus, addr);\n\n    } else if (addr == 0) {\n\n        if (size == 2) {\n\n            return ide_data_readw(cmd646bar->bus, addr);\n\n        } else {\n\n            return ide_data_readl(cmd646bar->bus, addr);\n\n        }\n\n    }\n\n    return ((uint64_t)1 << (size * 8)) - 1;\n\n}\n",
        "output": "0",
        "idx": 427
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int device_links_check_suppliers(struct device *dev)\n{\n\tstruct device_link *link;\n\tint ret = 0;\n\n\t/*\n\t * Device waiting for supplier to become available is not allowed to\n\t * probe.\n\t */\n\tmutex_lock(&wfs_lock);\n\tif (!list_empty(&dev->links.needs_suppliers) &&\n\t    dev->links.need_for_probe) {\n\t\tmutex_unlock(&wfs_lock);\n\t\treturn -EPROBE_DEFER;\n\t}\n\tmutex_unlock(&wfs_lock);\n\n\tdevice_links_write_lock();\n\n\tlist_for_each_entry(link, &dev->links.suppliers, c_node) {\n\t\tif (!(link->flags & DL_FLAG_MANAGED))\n\t\t\tcontinue;\n\n\t\tif (link->status != DL_STATE_AVAILABLE &&\n\t\t    !(link->flags & DL_FLAG_SYNC_STATE_ONLY)) {\n\t\t\tdevice_links_missing_supplier(dev);\n\t\t\tret = -EPROBE_DEFER;\n\t\t\tbreak;\n\t\t}\n\t\tWRITE_ONCE(link->status, DL_STATE_CONSUMER_PROBE);\n\t}\n\tdev->links.status = DL_DEV_PROBING;\n\n\tdevice_links_write_unlock();\n\treturn ret;\n}",
        "output": "0",
        "idx": 4154
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PPC_OP(test_ctrz_true)\n\n{\n\n    T0 = (regs->ctr == 0 && (T0 & PARAM(1)) != 0);\n\n    RETURN();\n\n}\n",
        "output": "1",
        "idx": 5252
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rdpBitmapCache* bitmap_cache_new(rdpSettings* settings)\n{\n\tint i;\n\trdpBitmapCache* bitmapCache;\n\tbitmapCache = (rdpBitmapCache*)calloc(1, sizeof(rdpBitmapCache));\n\n\tif (!bitmapCache)\n\t\treturn NULL;\n\n\tbitmapCache->settings = settings;\n\tbitmapCache->update = ((freerdp*)settings->instance)->update;\n\tbitmapCache->context = bitmapCache->update->context;\n\tbitmapCache->cells =\n\t    (BITMAP_V2_CELL*)calloc(settings->BitmapCacheV2NumCells, sizeof(BITMAP_V2_CELL));\n\n\tif (!bitmapCache->cells)\n\t\tgoto fail;\n\tbitmapCache->maxCells = settings->BitmapCacheV2NumCells;\n\n\tfor (i = 0; i < (int)bitmapCache->maxCells; i++)\n\t{\n\t\tbitmapCache->cells[i].number = settings->BitmapCacheV2CellInfo[i].numEntries;\n\t\t/* allocate an extra entry for BITMAP_CACHE_WAITING_LIST_INDEX */\n\t\tbitmapCache->cells[i].entries =\n\t\t    (rdpBitmap**)calloc((bitmapCache->cells[i].number + 1), sizeof(rdpBitmap*));\n\n\t\tif (!bitmapCache->cells[i].entries)\n\t\t\tgoto fail;\n\t}\n\n\treturn bitmapCache;\nfail:\n\n\tif (bitmapCache->cells)\n\t{\n\t\tfor (i = 0; i < (int)bitmapCache->maxCells; i++)\n\t\t\tfree(bitmapCache->cells[i].entries);\n\t}\n\n\tfree(bitmapCache);\n\treturn NULL;\n}",
        "output": "1",
        "idx": 2494
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_attr_size(struct xdr_stream *xdr, uint32_t *bitmap, uint64_t *size)\n{\n\t__be32 *p;\n\tint ret = 0;\n\n\t*size = 0;\n\tif (unlikely(bitmap[0] & (FATTR4_WORD0_SIZE - 1U)))\n\t\treturn -EIO;\n\tif (likely(bitmap[0] & FATTR4_WORD0_SIZE)) {\n\t\tp = xdr_inline_decode(xdr, 8);\n\t\tif (unlikely(!p))\n\t\t\treturn -EIO;\n\t\txdr_decode_hyper(p, size);\n\t\tbitmap[0] &= ~FATTR4_WORD0_SIZE;\n\t\tret = NFS_ATTR_FATTR_SIZE;\n\t}\n\tdprintk(\"%s: file size=%Lu\\n\", __func__, (unsigned long long)*size);\n\treturn ret;\n}",
        "output": "0",
        "idx": 5071
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "inline TfLiteIntArray* GetOutputShapeFromTensor(TfLiteContext* context,\n                                                TfLiteNode* node) {\n  const TfLiteTensor* shape = GetInput(context, node, kShapeTensor);\n\n  TfLiteIntArray* output_shape = TfLiteIntArrayCreate(shape->dims->data[0]);\n  for (int i = 0; i < output_shape->size; ++i) {\n    output_shape->data[i] = shape->data.i32[i];\n  }\n\n  return output_shape;\n}",
        "output": "1",
        "idx": 2776
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ofputil_encode_port_status(const struct ofputil_port_status *ps,\n                           enum ofputil_protocol protocol)\n{\n    struct ofp_port_status *ops;\n    struct ofpbuf *b;\n    enum ofp_version version;\n    enum ofpraw raw;\n\n    version = ofputil_protocol_to_ofp_version(protocol);\n    switch (version) {\n    case OFP10_VERSION:\n        raw = OFPRAW_OFPT10_PORT_STATUS;\n        break;\n\n    case OFP11_VERSION:\n    case OFP12_VERSION:\n    case OFP13_VERSION:\n        raw = OFPRAW_OFPT11_PORT_STATUS;\n        break;\n\n    case OFP14_VERSION:\n    case OFP15_VERSION:\n        raw = OFPRAW_OFPT14_PORT_STATUS;\n        break;\n\n    case OFP16_VERSION:\n        raw = OFPRAW_OFPT16_PORT_STATUS;\n        break;\n\n    default:\n        OVS_NOT_REACHED();\n    }\n\n    b = ofpraw_alloc_xid(raw, version, htonl(0), 0);\n    ops = ofpbuf_put_zeros(b, sizeof *ops);\n    ops->reason = ps->reason;\n    ofputil_put_phy_port(version, &ps->desc, b);\n    ofpmsg_update_length(b);\n    return b;\n}",
        "output": "0",
        "idx": 5542
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mkdir_recursive(char *name)\n{\n\t/* if name has many levels (\"dir1/dir2\"),\n\t * bb_make_directory() will create dir1 according to umask,\n\t * not according to its \"mode\" parameter.\n\t * Since we run with umask=0, need to temporarily switch it.\n\t */\n\tumask(022); /* \"dir1\" (if any) will be 0755 too */\n\tbb_make_directory(name, 0755, FILEUTILS_RECUR);\n\tumask(0);\n}",
        "output": "0",
        "idx": 2648
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_archive_write_disk_data_block(struct archive *_a,\n    const void *buff, size_t size, int64_t offset)\n{\n\tstruct archive_write_disk *a = (struct archive_write_disk *)_a;\n\tssize_t r;\n\n\tarchive_check_magic(&a->archive, ARCHIVE_WRITE_DISK_MAGIC,\n\t    ARCHIVE_STATE_DATA, \"archive_write_data_block\");\n\n\ta->offset = offset;\n\tif (a->todo & TODO_HFS_COMPRESSION)\n\t\tr = hfs_write_data_block(a, buff, size);\n\telse\n\t\tr = write_data_block(a, buff, size);\n\tif (r < ARCHIVE_OK)\n\t\treturn (r);\n\tif ((size_t)r < size) {\n\t\tarchive_set_error(&a->archive, 0,\n\t\t    \"Write request too large\");\n\t\treturn (ARCHIVE_WARN);\n\t}\n#if ARCHIVE_VERSION_NUMBER < 3999000\n\treturn (ARCHIVE_OK);\n#else\n\treturn (size);\n#endif\n}",
        "output": "0",
        "idx": 2911
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void Http2Handler::remove_self() { sessions_->remove_handler(this); }",
        "output": "0",
        "idx": 6003
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int64_t guest_file_handle_add(FILE *fh, Error **errp)\n\n{\n\n    GuestFileHandle *gfh;\n\n    int64_t handle;\n\n\n\n    handle = ga_get_fd_handle(ga_state, errp);\n\n    if (handle < 0) {\n\n        return -1;\n\n    }\n\n\n\n    gfh = g_malloc0(sizeof(GuestFileHandle));\n\n    gfh->id = handle;\n\n    gfh->fh = fh;\n\n    QTAILQ_INSERT_TAIL(&guest_file_state.filehandles, gfh, next);\n\n\n\n    return handle;\n\n}\n",
        "output": "1",
        "idx": 2631
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool insn_crosses_page(CPUARMState *env, DisasContext *s)\n\n{\n\n    /* Return true if the insn at dc->pc might cross a page boundary.\n\n     * (False positives are OK, false negatives are not.)\n\n     */\n\n    uint16_t insn;\n\n\n\n    if ((s->pc & 3) == 0) {\n\n        /* At a 4-aligned address we can't be crossing a page */\n\n        return false;\n\n    }\n\n\n\n    /* This must be a Thumb insn */\n\n    insn = arm_lduw_code(env, s->pc, s->sctlr_b);\n\n\n\n    if ((insn >> 11) >= 0x1d) {\n\n        /* Top five bits 0b11101 / 0b11110 / 0b11111 : this is the\n\n         * First half of a 32-bit Thumb insn. Thumb-1 cores might\n\n         * end up actually treating this as two 16-bit insns (see the\n\n         * code at the start of disas_thumb2_insn()) but we don't bother\n\n         * to check for that as it is unlikely, and false positives here\n\n         * are harmless.\n\n         */\n\n        return true;\n\n    }\n\n    /* Definitely a 16-bit insn, can't be crossing a page. */\n\n    return false;\n\n}\n",
        "output": "0",
        "idx": 3715
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool anal_bb_edge (RCore *core, const char *input) {\n\t// \"afbe\" switch-bb-addr case-bb-addr\n\tchar *arg = strdup (r_str_trim_ro(input));\n\tchar *sp = strchr (arg, ' ');\n\tif (sp) {\n\t\t*sp++ = 0;\n\t\tut64 sw_at = r_num_math (core->num, arg);\n\t\tut64 cs_at = r_num_math (core->num, sp);\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, sw_at, 0);\n\t\tif (fcn) {\n\t\t\tRAnalBlock *bb;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (fcn->bbs, iter, bb) {\n\t\t\t\tif (sw_at >= bb->addr && sw_at < (bb->addr + bb->size)) {\n\t\t\t\t\tif (!bb->switch_op) {\n\t\t\t\t\t\tbb->switch_op = r_anal_switch_op_new (\n\t\t\t\t\t\t\tsw_at, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t\tr_anal_switch_op_add_case (bb->switch_op, cs_at, 0, cs_at);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (arg);\n\t\t\treturn true;\n\t\t}\n\t}\n\tfree (arg);\n\treturn false;\n}",
        "output": "0",
        "idx": 1727
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *EscapeParenthesis(const char *source)\n{\n  char\n    *destination;\n\n  register char\n    *q;\n\n  register const char\n    *p;\n\n  size_t\n    length;\n\n  assert(source != (const char *) NULL);\n  length=0;\n  for (p=source; *p != '\\0'; p++)\n  {\n    if ((*p == '\\\\') || (*p == '(') || (*p == ')'))\n      {\n        if (~length < 1)\n          ThrowFatalException(ResourceLimitFatalError,\"UnableToEscapeString\");\n        length++;\n      }\n    length++;\n  }\n  destination=(char *) NULL;\n  if (~length >= (MaxTextExtent-1))\n    destination=(char *) AcquireQuantumMemory(length+MaxTextExtent,\n      sizeof(*destination));\n  if (destination == (char *) NULL)\n    ThrowFatalException(ResourceLimitFatalError,\"UnableToEscapeString\");\n  *destination='\\0';\n  q=destination;\n  for (p=source; *p != '\\0'; p++)\n  {\n    if ((*p == '\\\\') || (*p == '(') || (*p == ')'))\n      *q++='\\\\';\n    *q++=(*p);\n  }\n  *q='\\0';\n  return(destination);\n}",
        "output": "0",
        "idx": 1132
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int hfi1_mmu_rb_register(void *ops_arg, struct mm_struct *mm,\n\t\t\t struct mmu_rb_ops *ops,\n\t\t\t struct workqueue_struct *wq,\n\t\t\t struct mmu_rb_handler **handler)\n{\n\tstruct mmu_rb_handler *handlr;\n\tint ret;\n\n\thandlr = kmalloc(sizeof(*handlr), GFP_KERNEL);\n\tif (!handlr)\n\t\treturn -ENOMEM;\n\n\thandlr->root = RB_ROOT_CACHED;\n\thandlr->ops = ops;\n\thandlr->ops_arg = ops_arg;\n\tINIT_HLIST_NODE(&handlr->mn.hlist);\n\tspin_lock_init(&handlr->lock);\n\thandlr->mn.ops = &mn_opts;\n\thandlr->mm = mm;\n\tINIT_WORK(&handlr->del_work, handle_remove);\n\tINIT_LIST_HEAD(&handlr->del_list);\n\tINIT_LIST_HEAD(&handlr->lru_list);\n\thandlr->wq = wq;\n\n\tret = mmu_notifier_register(&handlr->mn, handlr->mm);\n\tif (ret) {\n\t\tkfree(handlr);\n\t\treturn ret;\n\t}\n\n\t*handler = handlr;\n\treturn 0;\n}",
        "output": "1",
        "idx": 4115
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kvm_mce_broadcast_rest(CPUState *env)\n\n{\n\n    CPUState *cenv;\n\n    int family, model, cpuver = env->cpuid_version;\n\n\n\n    family = (cpuver >> 8) & 0xf;\n\n    model = ((cpuver >> 12) & 0xf0) + ((cpuver >> 4) & 0xf);\n\n\n\n    /* Broadcast MCA signal for processor version 06H_EH and above */\n\n    if ((family == 6 && model >= 14) || family > 6) {\n\n        for (cenv = first_cpu; cenv != NULL; cenv = cenv->next_cpu) {\n\n            if (cenv == env) {\n\n                continue;\n\n            }\n\n            kvm_inject_x86_mce(cenv, 1, MCI_STATUS_VAL | MCI_STATUS_UC,\n\n                               MCG_STATUS_MCIP | MCG_STATUS_RIPV, 0, 0, 1);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2475
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HierarchicalBitmapRequester::PrepareForDecoding(void)\n{\n#if ACCUSOFT_CODE\n\n  UBYTE i;\n\n  BuildCommon();\n\n  if (m_ppDecodingMCU == NULL) {\n    m_ppDecodingMCU = (struct Line **)m_pEnviron->AllocMem(sizeof(struct Line *) * m_ucCount*8);\n    memset(m_ppDecodingMCU,0,sizeof(struct Line *) * m_ucCount * 8);\n  }\n\n  if (m_ppUpsampler == NULL) {\n    m_ppUpsampler = (class UpsamplerBase **)m_pEnviron->AllocMem(sizeof(class UpsamplerBase *) * m_ucCount);\n    memset(m_ppUpsampler,0,sizeof(class Upsampler *) * m_ucCount);\n\n    for(i = 0;i < m_ucCount;i++) {\n      class Component *comp = m_pFrame->ComponentOf(i);\n      UBYTE sx = comp->SubXOf();\n      UBYTE sy = comp->SubYOf();\n\n      if (sx > 1 || sy > 1) {\n        m_ppUpsampler[i] = UpsamplerBase::CreateUpsampler(m_pEnviron,sx,sy,\n                                                          m_ulPixelWidth,m_ulPixelHeight,\n                                                          m_pFrame->TablesOf()->isChromaCentered());\n        m_bSubsampling   = true;\n      }\n    }\n  }\n\n  if (m_pLargestScale)\n    m_pLargestScale->PrepareForDecoding();\n#endif\n}",
        "output": "1",
        "idx": 4951
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void set_flag(struct Mailbox *m, AclFlags aclflag, int flag,\n                     const char *str, char *flags, size_t flsize)\n{\n  if (m->rights & aclflag)\n    if (flag && imap_has_flag(&imap_mdata_get(m)->flags, str))\n      mutt_str_cat(flags, flsize, str);\n}",
        "output": "0",
        "idx": 3858
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "inline Item_result Item_case_expr::result_type() const\n{\n  return this_item()->result_type();\n}",
        "output": "0",
        "idx": 2770
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dp8393x_writeb(void *opaque, target_phys_addr_t addr, uint32_t val)\n\n{\n\n    uint16_t old_val = dp8393x_readw(opaque, addr & ~0x1);\n\n\n\n    switch (addr & 3) {\n\n    case 0:\n\n        val = val | (old_val & 0xff00);\n\n        break;\n\n    case 1:\n\n        val = (val << 8) | (old_val & 0x00ff);\n\n        break;\n\n    }\n\n    dp8393x_writew(opaque, addr & ~0x1, val);\n\n}\n",
        "output": "0",
        "idx": 2960
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "UTI_TimespecNetworkToHost(Timespec *src, struct timespec *dest)\n{\n  uint32_t sec_low, nsec;\n#ifdef HAVE_LONG_TIME_T\n  uint32_t sec_high;\n#endif\n\n  sec_low = ntohl(src->tv_sec_low);\n#ifdef HAVE_LONG_TIME_T\n  sec_high = ntohl(src->tv_sec_high);\n  if (sec_high == TV_NOHIGHSEC)\n    sec_high = 0;\n\n  dest->tv_sec = (uint64_t)sec_high << 32 | sec_low;\n#else\n  dest->tv_sec = sec_low;\n#endif\n\n  nsec = ntohl(src->tv_nsec);\n  dest->tv_nsec = MIN(nsec, 999999999U);\n}",
        "output": "0",
        "idx": 1821
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *umm_malloc( size_t size ) {\n  void *ret;\n\n  /* check poison of each blocks, if poisoning is enabled */\n  if (!CHECK_POISON_ALL_BLOCKS()) {\n    return NULL;\n  }\n\n  /* check full integrity of the heap, if this check is enabled */\n  if (!INTEGRITY_CHECK()) {\n    return NULL;\n  }\n\n  size += POISON_SIZE(size);\n\n  ret = _umm_malloc( size );\n\n  ret = GET_POISONED(ret, size);\n\n  umm_account_free_blocks_cnt();\n\n  return ret;\n}",
        "output": "1",
        "idx": 1611
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zsetdevice(i_ctx_t *i_ctx_p)\n{\n    gx_device *dev = gs_currentdevice(igs);\n    os_ptr op = osp;\n    int code = 0;\n\n    check_write_type(*op, t_device);\n    if (dev->LockSafetyParams) {\t  /* do additional checking if locked  */\n        if(op->value.pdevice != dev) \t  /* don't allow a different device    */\n            return_error(gs_error_invalidaccess);\n    }\n    dev->ShowpageCount = 0;\n\n    if (op->value.pdevice == 0)\n        return gs_note_error(gs_error_undefined);\n\n    code = gs_setdevice_no_erase(igs, op->value.pdevice);\n    if (code < 0)\n        return code;\n\n    make_bool(op, code != 0);\t/* erase page if 1 */\n    invalidate_stack_devices(i_ctx_p);\n    clear_pagedevice(istate);\n    return code;\n}",
        "output": "1",
        "idx": 5219
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "      pathWithEscapedSlashesAction() const override {\n    return envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager::\n        KEEP_UNCHANGED;\n  }",
        "output": "0",
        "idx": 1333
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool win_credential_has_certificate(win_credential_t *cred)\n{\n  if (!cred) return false;\n  return (cred->cert_context != NULL);\n}",
        "output": "0",
        "idx": 722
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)\n{\n    int r;\n    CERT_PKEY *cpk = s ? s->cert->key : ctx->cert->key;\n    if (!cpk)\n        return 0;\n    r = ssl_security_cert(s, ctx, x, 0, 0);\n    if (r != 1) {\n        ERR_raise(ERR_LIB_SSL, r);\n        return 0;\n    }\n    if (!cpk->chain)\n        cpk->chain = sk_X509_new_null();\n    if (!cpk->chain || !sk_X509_push(cpk->chain, x))\n        return 0;\n    return 1;\n}",
        "output": "0",
        "idx": 524
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void get_page_bootmem(unsigned long info,  struct page *page,\n\t\t\t     unsigned long type)\n{\n\tpage->lru.next = (struct list_head *) type;\n\tSetPagePrivate(page);\n\tset_page_private(page, info);\n\tatomic_inc(&page->_count);\n}",
        "output": "0",
        "idx": 3455
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int get_urecord(udomain_t* _d, str* _aor, struct urecord** _r)\n{\n\tunsigned int sl, i, aorhash;\n\turecord_t* r;\n\n\tif (db_mode!=DB_ONLY) {\n\t\t/* search in cache */\n\t\taorhash = ul_get_aorhash(_aor);\n\t\tsl = aorhash&(_d->size-1);\n\t\tr = _d->table[sl].first;\n\n\t\tfor(i = 0; r!=NULL && i < _d->table[sl].n; i++) {\n\t\t\tif((r->aorhash==aorhash) && (r->aor.len==_aor->len)\n\t\t\t\t\t\t&& !memcmp(r->aor.s,_aor->s,_aor->len)){\n\t\t\t\t*_r = r;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tr = r->next;\n\t\t}\n\t} else {\n\t\t/* search in DB */\n\t\tr = db_load_urecord( ul_dbh, _d, _aor);\n\t\tif (r) {\n\t\t\t*_r = r;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn 1;   /* Nothing found */\n}",
        "output": "0",
        "idx": 5516
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline QuantumAny ScaleQuantumToAny(const Quantum quantum,\n  const QuantumAny range)\n{\n  return((QuantumAny) (((double) range*quantum)/QuantumRange+0.5));\n}",
        "output": "1",
        "idx": 34
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Object *object_dynamic_cast_assert(Object *obj, const char *typename)\n\n{\n\n    Object *inst;\n\n\n\n    inst = object_dynamic_cast(obj, typename);\n\n\n\n    if (!inst) {\n\n        fprintf(stderr, \"Object %p is not an instance of type %s\\n\",\n\n                obj, typename);\n\n        abort();\n\n    }\n\n\n\n    return inst;\n\n}\n",
        "output": "1",
        "idx": 2102
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vte_sequence_handler_multiple(VteTerminal *terminal,\n                              GValueArray *params,\n                              VteTerminalSequenceHandler handler)\n{\n        vte_sequence_handler_multiple_limited(terminal, params, handler, G_MAXLONG);\n}",
        "output": "1",
        "idx": 2278
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    return s_path;\n  }\n\n  // [internal] Sorting function, used by cimg::files().",
        "output": "0",
        "idx": 5637
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void audio_capture(void *opaque, void *buf, int size)\n\n{\n\n    VncState *vs = opaque;\n\n\n\n    vnc_lock_output(vs);\n\n    vnc_write_u8(vs, VNC_MSG_SERVER_QEMU);\n\n    vnc_write_u8(vs, VNC_MSG_SERVER_QEMU_AUDIO);\n\n    vnc_write_u16(vs, VNC_MSG_SERVER_QEMU_AUDIO_DATA);\n\n    vnc_write_u32(vs, size);\n\n    vnc_write(vs, buf, size);\n\n    vnc_unlock_output(vs);\n\n    vnc_flush(vs);\n\n}\n",
        "output": "1",
        "idx": 5836
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  static void  Ins_JMPR( INS_ARG )\n  {\n    CUR.IP      += (Int)(args[0]);\n    CUR.step_ins = FALSE;\n\n    if(CUR.IP > CUR.codeSize ||\n       (CUR.code[CUR.IP] != 0x2D && CUR.code[CUR.IP - 1] == 0x2D))\n    /* The JPMR is meant to stop at the ENDF instruction to finish\n     * the function. However the programmer made a mistake, and ended\n     * up one byte too far. I suspect that some TT interpreters handle this\n     * by detecting that the IP has gone off the end of the function. We can\n     * allow for simple cases here by just checking the preceding byte.\n     * Fonts with this problem are not uncommon.\n     */\n      CUR.IP -= 1;\n  }",
        "output": "1",
        "idx": 5839
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int read_uncompressed_sgi(unsigned char* out_buf, uint8_t* out_end,\n\n                const uint8_t *in_buf, const uint8_t *in_end, SgiState* s)\n\n{\n\n    int x, y, z;\n\n    const uint8_t *ptr;\n\n    unsigned int offset = s->height * s->width * s->bytes_per_channel;\n\n\n\n    /* Test buffer size. */\n\n    if (offset * s->depth > in_end - in_buf) {\n\n       return -1;\n\n    }\n\n\n\n    for (y = s->height - 1; y >= 0; y--) {\n\n        out_end = out_buf + (y * s->linesize);\n\n        for (x = s->width; x > 0; x--) {\n\n            ptr = in_buf += s->bytes_per_channel;\n\n            for(z = 0; z < s->depth; z ++) {\n\n                memcpy(out_end, ptr, s->bytes_per_channel);\n\n                out_end += s->bytes_per_channel;\n\n                ptr += offset;\n\n            }\n\n        }\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1222
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ahci_irq_lower(AHCIState *s, AHCIDevice *dev)\n\n{\n\n    AHCIPCIState *d = container_of(s, AHCIPCIState, ahci);\n\n\n\n    DPRINTF(0, \"lower irq\\n\");\n\n\n\n    if (!msi_enabled(PCI_DEVICE(d))) {\n\n        qemu_irq_lower(s->irq);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2410
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DeviceState *sysbus_create_varargs(const char *name,\n\n                                   target_phys_addr_t addr, ...)\n\n{\n\n    DeviceState *dev;\n\n    SysBusDevice *s;\n\n    va_list va;\n\n    qemu_irq irq;\n\n    int n;\n\n\n\n    dev = qdev_create(NULL, name);\n\n    s = sysbus_from_qdev(dev);\n\n    qdev_init(dev);\n\n    if (addr != (target_phys_addr_t)-1) {\n\n        sysbus_mmio_map(s, 0, addr);\n\n    }\n\n    va_start(va, addr);\n\n    n = 0;\n\n    while (1) {\n\n        irq = va_arg(va, qemu_irq);\n\n        if (!irq) {\n\n            break;\n\n        }\n\n        sysbus_connect_irq(s, n, irq);\n\n        n++;\n\n    }\n\n    return dev;\n\n}\n",
        "output": "1",
        "idx": 3143
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\t__releases(nfnl_queue_pernet(seq_file_net(s))->instances_lock)\n{\n\tspin_unlock(&nfnl_queue_pernet(seq_file_net(s))->instances_lock);\n}",
        "output": "0",
        "idx": 1275
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cleanup_infolist(CommandLineParameterInfoList *head)\n\n{\n\n    CommandLineParameterInfoList *pre_entry, *cur, *del_entry;\n\n\n\n    cur = head;\n\n    while (cur->next) {\n\n        pre_entry = head;\n\n        while (pre_entry != cur->next) {\n\n            if (!strcmp(pre_entry->value->name, cur->next->value->name)) {\n\n                del_entry = cur->next;\n\n                cur->next = cur->next->next;\n\n                g_free(del_entry);\n\n                break;\n\n            }\n\n            pre_entry = pre_entry->next;\n\n        }\n\n        cur = cur->next;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5610
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t icp_pit_read(void *opaque, target_phys_addr_t offset,\n\n                             unsigned size)\n\n{\n\n    icp_pit_state *s = (icp_pit_state *)opaque;\n\n    int n;\n\n\n\n    /* ??? Don't know the PrimeCell ID for this device.  */\n\n    n = offset >> 8;\n\n    if (n > 2) {\n\n        hw_error(\"%s: Bad timer %d\\n\", __func__, n);\n\n    }\n\n\n\n    return arm_timer_read(s->timer[n], offset & 0xff);\n\n}\n",
        "output": "0",
        "idx": 3933
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "md_is_opening_code_fence(MD_CTX* ctx, OFF beg, OFF* p_end)\n{\n    OFF off = beg;\n\n    while(off < ctx->size && CH(off) == CH(beg))\n        off++;\n\n    /* Fence must have at least three characters. */\n    if(off - beg < 3)\n        return FALSE;\n\n    ctx->code_fence_length = off - beg;\n\n    /* Optionally, space(s) can follow. */\n    while(off < ctx->size  &&  CH(off) == _T(' '))\n        off++;\n\n    /* Optionally, an info string can follow. */\n    while(off < ctx->size  &&  !ISNEWLINE(off)) {\n        /* Backtick-based fence must not contain '`' in the info string. */\n        if(CH(beg) == _T('`')  &&  CH(off) == _T('`'))\n            return FALSE;\n        off++;\n    }\n\n    *p_end = off;\n    return TRUE;\n}",
        "output": "0",
        "idx": 1452
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void scsi_req_dequeue(SCSIRequest *req)\n\n{\n\n    trace_scsi_req_dequeue(req->dev->id, req->lun, req->tag);\n\n    if (req->enqueued) {\n\n        QTAILQ_REMOVE(&req->dev->requests, req, next);\n\n        req->enqueued = false;\n\n        scsi_req_unref(req);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3825
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int lcc_network_buffer_finalize (lcc_network_buffer_t *nb) /* {{{ */\n{\n  if (nb == NULL)\n    return (EINVAL);\n\n#if HAVE_LIBGCRYPT\n  if (nb->seclevel == SIGN)\n    nb_add_signature (nb);\n  else if (nb->seclevel == ENCRYPT)\n    nb_add_encryption (nb);\n#endif\n\n  return (0);\n} /* }}} int lcc_network_buffer_finalize */",
        "output": "0",
        "idx": 3484
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool CUser::AddNetwork(CIRCNetwork* pNetwork) {\n    if (FindNetwork(pNetwork->GetName())) {\n        return false;\n    }\n\n    m_vIRCNetworks.push_back(pNetwork);\n\n    return true;\n}",
        "output": "0",
        "idx": 3894
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ecc_mem_writeb(void *opaque, target_phys_addr_t addr, uint32_t val)\n\n{\n\n    printf(\"ECC: Unsupported write 0x\" TARGET_FMT_plx \" %02x\\n\",\n\n           addr, val & 0xff);\n\n}\n",
        "output": "0",
        "idx": 6158
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *zcalloc(size_t size) {\n    void *ptr = calloc(1, size+PREFIX_SIZE);\n\n    if (!ptr) zmalloc_oom_handler(size);\n#ifdef HAVE_MALLOC_SIZE\n    update_zmalloc_stat_alloc(zmalloc_size(ptr));\n    return ptr;\n#else\n    *((size_t*)ptr) = size;\n    update_zmalloc_stat_alloc(size+PREFIX_SIZE);\n    return (char*)ptr+PREFIX_SIZE;\n#endif\n}",
        "output": "1",
        "idx": 4561
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *vnc_socket_remote_addr(const char *format, int fd) {\n\n    struct sockaddr_storage sa;\n\n    socklen_t salen;\n\n\n\n    salen = sizeof(sa);\n\n    if (getpeername(fd, (struct sockaddr*)&sa, &salen) < 0)\n\n        return NULL;\n\n\n\n    return addr_to_string(format, &sa, salen);\n\n}\n",
        "output": "1",
        "idx": 922
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void release_reserved_pushes(uint64_t pushes) {\n    Mutex::Locker l(recovery_lock);\n    assert(recovery_ops_reserved >= pushes);\n    recovery_ops_reserved -= pushes;\n    _maybe_queue_recovery();\n  }",
        "output": "0",
        "idx": 4912
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int tpm_passthrough_unix_write(int fd, const uint8_t *buf, uint32_t len)\n\n{\n\n    int ret, remain;\n\n\n\n    remain = len;\n\n    while (len > 0) {\n\n        ret = write(fd, buf, remain);\n\n        if (ret < 0) {\n\n            if (errno != EINTR && errno != EAGAIN) {\n\n                return -1;\n\n            }\n\n        } else if (ret == 0) {\n\n            break;\n\n        } else {\n\n            buf += ret;\n\n            remain -= ret;\n\n        }\n\n    }\n\n    return len - remain;\n\n}\n",
        "output": "1",
        "idx": 5000
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pc_fw_cfg_guest_info(PcGuestInfo *guest_info)\n\n{\n\n    PcRomPciInfo *info;\n\n    if (!guest_info->has_pci_info) {\n\n        return;\n\n    }\n\n\n\n    info = g_malloc(sizeof *info);\n\n    info->w32_min = cpu_to_le64(guest_info->pci_info.w32.begin);\n\n    info->w32_max = cpu_to_le64(guest_info->pci_info.w32.end);\n\n    info->w64_min = cpu_to_le64(guest_info->pci_info.w64.begin);\n\n    info->w64_max = cpu_to_le64(guest_info->pci_info.w64.end);\n\n    /* Pass PCI hole info to guest via a side channel.\n\n     * Required so guest PCI enumeration does the right thing. */\n\n    fw_cfg_add_file(guest_info->fw_cfg, \"etc/pci-info\", info, sizeof *info);\n\n}\n",
        "output": "0",
        "idx": 3874
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mp_tasklet_action(unsigned long data)\n{\n\tstruct sb_uart_state *state = (struct sb_uart_state *)data;\n\tstruct tty_struct *tty;\n\n\tprintk(\"tasklet is called!\\n\");\n\ttty = state->info->tty;\n\ttty_wakeup(tty);\n}",
        "output": "0",
        "idx": 2532
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t _hostfs_pwrite(\n    oe_fd_t* desc,\n    const void* buf,\n    size_t count,\n    oe_off_t offset)\n{\n    ssize_t ret = -1;\n    file_t* file = _cast_file(desc);\n\n    if (!file)\n        OE_RAISE_ERRNO(OE_EINVAL);\n\n    if (oe_syscall_pwrite_ocall(&ret, file->host_fd, buf, count, offset) !=\n        OE_OK)\n        OE_RAISE_ERRNO(OE_EINVAL);\n\ndone:\n    return ret;\n}",
        "output": "1",
        "idx": 1444
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int udev_monitor_send_device(struct udev_monitor *udev_monitor, struct udev_device *udev_device)\n{\n\tconst char *buf;\n\tssize_t len;\n\tssize_t count;\n\n\tlen = udev_device_get_properties_monitor_buf(udev_device, &buf);\n\tif (len < 32)\n\t\treturn -1;\n\tif (udev_monitor->sun.sun_family != 0)\n\t\tcount = sendto(udev_monitor->sock,\n\t\t\t       buf, len, 0,\n\t\t\t       (struct sockaddr *)&udev_monitor->sun,\n\t\t\t       udev_monitor->addrlen);\n\telse if (udev_monitor->snl.nl_family != 0)\n\t\t/* no destination besides the muticast group, we will always get ECONNREFUSED */\n\t\tcount = sendto(udev_monitor->sock,\n\t\t\t       buf, len, 0,\n\t\t\t       (struct sockaddr *)&udev_monitor->snl_peer,\n\t\t\t       sizeof(struct sockaddr_nl));\n\telse\n\t\treturn -1;\n\n\tinfo(udev_monitor->udev, \"passed %zi bytes to monitor %p, \\n\", count, udev_monitor);\n\treturn count;\n}",
        "output": "1",
        "idx": 4194
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const Integer& DSA_Verifier::GetS() const\n{\n    return s_;\n}",
        "output": "0",
        "idx": 3547
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool riccb_needed(void *opaque)\n\n{\n\n#ifdef CONFIG_KVM\n\n    if (kvm_enabled()) {\n\n        return kvm_s390_get_ri();\n\n    }\n\n#endif\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 345
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "regex_match_and_setup(const pcre *re, uschar *subject, int options, int setup)\n{\nint ovector[3*(EXPAND_MAXN+1)];\nint n = pcre_exec(re, NULL, subject, Ustrlen(subject), 0, PCRE_EOPT|options,\n  ovector, sizeof(ovector)/sizeof(int));\nBOOL yield = n >= 0;\nif (n == 0) n = EXPAND_MAXN + 1;\nif (yield)\n  {\n  int nn;\n  expand_nmax = (setup < 0)? 0 : setup + 1;\n  for (nn = (setup < 0)? 0 : 2; nn < n*2; nn += 2)\n    {\n    expand_nstring[expand_nmax] = subject + ovector[nn];\n    expand_nlength[expand_nmax++] = ovector[nn+1] - ovector[nn];\n    }\n  expand_nmax--;\n  }\nreturn yield;\n}",
        "output": "0",
        "idx": 2630
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int tcp_v6_gso_send_check(struct sk_buff *skb)\n{\n\tconst struct ipv6hdr *ipv6h;\n\tstruct tcphdr *th;\n\n\tif (!pskb_may_pull(skb, sizeof(*th)))\n\t\treturn -EINVAL;\n\n\tipv6h = ipv6_hdr(skb);\n\tth = tcp_hdr(skb);\n\n\tth->check = 0;\n\tskb->ip_summed = CHECKSUM_PARTIAL;\n\t__tcp_v6_send_check(skb, &ipv6h->saddr, &ipv6h->daddr);\n\treturn 0;\n}",
        "output": "0",
        "idx": 6103
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_subfeo (void)\n\n{\n\n    T2 = T0;\n\n    T0 = T1 + ~T0 + xer_ca;\n\n    if (likely(!((~T2 ^ T1 ^ (-1)) & (~T2 ^ T0) & (1 << 31)))) {\n\n        xer_ov = 0;\n\n    } else {\n\n        xer_so = 1;\n\n        xer_ov = 1;\n\n    }\n\n    if (likely(T0 >= T1 && (xer_ca == 0 || T0 != T1))) {\n\n        xer_ca = 0;\n\n    } else {\n\n        xer_ca = 1;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1910
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned virtqueue_read_next_desc(VirtIODevice *vdev, VRingDesc *desc,\n\n                                         hwaddr desc_pa, unsigned int max)\n\n{\n\n    unsigned int next;\n\n\n\n    /* If this descriptor says it doesn't chain, we're done. */\n\n    if (!(desc->flags & VRING_DESC_F_NEXT)) {\n\n        return max;\n\n    }\n\n\n\n    /* Check they're not leading us off end of descriptors. */\n\n    next = desc->next;\n\n    /* Make sure compiler knows to grab that: we don't want it changing! */\n\n    smp_wmb();\n\n\n\n    if (next >= max) {\n\n        error_report(\"Desc next is %u\", next);\n\n        exit(1);\n\n    }\n\n\n\n    vring_desc_read(vdev, desc, desc_pa, next);\n\n    return next;\n\n}\n",
        "output": "0",
        "idx": 5401
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_uint8_equal(QEMUFile *f, void *pv, size_t size)\n\n{\n\n    uint8_t *v = pv;\n\n    uint8_t v2;\n\n    qemu_get_8s(f, &v2);\n\n\n\n    if (*v == v2) {\n\n        return 0;\n\n    }\n\n    return -EINVAL;\n\n}\n",
        "output": "1",
        "idx": 1949
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void b43_op_configure_filter(struct ieee80211_hw *hw,\n\t\t\t\t    unsigned int changed, unsigned int *fflags,\n\t\t\t\t    u64 multicast)\n{\n\tstruct b43_wl *wl = hw_to_b43_wl(hw);\n\tstruct b43_wldev *dev;\n\n\tmutex_lock(&wl->mutex);\n\tdev = wl->current_dev;\n\tif (!dev) {\n\t\t*fflags = 0;\n\t\tgoto out_unlock;\n\t}\n\n\t*fflags &= FIF_PROMISC_IN_BSS |\n\t\t  FIF_ALLMULTI |\n\t\t  FIF_FCSFAIL |\n\t\t  FIF_PLCPFAIL |\n\t\t  FIF_CONTROL |\n\t\t  FIF_OTHER_BSS |\n\t\t  FIF_BCN_PRBRESP_PROMISC;\n\n\tchanged &= FIF_PROMISC_IN_BSS |\n\t\t   FIF_ALLMULTI |\n\t\t   FIF_FCSFAIL |\n\t\t   FIF_PLCPFAIL |\n\t\t   FIF_CONTROL |\n\t\t   FIF_OTHER_BSS |\n\t\t   FIF_BCN_PRBRESP_PROMISC;\n\n\twl->filter_flags = *fflags;\n\n\tif (changed && b43_status(dev) >= B43_STAT_INITIALIZED)\n\t\tb43_adjust_opmode(dev);\n\nout_unlock:\n\tmutex_unlock(&wl->mutex);\n}",
        "output": "0",
        "idx": 4302
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static __always_inline u32 __flow_hash_words(const u32 *words, u32 length,\n\t\t\t\t\t     u32 keyval)\n{\n\treturn jhash2(words, length, keyval);\n}",
        "output": "1",
        "idx": 5772
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int load_segment_descriptor(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t   u16 selector, int seg)\n{\n\tu8 cpl = ctxt->ops->cpl(ctxt);\n\treturn __load_segment_descriptor(ctxt, selector, seg, cpl,\n\t\t\t\t\t X86_TRANSFER_NONE, NULL);\n}",
        "output": "1",
        "idx": 1979
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int em_mov_sreg_rm(struct x86_emulate_ctxt *ctxt)\n{\n\tu16 sel = ctxt->src.val;\n\n\tif (ctxt->modrm_reg == VCPU_SREG_CS || ctxt->modrm_reg > VCPU_SREG_GS)\n\t\treturn emulate_ud(ctxt);\n\n\tif (ctxt->modrm_reg == VCPU_SREG_SS)\n\t\tctxt->interruptibility = KVM_X86_SHADOW_INT_MOV_SS;\n\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn load_segment_descriptor(ctxt, sel, ctxt->modrm_reg);\n}",
        "output": "0",
        "idx": 5493
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(umask)\n{\n\tlong arg1 = 0;\n\tint oldumask;\n\t\n\toldumask = umask(077);\n\n\tif (BG(umask) == -1) {\n\t\tBG(umask) = oldumask;\n\t}\n\t\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|l\", &arg1) == FAILURE) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (ZEND_NUM_ARGS() == 0) {\n\t\tumask(oldumask);\n\t} else {\n\t\tumask(arg1);\n\t}\n\n\tRETURN_LONG(oldumask);\n}",
        "output": "1",
        "idx": 77
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LookupModMask(struct xkb_context *ctx, const void *priv, xkb_atom_t field,\n              enum expr_value_type type, xkb_mod_mask_t *val_rtrn)\n{\n    const char *str;\n    xkb_mod_index_t ndx;\n    const LookupModMaskPriv *arg = priv;\n    const struct xkb_mod_set *mods = arg->mods;\n    enum mod_type mod_type = arg->mod_type;\n\n    if (type != EXPR_TYPE_INT)\n        return false;\n\n    str = xkb_atom_text(ctx, field);\n\n    if (istreq(str, \"all\")) {\n        *val_rtrn  = MOD_REAL_MASK_ALL;\n        return true;\n    }\n\n    if (istreq(str, \"none\")) {\n        *val_rtrn = 0;\n        return true;\n    }\n\n    ndx = XkbModNameToIndex(mods, field, mod_type);\n    if (ndx == XKB_MOD_INVALID)\n        return false;\n\n    *val_rtrn = (1u << ndx);\n    return true;\n}",
        "output": "1",
        "idx": 6030
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mt_resume(struct hid_device *hdev)\n{\n\t/* Some Elan legacy devices require SET_IDLE to be set on resume.\n\t * It should be safe to send it to other devices too.\n\t * Tested on 3M, Stantum, Cypress, Zytronic, eGalax, and Elan panels. */\n\n\thid_hw_idle(hdev, 0, 0, HID_REQ_SET_IDLE);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 3332
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "end_superexec(i_ctx_t *i_ctx_p)\n{\n    i_ctx_p->in_superexec--;\n    return 0;\n}",
        "output": "1",
        "idx": 943
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_blackbox_reload(int32_t target)\n{\n\tstruct qb_log_target *t = qb_log_target_get(target);\n\n\tif (t->instance == NULL) {\n\t\treturn;\n\t}\n\tqb_rb_close(t->instance);\n\tt->instance = qb_rb_open(t->filename, t->size,\n\t\t\t\t QB_RB_FLAG_CREATE | QB_RB_FLAG_OVERWRITE, 0);\n}",
        "output": "0",
        "idx": 4441
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_tlbiel(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n#else\n\n    if (unlikely(ctx->pr)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n        return;\n\n    }\n\n    gen_helper_tlbie(cpu_env, cpu_gpr[rB(ctx->opcode)]);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 955
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void *rndis_queue_response(USBNetState *s, unsigned int length)\n\n{\n\n    struct rndis_response *r =\n\n            qemu_mallocz(sizeof(struct rndis_response) + length);\n\n\n\n    TAILQ_INSERT_TAIL(&s->rndis_resp, r, entries);\n\n    r->length = length;\n\n\n\n    return &r->buf[0];\n\n}\n",
        "output": "0",
        "idx": 248
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int bmv_aud_decode_init(AVCodecContext *avctx)\n\n{\n\n    BMVAudioDecContext *c = avctx->priv_data;\n\n\n\n    if (avctx->channels != 2) {\n\n        av_log(avctx, AV_LOG_INFO, \"invalid number of channels\\n\");\n\n        return AVERROR(EINVAL);\n\n    }\n\n\n\n    avctx->sample_fmt = AV_SAMPLE_FMT_S16;\n\n\n\n    avcodec_get_frame_defaults(&c->frame);\n\n    avctx->coded_frame = &c->frame;\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4779
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int kvm_arch_insert_sw_breakpoint(CPUState *env, struct kvm_sw_breakpoint *bp)\n\n{\n\n    static const uint8_t int3 = 0xcc;\n\n\n\n    if (cpu_memory_rw_debug(env, bp->pc, (uint8_t *)&bp->saved_insn, 1, 0) ||\n\n        cpu_memory_rw_debug(env, bp->pc, (uint8_t *)&int3, 1, 1))\n\n        return -EINVAL;\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5457
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_change_vnc(const char *target)\n\n{\n\n    if (strcmp(target, \"passwd\") == 0 ||\n\n\tstrcmp(target, \"password\") == 0) {\n\n\tchar password[9];\n\n\tmonitor_readline(\"Password: \", 1, password, sizeof(password));\n\n\tif (vnc_display_password(NULL, password) < 0)\n\n\t    term_printf(\"could not set VNC server password\\n\");\n\n    } else {\n\n\tif (vnc_display_open(NULL, target) < 0)\n\n\t    term_printf(\"could not start VNC server on %s\\n\", target);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3868
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int yr_re_parse(\n    const char* re_string,\n    RE_AST** re_ast,\n    RE_ERROR* error)\n{\n  return yr_parse_re_string(re_string, re_ast, error);\n}",
        "output": "0",
        "idx": 676
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bittok2str_internal(register const struct tok *lp, register const char *fmt,\n\t   register u_int v, const char *sep)\n{\n        static char buf[256]; /* our stringbuffer */\n        int buflen=0;\n        register u_int rotbit; /* this is the bit we rotate through all bitpositions */\n        register u_int tokval;\n        const char * sepstr = \"\";\n\n\twhile (lp != NULL && lp->s != NULL) {\n            tokval=lp->v;   /* load our first value */\n            rotbit=1;\n            while (rotbit != 0) {\n                /*\n                 * lets AND the rotating bit with our token value\n                 * and see if we have got a match\n                 */\n\t\tif (tokval == (v&rotbit)) {\n                    /* ok we have found something */\n                    buflen+=snprintf(buf+buflen, sizeof(buf)-buflen, \"%s%s\",\n                                     sepstr, lp->s);\n                    sepstr = sep;\n                    break;\n                }\n                rotbit=rotbit<<1; /* no match - lets shift and try again */\n            }\n            lp++;\n\t}\n\n        if (buflen == 0)\n            /* bummer - lets print the \"unknown\" message as advised in the fmt string if we got one */\n            (void)snprintf(buf, sizeof(buf), fmt == NULL ? \"#%08x\" : fmt, v);\n        return (buf);\n}",
        "output": "1",
        "idx": 1699
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void basic_globals_ctor(php_basic_globals *basic_globals_p TSRMLS_DC) /* {{{ */\n{\n\tBG(rand_is_seeded) = 0;\n\tBG(mt_rand_is_seeded) = 0;\n\tBG(umask) = -1;\n\tBG(next) = NULL;\n\tBG(left) = -1;\n\tBG(user_tick_functions) = NULL;\n\tBG(user_filter_map) = NULL;\n\tBG(serialize_lock) = 0;\n\t\n\tmemset(&BG(serialize), 0, sizeof(BG(serialize)));\n\tmemset(&BG(unserialize), 0, sizeof(BG(unserialize)));\n\n\tmemset(&BG(url_adapt_state_ex), 0, sizeof(BG(url_adapt_state_ex)));\n\n#if defined(_REENTRANT) && defined(HAVE_MBRLEN) && defined(HAVE_MBSTATE_T)\n\tmemset(&BG(mblen_state), 0, sizeof(BG(mblen_state)));\n#endif\n\n\tBG(incomplete_class) = incomplete_class_entry;\n\tBG(page_uid) = -1;\n\tBG(page_gid) = -1;\n}",
        "output": "1",
        "idx": 493
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qxl_log_command(PCIQXLDevice *qxl, const char *ring, QXLCommandExt *ext)\n\n{\n\n    bool compat = ext->flags & QXL_COMMAND_FLAG_COMPAT;\n\n    void *data;\n\n\n\n    if (!qxl->cmdlog) {\n\n        return;\n\n    }\n\n    fprintf(stderr, \"%\" PRId64 \" qxl-%d/%s:\", qemu_get_clock_ns(vm_clock),\n\n            qxl->id, ring);\n\n    fprintf(stderr, \" cmd @ 0x%\" PRIx64 \" %s%s\", ext->cmd.data,\n\n            qxl_name(qxl_type, ext->cmd.type),\n\n            compat ? \"(compat)\" : \"\");\n\n\n\n    data = qxl_phys2virt(qxl, ext->cmd.data, ext->group_id);\n\n    switch (ext->cmd.type) {\n\n    case QXL_CMD_DRAW:\n\n        if (!compat) {\n\n            qxl_log_cmd_draw(qxl, data, ext->group_id);\n\n        } else {\n\n            qxl_log_cmd_draw_compat(qxl, data, ext->group_id);\n\n        }\n\n        break;\n\n    case QXL_CMD_SURFACE:\n\n        qxl_log_cmd_surface(qxl, data);\n\n        break;\n\n    case QXL_CMD_CURSOR:\n\n        qxl_log_cmd_cursor(qxl, data, ext->group_id);\n\n        break;\n\n    }\n\n    fprintf(stderr, \"\\n\");\n\n}\n",
        "output": "0",
        "idx": 964
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rfcomm_sock_getname(struct socket *sock, struct sockaddr *addr, int *len, int peer)\n{\n\tstruct sockaddr_rc *sa = (struct sockaddr_rc *) addr;\n\tstruct sock *sk = sock->sk;\n\n\tBT_DBG(\"sock %p, sk %p\", sock, sk);\n\n\tsa->rc_family  = AF_BLUETOOTH;\n\tsa->rc_channel = rfcomm_pi(sk)->channel;\n\tif (peer)\n\t\tbacpy(&sa->rc_bdaddr, &bt_sk(sk)->dst);\n\telse\n\t\tbacpy(&sa->rc_bdaddr, &bt_sk(sk)->src);\n\n\t*len = sizeof(struct sockaddr_rc);\n\treturn 0;\n}",
        "output": "1",
        "idx": 4312
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gboolean gd_vc_in(GIOChannel *chan, GIOCondition cond, void *opaque)\n\n{\n\n    VirtualConsole *vc = opaque;\n\n    uint8_t buffer[1024];\n\n    ssize_t len;\n\n\n\n    len = read(vc->fd, buffer, sizeof(buffer));\n\n    if (len <= 0) {\n\n        return FALSE;\n\n    }\n\n\n\n    qemu_chr_be_write(vc->chr, buffer, len);\n\n\n\n    return TRUE;\n\n}\n",
        "output": "1",
        "idx": 4179
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dummy_event_handler(void *opaque)\n\n{\n\n}\n",
        "output": "0",
        "idx": 5630
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void opt_input_file(void *optctx, const char *arg)\n\n{\n\n    if (input_filename) {\n\n        fprintf(stderr,\n\n                \"Argument '%s' provided as input filename, but '%s' was already specified.\\n\",\n\n                arg, input_filename);\n\n        exit(1);\n\n    }\n\n    if (!strcmp(arg, \"-\"))\n\n        arg = \"pipe:\";\n\n    input_filename = arg;\n\n}\n",
        "output": "1",
        "idx": 5877
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "tile_make_weights (PixopsFilterDimension *dim,\n\t\t   double                 scale)\n{\n  int n = ceil (1 / scale + 1);\n  double *pixel_weights = g_malloc_n (sizeof (double) * SUBSAMPLE, n);\n  int offset;\n  int i;\n\n  dim->n = n;\n  dim->offset = 0;\n  dim->weights = pixel_weights;\n\n  for (offset = 0; offset < SUBSAMPLE; offset++)\n    {\n      double x = (double)offset / SUBSAMPLE;\n      double a = x + 1 / scale;\n\n      for (i = 0; i < n; i++)\n        {\n          if (i < x)\n            {\n              if (i + 1 > x)\n                *(pixel_weights++)  = (MIN (i + 1, a) - x) * scale;\n              else\n                *(pixel_weights++) = 0;\n            }\n          else\n            {\n              if (a > i)\n                *(pixel_weights++)  = (MIN (i + 1, a) - i) * scale;\n              else\n                *(pixel_weights++) = 0;\n            }\n       }\n    }\n}",
        "output": "1",
        "idx": 4220
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sbr_hf_g_filt_c(int (*Y)[2], const int (*X_high)[40][2],\n\n                          const SoftFloat *g_filt, int m_max, intptr_t ixh)\n\n{\n\n    int m;\n\n    int64_t accu;\n\n\n\n    for (m = 0; m < m_max; m++) {\n\n        int64_t r = 1LL << (22-g_filt[m].exp);\n\n        accu = (int64_t)X_high[m][ixh][0] * ((g_filt[m].mant + 0x40)>>7);\n\n        Y[m][0] = (int)((accu + r) >> (23-g_filt[m].exp));\n\n\n\n        accu = (int64_t)X_high[m][ixh][1] * ((g_filt[m].mant + 0x40)>>7);\n\n        Y[m][1] = (int)((accu + r) >> (23-g_filt[m].exp));\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4625
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void get_tmp_filename(char *filename, int size)\n\n{\n\n    char temp_dir[MAX_PATH];\n\n\n\n    GetTempPath(MAX_PATH, temp_dir);\n\n    GetTempFileName(temp_dir, \"qem\", 0, filename);\n\n}\n",
        "output": "1",
        "idx": 3738
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\tswitch (yych) {\n\t\tcase 'a': goto yy28;\n\t\tdefault: goto yy27;\n\t}",
        "output": "1",
        "idx": 5003
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool is_pointer_value(struct verifier_env *env, int regno)\n{\n\tif (env->allow_ptr_leaks)\n\t\treturn false;\n\n\tswitch (env->cur_state.regs[regno].type) {\n\tcase UNKNOWN_VALUE:\n\tcase CONST_IMM:\n\t\treturn false;\n\tdefault:\n\t\treturn true;\n\t}\n}",
        "output": "0",
        "idx": 2563
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void sctp_assoc_sync_pmtu(struct sock *sk, struct sctp_association *asoc)\n{\n\tstruct sctp_transport *t;\n\t__u32 pmtu = 0;\n\n\tif (!asoc)\n\t\treturn;\n\n\t/* Get the lowest pmtu of all the transports. */\n\tlist_for_each_entry(t, &asoc->peer.transport_addr_list,\n\t\t\t\ttransports) {\n\t\tif (t->pmtu_pending && t->dst) {\n\t\t\tsctp_transport_update_pmtu(sk, t, dst_mtu(t->dst));\n\t\t\tt->pmtu_pending = 0;\n\t\t}\n\t\tif (!pmtu || (t->pathmtu < pmtu))\n\t\t\tpmtu = t->pathmtu;\n\t}\n\n\tif (pmtu) {\n\t\tasoc->pathmtu = pmtu;\n\t\tasoc->frag_point = sctp_frag_point(asoc, pmtu);\n\t}\n\n\tSCTP_DEBUG_PRINTK(\"%s: asoc:%p, pmtu:%d, frag_point:%d\\n\",\n\t\t\t  __func__, asoc, asoc->pathmtu, asoc->frag_point);\n}",
        "output": "0",
        "idx": 1379
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void tipc_link_set_abort_limit(struct tipc_link *l, u32 limit)\n{\n\tl->abort_limit = limit;\n}",
        "output": "0",
        "idx": 4116
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t omap2_gpio_module_readp(void *opaque, target_phys_addr_t addr)\n\n{\n\n    return omap2_gpio_module_readp(opaque, addr) >> ((addr & 3) << 3);\n\n}\n",
        "output": "1",
        "idx": 1631
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void DefragTrackerInit(DefragTracker *dt, Packet *p)\n{\n    /* copy address */\n    COPY_ADDRESS(&p->src, &dt->src_addr);\n    COPY_ADDRESS(&p->dst, &dt->dst_addr);\n\n    if (PKT_IS_IPV4(p)) {\n        dt->id = (int32_t)IPV4_GET_IPID(p);\n        dt->af = AF_INET;\n    } else {\n        dt->id = (int32_t)IPV6_EXTHDR_GET_FH_ID(p);\n        dt->af = AF_INET6;\n    }\n    dt->vlan_id[0] = p->vlan_id[0];\n    dt->vlan_id[1] = p->vlan_id[1];\n    dt->policy = DefragGetOsPolicy(p);\n    dt->host_timeout = DefragPolicyGetHostTimeout(p);\n    dt->remove = 0;\n    dt->seen_last = 0;\n\n    TAILQ_INIT(&dt->frags);\n    (void) DefragTrackerIncrUsecnt(dt);\n}",
        "output": "1",
        "idx": 6152
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  SSLHandshakeClientNoVerify(\n      AsyncSSLSocket::UniquePtr socket,\n      bool preverifyResult,\n      bool verifyResult)\n      : SSLHandshakeBase(std::move(socket), preverifyResult, verifyResult) {\n    socket_->sslConn(\n        this,\n        std::chrono::milliseconds::zero(),\n        folly::SSLContext::SSLVerifyPeerEnum::NO_VERIFY);\n  }",
        "output": "0",
        "idx": 743
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ExitStatus trans_fop_dedd(DisasContext *ctx, uint32_t insn,\n\n                                 const DisasInsn *di)\n\n{\n\n    unsigned rt = extract32(insn, 0, 5);\n\n    unsigned rb = extract32(insn, 16, 5);\n\n    unsigned ra = extract32(insn, 21, 5);\n\n    return do_fop_dedd(ctx, rt, ra, rb, di->f_dedd);\n\n}\n",
        "output": "1",
        "idx": 4083
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  const std::string& get_id() const {\n    ceph_assert(t != Wildcard && t != Tenant);\n    return u.id;\n  }",
        "output": "1",
        "idx": 3281
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ber_write_integer(wStream* s, UINT32 value)\n{\n\tber_write_universal_tag(s, BER_TAG_INTEGER, FALSE);\n\n\tif (value <= 0xFF)\n\t{\n\t\tber_write_length(s, 1);\n\t\tStream_Write_UINT8(s, value);\n\t\treturn 2;\n\t}\n\telse if (value < 0xFF80)\n\t{\n\t\tber_write_length(s, 2);\n\t\tStream_Write_UINT16_BE(s, value);\n\t\treturn 3;\n\t}\n\telse if (value < 0xFF8000)\n\t{\n\t\tber_write_length(s, 3);\n\t\tStream_Write_UINT8(s, (value >> 16));\n\t\tStream_Write_UINT16_BE(s, (value & 0xFFFF));\n\t\treturn 4;\n\t}\n\telse if (value <= 0xFFFFFFFF)\n\t{\n\t\tber_write_length(s, 4);\n\t\tStream_Write_UINT32_BE(s, value);\n\t\treturn 5;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 193
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "node_new_fail(Node** node, ScanEnv* env)\n{\n  *node = node_new();\n  CHECK_NULL_RETURN_MEMERR(*node);\n\n  NODE_SET_TYPE(*node, NODE_GIMMICK);\n  GIMMICK_(*node)->type = GIMMICK_FAIL;\n  return ONIG_NORMAL;\n}",
        "output": "0",
        "idx": 4424
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void parse_cmdline(const char *cmdline,\n\n                          int *pnb_args, char **args)\n\n{\n\n    const char *p;\n\n    int nb_args, ret;\n\n    char buf[1024];\n\n\n\n    p = cmdline;\n\n    nb_args = 0;\n\n    for (;;) {\n\n        while (qemu_isspace(*p)) {\n\n            p++;\n\n        }\n\n        if (*p == '\\0') {\n\n            break;\n\n        }\n\n        if (nb_args >= MAX_ARGS) {\n\n            break;\n\n        }\n\n        ret = get_str(buf, sizeof(buf), &p);\n\n        args[nb_args] = g_strdup(buf);\n\n        nb_args++;\n\n        if (ret < 0) {\n\n            break;\n\n        }\n\n    }\n\n    *pnb_args = nb_args;\n\n}\n",
        "output": "1",
        "idx": 2514
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "CAMLprim value caml_blit_string(value s1, value ofs1, value s2, value ofs2,\n                                value n)\n{\n  memmove(&Byte(s2, Long_val(ofs2)), &Byte(s1, Long_val(ofs1)), Int_val(n));\n  return Val_unit;\n}",
        "output": "1",
        "idx": 5758
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void parse_type_size(Visitor *v, const char *name, uint64_t *obj,\n\n                            Error **errp)\n\n{\n\n    StringInputVisitor *siv = to_siv(v);\n\n    Error *err = NULL;\n\n    uint64_t val;\n\n\n\n    if (siv->string) {\n\n        parse_option_size(name, siv->string, &val, &err);\n\n    } else {\n\n        error_setg(errp, QERR_INVALID_PARAMETER_TYPE, name ? name : \"null\",\n\n                   \"size\");\n\n        return;\n\n    }\n\n    if (err) {\n\n        error_propagate(errp, err);\n\n        return;\n\n    }\n\n\n\n    *obj = val;\n\n}\n",
        "output": "1",
        "idx": 2772
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(EncryptionUtilTest, sm4_test_basic) {\n    std::string source_1 = \"hello, doris\";\n    do_sm4_test(source_1, _aes_key);\n    std::string source_2 = \"doris test\";\n    do_sm4_test(source_2, _aes_key);\n}",
        "output": "0",
        "idx": 1726
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HeaderMapImpl::iterate(ConstIterateCb cb, void* context) const {\n  for (const HeaderEntryImpl& header : headers_) {\n    if (cb(header, context) == HeaderMap::Iterate::Break) {\n      break;\n    }\n  }\n}",
        "output": "0",
        "idx": 1997
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void eject_device(BlockDriverState *bs, int force, Error **errp)\n\n{\n\n    if (bdrv_in_use(bs)) {\n\n        error_set(errp, QERR_DEVICE_IN_USE, bdrv_get_device_name(bs));\n\n        return;\n\n    }\n\n    if (!bdrv_dev_has_removable_media(bs)) {\n\n        error_setg(errp, \"Device '%s' is not removable\",\n\n                   bdrv_get_device_name(bs));\n\n        return;\n\n    }\n\n\n\n    if (bdrv_dev_is_medium_locked(bs) && !bdrv_dev_is_tray_open(bs)) {\n\n        bdrv_dev_eject_request(bs, force);\n\n        if (!force) {\n\n            error_setg(errp, \"Device '%s' is locked\",\n\n                       bdrv_get_device_name(bs));\n\n            return;\n\n        }\n\n    }\n\n\n\n    bdrv_close(bs);\n\n}\n",
        "output": "0",
        "idx": 5952
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void av_aes_crypt(AVAES *a, uint8_t *dst_, const uint8_t *src_,\n\n                  int count, uint8_t *iv_, int decrypt)\n\n{\n\n    av_aes_block       *dst = (av_aes_block *) dst_;\n\n    const av_aes_block *src = (const av_aes_block *) src_;\n\n    av_aes_block        *iv = (av_aes_block *) iv_;\n\n\n\n    while (count--) {\n\n        addkey(&a->state[1], src, &a->round_key[a->rounds]);\n\n        if (decrypt) {\n\n            crypt(a, 0, inv_sbox, dec_multbl);\n\n            if (iv) {\n\n                addkey(&a->state[0], &a->state[0], iv);\n\n                memcpy(iv, src, 16);\n\n            }\n\n            addkey(dst, &a->state[0], &a->round_key[0]);\n\n        } else {\n\n            if (iv)\n\n                addkey(&a->state[1], &a->state[1], iv);\n\n            crypt(a, 2, sbox, enc_multbl);\n\n            addkey(dst, &a->state[0], &a->round_key[0]);\n\n            if (iv)\n\n                memcpy(iv, dst, 16);\n\n        }\n\n        src++;\n\n        dst++;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2618
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "yank_copy_line(struct block_def *bd, long y_idx, int exclude_trailing_space)\n{\n    char_u\t*pnew;\n\n    if (exclude_trailing_space)\n\tbd->endspaces = 0;\n    if ((pnew = alloc(bd->startspaces + bd->endspaces + bd->textlen + 1))\n\t\t\t\t\t\t\t\t      == NULL)\n\treturn FAIL;\n    y_current->y_array[y_idx] = pnew;\n    vim_memset(pnew, ' ', (size_t)bd->startspaces);\n    pnew += bd->startspaces;\n    mch_memmove(pnew, bd->textstart, (size_t)bd->textlen);\n    pnew += bd->textlen;\n    vim_memset(pnew, ' ', (size_t)bd->endspaces);\n    pnew += bd->endspaces;\n    if (exclude_trailing_space)\n    {\n\tint s = bd->textlen + bd->endspaces;\n\n\twhile (VIM_ISWHITE(*(bd->textstart + s - 1)) && s > 0)\n\t{\n\t    s = s - (*mb_head_off)(bd->textstart, bd->textstart + s - 1) - 1;\n\t    pnew--;\n\t}\n    }\n    *pnew = NUL;\n    return OK;\n}",
        "output": "1",
        "idx": 3627
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(pcntl_wait)\n{\n\tlong options = 0;\n\tzval *z_status = NULL;\n\tint status;\n\tpid_t child_id;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|l\", &z_status, &options) == FAILURE)\n\t\treturn;\n\t\n\tconvert_to_long_ex(&z_status);\n\n\tstatus = Z_LVAL_P(z_status);\n#ifdef HAVE_WAIT3\n\tif(options) {\n\t\tchild_id = wait3(&status, options, NULL);\n\t}\n\telse {\n\t\tchild_id = wait(&status);\n\t}\n#else\n\tchild_id = wait(&status);\n#endif\n\tif (child_id < 0) {\n\t\tPCNTL_G(last_error) = errno;\n\t}\n\n\tZ_LVAL_P(z_status) = status;\n\n\tRETURN_LONG((long) child_id);\n}",
        "output": "1",
        "idx": 5658
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "v3d_push_job(struct v3d_file_priv *v3d_priv,\n\t     struct v3d_job *job, enum v3d_queue queue)\n{\n\tint ret;\n\n\tret = drm_sched_job_init(&job->base, &v3d_priv->sched_entity[queue],\n\t\t\t\t v3d_priv);\n\tif (ret)\n\t\treturn ret;\n\n\tjob->done_fence = dma_fence_get(&job->base.s_fence->finished);\n\n\t/* put by scheduler job completion */\n\tkref_get(&job->refcount);\n\n\tdrm_sched_entity_push_job(&job->base, &v3d_priv->sched_entity[queue]);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 1634
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int fp_reg_offset(int regno, TCGMemOp size)\n\n{\n\n    int offs = offsetof(CPUARMState, vfp.regs[regno * 2]);\n\n#ifdef HOST_WORDS_BIGENDIAN\n\n    offs += (8 - (1 << size));\n\n#endif\n\n    return offs;\n\n}\n",
        "output": "0",
        "idx": 1175
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ccp_sg_free(struct ccp_sg_workarea *wa)\n{\n\tif (wa->dma_count)\n\t\tdma_unmap_sg(wa->dma_dev, wa->dma_sg, wa->nents, wa->dma_dir);\n\n\twa->dma_count = 0;\n}",
        "output": "0",
        "idx": 5912
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "   OFB crypt/decrypt data using key key with cipher cipher starting with iv */\nPHP_FUNCTION(mcrypt_ofb)\n{\n\tzval **mode;\n\tchar *cipher, *key, *data, *iv = NULL;\n\tint cipher_len, key_len, data_len, iv_len = 0;\n\t\n\tMCRYPT_GET_CRYPT_ARGS\n\n\tconvert_to_long_ex(mode);\n\n\tphp_mcrypt_do_crypt(cipher, key, key_len, data, data_len, \"ofb\", iv, iv_len, ZEND_NUM_ARGS(), Z_LVAL_PP(mode), return_value TSRMLS_CC);",
        "output": "1",
        "idx": 3077
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int find_snapshot_by_id_and_name(BlockDriverState *bs,\n                                        const char *id,\n                                        const char *name)\n{\n    BDRVQcowState *s = bs->opaque;\n    int i;\n\n    if (id && name) {\n        for (i = 0; i < s->nb_snapshots; i++) {\n            if (!strcmp(s->snapshots[i].id_str, id) &&\n                !strcmp(s->snapshots[i].name, name)) {\n                return i;\n            }\n        }\n    } else if (id) {\n        for (i = 0; i < s->nb_snapshots; i++) {\n            if (!strcmp(s->snapshots[i].id_str, id)) {\n                return i;\n            }\n        }\n    } else if (name) {\n        for (i = 0; i < s->nb_snapshots; i++) {\n            if (!strcmp(s->snapshots[i].name, name)) {\n                return i;\n            }\n        }\n    }\n\n    return -1;\n}",
        "output": "0",
        "idx": 3895
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlRelaxNGIncludePush(xmlRelaxNGParserCtxtPtr ctxt,\n                      xmlRelaxNGIncludePtr value)\n{\n    if (ctxt->incTab == NULL) {\n        ctxt->incMax = 4;\n        ctxt->incNr = 0;\n        ctxt->incTab =\n            (xmlRelaxNGIncludePtr *) xmlMalloc(ctxt->incMax *\n                                               sizeof(ctxt->incTab[0]));\n        if (ctxt->incTab == NULL) {\n            xmlRngPErrMemory(ctxt, \"allocating include\\n\");\n            return (0);\n        }\n    }\n    if (ctxt->incNr >= ctxt->incMax) {\n        ctxt->incMax *= 2;\n        ctxt->incTab =\n            (xmlRelaxNGIncludePtr *) xmlRealloc(ctxt->incTab,\n                                                ctxt->incMax *\n                                                sizeof(ctxt->incTab[0]));\n        if (ctxt->incTab == NULL) {\n            xmlRngPErrMemory(ctxt, \"allocating include\\n\");\n            return (0);\n        }\n    }\n    ctxt->incTab[ctxt->incNr] = value;\n    ctxt->inc = value;\n    return (ctxt->incNr++);\n}",
        "output": "0",
        "idx": 4962
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  SystemError() {}",
        "output": "0",
        "idx": 238
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void FUNCC(pred4x4_dc)(uint8_t *_src, const uint8_t *topright, int _stride){\n\n    pixel *src = (pixel*)_src;\n\n    int stride = _stride/sizeof(pixel);\n\n    const int dc= (  src[-stride] + src[1-stride] + src[2-stride] + src[3-stride]\n\n                   + src[-1+0*stride] + src[-1+1*stride] + src[-1+2*stride] + src[-1+3*stride] + 4) >>3;\n\n\n\n    ((pixel4*)(src+0*stride))[0]=\n\n    ((pixel4*)(src+1*stride))[0]=\n\n    ((pixel4*)(src+2*stride))[0]=\n\n    ((pixel4*)(src+3*stride))[0]= PIXEL_SPLAT_X4(dc);\n\n}\n",
        "output": "1",
        "idx": 841
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void replay_finish_event(void)\n\n{\n\n    replay_has_unread_data = 0;\n\n    replay_fetch_data_kind();\n\n}\n",
        "output": "0",
        "idx": 577
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "asmlinkage long sys_rt_sigreturn(void)\n{\n\tstruct rt_sigframe __user *frame =\n\t\t(struct rt_sigframe __user *) __frame->sp;\n\tsigset_t set;\n\tunsigned long d0;\n\n\tif (verify_area(VERIFY_READ, frame, sizeof(*frame)))\n\t\tgoto badframe;\n\tif (__copy_from_user(&set, &frame->uc.uc_sigmask, sizeof(set)))\n\t\tgoto badframe;\n\n\tsigdelsetmask(&set, ~_BLOCKABLE);\n\tspin_lock_irq(&current->sighand->siglock);\n\tcurrent->blocked = set;\n\trecalc_sigpending();\n\tspin_unlock_irq(&current->sighand->siglock);\n\n\tif (restore_sigcontext(__frame, &frame->uc.uc_mcontext, &d0))\n\t\tgoto badframe;\n\n\tif (do_sigaltstack(&frame->uc.uc_stack, NULL, __frame->sp) == -EFAULT)\n\t\tgoto badframe;\n\n\treturn d0;\n\nbadframe:\n\tforce_sig(SIGSEGV, current);\n\treturn 0;\n}",
        "output": "0",
        "idx": 2418
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int l3_unscale(int value, int exponent)\n\n{\n\n    unsigned int m;\n\n    int e;\n\n\n\n    e  = table_4_3_exp  [4 * value + (exponent & 3)];\n\n    m  = table_4_3_value[4 * value + (exponent & 3)];\n\n    e -= exponent >> 2;\n\n#ifdef DEBUG\n\n    if(e < 1)\n\n        av_log(NULL, AV_LOG_WARNING, \"l3_unscale: e is %d\\n\", e);\n\n#endif\n\n    if (e > (SUINT)31)\n\n        return 0;\n\n    m = (m + (1 << (e - 1))) >> e;\n\n\n\n    return m;\n\n}\n",
        "output": "1",
        "idx": 4698
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint64_t helper_fres(CPUPPCState *env, uint64_t arg)\n\n{\n\n    CPU_DoubleU farg;\n\n    float32 f32;\n\n\n\n    farg.ll = arg;\n\n\n\n    if (unlikely(float64_is_signaling_nan(farg.d))) {\n\n        /* sNaN reciprocal */\n\n        fload_invalid_op_excp(env, POWERPC_EXCP_FP_VXSNAN);\n\n    }\n\n    farg.d = float64_div(float64_one, farg.d, &env->fp_status);\n\n    f32 = float64_to_float32(farg.d, &env->fp_status);\n\n    farg.d = float32_to_float64(f32, &env->fp_status);\n\n\n\n    return farg.ll;\n\n}\n",
        "output": "0",
        "idx": 3058
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMS_PCR_SELECTION_Marshal(TPMS_PCR_SELECTION *source, BYTE **buffer, INT32 *size)\n{\n    UINT16 written = 0;\n\n    written += TPMI_ALG_HASH_Marshal(&source->hash, buffer, size);\n    written += UINT8_Marshal(&source->sizeofSelect, buffer, size);\n    written += Array_Marshal(&source->pcrSelect[0], source->sizeofSelect, buffer, size);\n    return written;\n}",
        "output": "0",
        "idx": 1945
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void RENAME(vertical_compose53iL0)(uint8_t *_b0, uint8_t *_b1, uint8_t *_b2,\n\n                                          int width)\n\n{\n\n    int i;\n\n    TYPE *b0 = (TYPE *)_b0;\n\n    TYPE *b1 = (TYPE *)_b1;\n\n    TYPE *b2 = (TYPE *)_b2;\n\n    for (i = 0; i < width; i++)\n\n        b1[i] -= (b0[i] + b2[i] + 2) >> 2;\n\n}\n",
        "output": "1",
        "idx": 1698
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Box *gen_sample_entry_box_new()\n{\n\tISOM_DECL_BOX_ALLOC(GF_SampleEntryBox, GF_QT_SUBTYPE_C608);//type will be overriten\n\tgf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);\n\treturn (GF_Box *)tmp;\n}",
        "output": "0",
        "idx": 6017
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ram_handle_compressed(void *host, uint8_t ch, uint64_t size)\n\n{\n\n    if (ch != 0 || !is_zero_range(host, size)) {\n\n        memset(host, ch, size);\n\n#ifndef _WIN32\n\n        if (ch == 0 && (!kvm_enabled() || kvm_has_sync_mmu())) {\n\n            size = size & ~(getpagesize() - 1);\n\n            if (size > 0) {\n\n                qemu_madvise(host, size, QEMU_MADV_DONTNEED);\n\n            }\n\n        }\n\n#endif\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5508
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int zslLexValueLteMax(sds value, zlexrangespec *spec) {\n    return spec->maxex ?\n        (sdscmplex(value,spec->max) < 0) :\n        (sdscmplex(value,spec->max) <= 0);\n}",
        "output": "0",
        "idx": 3069
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gdm_session_handle_info_query (GdmDBusWorkerManager  *worker_manager_interface,\n                               GDBusMethodInvocation *invocation,\n                               const char            *service_name,\n                               const char            *query,\n                               GdmSession            *self)\n{\n        GdmSessionConversation *conversation;\n\n        g_return_val_if_fail (self->priv->user_verifier_interface != NULL, FALSE);\n\n        conversation = find_conversation_by_name (self, service_name);\n        if (conversation != NULL) {\n                set_pending_query (conversation, invocation);\n\n                gdm_dbus_user_verifier_emit_info_query (self->priv->user_verifier_interface,\n                                                        service_name,\n                                                        query);\n        }\n\n        return TRUE;\n}",
        "output": "0",
        "idx": 670
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_net_tx_complete(NetClientState *nc, ssize_t len)\n\n{\n\n    VirtIONet *n = qemu_get_nic_opaque(nc);\n\n    VirtIONetQueue *q = virtio_net_get_subqueue(nc);\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(n);\n\n\n\n    virtqueue_push(q->tx_vq, &q->async_tx.elem, 0);\n\n    virtio_notify(vdev, q->tx_vq);\n\n\n\n    q->async_tx.elem.out_num = 0;\n\n\n\n    virtio_queue_set_notification(q->tx_vq, 1);\n\n    virtio_net_flush_tx(q);\n\n}\n",
        "output": "0",
        "idx": 2241
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_peer_set_offload(NetClientState *nc, int csum, int tso4, int tso6,\n\n                          int ecn, int ufo)\n\n{\n\n    if (!nc->peer || !nc->peer->info->set_offload) {\n\n        return;\n\n    }\n\n\n\n    nc->peer->info->set_offload(nc->peer, csum, tso4, tso6, ecn, ufo);\n\n}\n",
        "output": "0",
        "idx": 3531
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nvdimm_build_nfit(GSList *device_list, GArray *table_offsets,\n\n                              GArray *table_data, BIOSLinker *linker)\n\n{\n\n    GArray *structures = nvdimm_build_device_structure(device_list);\n\n    unsigned int header;\n\n\n\n    acpi_add_table(table_offsets, table_data);\n\n\n\n    /* NFIT header. */\n\n    header = table_data->len;\n\n    acpi_data_push(table_data, sizeof(NvdimmNfitHeader));\n\n    /* NVDIMM device structures. */\n\n    g_array_append_vals(table_data, structures->data, structures->len);\n\n\n\n    build_header(linker, table_data,\n\n                 (void *)(table_data->data + header), \"NFIT\",\n\n                 sizeof(NvdimmNfitHeader) + structures->len, 1, NULL, NULL);\n\n    g_array_free(structures, true);\n\n}\n",
        "output": "1",
        "idx": 1940
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *rfc2047_decode_word(const char *s, size_t len, enum ContentEncoding enc)\n{\n  const char *it = s;\n  const char *end = s + len;\n\n  if (enc == ENCQUOTEDPRINTABLE)\n  {\n    struct Buffer buf = { 0 };\n    for (; it < end; ++it)\n    {\n      if (*it == '_')\n      {\n        mutt_buffer_addch(&buf, ' ');\n      }\n      else if ((*it == '=') && (!(it[1] & ~127) && hexval(it[1]) != -1) &&\n               (!(it[2] & ~127) && hexval(it[2]) != -1))\n      {\n        mutt_buffer_addch(&buf, (hexval(it[1]) << 4) | hexval(it[2]));\n        it += 2;\n      }\n      else\n      {\n        mutt_buffer_addch(&buf, *it);\n      }\n    }\n    mutt_buffer_addch(&buf, '\\0');\n    return buf.data;\n  }\n  else if (enc == ENCBASE64)\n  {\n    char *out = mutt_mem_malloc(3 * len / 4 + 1);\n    int dlen = mutt_b64_decode(out, it);\n    if (dlen == -1)\n    {\n      FREE(&out);\n      return NULL;\n    }\n    out[dlen] = '\\0';\n    return out;\n  }\n\n  assert(0); /* The enc parameter has an invalid value */\n  return NULL;\n}",
        "output": "1",
        "idx": 3254
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t sp804_read(void *opaque, target_phys_addr_t offset,\n\n                           unsigned size)\n\n{\n\n    sp804_state *s = (sp804_state *)opaque;\n\n\n\n    if (offset < 0x20) {\n\n        return arm_timer_read(s->timer[0], offset);\n\n    }\n\n    if (offset < 0x40) {\n\n        return arm_timer_read(s->timer[1], offset - 0x20);\n\n    }\n\n\n\n    /* TimerPeriphID */\n\n    if (offset >= 0xfe0 && offset <= 0xffc) {\n\n        return sp804_ids[(offset - 0xfe0) >> 2];\n\n    }\n\n\n\n    switch (offset) {\n\n    /* Integration Test control registers, which we won't support */\n\n    case 0xf00: /* TimerITCR */\n\n    case 0xf04: /* TimerITOP (strictly write only but..) */\n\n        return 0;\n\n    }\n\n\n\n    hw_error(\"%s: Bad offset %x\\n\", __func__, (int)offset);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1274
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  double GetZoomLevel(v8::Isolate* isolate) {\n    double result = 0.0;\n    content::RenderFrame* render_frame;\n    if (!MaybeGetRenderFrame(isolate, \"getZoomLevel\", &render_frame))\n      return result;\n\n    mojo::AssociatedRemote<mojom::ElectronBrowser> browser_remote;\n    render_frame->GetRemoteAssociatedInterfaces()->GetInterface(\n        &browser_remote);\n    browser_remote->DoGetZoomLevel(&result);\n    return result;\n  }",
        "output": "1",
        "idx": 3026
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int PDFDoc::saveAs(GooString *name, PDFWriteMode mode) {\n  FILE *f;\n  OutStream *outStr;\n  int res;\n\n  if (!(f = fopen(name->c_str(), \"wb\"))) {\n    error(errIO, -1, \"Couldn't open file '{0:t}'\", name);\n    return errOpenFile;\n  }\n  outStr = new FileOutStream(f,0);\n  res = saveAs(outStr, mode);\n  delete outStr;\n  fclose(f);\n  return res;\n}",
        "output": "0",
        "idx": 3175
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "RZ_IPI int fcn_cmpaddr(const void *_a, const void *_b) {\n\tconst RzAnalysisFunction *a = _a, *b = _b;\n\treturn (a->addr > b->addr) - (a->addr < b->addr);\n}",
        "output": "0",
        "idx": 4621
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sig_server_setup_fill_chatnet(IRC_SERVER_CONNECT_REC *conn,\n\t\t\t\t\t  IRC_CHATNET_REC *ircnet)\n{\n\tif (!IS_IRC_SERVER_CONNECT(conn))\n\t\treturn;\n\tg_return_if_fail(IS_IRCNET(ircnet));\n\n\tif (ircnet->nick != NULL) g_free_and_null(conn->alternate_nick);\n\tif (ircnet->usermode != NULL) {\n\t\tg_free_and_null(conn->usermode);\n\t\tconn->usermode = g_strdup(ircnet->usermode);\n\t}\n\n\tif (ircnet->max_kicks > 0) conn->max_kicks = ircnet->max_kicks;\n\tif (ircnet->max_msgs > 0) conn->max_msgs = ircnet->max_msgs;\n\tif (ircnet->max_modes > 0) conn->max_modes = ircnet->max_modes;\n\tif (ircnet->max_whois > 0) conn->max_whois = ircnet->max_whois;\n\n\tif (ircnet->max_cmds_at_once > 0)\n\t\tconn->max_cmds_at_once = ircnet->max_cmds_at_once;\n\tif (ircnet->cmd_queue_speed > 0)\n\t\tconn->cmd_queue_speed = ircnet->cmd_queue_speed;\n\tif (ircnet->max_query_chans > 0)\n\t\tconn->max_query_chans = ircnet->max_query_chans;\n}",
        "output": "1",
        "idx": 562
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "virDomainDefPostParseCheckFailure(virDomainDefPtr def,\n                                  unsigned int parseFlags,\n                                  int ret)\n{\n    if (ret != 0)\n        def->postParseFailed = true;\n\n    if (ret <= 0)\n        return ret;\n\n    if (!(parseFlags & VIR_DOMAIN_DEF_PARSE_ALLOW_POST_PARSE_FAIL))\n        return -1;\n\n    virResetLastError();\n    return 0;\n}",
        "output": "0",
        "idx": 3677
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int oma_read_packet(AVFormatContext *s, AVPacket *pkt)\n\n{\n\n    OMAContext *oc = s->priv_data;\n\n    int packet_size = s->streams[0]->codec->block_align;\n\n    int ret = av_get_packet(s->pb, pkt, packet_size);\n\n\n\n    if (ret <= 0)\n\n        return AVERROR(EIO);\n\n\n\n    pkt->stream_index = 0;\n\n\n\n    if (oc->encrypted) {\n\n        /* previous unencrypted block saved in IV for\n\n         * the next packet (CBC mode) */\n\n        av_des_crypt(&oc->av_des, pkt->data, pkt->data,\n\n                     (packet_size >> 3), oc->iv, 1);\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 265
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pl190_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    SysBusDeviceClass *k = SYS_BUS_DEVICE_CLASS(klass);\n\n\n\n    k->init = pl190_init;\n\n    dc->no_user = 1;\n\n    dc->reset = pl190_reset;\n\n    dc->vmsd = &vmstate_pl190;\n\n}\n",
        "output": "1",
        "idx": 1340
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline ut32 r_read_ble32(const void *src, bool big_endian) {\n\treturn big_endian? r_read_be32 (src): r_read_le32 (src);\n}",
        "output": "0",
        "idx": 197
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void backup_duplicate_context(MpegEncContext *bak, MpegEncContext *src){\n\n#define COPY(a) bak->a= src->a\n\n    COPY(allocated_edge_emu_buffer);\n\n    COPY(edge_emu_buffer);\n\n    COPY(me.scratchpad);\n\n    COPY(me.temp);\n\n    COPY(rd_scratchpad);\n\n    COPY(b_scratchpad);\n\n    COPY(obmc_scratchpad);\n\n    COPY(me.map);\n\n    COPY(me.score_map);\n\n    COPY(blocks);\n\n    COPY(block);\n\n    COPY(start_mb_y);\n\n    COPY(end_mb_y);\n\n    COPY(me.map_generation);\n\n    COPY(pb);\n\n    COPY(dct_error_sum);\n\n    COPY(dct_count[0]);\n\n    COPY(dct_count[1]);\n\n    COPY(ac_val_base);\n\n    COPY(ac_val[0]);\n\n    COPY(ac_val[1]);\n\n    COPY(ac_val[2]);\n\n#undef COPY\n\n}\n",
        "output": "1",
        "idx": 1380
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static Status ValidateSavedTensors(const GraphDef& graph_def) {\n  for (const auto& node : graph_def.node()) {\n    const auto node_iterator = node.attr().find(\"value\");\n    if (node_iterator != node.attr().end()) {\n      AttrValue node_value = node_iterator->second;\n      if (node_value.has_tensor()) {\n        const PartialTensorShape node_shape(node_value.tensor().tensor_shape());\n        if (node_shape.num_elements() < 0) {\n          return errors::FailedPrecondition(\n              \"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\",\n              node.op(), \"\\\") which initializes from a tensor with \",\n              node_shape.num_elements(), \" elements\");\n        }\n      }\n    } else if (node.op() == \"Const\") {\n      return errors::FailedPrecondition(\n          \"Saved model contains node \\\"\", node.name(),\n          \"\\\" which is a constant tensor but no value has been provided\");\n    }\n  }\n  return Status::OK();\n}",
        "output": "1",
        "idx": 1128
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pxb_bus_num(PCIBus *bus)\n\n{\n\n    PXBDev *pxb = PXB_DEV(bus->parent_dev);\n\n\n\n    return pxb->bus_nr;\n\n}\n",
        "output": "0",
        "idx": 4185
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(radius_add_server)\n{\n\tchar *hostname, *secret;\n\tint hostname_len, secret_len;\n\tlong  port, timeout, maxtries;\n\tradius_descriptor *raddesc;\n\tzval *z_radh;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rslsll\", &z_radh,\n\t\t&hostname, &hostname_len,\n\t\t&port,\n\t\t&secret, &secret_len,\n\t\t&timeout, &maxtries) == FAILURE) {\n\t\treturn;\n\t}\n\n\tZEND_FETCH_RESOURCE(raddesc, radius_descriptor *, &z_radh, -1, \"rad_handle\", le_radius);\n\n\tif (rad_add_server(raddesc->radh, hostname, port, secret, timeout, maxtries) == -1) {\n\t\tRETURN_FALSE;\n\t} else {\n\t\tRETURN_TRUE;\n\t}\n}",
        "output": "0",
        "idx": 2687
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void Http2FloodMitigationTest::floodServer(const Http2Frame& frame, const std::string& flood_stat) {\n  // pack the as many frames as we can into 16k buffer\n  const int FrameCount = (16 * 1024) / frame.size();\n  std::vector<char> buf(FrameCount * frame.size());\n  for (auto pos = buf.begin(); pos != buf.end();) {\n    pos = std::copy(frame.begin(), frame.end(), pos);\n  }\n\n  tcp_client_->readDisable(true);\n  int64_t total_bytes_sent = 0;\n  // If the flood protection is not working this loop will keep going\n  // forever until it is killed by blaze timer or run out of memory.\n  // Add early stop if we have sent more than 100M of frames, as it this\n  // point it is obvious something is wrong.\n  while (total_bytes_sent < TransmitThreshold && tcp_client_->connected()) {\n    tcp_client_->write({buf.begin(), buf.end()}, false, false);\n    total_bytes_sent += buf.size();\n  }\n\n  EXPECT_LE(total_bytes_sent, TransmitThreshold) << \"Flood mitigation is broken.\";\n  EXPECT_EQ(1, test_server_->counter(flood_stat)->value());\n  test_server_->waitForCounterGe(\"http.config_test.downstream_cx_delayed_close_timeout\", 1);\n}",
        "output": "0",
        "idx": 1600
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void io_req_drop_files(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->inflight_lock, flags);\n\tlist_del(&req->inflight_entry);\n\tif (waitqueue_active(&ctx->inflight_wait))\n\t\twake_up(&ctx->inflight_wait);\n\tspin_unlock_irqrestore(&ctx->inflight_lock, flags);\n\treq->flags &= ~REQ_F_INFLIGHT;\n\tput_files_struct(req->work.files);\n\treq->work.files = NULL;\n}",
        "output": "0",
        "idx": 5875
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void dualminer_init_firstrun(struct cgpu_info *icarus)\n{\n\tstruct ICARUS_INFO *info = icarus->device_data;\n\tint fd = icarus->device_fd;\n\n\tdualminer_bootstrap_device(fd);\n\n\tif (opt_scrypt)\n\t\tgc3355_set_rts_status(fd, RTS_HIGH);\n\n\tgc3355_init(fd, opt_dualminer_sha2_gating, !opt_dual_mode);\n\tapplog(LOG_DEBUG, \"%\"PRIpreprv\": scrypt: %d, scrypt only: %d; have fan: %d\\n\", icarus->proc_repr, opt_scrypt, opt_scrypt, opt_hubfans);\n\n\tif (gc3355_get_cts_status(fd) != 1)\n\t{\n\t\t// Scrypt + SHA2 mode\n\t\tif (opt_scrypt)\n\t\t\tinfo->Hs = DUALMINER_SCRYPT_DM_HASH_TIME;\n\t}\n\n\tif (opt_scrypt)\n\t\ticarus->min_nonce_diff = 1./0x10000;\n\n\tapplog(LOG_DEBUG, \"%\"PRIpreprv\": dualminer: Init: pll=%d, sha2num=%d\", icarus->proc_repr, opt_pll_freq, opt_sha2_number);\n}",
        "output": "0",
        "idx": 5241
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void replay_fetch_data_kind(void)\n\n{\n\n    if (replay_file) {\n\n        if (!replay_has_unread_data) {\n\n            replay_data_kind = replay_get_byte();\n\n            if (replay_data_kind == EVENT_INSTRUCTION) {\n\n                replay_state.instructions_count = replay_get_dword();\n\n            }\n\n            replay_check_error();\n\n            replay_has_unread_data = 1;\n\n            if (replay_data_kind >= EVENT_COUNT) {\n\n                error_report(\"Replay: unknown event kind %d\", replay_data_kind);\n\n                exit(1);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3067
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool is_timers_nohz_active(void) { return false; }",
        "output": "0",
        "idx": 458
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Item_cache_timestamp(THD *thd)\n   :Item_cache(thd, &type_handler_timestamp2) { }",
        "output": "0",
        "idx": 278
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned long weighted_cpuload(const int cpu)\n{\n\treturn cpu_rq(cpu)->load.weight;\n}",
        "output": "0",
        "idx": 4527
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    unsigned int button() const {\n      return _button;\n    }",
        "output": "0",
        "idx": 5205
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "getouraddr(void)\n\n{\n\n\tchar buff[256];\n\n\tstruct hostent *he = NULL;\n\n\n\n\tif (gethostname(buff,256) == 0)\n\n            he = gethostbyname(buff);\n\n        if (he)\n\n            our_addr = *(struct in_addr *)he->h_addr;\n\n        if (our_addr.s_addr == 0)\n\n            our_addr.s_addr = loopback_addr.s_addr;\n\n}\n",
        "output": "1",
        "idx": 1369
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int iccrange(i_ctx_t * i_ctx_p, ref *space, float *ptr)\n{\n    int components, i, code = 0;\n    ref *tempref, ICCdict, valref;\n\n    code = array_get(imemory, space, 1, &ICCdict);\n    if (code < 0)\n        return code;\n    code = dict_find_string(&ICCdict, \"N\", &tempref);\n    if (code < 0)\n        return code;\n    if (code == 0)\n        return gs_note_error(gs_error_undefined);\n    components = tempref->value.intval;\n    code = dict_find_string(&ICCdict, \"Range\", &tempref);\n    if (code > 0 && !r_has_type(tempref, t_null)) {\n        for (i=0;i<components * 2;i++) {\n            code = array_get(imemory, tempref, i, &valref);\n            if (code < 0)\n                return code;\n            if (r_has_type(&valref, t_integer))\n                ptr[i] = (float)valref.value.intval;\n            else\n                ptr[i] = (float)valref.value.realval;\n        }\n    } else {\n        for (i=0;i<components;i++) {\n            ptr[i * 2] = 0;\n            ptr[(i * 2) + 1] = 1;\n        }\n    }\n    return 0;\n}",
        "output": "1",
        "idx": 3735
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ffi_status ffi_prep_cif_machdep_var(ffi_cif *cif,\n\t\t\t\t    unsigned int nfixedargs,\n\t\t\t\t    unsigned int ntotalargs)\n{\n  ffi_status status = ffi_prep_cif_machdep (cif);\n  cif->aarch64_nfixedargs = nfixedargs;\n  return status;\n}",
        "output": "0",
        "idx": 5659
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_window_check1(DisasContext *dc, unsigned r1)\n\n{\n\n    if (dc->tb->flags & XTENSA_TBFLAG_EXCM) {\n\n        return;\n\n    }\n\n    if (option_enabled(dc, XTENSA_OPTION_WINDOWED_REGISTER) &&\n\n            r1 / 4 > dc->used_window) {\n\n        TCGv_i32 pc = tcg_const_i32(dc->pc);\n\n        TCGv_i32 w = tcg_const_i32(r1 / 4);\n\n\n\n        dc->used_window = r1 / 4;\n\n        gen_advance_ccount(dc);\n\n        gen_helper_window_check(cpu_env, pc, w);\n\n\n\n        tcg_temp_free(w);\n\n        tcg_temp_free(pc);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1500
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "init_stack_with_value_at_exception_boundary (VerifyContext *ctx, ILCodeDesc *code, MonoClass *klass)\n{\n\tMonoError error;\n\tMonoType *type = mono_class_inflate_generic_type_checked (&klass->byval_arg, ctx->generic_context, &error);\n\n\tif (!mono_error_ok (&error)) {\n\t\tchar *name = mono_type_get_full_name (klass);\n\t\tADD_VERIFY_ERROR (ctx, g_strdup_printf (\"Invalid class %s used for exception\", name));\n\t\tg_free (name);\n\t\tmono_error_cleanup (&error);\n\t\treturn;\n\t}\n\n\tif (!ctx->max_stack) {\n\t\tADD_VERIFY_ERROR (ctx, g_strdup_printf (\"Stack overflow at 0x%04x\", ctx->ip_offset));\n\t\treturn;\n\t}\n\n\tstack_init (ctx, code);\n\tset_stack_value (ctx, code->stack, type, FALSE);\n\tctx->exception_types = g_slist_prepend (ctx->exception_types, type);\n\tcode->size = 1;\n\tcode->flags |= IL_CODE_FLAG_WAS_TARGET;\n\tif (mono_type_is_generic_argument (type))\n\t\tcode->stack->stype |= BOXED_MASK;\n}",
        "output": "0",
        "idx": 2428
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static always_inline int dv_rl2vlc(int run, int l, uint32_t* vlc)\n\n{\n\n    *vlc = dv_vlc_map[run][((uint16_t)l)&0x1ff].vlc;\n\n    return dv_vlc_map[run][((uint16_t)l)&0x1ff].size;\n\n}\n",
        "output": "0",
        "idx": 1843
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_x86_update_cr0(CPUX86State *env)\n\n{\n\n    int pg_state, pe_state;\n\n\n\n#if defined(DEBUG_MMU)\n\n    printf(\"CR0 update: CR0=0x%08x\\n\", env->cr[0]);\n\n#endif\n\n    pg_state = env->cr[0] & CR0_PG_MASK;\n\n    if (pg_state != last_pg_state) {\n\n        tlb_flush(env);\n\n        last_pg_state = pg_state;\n\n    }\n\n    /* update PE flag in hidden flags */\n\n    pe_state = (env->cr[0] & CR0_PE_MASK);\n\n    env->hflags = (env->hflags & ~HF_PE_MASK) | (pe_state << HF_PE_SHIFT);\n\n    /* ensure that ADDSEG is always set in real mode */\n\n    env->hflags |= ((pe_state ^ 1) << HF_ADDSEG_SHIFT);\n\n}\n",
        "output": "0",
        "idx": 3248
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "HandShakeState& States::useHandShake()\n{\n    return handshakeLayer_;\n}",
        "output": "0",
        "idx": 3555
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sr_read_reg(struct usbnet *dev, u8 reg, u8 *value)\n{\n\treturn sr_read(dev, reg, 1, value);\n}",
        "output": "0",
        "idx": 3720
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int auth_spa_server(auth_instance *ablock, uschar *data) {return 0;}",
        "output": "1",
        "idx": 2608
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtio_config_writel(VirtIODevice *vdev, uint32_t addr, uint32_t data)\n{\n    VirtioDeviceClass *k = VIRTIO_DEVICE_GET_CLASS(vdev);\n    uint32_t val = data;\n\n    if (addr > (vdev->config_len - sizeof(val)))\n        return;\n\n    stl_p(vdev->config + addr, val);\n\n    if (k->set_config) {\n        k->set_config(vdev, vdev->config);\n    }\n}",
        "output": "1",
        "idx": 3037
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "f_luaeval(typval_T *argvars, typval_T *rettv)\n{\n    char_u\t*str;\n    char_u\tbuf[NUMBUFLEN];\n\n    str = tv_get_string_buf(&argvars[0], buf);\n    do_luaeval(str, argvars + 1, rettv);\n}",
        "output": "1",
        "idx": 2444
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t smbXcli_tcon_get_fs_attributes(struct smbXcli_tcon *tcon)\n{\n\treturn tcon->fs_attributes;\n}",
        "output": "0",
        "idx": 3822
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int X509_check_trust(X509 *x, int id, int flags)\n{\n    X509_TRUST *pt;\n    int idx;\n\n    /* We get this as a default value */\n    if (id == 0) {\n        int rv;\n        rv = obj_trust(NID_anyExtendedKeyUsage, x, 0);\n        if (rv != X509_TRUST_UNTRUSTED)\n            return rv;\n        return trust_compat(NULL, x, 0);\n    }\n    idx = X509_TRUST_get_by_id(id);\n    if (idx == -1)\n        return default_trust(id, x, flags);\n    pt = X509_TRUST_get0(idx);\n    return pt->check_trust(pt, x, flags);\n}",
        "output": "1",
        "idx": 5980
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    ~Interruptible_wait() {}",
        "output": "0",
        "idx": 4588
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ENTROPY_DEBUG(const char *label, unsigned long entropy) {\n  const char *const EXPAT_ENTROPY_DEBUG = getenv(\"EXPAT_ENTROPY_DEBUG\");\n  if (EXPAT_ENTROPY_DEBUG && ! strcmp(EXPAT_ENTROPY_DEBUG, \"1\")) {\n    fprintf(stderr, \"Entropy: %s --> 0x%0*lx (%lu bytes)\\n\", label,\n            (int)sizeof(entropy) * 2, entropy, (unsigned long)sizeof(entropy));\n  }\n  return entropy;\n}",
        "output": "0",
        "idx": 2504
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool kvm_is_linear_rip(struct kvm_vcpu *vcpu, unsigned long linear_rip)\n{\n\tunsigned long current_rip = kvm_rip_read(vcpu) +\n\t\tget_segment_base(vcpu, VCPU_SREG_CS);\n\n\treturn current_rip == linear_rip;\n}",
        "output": "0",
        "idx": 5738
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void load_cgroup(const char *fname) {\n\tif (!fname)\n\t\treturn;\n\n\tFILE *fp = fopen(fname, \"re\");\n\tif (fp) {\n\t\tchar buf[MAXBUF];\n\t\tif (fgets(buf, MAXBUF, fp)) {\n\t\t\tcfg.cgroup = strdup(buf);\n\t\t\tif (!cfg.cgroup)\n\t\t\t\terrExit(\"strdup\");\n\t\t}\n\t\telse\n\t\t\tgoto errout;\n\n\t\tfclose(fp);\n\t\treturn;\n\t}\nerrout:\n\tfwarning(\"cannot load control group\\n\");\n\tif (fp)\n\t\tfclose(fp);\n}",
        "output": "1",
        "idx": 4753
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void framebuffer_update_request(VncState *vs, int incremental,\n\n                                       int x_position, int y_position,\n\n                                       int w, int h)\n\n{\n\n    int i;\n\n    const size_t width = surface_width(vs->vd->ds) / VNC_DIRTY_PIXELS_PER_BIT;\n\n    const size_t height = surface_height(vs->vd->ds);\n\n\n\n    if (y_position > height) {\n\n        y_position = height;\n\n    }\n\n    if (y_position + h >= height) {\n\n        h = height - y_position;\n\n    }\n\n\n\n    vs->need_update = 1;\n\n    if (!incremental) {\n\n        vs->force_update = 1;\n\n        for (i = 0; i < h; i++) {\n\n            bitmap_set(vs->dirty[y_position + i], 0, width);\n\n            bitmap_clear(vs->dirty[y_position + i], width,\n\n                         VNC_DIRTY_BITS - width);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3582
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rac_get_model256_sym(RangeCoder *c, Model256 *m)\n\n{\n\n    int prob, prob2, helper, val;\n\n    int start, end;\n\n    int ssym;\n\n\n\n    prob2      = c->range;\n\n    c->range >>= MODEL_SCALE;\n\n\n\n    helper     = c->low / c->range;\n\n    ssym       = helper >> MODEL256_SEC_SCALE;\n\n    val        = m->secondary[ssym];\n\n\n\n    end = start = m->secondary[ssym + 1] + 1;\n\n    while (end > val + 1) {\n\n        ssym = (end + val) >> 1;\n\n        if (m->freqs[ssym] <= helper) {\n\n            end = start;\n\n            val = ssym;\n\n        } else {\n\n            end   = (end + val) >> 1;\n\n            start = ssym;\n\n        }\n\n    }\n\n    prob = m->freqs[val] * c->range;\n\n    if (val != 255)\n\n        prob2 = m->freqs[val + 1] * c->range;\n\n\n\n    c->low  -= prob;\n\n    c->range = prob2 - prob;\n\n    if (c->range < RAC_BOTTOM)\n\n        rac_normalise(c);\n\n\n\n    model256_update(m, val);\n\n\n\n    return val;\n\n}\n",
        "output": "1",
        "idx": 388
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ath6kl_usb_free_urb_to_pipe(struct ath6kl_usb_pipe *pipe,\n\t\t\t\t\tstruct ath6kl_urb_context *urb_context)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&pipe->ar_usb->cs_lock, flags);\n\tpipe->urb_cnt++;\n\n\tlist_add(&urb_context->link, &pipe->urb_list_head);\n\tspin_unlock_irqrestore(&pipe->ar_usb->cs_lock, flags);\n}",
        "output": "1",
        "idx": 4427
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static Picture * remove_short(H264Context *h, int frame_num){\n\n    MpegEncContext * const s = &h->s;\n\n    int i;\n\n\n\n    if(s->avctx->debug&FF_DEBUG_MMCO)\n\n        av_log(h->s.avctx, AV_LOG_DEBUG, \"remove short %d count %d\\n\", frame_num, h->short_ref_count);\n\n\n\n    for(i=0; i<h->short_ref_count; i++){\n\n        Picture *pic= h->short_ref[i];\n\n        if(s->avctx->debug&FF_DEBUG_MMCO)\n\n            av_log(h->s.avctx, AV_LOG_DEBUG, \"%d %d %p\\n\", i, pic->frame_num, pic);\n\n        if(pic->frame_num == frame_num){\n\n            h->short_ref[i]= NULL;\n\n            memmove(&h->short_ref[i], &h->short_ref[i+1], (h->short_ref_count - i - 1)*sizeof(Picture*));\n\n            h->short_ref_count--;\n\n            return pic;\n\n        }\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "1",
        "idx": 4507
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xan_decode_end(AVCodecContext *avctx)\n\n{\n\n    XanContext *s = avctx->priv_data;\n\n\n\n    /* release the last frame */\n\n    avctx->release_buffer(avctx, &s->last_frame);\n\n\n\n    av_free(s->buffer1);\n\n    av_free(s->buffer2);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1535
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PackLinuxElf32armBe::buildLoader(Filter const *ft)\n{\n    buildLinuxLoader(\n        stub_armeb_v4a_linux_elf_entry, sizeof(stub_armeb_v4a_linux_elf_entry),\n        stub_armeb_v4a_linux_elf_fold,  sizeof(stub_armeb_v4a_linux_elf_fold), ft);\n}",
        "output": "0",
        "idx": 2994
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CNB::DoIPHdrCSO(PVOID IpHeader, ULONG EthPayloadLength) const\n{\n    ParaNdis_CheckSumVerifyFlat(IpHeader,\n                                EthPayloadLength,\n                                pcrIpChecksum | pcrFixIPChecksum,\n                                __FUNCTION__);\n}",
        "output": "1",
        "idx": 5953
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int put_v4l2_event32(struct v4l2_event *kp, struct v4l2_event32 __user *up)\n{\n\tif (!access_ok(VERIFY_WRITE, up, sizeof(*up)) ||\n\t    put_user(kp->type, &up->type) ||\n\t    copy_to_user(&up->u, &kp->u, sizeof(kp->u)) ||\n\t    put_user(kp->pending, &up->pending) ||\n\t    put_user(kp->sequence, &up->sequence) ||\n\t    put_user(kp->timestamp.tv_sec, &up->timestamp.tv_sec) ||\n\t    put_user(kp->timestamp.tv_nsec, &up->timestamp.tv_nsec) ||\n\t    put_user(kp->id, &up->id) ||\n\t    copy_to_user(up->reserved, kp->reserved, sizeof(kp->reserved)))\n\t\treturn -EFAULT;\n\treturn 0;\n}",
        "output": "1",
        "idx": 6201
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void platform_fixed_ioport_init(PCIXenPlatformState* s)\n\n{\n\n    register_ioport_write(XEN_PLATFORM_IOPORT, 16, 4, platform_fixed_ioport_writel, s);\n\n    register_ioport_write(XEN_PLATFORM_IOPORT, 16, 2, platform_fixed_ioport_writew, s);\n\n    register_ioport_write(XEN_PLATFORM_IOPORT, 16, 1, platform_fixed_ioport_writeb, s);\n\n    register_ioport_read(XEN_PLATFORM_IOPORT, 16, 2, platform_fixed_ioport_readw, s);\n\n    register_ioport_read(XEN_PLATFORM_IOPORT, 16, 1, platform_fixed_ioport_readb, s);\n\n}\n",
        "output": "0",
        "idx": 1693
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(SplDoublyLinkedList, pop)\n{\n\tzval *value;\n\tspl_dllist_object *intern;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"\") == FAILURE) {\n\t\treturn;\n\t}\n\n\tintern = (spl_dllist_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\tvalue = (zval *)spl_ptr_llist_pop(intern->llist TSRMLS_CC);\n\n\tif (value == NULL) {\n\t\tzend_throw_exception(spl_ce_RuntimeException, \"Can't pop from an empty datastructure\", 0 TSRMLS_CC);\n\t\treturn;\n\t}\n\n\tRETURN_ZVAL(value, 1, 1);\n} ",
        "output": "1",
        "idx": 294
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "g_malloc(size_t n_bytes)\n\n{\n\n    void *mem;\n\n    __coverity_negative_sink__(n_bytes);\n\n    mem = malloc(n_bytes == 0 ? 1 : n_bytes);\n\n    if (!mem) __coverity_panic__();\n\n    return mem;\n\n}\n",
        "output": "1",
        "idx": 5185
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int inet_connect_addr(struct addrinfo *addr, bool block,\n\n                             bool *in_progress)\n\n{\n\n    int sock, rc;\n\n\n\n    if (in_progress) {\n\n        *in_progress = false;\n\n    }\n\n\n\n    sock = qemu_socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol);\n\n    if (sock < 0) {\n\n        fprintf(stderr, \"%s: socket(%s): %s\\n\", __func__,\n\n                inet_strfamily(addr->ai_family), strerror(errno));\n\n        return -1;\n\n    }\n\n    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));\n\n    if (!block) {\n\n        socket_set_nonblock(sock);\n\n    }\n\n    /* connect to peer */\n\n    do {\n\n        rc = 0;\n\n        if (connect(sock, addr->ai_addr, addr->ai_addrlen) < 0) {\n\n            rc = -socket_error();\n\n        }\n\n    } while (rc == -EINTR);\n\n\n\n    if (!block && QEMU_SOCKET_RC_INPROGRESS(rc)) {\n\n        if (in_progress) {\n\n            *in_progress = true;\n\n        }\n\n    } else if (rc < 0) {\n\n        closesocket(sock);\n\n        return -1;\n\n    }\n\n    return sock;\n\n}\n",
        "output": "1",
        "idx": 2920
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cirrus_mmio_write(void *opaque, target_phys_addr_t addr,\n\n                              uint64_t val, unsigned size)\n\n{\n\n    CirrusVGAState *s = opaque;\n\n\n\n    if (addr >= 0x100) {\n\n\tcirrus_mmio_blt_write(s, addr - 0x100, val);\n\n    } else {\n\n        cirrus_vga_ioport_write(s, addr + 0x3c0, val);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4564
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void jbd2_journal_wait_updates(journal_t *journal)\n{\n\ttransaction_t *commit_transaction = journal->j_running_transaction;\n\n\tif (!commit_transaction)\n\t\treturn;\n\n\tspin_lock(&commit_transaction->t_handle_lock);\n\twhile (atomic_read(&commit_transaction->t_updates)) {\n\t\tDEFINE_WAIT(wait);\n\n\t\tprepare_to_wait(&journal->j_wait_updates, &wait,\n\t\t\t\t\tTASK_UNINTERRUPTIBLE);\n\t\tif (atomic_read(&commit_transaction->t_updates)) {\n\t\t\tspin_unlock(&commit_transaction->t_handle_lock);\n\t\t\twrite_unlock(&journal->j_state_lock);\n\t\t\tschedule();\n\t\t\twrite_lock(&journal->j_state_lock);\n\t\t\tspin_lock(&commit_transaction->t_handle_lock);\n\t\t}\n\t\tfinish_wait(&journal->j_wait_updates, &wait);\n\t}\n\tspin_unlock(&commit_transaction->t_handle_lock);\n}",
        "output": "1",
        "idx": 1001
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GetLastSegSwitchTime(void)\n{\n\tpg_time_t\tresult;\n\n\t/* Need WALWriteLock, but shared lock is sufficient */\n\tLWLockAcquire(WALWriteLock, LW_SHARED);\n\tresult = XLogCtl->lastSegSwitchTime;\n\tLWLockRelease(WALWriteLock);\n\n\treturn result;\n}",
        "output": "0",
        "idx": 5420
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_rfci(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n#else\n\n    if (unlikely(ctx->pr)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n        return;\n\n    }\n\n    /* Restore CPU state */\n\n    gen_helper_rfci(cpu_env);\n\n    gen_sync_exception(ctx);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 1986
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int usbredirparser_have_cap(struct usbredirparser *parser_pub, int cap)\n{\n    struct usbredirparser_priv *parser =\n        (struct usbredirparser_priv *)parser_pub;\n    return usbredirparser_caps_get_cap(parser, parser->our_caps, cap);\n}",
        "output": "0",
        "idx": 2437
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __socket_slurp (RSocket *s, ut8 *buf, int bufsz) {\n\tint i;\n\tint chsz = 1;\n\t// r_socket_block_time (s, 1, 1, 0);\n\tif (r_socket_read_block (s, (ut8 *) buf, 1) != 1) {\n\t\treturn 0;\n\t}\n\tfor (i = 1; i < bufsz; i += chsz) {\n\t\tbuf[i] =0;\n\t\tr_socket_block_time (s, 1, 0, 1000);\n\t\tint olen = r_socket_read_block (s, (ut8 *) buf + i , chsz);\n\t\tif (olen != chsz) {\n\t\t\tbuf[i] = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn i;\n}",
        "output": "1",
        "idx": 923
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qdict_del(QDict *qdict, const char *key)\n\n{\n\n    QDictEntry *entry;\n\n\n\n    entry = qdict_find(qdict, key, tdb_hash(key) % QDICT_HASH_SIZE);\n\n    if (entry) {\n\n        LIST_REMOVE(entry, next);\n\n        qentry_destroy(entry);\n\n        qdict->size--;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1614
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BitStream::skipToNextByte()\n{\n    if (bit_offset != 7)\n    {\n\tunsigned int bits_to_skip = bit_offset + 1;\n\tif (bits_available < bits_to_skip)\n\t{\n\t    throw std::logic_error(\n\t\t\"INTERNAL ERROR: overflow skipping to next byte in bitstream\");\n\t}\n\tbit_offset = 7;\n\t++p;\n\tbits_available -= bits_to_skip;\n    }\n}",
        "output": "1",
        "idx": 734
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\tvoid testCompareRangeHelper(const char * a, const char * b, int expected, bool avoidNullRange = true) {\n\t\tUriTextRangeA ra;\n\t\tUriTextRangeA rb;\n\n\t\tif (a) {\n\t\t\tra.first = a;\n\t\t\tra.afterLast = a + strlen(a);\n\t\t} else {\n\t\t\tra.first = NULL;\n\t\t\tra.afterLast = NULL;\n\t\t}\n\n\t\tif (b) {\n\t\t\trb.first = b;\n\t\t\trb.afterLast = b + strlen(b);\n\t\t} else {\n\t\t\trb.first = NULL;\n\t\t\trb.afterLast = NULL;\n\t\t}\n\n\t\tconst int received = uriCompareRangeA(\n\t\t\t\t((a == NULL) && avoidNullRange) ? NULL : &ra,\n\t\t\t\t((b == NULL) && avoidNullRange) ? NULL : &rb);\n\t\tif (received != expected) {\n\t\t\tprintf(\"Comparing <%s> to <%s> yields %d, expected %d.\\n\",\n\t\t\t\t\ta, b, received, expected);\n\t\t}\n\t\tTEST_ASSERT(received == expected);\n\t}",
        "output": "0",
        "idx": 1440
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void spapr_drc_detach(sPAPRDRConnector *drc, DeviceState *d, Error **errp)\n\n{\n\n    trace_spapr_drc_detach(spapr_drc_index(drc));\n\n\n\n    if (drc->isolation_state != SPAPR_DR_ISOLATION_STATE_ISOLATED) {\n\n        trace_spapr_drc_awaiting_isolated(spapr_drc_index(drc));\n\n        drc->awaiting_release = true;\n\n        return;\n\n    }\n\n\n\n    if (spapr_drc_type(drc) != SPAPR_DR_CONNECTOR_TYPE_PCI &&\n\n        drc->allocation_state != SPAPR_DR_ALLOCATION_STATE_UNUSABLE) {\n\n        trace_spapr_drc_awaiting_unusable(spapr_drc_index(drc));\n\n        drc->awaiting_release = true;\n\n        return;\n\n    }\n\n\n\n    if (drc->awaiting_allocation) {\n\n        drc->awaiting_release = true;\n\n        trace_spapr_drc_awaiting_allocation(spapr_drc_index(drc));\n\n        return;\n\n    }\n\n\n\n    spapr_drc_release(drc);\n\n}\n",
        "output": "1",
        "idx": 4141
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    Document getSpec() {\n        return DOC(\"input\" << DOC_ARRAY(DOC_ARRAY(0)) << \"expected\"\n                           << DOC(\"$allElementsTrue\" << false << \"$anyElementTrue\" << false));\n    }",
        "output": "0",
        "idx": 1765
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void piix4_device_unplug_request_cb(HotplugHandler *hotplug_dev,\n\n                                           DeviceState *dev, Error **errp)\n\n{\n\n    PIIX4PMState *s = PIIX4_PM(hotplug_dev);\n\n\n\n    if (s->acpi_memory_hotplug.is_enabled &&\n\n        object_dynamic_cast(OBJECT(dev), TYPE_PC_DIMM)) {\n\n        acpi_memory_unplug_request_cb(hotplug_dev, &s->acpi_memory_hotplug,\n\n                                      dev, errp);\n\n    } else if (object_dynamic_cast(OBJECT(dev), TYPE_PCI_DEVICE)) {\n\n        acpi_pcihp_device_unplug_cb(hotplug_dev, &s->acpi_pci_hotplug, dev,\n\n                                    errp);\n\n    } else if (object_dynamic_cast(OBJECT(dev), TYPE_CPU) &&\n\n               !s->cpu_hotplug_legacy) {\n\n        acpi_cpu_unplug_request_cb(hotplug_dev, &s->cpuhp_state, dev, errp);\n\n    } else {\n\n        error_setg(errp, \"acpi: device unplug request for not supported device\"\n\n                   \" type: %s\", object_get_typename(OBJECT(dev)));\n\n    }\n\n}\n",
        "output": "0",
        "idx": 868
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static target_ulong h_random(PowerPCCPU *cpu, sPAPRMachineState *spapr,\n\n                             target_ulong opcode, target_ulong *args)\n\n{\n\n    sPAPRRngState *rngstate;\n\n    HRandomData hrdata;\n\n\n\n    rngstate = SPAPR_RNG(object_resolve_path_type(\"\", TYPE_SPAPR_RNG, NULL));\n\n\n\n    if (!rngstate || !rngstate->backend) {\n\n        return H_HARDWARE;\n\n    }\n\n\n\n    qemu_sem_init(&hrdata.sem, 0);\n\n    hrdata.val.v64 = 0;\n\n    hrdata.received = 0;\n\n\n\n    qemu_mutex_unlock_iothread();\n\n    while (hrdata.received < 8) {\n\n        rng_backend_request_entropy(rngstate->backend, 8 - hrdata.received,\n\n                                    random_recv, &hrdata);\n\n        qemu_sem_wait(&hrdata.sem);\n\n    }\n\n    qemu_mutex_lock_iothread();\n\n\n\n    qemu_sem_destroy(&hrdata.sem);\n\n    args[0] = hrdata.val.v64;\n\n\n\n    return H_SUCCESS;\n\n}\n",
        "output": "1",
        "idx": 1971
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int unix_scm_to_skb(struct scm_cookie *scm, struct sk_buff *skb, bool send_fds)\n{\n\tint err = 0;\n\tUNIXCB(skb).pid  = get_pid(scm->pid);\n\tUNIXCB(skb).cred = get_cred(scm->cred);\n\tUNIXCB(skb).fp = NULL;\n\tif (scm->fp && send_fds)\n\t\terr = unix_attach_fds(scm, skb);\n\n\tskb->destructor = unix_destruct_scm;\n\treturn err;\n}",
        "output": "1",
        "idx": 472
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void laio_cleanup(void *s_)\n{\n    struct qemu_laio_state *s = s_;\n    event_notifier_cleanup(&s->e);\n    g_free(s);",
        "output": "1",
        "idx": 15
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int b43_op_beacon_set_tim(struct ieee80211_hw *hw,\n\t\t\t\t struct ieee80211_sta *sta, bool set)\n{\n\tstruct b43_wl *wl = hw_to_b43_wl(hw);\n\n\t/* FIXME: add locking */\n\tb43_update_templates(wl);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 5965
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int main(int argc, char** argv)\n\n{\n\n    FILE *f= fopen(argv[1], \"rb+\");\n\n    int count= atoi(argv[2]);\n\n    int maxburst= atoi(argv[3]);\n\n    int length;\n\n\n\n    srand (time (0));\n\n\n\n    fseek(f, 0, SEEK_END);\n\n    length= ftell(f);\n\n    fseek(f, 0, SEEK_SET);\n\n\n\n    while(count--){\n\n        int burst= 1 + random() * (uint64_t) (abs(maxburst)-1) / RAND_MAX;\n\n        int pos= random() * (uint64_t) length / RAND_MAX;\n\n        fseek(f, pos, SEEK_SET);\n\n\n\n        if(maxburst<0) burst= -maxburst;\n\n\n\n        if(pos + burst > length)\n\n            continue;\n\n\n\n        while(burst--){\n\n            int val= random() * 256ULL / RAND_MAX;\n\n\n\n            if(maxburst<0) val=0;\n\n\n\n            fwrite(&val, 1, 1, f);\n\n        }\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4136
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_cond_signal(QemuCond *cond)\n\n{\n\n    DWORD result;\n\n\n\n    /*\n\n     * Signal only when there are waiters.  cond->waiters is\n\n     * incremented by pthread_cond_wait under the external lock,\n\n     * so we are safe about that.\n\n     */\n\n    if (cond->waiters == 0) {\n\n        return;\n\n    }\n\n\n\n    /*\n\n     * Waiting threads decrement it outside the external lock, but\n\n     * only if another thread is executing pthread_cond_broadcast and\n\n     * has the mutex.  So, it also cannot be decremented concurrently\n\n     * with this particular access.\n\n     */\n\n    cond->target = cond->waiters - 1;\n\n    result = SignalObjectAndWait(cond->sema, cond->continue_event,\n\n                                 INFINITE, FALSE);\n\n    if (result == WAIT_ABANDONED || result == WAIT_FAILED) {\n\n        error_exit(GetLastError(), __func__);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5002
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t block_save_pending(QEMUFile *f, void *opaque, uint64_t max_size)\n\n{\n\n    /* Estimate pending number of bytes to send */\n\n    uint64_t pending;\n\n\n\n    qemu_mutex_lock_iothread();\n\n    blk_mig_lock();\n\n    pending = get_remaining_dirty() +\n\n                       block_mig_state.submitted * BLOCK_SIZE +\n\n                       block_mig_state.read_done * BLOCK_SIZE;\n\n\n\n    /* Report at least one block pending during bulk phase */\n\n    if (pending == 0 && !block_mig_state.bulk_completed) {\n\n        pending = BLOCK_SIZE;\n\n    }\n\n    blk_mig_unlock();\n\n    qemu_mutex_unlock_iothread();\n\n\n\n    DPRINTF(\"Enter save live pending  %\" PRIu64 \"\\n\", pending);\n\n    return pending;\n\n}\n",
        "output": "1",
        "idx": 1591
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int gset_decode_next_bit(gset_decoder *decoder)\n{\n    if (++decoder->bit >= 8) {\n        if (++decoder->offset >= decoder->datalen) {\n            return -1;\n        }\n        decoder->bit = 0;\n    }\n    return (decoder->data[decoder->offset] & cbit_mask[decoder->bit])? 1 : 0;\n}",
        "output": "1",
        "idx": 398
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void alloc_picture(void *opaque)\n\n{\n\n    VideoState *is = opaque;\n\n    VideoPicture *vp;\n\n\n\n    vp = &is->pictq[is->pictq_windex];\n\n\n\n    if (vp->bmp)\n\n        SDL_FreeYUVOverlay(vp->bmp);\n\n\n\n#if CONFIG_AVFILTER\n\n    if (vp->picref)\n\n        avfilter_unref_buffer(vp->picref);\n\n    vp->picref = NULL;\n\n\n\n    vp->width   = is->out_video_filter->inputs[0]->w;\n\n    vp->height  = is->out_video_filter->inputs[0]->h;\n\n    vp->pix_fmt = is->out_video_filter->inputs[0]->format;\n\n#else\n\n    vp->width   = is->video_st->codec->width;\n\n    vp->height  = is->video_st->codec->height;\n\n    vp->pix_fmt = is->video_st->codec->pix_fmt;\n\n#endif\n\n\n\n    vp->bmp = SDL_CreateYUVOverlay(vp->width, vp->height,\n\n                                   SDL_YV12_OVERLAY,\n\n                                   screen);\n\n\n\n\n\n\n\n\n\n\n\n    SDL_LockMutex(is->pictq_mutex);\n\n    vp->allocated = 1;\n\n    SDL_CondSignal(is->pictq_cond);\n\n    SDL_UnlockMutex(is->pictq_mutex);\n",
        "output": "1",
        "idx": 1532
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static u32 txclk_tx_s_max_pulse_width(struct cx23885_dev *dev, u32 ns,\n\t\t\t\t      u16 *divider)\n{\n\tu64 pulse_clocks;\n\n\tif (ns > IR_MAX_DURATION)\n\t\tns = IR_MAX_DURATION;\n\tpulse_clocks = ns_to_pulse_clocks(ns);\n\t*divider = pulse_clocks_to_clock_divider(pulse_clocks);\n\tcx23888_ir_write4(dev, CX23888_IR_TXCLK_REG, *divider);\n\treturn (u32) pulse_width_count_to_ns(FIFO_RXTX, *divider);\n}",
        "output": "0",
        "idx": 590
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t online_show(struct device *dev, struct device_attribute *attr,\n\t\t\t   char *buf)\n{\n\tbool val;\n\n\tdevice_lock(dev);\n\tval = !dev->offline;\n\tdevice_unlock(dev);\n\treturn sprintf(buf, \"%u\\n\", val);\n}",
        "output": "1",
        "idx": 4091
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init skcipher_module_init(void)\n{\n\tskcipher_default_geniv = num_possible_cpus() > 1 ?\n\t\t\t\t \"eseqiv\" : \"chainiv\";\n\treturn 0;\n}",
        "output": "0",
        "idx": 4350
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "png_build_grayscale_palette(int bit_depth, png_colorp palette)\n{\n   int num_palette;\n   int color_inc;\n   int i;\n   int v;\n\n   png_debug(1, \"in png_do_build_grayscale_palette\");\n\n   if (palette == NULL)\n      return;\n\n   switch (bit_depth)\n   {\n      case 1:\n         num_palette = 2;\n         color_inc = 0xff;\n         break;\n\n      case 2:\n         num_palette = 4;\n         color_inc = 0x55;\n         break;\n\n      case 4:\n         num_palette = 16;\n         color_inc = 0x11;\n         break;\n\n      case 8:\n         num_palette = 256;\n         color_inc = 1;\n         break;\n\n      default:\n         num_palette = 0;\n         color_inc = 0;\n         break;\n   }\n\n   for (i = 0, v = 0; i < num_palette; i++, v += color_inc)\n   {\n      palette[i].red = (png_byte)(v & 0xff);\n      palette[i].green = (png_byte)(v & 0xff);\n      palette[i].blue = (png_byte)(v & 0xff);\n   }\n}",
        "output": "0",
        "idx": 1426
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BitWriter::flush()\n{\n    if (bit_offset < 7)\n    {\n\tint bits_to_write = bit_offset + 1;\n\twrite_bits(this->ch, this->bit_offset, 0, bits_to_write, this->pl);\n    }\n}",
        "output": "1",
        "idx": 1182
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int uas_pre_reset(struct usb_interface *intf)\n{\n\tstruct Scsi_Host *shost = usb_get_intfdata(intf);\n\tstruct uas_dev_info *devinfo = (struct uas_dev_info *)shost->hostdata;\n\tunsigned long flags;\n\n\tif (devinfo->shutdown)\n\t\treturn 0;\n\n\t/* Block new requests */\n\tspin_lock_irqsave(shost->host_lock, flags);\n\tscsi_block_requests(shost);\n\tspin_unlock_irqrestore(shost->host_lock, flags);\n\n\tif (uas_wait_for_pending_cmnds(devinfo) != 0) {\n\t\tshost_printk(KERN_ERR, shost, \"%s: timed out\\n\", __func__);\n\t\tscsi_unblock_requests(shost);\n\t\treturn 1;\n\t}\n\n\tuas_free_streams(devinfo);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 2827
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sco_send_frame(struct sock *sk, void *buf, int len,\n\t\t\t  unsigned int msg_flags)\n{\n\tstruct sco_conn *conn = sco_pi(sk)->conn;\n\tstruct sk_buff *skb;\n\tint err;\n\n\t/* Check outgoing MTU */\n\tif (len > conn->mtu)\n\t\treturn -EINVAL;\n\n\tBT_DBG(\"sk %p len %d\", sk, len);\n\n\tskb = bt_skb_send_alloc(sk, len, msg_flags & MSG_DONTWAIT, &err);\n\tif (!skb)\n\t\treturn err;\n\n\tmemcpy(skb_put(skb, len), buf, len);\n\thci_send_sco(conn->hcon, skb);\n\n\treturn len;\n}",
        "output": "1",
        "idx": 2296
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void apply_mid_side_stereo(ChannelElement *cpe)\n\n{\n\n    int w, w2, g, i;\n\n    IndividualChannelStream *ics = &cpe->ch[0].ics;\n\n    if (!cpe->common_window)\n\n        return;\n\n    for (w = 0; w < ics->num_windows; w += ics->group_len[w]) {\n\n        for (w2 =  0; w2 < ics->group_len[w]; w2++) {\n\n            int start = (w+w2) * 128;\n\n            for (g = 0; g < ics->num_swb; g++) {\n\n                if (!cpe->ms_mask[w*16 + g]) {\n\n                    start += ics->swb_sizes[g];\n\n                    continue;\n\n                }\n\n                for (i = 0; i < ics->swb_sizes[g]; i++) {\n\n                    float L = (cpe->ch[0].coeffs[start+i] + cpe->ch[1].coeffs[start+i]) * 0.5f;\n\n                    float R = L - cpe->ch[1].coeffs[start+i];\n\n                    cpe->ch[0].coeffs[start+i] = L;\n\n                    cpe->ch[1].coeffs[start+i] = R;\n\n                }\n\n                start += ics->swb_sizes[g];\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1928
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *sieve_srs_forward(char *return_path)\n{\n    const char *srs_domain = config_getstring(IMAPOPT_SRS_DOMAIN);\n    char *srs_return_path = NULL;\n    int srs_status;\n\n    if (!srs_engine) {\n        /* SRS not enabled */\n        return NULL;\n    }\n\n    srs_status = srs_forward_alloc(srs_engine, &srs_return_path,\n                                   return_path, srs_domain);\n\n    if (srs_status != SRS_SUCCESS) {\n        syslog(LOG_ERR, \"sieve SRS forward failed (%s, %s): %s\",\n               return_path, srs_domain, srs_strerror(srs_status));\n        if (srs_return_path) {\n            free(srs_return_path);\n            srs_return_path = NULL;\n        }\n    }\n\n    return srs_return_path;\n}",
        "output": "0",
        "idx": 5034
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "keyval_sort(struct keyval *kv)\n{\n  struct onekeyval *head;\n  struct onekeyval *okv;\n  struct onekeyval *sokv;\n\n  if (!kv || !kv->head)\n    return;\n\n  head = kv->head;\n  for (okv = kv->head; okv; okv = okv->next)\n    {\n      okv->sort = NULL;\n      for (sokv = kv->head; sokv; sokv = sokv->next)\n\t{\n\t  // We try to find a name which is greater than okv->name\n\t  // but less than our current candidate (okv->sort->name)\n\t  if ( (strcmp(sokv->name, okv->name) > 0) &&\n\t       ((okv->sort == NULL) || (strcmp(sokv->name, okv->sort->name) < 0)) )\n\t    okv->sort = sokv;\n\t}\n\n      // Find smallest name, which will be the new head\n      if (strcmp(okv->name, head->name) < 0)\n\thead = okv;\n    }\n\n  while ((okv = kv->head))\n    {\n      kv->head  = okv->next;\n      okv->next = okv->sort;\n    }\n\n  kv->head = head;\n  for (okv = kv->head; okv; okv = okv->next)\n    kv->tail = okv;\n\n  DPRINTF(E_DBG, L_MISC, \"Keyval sorted. New head: %s. New tail: %s.\\n\", kv->head->name, kv->tail->name);\n}",
        "output": "0",
        "idx": 4127
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cirrus_invalidate_region(CirrusVGAState * s, int off_begin,\n\t\t\t\t     int off_pitch, int bytesperline,\n\t\t\t\t     int lines)\n{\n    int y;\n    int off_cur;\n    int off_cur_end;\n\n    for (y = 0; y < lines; y++) {\n\toff_cur = off_begin;\n\toff_cur_end = (off_cur + bytesperline) & s->cirrus_addr_mask;\n        memory_region_set_dirty(&s->vga.vram, off_cur, off_cur_end - off_cur);\n\toff_begin += off_pitch;\n    }\n}",
        "output": "1",
        "idx": 3028
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int skcipher_done_slow(struct skcipher_walk *walk, unsigned int bsize)\n{\n\tu8 *addr;\n\n\taddr = (u8 *)ALIGN((unsigned long)walk->buffer, walk->alignmask + 1);\n\taddr = skcipher_get_spot(addr, bsize);\n\tscatterwalk_copychunks(addr, &walk->out, bsize,\n\t\t\t       (walk->flags & SKCIPHER_WALK_PHYS) ? 2 : 1);\n\treturn 0;\n}",
        "output": "0",
        "idx": 2963
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cmd_test_unit_ready(IDEState *s, uint8_t *buf)\n\n{\n\n    if (bdrv_is_inserted(s->bs)) {\n\n        ide_atapi_cmd_ok(s);\n\n    } else {\n\n        ide_atapi_cmd_error(s, SENSE_NOT_READY, ASC_MEDIUM_NOT_PRESENT);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2338
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gdb_vm_stopped(void *opaque, int reason)\n\n{\n\n    GDBState *s = opaque;\n\n    char buf[256];\n\n    const char *type;\n\n    int ret;\n\n\n\n    if (s->state == RS_SYSCALL)\n\n        return;\n\n\n\n    /* disable single step if it was enable */\n\n    cpu_single_step(s->env, 0);\n\n\n\n    if (reason == EXCP_DEBUG) {\n\n        if (s->env->watchpoint_hit) {\n\n            switch (s->env->watchpoint_hit->flags & BP_MEM_ACCESS) {\n\n            case BP_MEM_READ:\n\n                type = \"r\";\n\n                break;\n\n            case BP_MEM_ACCESS:\n\n                type = \"a\";\n\n                break;\n\n            default:\n\n                type = \"\";\n\n                break;\n\n            }\n\n            snprintf(buf, sizeof(buf), \"T%02x%swatch:\" TARGET_FMT_lx \";\",\n\n                     SIGTRAP, type, s->env->watchpoint_hit->vaddr);\n\n            put_packet(s, buf);\n\n            s->env->watchpoint_hit = NULL;\n\n            return;\n\n        }\n\n\ttb_flush(s->env);\n\n        ret = SIGTRAP;\n\n    } else if (reason == EXCP_INTERRUPT) {\n\n        ret = SIGINT;\n\n    } else {\n\n        ret = 0;\n\n    }\n\n    snprintf(buf, sizeof(buf), \"S%02x\", ret);\n\n    put_packet(s, buf);\n\n}\n",
        "output": "0",
        "idx": 780
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "olsr_print_neighbor(netdissect_options *ndo,\n                    const u_char *msg_data, u_int hello_len)\n{\n    int neighbor;\n\n    ND_PRINT((ndo, \"\\n\\t      neighbor\\n\\t\\t\"));\n    neighbor = 1;\n\n    while (hello_len >= sizeof(struct in_addr)) {\n\n        if (!ND_TTEST2(*msg_data, sizeof(struct in_addr)))\n            return (-1);\n        /* print 4 neighbors per line */\n\n        ND_PRINT((ndo, \"%s%s\", ipaddr_string(ndo, msg_data),\n               neighbor % 4 == 0 ? \"\\n\\t\\t\" : \" \"));\n\n        msg_data += sizeof(struct in_addr);\n        hello_len -= sizeof(struct in_addr);\n    }\n    return (0);\n}",
        "output": "0",
        "idx": 2061
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_blk_dma_restart_cb(void *opaque, int running, int reason)\n\n{\n\n    VirtIOBlock *s = opaque;\n\n    VirtIOBlockReq *req = s->rq;\n\n\n\n    if (!running)\n\n        return;\n\n\n\n    s->rq = NULL;\n\n\n\n    while (req) {\n\n        virtio_blk_handle_write(req);\n\n        req = req->next;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1953
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_cpu_is_self(void *env)\n\n{\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 4679
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void helper_sysexit(void)\n\n{\n\n    int cpl;\n\n\n\n    cpl = env->hflags & HF_CPL_MASK;\n\n    if (env->sysenter_cs == 0 || cpl != 0) {\n\n        raise_exception_err(EXCP0D_GPF, 0);\n\n    }\n\n    cpu_x86_set_cpl(env, 3);\n\n    cpu_x86_load_seg_cache(env, R_CS, ((env->sysenter_cs + 16) & 0xfffc) | 3,\n\n                           0, 0xffffffff,\n\n                           DESC_G_MASK | DESC_B_MASK | DESC_P_MASK |\n\n                           DESC_S_MASK | (3 << DESC_DPL_SHIFT) |\n\n                           DESC_CS_MASK | DESC_R_MASK | DESC_A_MASK);\n\n    cpu_x86_load_seg_cache(env, R_SS, ((env->sysenter_cs + 24) & 0xfffc) | 3,\n\n                           0, 0xffffffff,\n\n                           DESC_G_MASK | DESC_B_MASK | DESC_P_MASK |\n\n                           DESC_S_MASK | (3 << DESC_DPL_SHIFT) |\n\n                           DESC_W_MASK | DESC_A_MASK);\n\n    ESP = ECX;\n\n    EIP = EDX;\n\n#ifdef USE_KQEMU\n\n    if (kqemu_is_ok(env)) {\n\n        env->exception_index = -1;\n\n        cpu_loop_exit();\n\n    }\n\n#endif\n\n}\n",
        "output": "0",
        "idx": 4895
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "njs_vm_add_path(njs_vm_t *vm, const njs_str_t *path)\n{\n    njs_str_t  *item;\n\n    if (vm->paths == NULL) {\n        vm->paths = njs_arr_create(vm->mem_pool, 4, sizeof(njs_str_t));\n        if (njs_slow_path(vm->paths == NULL)) {\n            return NJS_ERROR;\n        }\n    }\n\n    item = njs_arr_add(vm->paths);\n    if (njs_slow_path(item == NULL)) {\n        return NJS_ERROR;\n    }\n\n    *item = *path;\n\n    return NJS_OK;\n}",
        "output": "0",
        "idx": 6189
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int add_metadata(int count, int type,\n\n                        const char *name, const char *sep, TiffContext *s)\n\n{\n\n    switch(type) {\n\n    case TIFF_DOUBLE: return add_doubles_metadata(count, name, sep, s);\n\n    case TIFF_SHORT : return add_shorts_metadata(count, name, sep, s);\n\n    case TIFF_STRING: return add_string_metadata(count, name, s);\n\n    default         : return AVERROR_INVALIDDATA;\n\n    };\n\n}\n",
        "output": "1",
        "idx": 1368
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ptirq_free_irte(const struct ptirq_remapping_info *entry)\n{\n\tstruct intr_source intr_src;\n\n\tif (entry->irte_idx < CONFIG_MAX_IR_ENTRIES) {\n\t\tif (entry->intr_type == PTDEV_INTR_MSI) {\n\t\t\tintr_src.is_msi = true;\n\t\t\tintr_src.src.msi.value = entry->phys_sid.msi_id.bdf;\n\t\t} else {\n\t\t\tintr_src.is_msi = false;\n\t\t\tintr_src.src.ioapic_id = ioapic_irq_to_ioapic_id(entry->allocated_pirq);\n\t\t}\n\t\tdmar_free_irte(&intr_src, entry->irte_idx);\n\t}\n}",
        "output": "1",
        "idx": 668
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_validate_list(TestInputVisitorData *data,\n\n                                const void *unused)\n\n{\n\n    UserDefOneList *head = NULL;\n\n    Visitor *v;\n\n\n\n    v = validate_test_init(data, \"[ { 'string': 'string0', 'integer': 42 }, { 'string': 'string1', 'integer': 43 }, { 'string': 'string2', 'integer': 44 } ]\");\n\n\n\n    visit_type_UserDefOneList(v, NULL, &head, &error_abort);\n\n    qapi_free_UserDefOneList(head);\n\n}\n",
        "output": "0",
        "idx": 996
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "VTermState *vterm_obtain_state(VTerm *vt)\n{\n  VTermState *state;\n  if(vt->state)\n    return vt->state;\n\n  state = vterm_state_new(vt);\n  vt->state = state;\n\n  state->combine_chars_size = 16;\n  state->combine_chars = vterm_allocator_malloc(state->vt, state->combine_chars_size * sizeof(state->combine_chars[0]));\n\n  state->tabstops = vterm_allocator_malloc(state->vt, (state->cols + 7) / 8);\n\n  state->lineinfo = vterm_allocator_malloc(state->vt, state->rows * sizeof(VTermLineInfo));\n\n  state->encoding_utf8.enc = vterm_lookup_encoding(ENC_UTF8, 'u');\n  if(*state->encoding_utf8.enc->init != NULL)\n    (*state->encoding_utf8.enc->init)(state->encoding_utf8.enc, state->encoding_utf8.data);\n\n  vterm_parser_set_callbacks(vt, &parser_callbacks, state);\n\n  return state;\n}",
        "output": "1",
        "idx": 2507
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void kvm_init_cpu_signals(CPUState *cpu)\n\n{\n\n    int r;\n\n    sigset_t set;\n\n    struct sigaction sigact;\n\n\n\n    memset(&sigact, 0, sizeof(sigact));\n\n    sigact.sa_handler = dummy_signal;\n\n    sigaction(SIG_IPI, &sigact, NULL);\n\n\n\n    pthread_sigmask(SIG_BLOCK, NULL, &set);\n\n#if defined KVM_HAVE_MCE_INJECTION\n\n    sigdelset(&set, SIGBUS);\n\n    pthread_sigmask(SIG_SETMASK, &set, NULL);\n\n#endif\n\n    sigdelset(&set, SIG_IPI);\n\n    r = kvm_set_signal_mask(cpu, &set);\n\n    if (r) {\n\n        fprintf(stderr, \"kvm_set_signal_mask: %s\\n\", strerror(-r));\n\n        exit(1);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 593
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ax25_kill_by_device(struct net_device *dev)\n{\n\tax25_dev *ax25_dev;\n\tax25_cb *s;\n\n\tif ((ax25_dev = ax25_dev_ax25dev(dev)) == NULL)\n\t\treturn;\n\n\tspin_lock_bh(&ax25_list_lock);\nagain:\n\tax25_for_each(s, &ax25_list) {\n\t\tif (s->ax25_dev == ax25_dev) {\n\t\t\tspin_unlock_bh(&ax25_list_lock);\n\t\t\tlock_sock(s->sk);\n\t\t\ts->ax25_dev = NULL;\n\t\t\trelease_sock(s->sk);\n\t\t\tax25_disconnect(s, ENETUNREACH);\n\t\t\tspin_lock_bh(&ax25_list_lock);\n\n\t\t\t/* The entry could have been deleted from the\n\t\t\t * list meanwhile and thus the next pointer is\n\t\t\t * no longer valid.  Play it safe and restart\n\t\t\t * the scan.  Forward progress is ensured\n\t\t\t * because we set s->ax25_dev to NULL and we\n\t\t\t * are never passed a NULL 'dev' argument.\n\t\t\t */\n\t\t\tgoto again;\n\t\t}\n\t}\n\tspin_unlock_bh(&ax25_list_lock);\n}",
        "output": "1",
        "idx": 3960
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void adb_kbd_put_keycode(void *opaque, int keycode)\n\n{\n\n    KBDState *s = opaque;\n\n\n\n    if (s->count < sizeof(s->data)) {\n\n        s->data[s->wptr] = keycode;\n\n        if (++s->wptr == sizeof(s->data))\n\n            s->wptr = 0;\n\n        s->count++;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5325
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t tstats_write(struct file *file, const char __user *buf,\n\t\t\t    size_t count, loff_t *offs)\n{\n\tchar ctl[2];\n\n\tif (count != 2 || *offs)\n\t\treturn -EINVAL;\n\n\tif (copy_from_user(ctl, buf, count))\n\t\treturn -EFAULT;\n\n\tmutex_lock(&show_mutex);\n\tswitch (ctl[0]) {\n\tcase '0':\n\t\tif (timer_stats_active) {\n\t\t\ttimer_stats_active = 0;\n\t\t\ttime_stop = ktime_get();\n\t\t\tsync_access();\n\t\t}\n\t\tbreak;\n\tcase '1':\n\t\tif (!timer_stats_active) {\n\t\t\treset_entries();\n\t\t\ttime_start = ktime_get();\n\t\t\tsmp_mb();\n\t\t\ttimer_stats_active = 1;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tcount = -EINVAL;\n\t}\n\tmutex_unlock(&show_mutex);\n\n\treturn count;\n}",
        "output": "1",
        "idx": 6128
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_word_rgb_row(j_compress_ptr cinfo, cjpeg_source_ptr sinfo)\n/* This version is for reading raw-word-format PPM files with any maxval */\n{\n  ppm_source_ptr source = (ppm_source_ptr)sinfo;\n  register JSAMPROW ptr;\n  register U_CHAR *bufferptr;\n  register JSAMPLE *rescale = source->rescale;\n  JDIMENSION col;\n  unsigned int maxval = source->maxval;\n\n  if (!ReadOK(source->pub.input_file, source->iobuffer, source->buffer_width))\n    ERREXIT(cinfo, JERR_INPUT_EOF);\n  ptr = source->pub.buffer[0];\n  bufferptr = source->iobuffer;\n  for (col = cinfo->image_width; col > 0; col--) {\n    register unsigned int temp;\n    temp  = UCH(*bufferptr++) << 8;\n    temp |= UCH(*bufferptr++);\n    if (temp > maxval)\n      ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);\n    *ptr++ = rescale[temp];\n    temp  = UCH(*bufferptr++) << 8;\n    temp |= UCH(*bufferptr++);\n    if (temp > maxval)\n      ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);\n    *ptr++ = rescale[temp];\n    temp  = UCH(*bufferptr++) << 8;\n    temp |= UCH(*bufferptr++);\n    if (temp > maxval)\n      ERREXIT(cinfo, JERR_PPM_OUTOFRANGE);\n    *ptr++ = rescale[temp];\n  }\n  return 1;\n}",
        "output": "1",
        "idx": 1998
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void perf_event_init_cpu(int cpu)\n{\n\tstruct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);\n\n\tmutex_lock(&swhash->hlist_mutex);\n\tswhash->online = true;\n\tif (swhash->hlist_refcount > 0) {\n\t\tstruct swevent_hlist *hlist;\n\n\t\thlist = kzalloc_node(sizeof(*hlist), GFP_KERNEL, cpu_to_node(cpu));\n\t\tWARN_ON(!hlist);\n\t\trcu_assign_pointer(swhash->swevent_hlist, hlist);\n\t}\n\tmutex_unlock(&swhash->hlist_mutex);\n}",
        "output": "1",
        "idx": 6172
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int crypto_report_cipher(struct sk_buff *skb, struct crypto_alg *alg)\n{\n\tstruct crypto_report_cipher rcipher;\n\n\tstrlcpy(rcipher.type, \"cipher\", sizeof(rcipher.type));\n\n\trcipher.blocksize = alg->cra_blocksize;\n\trcipher.min_keysize = alg->cra_cipher.cia_min_keysize;\n\trcipher.max_keysize = alg->cra_cipher.cia_max_keysize;\n\n\tif (nla_put(skb, CRYPTOCFGA_REPORT_CIPHER,\n\t\t    sizeof(struct crypto_report_cipher), &rcipher))\n\t\tgoto nla_put_failure;\n\treturn 0;\n\nnla_put_failure:\n\treturn -EMSGSIZE;\n}",
        "output": "1",
        "idx": 3031
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tpm_tis_receive_cb(TPMState *s, uint8_t locty)\n\n{\n\n    TPMTISEmuState *tis = &s->s.tis;\n\n\n\n    assert(s->locty_number == locty);\n\n\n\n    qemu_bh_schedule(tis->bh);\n\n}\n",
        "output": "0",
        "idx": 2460
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ISADevice *isa_create_simple(const char *name)\n\n{\n\n    ISADevice *dev;\n\n\n\n    dev = isa_create(name);\n\n    if (qdev_init(&dev->qdev) != 0) {\n\n        return NULL;\n\n    }\n\n    return dev;\n\n}\n",
        "output": "1",
        "idx": 2496
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static target_long monitor_get_tbl (const struct MonitorDef *md, int val)\n\n{\n\n    CPUState *env = mon_get_cpu();\n\n    if (!env)\n\n        return 0;\n\n    return cpu_ppc_load_tbl(env);\n\n}\n",
        "output": "1",
        "idx": 1221
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtconsole_realize(DeviceState *dev, Error **errp)\n\n{\n\n    VirtIOSerialPort *port = VIRTIO_SERIAL_PORT(dev);\n\n    VirtConsole *vcon = VIRTIO_CONSOLE(dev);\n\n    VirtIOSerialPortClass *k = VIRTIO_SERIAL_PORT_GET_CLASS(dev);\n\n\n\n    if (port->id == 0 && !k->is_console) {\n\n        error_setg(errp, \"Port number 0 on virtio-serial devices reserved \"\n\n                   \"for virtconsole devices for backward compatibility.\");\n\n        return;\n\n    }\n\n\n\n    if (vcon->chr) {\n\n        vcon->chr->explicit_fe_open = 1;\n\n        qemu_chr_add_handlers(vcon->chr, chr_can_read, chr_read, chr_event,\n\n                              vcon);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1117
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int annotation_set_pop3showafter(annotate_state_t *state,\n                                        struct annotate_entry_list *entry,\n                                        int maywrite)\n{\n    struct mailbox *mailbox = state->mailbox;\n    int r = 0;\n    time_t date;\n\n    assert(mailbox);\n\n    if (entry->shared.s == NULL) {\n        /* Effectively removes the annotation */\n        date = 0;\n    }\n    else {\n        r = time_from_rfc5322(buf_cstring(&entry->shared), &date, DATETIME_FULL);\n        if (r < 0)\n            return IMAP_PROTOCOL_BAD_PARAMETERS;\n    }\n\n    if (date != mailbox->i.pop3_show_after) {\n        if (!maywrite) return IMAP_PERMISSION_DENIED;\n        mailbox_index_dirty(mailbox);\n        mailbox_modseq_dirty(mailbox);\n        mailbox->i.pop3_show_after = date;\n        mboxlist_update_foldermodseq(mailbox->name, mailbox->i.highestmodseq);\n    }\n\n    return 0;\n}",
        "output": "0",
        "idx": 2366
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int cJSON_GetArraySize( cJSON *array )\n{\n\tcJSON *c = array->child;\n\tint i = 0;\n\twhile ( c ) {\n\t\t++i;\n\t\tc = c->next;\n\t}\n\treturn i;\n}",
        "output": "1",
        "idx": 607
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static size_t handle_aiocb_rw_vector(struct qemu_paiocb *aiocb)\n\n{\n\n    size_t offset = 0;\n\n    ssize_t len;\n\n\n\n    do {\n\n        if (aiocb->aio_type == QEMU_PAIO_WRITE)\n\n            len = qemu_pwritev(aiocb->aio_fildes,\n\n                               aiocb->aio_iov,\n\n                               aiocb->aio_niov,\n\n                               aiocb->aio_offset + offset);\n\n         else\n\n            len = qemu_preadv(aiocb->aio_fildes,\n\n                              aiocb->aio_iov,\n\n                              aiocb->aio_niov,\n\n                              aiocb->aio_offset + offset);\n\n    } while (len == -1 && errno == EINTR);\n\n\n\n    if (len == -1)\n\n        return -errno;\n\n    return len;\n\n}\n",
        "output": "0",
        "idx": 5364
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t HELPER(mul32)(CPUOpenRISCState *env,\n\n                       uint32_t ra, uint32_t rb)\n\n{\n\n    uint64_t result;\n\n    uint32_t high, cy;\n\n\n\n    OpenRISCCPU *cpu = openrisc_env_get_cpu(env);\n\n\n\n    result = (uint64_t)ra * rb;\n\n    /* regisiers in or32 is 32bit, so 32 is NOT a magic number.\n\n       or64 is not handled in this function, and not implement yet,\n\n       TARGET_LONG_BITS for or64 is 64, it will break this function,\n\n       so, we didn't use TARGET_LONG_BITS here.  */\n\n    high = result >> 32;\n\n    cy = result >> (32 - 1);\n\n\n\n    if ((cy & 0x1) == 0x0) {\n\n        if (high == 0x0) {\n\n            return result;\n\n        }\n\n    }\n\n\n\n    if ((cy & 0x1) == 0x1) {\n\n        if (high == 0xffffffff) {\n\n            return result;\n\n        }\n\n    }\n\n\n\n    cpu->env.sr |= (SR_OV | SR_CY);\n\n    if (cpu->env.sr & SR_OVE) {\n\n        raise_exception(cpu, EXCP_RANGE);\n\n    }\n\n\n\n    return result;\n\n}\n",
        "output": "1",
        "idx": 3001
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void noop_conv (st_sample_t *dst, const void *src,\n\n                       int samples, volume_t *vol)\n\n{\n\n    (void) src;\n\n    (void) dst;\n\n    (void) samples;\n\n    (void) vol;\n\n}\n",
        "output": "0",
        "idx": 1073
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct xt_table_info *xt_alloc_table_info(unsigned int size)\n{\n\tstruct xt_table_info *info = NULL;\n\tsize_t sz = sizeof(*info) + size;\n\n\t/* Pedantry: prevent them from hitting BUG() in vmalloc.c --RR */\n\tif ((SMP_ALIGN(size) >> PAGE_SHIFT) + 2 > totalram_pages)\n\t\treturn NULL;\n\n\tif (sz <= (PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER))\n\t\tinfo = kmalloc(sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY);\n\tif (!info) {\n\t\tinfo = vmalloc(sz);\n\t\tif (!info)\n\t\t\treturn NULL;\n\t}\n\tmemset(info, 0, sizeof(*info));\n\tinfo->size = size;\n\treturn info;\n}",
        "output": "1",
        "idx": 3352
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ohci_td_pkt(const char *msg, const uint8_t *buf, size_t len)\n\n{\n\n    bool print16 = !!trace_event_get_state(TRACE_USB_OHCI_TD_PKT_SHORT);\n\n    bool printall = !!trace_event_get_state(TRACE_USB_OHCI_TD_PKT_FULL);\n\n    const int width = 16;\n\n    int i;\n\n    char tmp[3 * width + 1];\n\n    char *p = tmp;\n\n\n\n    if (!printall && !print16) {\n\n        return;\n\n    }\n\n\n\n    for (i = 0; ; i++) {\n\n        if (i && (!(i % width) || (i == len))) {\n\n            if (!printall) {\n\n                trace_usb_ohci_td_pkt_short(msg, tmp);\n\n                break;\n\n            }\n\n            trace_usb_ohci_td_pkt_full(msg, tmp);\n\n            p = tmp;\n\n            *p = 0;\n\n        }\n\n        if (i == len) {\n\n            break;\n\n        }\n\n\n\n        p += sprintf(p, \" %.2x\", buf[i]);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2311
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cavs_find_frame_end(ParseContext *pc, const uint8_t *buf,\n\n                               int buf_size) {\n\n    int pic_found, i;\n\n    uint32_t state;\n\n\n\n    pic_found= pc->frame_start_found;\n\n    state= pc->state;\n\n\n\n    i=0;\n\n    if(!pic_found){\n\n        for(i=0; i<buf_size; i++){\n\n            state= (state<<8) | buf[i];\n\n            if(state == PIC_I_START_CODE || state == PIC_PB_START_CODE){\n\n                i++;\n\n                pic_found=1;\n\n                break;\n\n            }\n\n        }\n\n    }\n\n\n\n    if(pic_found){\n\n        /* EOF considered as end of frame */\n\n        if (buf_size == 0)\n\n            return 0;\n\n        for(; i<buf_size; i++){\n\n            state= (state<<8) | buf[i];\n\n            if((state&0xFFFFFF00) == 0x100){\n\n                if(state < SLICE_MIN_START_CODE || state > SLICE_MAX_START_CODE){\n\n                    pc->frame_start_found=0;\n\n                    pc->state=-1;\n\n                    return i-3;\n\n                }\n\n            }\n\n        }\n\n    }\n\n    pc->frame_start_found= pic_found;\n\n    pc->state= state;\n\n    return END_NOT_FOUND;\n\n}\n",
        "output": "0",
        "idx": 5294
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_stf_asi(DisasContext *dc, TCGv addr,\n\n                        int insn, int size, int rd)\n\n{\n\n    TCGv_i32 r_asi, r_size, r_rd;\n\n\n\n    r_asi = gen_get_asi(dc, insn);\n\n    r_size = tcg_const_i32(size);\n\n    r_rd = tcg_const_i32(rd);\n\n    gen_helper_stf_asi(cpu_env, addr, r_asi, r_size, r_rd);\n\n    tcg_temp_free_i32(r_rd);\n\n    tcg_temp_free_i32(r_size);\n\n    tcg_temp_free_i32(r_asi);\n\n}\n",
        "output": "0",
        "idx": 4041
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ftp_type(ftpbuf_t *ftp, ftptype_t type)\n{\n\tchar typechar[2] = \"?\";\n\n\tif (ftp == NULL) {\n\t\treturn 0;\n\t}\n\tif (type == ftp->type) { \n\t\treturn 1;\n\t}\n\tif (type == FTPTYPE_ASCII) {\n\t\ttypechar[0] = 'A';\n\t} else if (type == FTPTYPE_IMAGE) {\n\t\ttypechar[0] = 'I';\n\t} else {\n\t\treturn 0;\n\t}\n\tif (!ftp_putcmd(ftp, \"TYPE\", typechar)) {\n\t\treturn 0;\n\t}\n\tif (!ftp_getresp(ftp) || ftp->resp != 200) {\n\t\treturn 0;\n\t}\n\tftp->type = type;\n\n\treturn 1;\n}",
        "output": "1",
        "idx": 2605
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int Field_temporal_with_date::store(const char *from, size_t len, CHARSET_INFO *cs)\n{\n  MYSQL_TIME ltime;\n  MYSQL_TIME_STATUS status;\n  THD *thd= get_thd();\n  ErrConvString str(from, len, cs);\n  bool func_res= !str_to_datetime(cs, from, len, &ltime,\n                                  sql_mode_for_dates(thd),\n                                  &status);\n  return store_TIME_with_warning(&ltime, &str, status.warnings, func_res);\n}",
        "output": "0",
        "idx": 1351
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "throttle_job (GSWindow  *window,\n              GSJob     *job,\n              GSManager *manager)\n{\n        if (manager->priv->throttled) {\n                gs_job_stop (job);\n        } else {\n                manager_maybe_start_job_for_window (manager, window);\n        }\n}",
        "output": "0",
        "idx": 5639
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void numa_set_mem_node_id(ram_addr_t addr, uint64_t size, uint32_t node)\n\n{\n\n    struct numa_addr_range *range = g_malloc0(sizeof(*range));\n\n\n\n    /*\n\n     * Memory-less nodes can come here with 0 size in which case,\n\n     * there is nothing to do.\n\n     */\n\n    if (!size) {\n\n        return;\n\n    }\n\n\n\n    range->mem_start = addr;\n\n    range->mem_end = addr + size - 1;\n\n    QLIST_INSERT_HEAD(&numa_info[node].addr, range, entry);\n\n}\n",
        "output": "1",
        "idx": 113
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool ecdsa_verify_legacy(const ecdsa_verify_context_t *ctx, const ecc_25519_work_t *pubkey) {\n  ecc_25519_work_t s2, work;\n  ecc_int256_t w, tmp;\n\n  ecc_25519_scalarmult(&s2, &ctx->u2, pubkey);\n  ecc_25519_add(&work, &ctx->s1, &s2);\n  ecc_25519_store_xy_legacy(&w, NULL, &work);\n  ecc_25519_gf_sub(&tmp, &ctx->r, &w);\n\n  return ecc_25519_gf_is_zero(&tmp);\n}",
        "output": "1",
        "idx": 1203
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void h2_beam_abort(h2_bucket_beam *beam)\n{\n    h2_beam_lock bl;\n    \n    if (beam && enter_yellow(beam, &bl) == APR_SUCCESS) {\n        if (!beam->aborted) {\n            beam->aborted = 1;\n            r_purge_sent(beam);\n            h2_blist_cleanup(&beam->send_list);\n            report_consumption(beam, &bl);\n        }\n        apr_thread_cond_broadcast(beam->change);\n        leave_yellow(beam, &bl);\n    }\n}",
        "output": "1",
        "idx": 1932
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int calculate_password(String *str, char *buffer)\n{\n  DBUG_ASSERT(str);\n  if (str->length() == 0) // PASSWORD('') returns ''\n    return 0;\n  \n  int buffer_len= 0;\n  THD *thd= current_thd;\n  int old_passwords= 0;\n  if (thd)\n    old_passwords= thd->variables.old_passwords;\n  \n#if defined(HAVE_OPENSSL)\n  if (old_passwords == 2)\n  {\n    my_make_scrambled_password(buffer, str->ptr(),\n                               str->length());\n    buffer_len= (int) strlen(buffer) + 1;\n  }\n  else\n#endif\n  if (old_passwords == 0)\n  {\n    my_make_scrambled_password_sha1(buffer, str->ptr(),\n                                    str->length());\n    buffer_len= SCRAMBLED_PASSWORD_CHAR_LENGTH;\n  }\n  else\n  if (old_passwords == 1)\n  {\n    my_make_scrambled_password_323(buffer, str->ptr(),\n                                   str->length());\n    buffer_len= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;\n  }\n  return buffer_len;\n}",
        "output": "1",
        "idx": 3528
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "__u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,\n\t\t\t\t __be16 sport, __be16 dport)\n{\n\tu32 hash[MD5_DIGEST_WORDS];\n\n\thash[0] = (__force u32)saddr;\n\thash[1] = (__force u32)daddr;\n\thash[2] = ((__force u16)sport << 16) + (__force u16)dport;\n\thash[3] = net_secret[15];\n\n\tmd5_transform(hash, net_secret);\n\n\treturn seq_scale(hash[0]);\n}",
        "output": "0",
        "idx": 5942
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline LineContribType * _gdContributionsAlloc(unsigned int line_length, unsigned int windows_size)\n{\n\tunsigned int u = 0;\n\tLineContribType *res;\n\tint overflow_error = 0;\n\n\tres = (LineContribType *) gdMalloc(sizeof(LineContribType));\n\tif (!res) {\n\t\treturn NULL;\n\t}\n\tres->WindowSize = windows_size;\n\tres->LineLength = line_length;\n\tif (overflow2(line_length, sizeof(ContributionType))) {\n\t\tgdFree(res);\n\t\treturn NULL;\n\t}\n\tres->ContribRow = (ContributionType *) gdMalloc(line_length * sizeof(ContributionType));\n\tif (res->ContribRow == NULL) {\n\t\tgdFree(res);\n\t\treturn NULL;\n\t}\n\tfor (u = 0 ; u < line_length ; u++) {\n\t\tif (overflow2(windows_size, sizeof(double))) {\n\t\t\toverflow_error = 1;\n\t\t} else {\n\t\t\tres->ContribRow[u].Weights = (double *) gdMalloc(windows_size * sizeof(double));\n\t\t}\n\t\tif (overflow_error == 1 || res->ContribRow[u].Weights == NULL) {\n\t\t\tu--;\n\t\t\twhile (u >= 0) {\n\t\t\t\tgdFree(res->ContribRow[u].Weights);\n\t\t\t\tu--;\n\t\t\t}\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn res;\n}",
        "output": "1",
        "idx": 928
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sco_chan_del(struct sock *sk, int err)\n{\n\tstruct sco_conn *conn;\n\n\tconn = sco_pi(sk)->conn;\n\n\tBT_DBG(\"sk %p, conn %p, err %d\", sk, conn, err);\n\n\tif (conn) {\n\t\tsco_conn_lock(conn);\n\t\tconn->sk = NULL;\n\t\tsco_pi(sk)->conn = NULL;\n\t\tsco_conn_unlock(conn);\n\n\t\tif (conn->hcon)\n\t\t\thci_conn_drop(conn->hcon);\n\t}\n\n\tsk->sk_state = BT_CLOSED;\n\tsk->sk_err   = err;\n\tsk->sk_state_change(sk);\n\n\tsock_set_flag(sk, SOCK_ZAPPED);\n}",
        "output": "0",
        "idx": 465
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void __init raw_proc_exit(void)\n{\n\tunregister_pernet_subsys(&raw_net_ops);\n}",
        "output": "0",
        "idx": 2518
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "timespec_cmp(struct timespec time1, struct timespec time2)\n{\n  /* Less than. */\n  if (time1.tv_sec < time2.tv_sec)\n    return -1;\n  /* Greater than. */\n  else if (time1.tv_sec > time2.tv_sec)\n    return 1;\n  /* Less than. */\n  else if (time1.tv_nsec < time2.tv_nsec)\n    return -1;\n  /* Greater than. */\n  else if (time1.tv_nsec > time2.tv_nsec)\n    return 1;\n  /* Equal. */\n  else\n    return 0;\n}",
        "output": "0",
        "idx": 2283
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kvmclock_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n\n\n    dc->realize = kvmclock_realize;\n\n    dc->vmsd = &kvmclock_vmsd;\n\n    dc->props = kvmclock_properties;\n\n\n\n\n\n\n}",
        "output": "1",
        "idx": 3755
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int usb_device_init(USBDevice *dev)\n\n{\n\n    USBDeviceClass *klass = USB_DEVICE_GET_CLASS(dev);\n\n    if (klass->init) {\n\n        return klass->init(dev);\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4593
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtqueue_map_sg(struct iovec *sg, hwaddr *addr,\n    size_t num_sg, int is_write)\n{\n    unsigned int i;\n    hwaddr len;\n    for (i = 0; i < num_sg; i++) {\n        len = sg[i].iov_len;\n        sg[i].iov_base = cpu_physical_memory_map(addr[i], &len, is_write);\n        if (sg[i].iov_base == NULL || len != sg[i].iov_len) {\n            error_report(\"virtio: trying to map MMIO memory\");",
        "output": "1",
        "idx": 1083
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ipv6_mc_rejoin_groups(struct inet6_dev *idev)\n{\n\tstruct ifmcaddr6 *pmc;\n\n\tASSERT_RTNL();\n\n\tmutex_lock(&idev->mc_lock);\n\tif (mld_in_v1_mode(idev)) {\n\t\tfor_each_mc_mclock(idev, pmc)\n\t\t\tigmp6_join_group(pmc);\n\t} else {\n\t\tmld_send_report(idev, NULL);\n\t}\n\tmutex_unlock(&idev->mc_lock);\n}",
        "output": "0",
        "idx": 546
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct block_device *f2fs_target_device(struct f2fs_sb_info *sbi,\n\t\t\t\tblock_t blk_addr, struct bio *bio)\n{\n\tstruct block_device *bdev = sbi->sb->s_bdev;\n\tint i;\n\n\tfor (i = 0; i < sbi->s_ndevs; i++) {\n\t\tif (FDEV(i).start_blk <= blk_addr &&\n\t\t\t\t\tFDEV(i).end_blk >= blk_addr) {\n\t\t\tblk_addr -= FDEV(i).start_blk;\n\t\t\tbdev = FDEV(i).bdev;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (bio) {\n\t\tbio->bi_bdev = bdev;\n\t\tbio->bi_iter.bi_sector = SECTOR_FROM_BLOCK(blk_addr);\n\t}\n\treturn bdev;\n}",
        "output": "0",
        "idx": 212
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int verify_replay(struct xfrm_usersa_info *p,\n\t\t\t\tstruct nlattr **attrs)\n{\n\tstruct nlattr *rt = attrs[XFRMA_REPLAY_ESN_VAL];\n\n\tif ((p->flags & XFRM_STATE_ESN) && !rt)\n\t\treturn -EINVAL;\n\n\tif (!rt)\n\t\treturn 0;\n\n\tif (p->id.proto != IPPROTO_ESP)\n\t\treturn -EINVAL;\n\n\tif (p->replay_window != 0)\n\t\treturn -EINVAL;\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 5840
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mmap_start(AVFormatContext *ctx)\n\n{\n\n    struct video_data *s = ctx->priv_data;\n\n    enum v4l2_buf_type type;\n\n    int i, res;\n\n\n\n    for (i = 0; i < s->buffers; i++) {\n\n        struct v4l2_buffer buf;\n\n\n\n        memset(&buf, 0, sizeof(struct v4l2_buffer));\n\n        buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\n        buf.memory = V4L2_MEMORY_MMAP;\n\n        buf.index  = i;\n\n\n\n        res = ioctl(s->fd, VIDIOC_QBUF, &buf);\n\n        if (res < 0) {\n\n            av_log(ctx, AV_LOG_ERROR, \"ioctl(VIDIOC_QBUF): %s\\n\",\n\n                   strerror(errno));\n\n\n\n            return AVERROR(errno);\n\n        }\n\n    }\n\n\n\n    type = V4L2_BUF_TYPE_VIDEO_CAPTURE;\n\n    res = ioctl(s->fd, VIDIOC_STREAMON, &type);\n\n    if (res < 0) {\n\n        av_log(ctx, AV_LOG_ERROR, \"ioctl(VIDIOC_STREAMON): %s\\n\",\n\n               strerror(errno));\n\n\n\n        return AVERROR(errno);\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4068
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "build_gtdt(GArray *table_data, GArray *linker)\n\n{\n\n    int gtdt_start = table_data->len;\n\n    AcpiGenericTimerTable *gtdt;\n\n\n\n    gtdt = acpi_data_push(table_data, sizeof *gtdt);\n\n    /* The interrupt values are the same with the device tree when adding 16 */\n\n    gtdt->secure_el1_interrupt = ARCH_TIMER_S_EL1_IRQ + 16;\n\n    gtdt->secure_el1_flags = ACPI_EDGE_SENSITIVE;\n\n\n\n    gtdt->non_secure_el1_interrupt = ARCH_TIMER_NS_EL1_IRQ + 16;\n\n    gtdt->non_secure_el1_flags = ACPI_EDGE_SENSITIVE;\n\n\n\n    gtdt->virtual_timer_interrupt = ARCH_TIMER_VIRT_IRQ + 16;\n\n    gtdt->virtual_timer_flags = ACPI_EDGE_SENSITIVE;\n\n\n\n    gtdt->non_secure_el2_interrupt = ARCH_TIMER_NS_EL2_IRQ + 16;\n\n    gtdt->non_secure_el2_flags = ACPI_EDGE_SENSITIVE;\n\n\n\n    build_header(linker, table_data,\n\n                 (void *)(table_data->data + gtdt_start), \"GTDT\",\n\n                 table_data->len - gtdt_start, 2, NULL);\n\n}\n",
        "output": "0",
        "idx": 2191
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static BlockDriver *bdrv_probe_all(const uint8_t *buf, int buf_size,\n\n                                   const char *filename)\n\n{\n\n    int score_max = 0, score;\n\n    BlockDriver *drv = NULL, *d;\n\n\n\n    QLIST_FOREACH(d, &bdrv_drivers, list) {\n\n        if (d->bdrv_probe) {\n\n            score = d->bdrv_probe(buf, buf_size, filename);\n\n            if (score > score_max) {\n\n                score_max = score;\n\n                drv = d;\n\n            }\n\n        }\n\n    }\n\n\n\n    return drv;\n\n}\n",
        "output": "1",
        "idx": 5882
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static KeyValue *copy_key_value(KeyValue *src)\n\n{\n\n    KeyValue *dst = g_new(KeyValue, 1);\n\n    memcpy(dst, src, sizeof(*src));\n\n\n\n\n\n\n    return dst;\n",
        "output": "1",
        "idx": 757
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void write_response(ESPState *s)\n{\n    uint32_t n;\n\n    trace_esp_write_response(s->status);\n\n    fifo8_reset(&s->fifo);\n    esp_fifo_push(s, s->status);\n    esp_fifo_push(s, 0);\n\n    if (s->dma) {\n        if (s->dma_memory_write) {\n            s->dma_memory_write(s->dma_opaque,\n                                (uint8_t *)fifo8_pop_buf(&s->fifo, 2, &n), 2);\n            s->rregs[ESP_RSTAT] = STAT_TC | STAT_ST;\n            s->rregs[ESP_RINTR] |= INTR_BS | INTR_FC;\n            s->rregs[ESP_RSEQ] = SEQ_CD;\n        } else {\n            s->pdma_cb = write_response_pdma_cb;\n            esp_raise_drq(s);\n            return;\n        }\n    } else {\n        s->ti_size = 2;\n        s->rregs[ESP_RFLAGS] = 2;\n    }\n    esp_raise_irq(s);\n}",
        "output": "1",
        "idx": 3971
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "parse_create_repinfo(struct msg_parse* msg, struct reply_info** rep,\n\tstruct regional* region)\n{\n\t*rep = construct_reply_info_base(region, msg->flags, msg->qdcount, 0, \n\t\t0, 0, msg->an_rrsets, msg->ns_rrsets, msg->ar_rrsets, \n\t\tmsg->rrset_count, sec_status_unchecked);\n\tif(!*rep)\n\t\treturn 0;\n\treturn 1;\n}",
        "output": "0",
        "idx": 1086
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_pxe_virtio_pci(void)\n\n{\n\n    test_pxe_one(\"-device virtio-net-pci,netdev=\" NETNAME, false);\n\n}\n",
        "output": "0",
        "idx": 4106
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rv30_decode_intra_types(RV34DecContext *r, GetBitContext *gb, int8_t *dst)\n\n{\n\n    int i, j, k;\n\n\n\n    for(i = 0; i < 4; i++, dst += r->intra_types_stride - 4){\n\n        for(j = 0; j < 4; j+= 2){\n\n            int code = svq3_get_ue_golomb(gb) << 1;\n\n            if(code >= 81*2){\n\n                av_log(r->s.avctx, AV_LOG_ERROR, \"Incorrect intra prediction code\\n\");\n\n                return -1;\n\n            }\n\n            for(k = 0; k < 2; k++){\n\n                int A = dst[-r->intra_types_stride] + 1;\n\n                int B = dst[-1] + 1;\n\n                *dst++ = rv30_itype_from_context[A * 90 + B * 9 + rv30_itype_code[code + k]];\n\n                if(dst[-1] == 9){\n\n                    av_log(r->s.avctx, AV_LOG_ERROR, \"Incorrect intra prediction mode\\n\");\n\n                    return -1;\n\n                }\n\n            }\n\n        }\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1889
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AVResampleContext *av_resample_init(int out_rate, int in_rate, int filter_size, int phase_shift, int linear, double cutoff){\n\n    AVResampleContext *c= av_mallocz(sizeof(AVResampleContext));\n\n    double factor= FFMIN(out_rate * cutoff / in_rate, 1.0);\n\n    int phase_count= 1<<phase_shift;\n\n    \n\n    c->phase_shift= phase_shift;\n\n    c->phase_mask= phase_count-1;\n\n    c->linear= linear;\n\n\n\n    c->filter_length= FFMAX(ceil(filter_size/factor), 1);\n\n    c->filter_bank= av_mallocz(c->filter_length*(phase_count+1)*sizeof(FELEM));\n\n    av_build_filter(c->filter_bank, factor, c->filter_length, phase_count, 1<<FILTER_SHIFT, 1);\n\n    memcpy(&c->filter_bank[c->filter_length*phase_count+1], c->filter_bank, (c->filter_length-1)*sizeof(FELEM));\n\n    c->filter_bank[c->filter_length*phase_count]= c->filter_bank[c->filter_length - 1];\n\n\n\n    c->src_incr= out_rate;\n\n    c->ideal_dst_incr= c->dst_incr= in_rate * phase_count;\n\n    c->index= -phase_count*((c->filter_length-1)/2);\n\n\n\n    return c;\n\n}\n",
        "output": "0",
        "idx": 488
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void hci_le_phy_update_evt(struct hci_dev *hdev, struct sk_buff *skb)\n{\n\tstruct hci_ev_le_phy_update_complete *ev = (void *) skb->data;\n\tstruct hci_conn *conn;\n\n\tBT_DBG(\"%s status 0x%2.2x\", hdev->name, ev->status);\n\n\tif (ev->status)\n\t\treturn;\n\n\thci_dev_lock(hdev);\n\n\tconn = hci_conn_hash_lookup_handle(hdev, __le16_to_cpu(ev->handle));\n\tif (!conn)\n\t\tgoto unlock;\n\n\tconn->le_tx_phy = ev->tx_phy;\n\tconn->le_rx_phy = ev->rx_phy;\n\nunlock:\n\thci_dev_unlock(hdev);\n}",
        "output": "0",
        "idx": 3996
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mailimf_minus_parse(const char * message, size_t length,\n\t\t\t       size_t * indx)\n{\n  return mailimf_unstrict_char_parse(message, length, indx, '-');\n}",
        "output": "0",
        "idx": 3174
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void bmdma_addr_write(void *opaque, target_phys_addr_t addr,\n\n                             uint64_t data, unsigned width)\n\n{\n\n    BMDMAState *bm = opaque;\n\n    int shift = addr * 8;\n\n    uint32_t mask = (1ULL << (width * 8)) - 1;\n\n\n\n#ifdef DEBUG_IDE\n\n    printf(\"%s: 0x%08x\\n\", __func__, (unsigned)data);\n\n#endif\n\n    bm->addr &= ~(mask << shift);\n\n    bm->addr |= ((data & mask) << shift) & ~3;\n\n}\n",
        "output": "0",
        "idx": 321
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool vmx_interrupt_blocked(struct kvm_vcpu *vcpu)\n{\n\tif (is_guest_mode(vcpu) && nested_exit_on_intr(vcpu))\n\t\treturn false;\n\n\treturn !(vmx_get_rflags(vcpu) & X86_EFLAGS_IF) ||\n\t       (vmcs_read32(GUEST_INTERRUPTIBILITY_INFO) &\n\t\t(GUEST_INTR_STATE_STI | GUEST_INTR_STATE_MOV_SS));\n}",
        "output": "0",
        "idx": 2652
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static u64 sched_slice(struct cfs_rq *cfs_rq, struct sched_entity *se)\n{\n\tu64 slice = __sched_period(cfs_rq->nr_running);\n\n\tfor_each_sched_entity(se) {\n\t\tcfs_rq = cfs_rq_of(se);\n\n\t\tslice *= se->load.weight;\n\t\tdo_div(slice, cfs_rq->load.weight);\n\t}\n\n\n\treturn slice;\n}",
        "output": "1",
        "idx": 2511
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "enumerator_next_async (GSocketClientAsyncConnectData *data)\n{\n  /* We need to cleanup the state */\n  g_clear_object (&data->socket);\n  g_clear_object (&data->proxy_addr);\n  g_clear_object (&data->connection);\n\n  g_socket_client_emit_event (data->client, G_SOCKET_CLIENT_RESOLVING, data->connectable, NULL);\n  g_socket_address_enumerator_next_async (data->enumerator,\n\t\t\t\t\t  g_task_get_cancellable (data->task),\n\t\t\t\t\t  g_socket_client_enumerator_callback,\n\t\t\t\t\t  data);\n}",
        "output": "1",
        "idx": 1866
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "string_strncasecmp_range (const char *string1, const char *string2, int max,\n                          int range)\n{\n    int count, diff;\n\n    if (!string1 || !string2)\n        return (string1) ? 1 : ((string2) ? -1 : 0);\n\n    count = 0;\n    while ((count < max) && string1[0] && string2[0])\n    {\n        diff = utf8_charcasecmp_range (string1, string2, range);\n        if (diff != 0)\n            return diff;\n\n        string1 = utf8_next_char (string1);\n        string2 = utf8_next_char (string2);\n        count++;\n    }\n\n    if (count >= max)\n        return 0;\n    else\n        return (string1[0]) ? 1 : ((string2[0]) ? -1 : 0);\n}",
        "output": "0",
        "idx": 4913
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void filter_mirror_setup(NetFilterState *nf, Error **errp)\n{\n    MirrorState *s = FILTER_MIRROR(nf);\n    Chardev *chr;\n    chr = qemu_chr_find(s->outdev);\n    if (chr == NULL) {\n        error_set(errp, ERROR_CLASS_DEVICE_NOT_FOUND,\n                  \"Device '%s' not found\", s->outdev);\n    qemu_chr_fe_init(&s->chr_out, chr, errp);",
        "output": "1",
        "idx": 258
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(SingleAllowMissingInOrListTest, MissingIssToken) {\n  EXPECT_CALL(mock_cb_, onComplete(Status::Ok));\n  auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, ES256WithoutIssToken}};\n  context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);\n  verifier_->verify(context_);\n  EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kExampleHeader));\n}",
        "output": "1",
        "idx": 6008
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool nvic_user_access_ok(NVICState *s, hwaddr offset)\n\n{\n\n    /* Return true if unprivileged access to this register is permitted. */\n\n    switch (offset) {\n\n    case 0xf00: /* STIR: accessible only if CCR.USERSETMPEND permits */\n\n        return s->cpu->env.v7m.ccr & R_V7M_CCR_USERSETMPEND_MASK;\n\n    default:\n\n        /* All other user accesses cause a BusFault unconditionally */\n\n        return false;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1471
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(realpath)\n{\n\tchar *filename;\n\tint filename_len;\n\tchar resolved_path_buff[MAXPATHLEN];\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &filename, &filename_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (VCWD_REALPATH(filename, resolved_path_buff)) {\n\t\tif (PG(safe_mode) && (!php_checkuid(resolved_path_buff, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {\n\t\t\tRETURN_FALSE;\n\t\t}\n\n\t\tif (php_check_open_basedir(resolved_path_buff TSRMLS_CC)) {\n\t\t\tRETURN_FALSE;\n\t\t}\n\n#ifdef ZTS\n\t\tif (VCWD_ACCESS(resolved_path_buff, F_OK)) {\n\t\t\tRETURN_FALSE;\n\t\t}\n#endif\n\t\tRETURN_STRING(resolved_path_buff, 1);\n\t} else {\n\t\tRETURN_FALSE;\n\t}\n}",
        "output": "1",
        "idx": 1270
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void __set_breakpoint(struct arch_hw_breakpoint *brk)\n{\n\tmemcpy(this_cpu_ptr(&current_brk), brk, sizeof(*brk));\n\n\tif (cpu_has_feature(CPU_FTR_DAWR))\n\t\tset_dawr(brk);\n\telse\n\t\tset_dabr(brk);\n}",
        "output": "0",
        "idx": 433
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "init_pair(NCURSES_COLOR_T pair, NCURSES_COLOR_T f, NCURSES_COLOR_T b)\n{\n    return NCURSES_SP_NAME(init_pair) (CURRENT_SCREEN, pair, f, b);\n}",
        "output": "0",
        "idx": 178
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "shutdown_mib(void)\n{\n    unload_all_mibs();\n    if (tree_top) {\n        if (tree_top->label)\n            SNMP_FREE(tree_top->label);\n        SNMP_FREE(tree_top);\n    }\n    tree_head = NULL;\n    Mib = NULL;\n    if (_mibindexes) {\n        int i;\n        for (i = 0; i < _mibindex; ++i)\n            SNMP_FREE(_mibindexes[i]);\n        free(_mibindexes);\n        _mibindex = 0;\n        _mibindex_max = 0;\n        _mibindexes = NULL;\n    }\n    if (Prefix != NULL && Prefix != &Standard_Prefix[0])\n        SNMP_FREE(Prefix);\n    if (Prefix)\n        Prefix = NULL;\n    SNMP_FREE(confmibs);\n    SNMP_FREE(confmibdir);\n}",
        "output": "1",
        "idx": 3276
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void php_cli_server_poller_add(php_cli_server_poller *poller, int mode, int fd) /* {{{ */\n{\n\tif (mode & POLLIN) {\n\t\tPHP_SAFE_FD_SET(fd, &poller->rfds);\n\t}\n\tif (mode & POLLOUT) {\n\t\tPHP_SAFE_FD_SET(fd, &poller->wfds);\n\t}\n\tif (fd > poller->max_fd) {\n\t\tpoller->max_fd = fd;\n\t}\n} /* }}} */",
        "output": "0",
        "idx": 3099
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void hostap_setup_dev(struct net_device *dev, local_info_t *local,\n\t\t      int type)\n{\n\tstruct hostap_interface *iface;\n\n\tiface = netdev_priv(dev);\n\tether_setup(dev);\n\n\t/* kernel callbacks */\n\tif (iface) {\n\t\t/* Currently, we point to the proper spy_data only on\n\t\t * the main_dev. This could be fixed. Jean II */\n\t\tiface->wireless_data.spy_data = &iface->spy_data;\n\t\tdev->wireless_data = &iface->wireless_data;\n\t}\n\tdev->wireless_handlers = &hostap_iw_handler_def;\n\tdev->watchdog_timeo = TX_TIMEOUT;\n\n\tswitch(type) {\n\tcase HOSTAP_INTERFACE_AP:\n\t\tdev->tx_queue_len = 0;\t/* use main radio device queue */\n\t\tdev->netdev_ops = &hostap_mgmt_netdev_ops;\n\t\tdev->type = ARPHRD_IEEE80211;\n\t\tdev->header_ops = &hostap_80211_ops;\n\t\tbreak;\n\tcase HOSTAP_INTERFACE_MASTER:\n\t\tdev->netdev_ops = &hostap_master_ops;\n\t\tbreak;\n\tdefault:\n\t\tdev->tx_queue_len = 0;\t/* use main radio device queue */\n\t\tdev->netdev_ops = &hostap_netdev_ops;\n\t}\n\n\tdev->mtu = local->mtu;\n\n\n\tSET_ETHTOOL_OPS(dev, &prism2_ethtool_ops);\n\n}",
        "output": "1",
        "idx": 3667
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cunary(JF, js_Ast *exp, int opcode)\n{\n\tcexp(J, F, exp->a);\n\temitline(J, F, exp);\n\temit(J, F, opcode);\n}",
        "output": "0",
        "idx": 5560
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)\n{\n\tpmd_t pmdval = pmd_read_atomic(pmd);\n\t/*\n\t * The barrier will stabilize the pmdval in a register or on\n\t * the stack so that it will stop changing under the code.\n\t *\n\t * When CONFIG_TRANSPARENT_HUGEPAGE=y on x86 32bit PAE,\n\t * pmd_read_atomic is allowed to return a not atomic pmdval\n\t * (for example pointing to an hugepage that has never been\n\t * mapped in the pmd). The below checks will only care about\n\t * the low part of the pmd with 32bit PAE x86 anyway, with the\n\t * exception of pmd_none(). So the important thing is that if\n\t * the low part of the pmd is found null, the high part will\n\t * be also null or the pmd_none() check below would be\n\t * confused.\n\t */\n#ifdef CONFIG_TRANSPARENT_HUGEPAGE\n\tbarrier();\n#endif\n\tif (pmd_none(pmdval) || pmd_trans_huge(pmdval))\n\t\treturn 1;\n\tif (unlikely(pmd_bad(pmdval))) {\n\t\tpmd_clear_bad(pmd);\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
        "output": "0",
        "idx": 2885
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_rm_free_rmstream (RMStream *rms)\n\n{\n\n    av_free(rms->videobuf);\n\n    av_free(rms->audiobuf);\n\n}\n",
        "output": "1",
        "idx": 2145
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "CompositeDeepScanLine::setCompositing(DeepCompositing* c)\n{\n  _Data->_comp=c;\n}",
        "output": "0",
        "idx": 2152
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "asmlinkage void do_notify_resume(struct pt_regs *regs, struct thread_info *ti)\n{\n\tint syscall = 0;\n\n\tif ((sysreg_read(SR) & MODE_MASK) == MODE_SUPERVISOR)\n\t\tsyscall = 1;\n\n\tif (ti->flags & (_TIF_SIGPENDING | _TIF_RESTORE_SIGMASK))\n\t\tdo_signal(regs, &current->blocked, syscall);\n\n\tif (ti->flags & _TIF_NOTIFY_RESUME) {\n\t\tclear_thread_flag(TIF_NOTIFY_RESUME);\n\t\ttracehook_notify_resume(regs);\n\t}\n}",
        "output": "1",
        "idx": 4711
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int wc_ecc_make_key(WC_RNG* rng, int keysize, ecc_key* key)\n{\n    return wc_ecc_make_key_ex(rng, keysize, key, ECC_CURVE_DEF);\n}",
        "output": "0",
        "idx": 4067
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void xilinx_enet_init(Object *obj)\n\n{\n\n    XilinxAXIEnet *s = XILINX_AXI_ENET(obj);\n\n    SysBusDevice *sbd = SYS_BUS_DEVICE(obj);\n\n    Error *errp = NULL;\n\n\n\n    object_property_add_link(obj, \"axistream-connected\", TYPE_STREAM_SLAVE,\n\n                             (Object **) &s->tx_dev, &errp);\n\n    assert_no_error(errp);\n\n\n\n    object_initialize(&s->rx_data_dev, TYPE_XILINX_AXI_ENET_DATA_STREAM);\n\n    object_property_add_child(OBJECT(s), \"axistream-connected-target\",\n\n                              (Object *)&s->rx_data_dev, &errp);\n\n    assert_no_error(errp);\n\n\n\n    sysbus_init_irq(sbd, &s->irq);\n\n\n\n    memory_region_init_io(&s->iomem, &enet_ops, s, \"enet\", 0x40000);\n\n    sysbus_init_mmio(sbd, &s->iomem);\n\n}\n",
        "output": "0",
        "idx": 6130
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cursor_sleep(void)\n{\n    cursor_is_asleep = TRUE;\n    cursor_off();\n}",
        "output": "0",
        "idx": 3862
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "extern \"C\" void free_wrapper(struct _reent *r, void *ptr, void *caller)\n{\n#ifdef MBED_MEM_TRACING_ENABLED\n    mbed_mem_trace_lock();\n#endif\n#ifdef MBED_HEAP_STATS_ENABLED\n    malloc_stats_mutex->lock();\n    alloc_info_t *alloc_info = NULL;\n    if (ptr != NULL) {\n        alloc_info = ((alloc_info_t *)ptr) - 1;\n        if (MBED_HEAP_STATS_SIGNATURE == alloc_info->signature) {\n            size_t user_size = alloc_info->size;\n            size_t alloc_size = MALLOC_HEAP_TOTAL_SIZE(MALLOC_HEADER_PTR(alloc_info));\n            alloc_info->signature = 0x0;\n            heap_stats.current_size -= user_size;\n            heap_stats.alloc_cnt -= 1;\n            heap_stats.overhead_size -= (alloc_size - user_size);\n            __real__free_r(r, (void *)alloc_info);\n        } else {\n            __real__free_r(r, ptr);\n        }\n    }\n\n    malloc_stats_mutex->unlock();\n#else // #ifdef MBED_HEAP_STATS_ENABLED\n    __real__free_r(r, ptr);\n#endif // #ifdef MBED_HEAP_STATS_ENABLED\n#ifdef MBED_MEM_TRACING_ENABLED\n    mbed_mem_trace_free(ptr, caller);\n    mbed_mem_trace_unlock();\n#endif // #ifdef MBED_MEM_TRACING_ENABLED\n}",
        "output": "0",
        "idx": 405
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool bdrv_drain_recurse(BlockDriverState *bs, bool begin)\n\n{\n\n    BdrvChild *child, *tmp;\n\n    bool waited;\n\n\n\n    /* Ensure any pending metadata writes are submitted to bs->file.  */\n\n    bdrv_drain_invoke(bs, begin);\n\n\n\n    /* Wait for drained requests to finish */\n\n    waited = BDRV_POLL_WHILE(bs, atomic_read(&bs->in_flight) > 0);\n\n\n\n    QLIST_FOREACH_SAFE(child, &bs->children, next, tmp) {\n\n        BlockDriverState *bs = child->bs;\n\n        bool in_main_loop =\n\n            qemu_get_current_aio_context() == qemu_get_aio_context();\n\n        assert(bs->refcnt > 0);\n\n        if (in_main_loop) {\n\n            /* In case the recursive bdrv_drain_recurse processes a\n\n             * block_job_defer_to_main_loop BH and modifies the graph,\n\n             * let's hold a reference to bs until we are done.\n\n             *\n\n             * IOThread doesn't have such a BH, and it is not safe to call\n\n             * bdrv_unref without BQL, so skip doing it there.\n\n             */\n\n            bdrv_ref(bs);\n\n        }\n\n        waited |= bdrv_drain_recurse(bs, begin);\n\n        if (in_main_loop) {\n\n            bdrv_unref(bs);\n\n        }\n\n    }\n\n\n\n    return waited;\n\n}\n",
        "output": "1",
        "idx": 5712
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void atusb_disconnect(struct usb_interface *interface)\n{\n\tstruct atusb *atusb = usb_get_intfdata(interface);\n\n\tdev_dbg(&atusb->usb_dev->dev, \"%s\\n\", __func__);\n\n\tatusb->shutdown = 1;\n\tcancel_delayed_work_sync(&atusb->work);\n\n\tusb_kill_anchored_urbs(&atusb->rx_urbs);\n\tatusb_free_urbs(atusb);\n\tusb_kill_urb(atusb->tx_urb);\n\tusb_free_urb(atusb->tx_urb);\n\n\tieee802154_unregister_hw(atusb->hw);\n\n\tieee802154_free_hw(atusb->hw);\n\n\tusb_set_intfdata(interface, NULL);\n\tusb_put_dev(atusb->usb_dev);\n\n\tpr_debug(\"%s done\\n\", __func__);\n}",
        "output": "1",
        "idx": 5687
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init nfs4flexfilelayout_init(void)\n{\n\tprintk(KERN_INFO \"%s: NFSv4 Flexfile Layout Driver Registering...\\n\",\n\t       __func__);\n\treturn pnfs_register_layoutdriver(&flexfilelayout_type);\n}",
        "output": "0",
        "idx": 3793
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int clone_submodule(const char *path, const char *gitdir, const char *url,\n\t\t\t   const char *depth, struct string_list *reference,\n\t\t\t   int quiet, int progress)\n{\n\tstruct child_process cp = CHILD_PROCESS_INIT;\n\n\targv_array_push(&cp.args, \"clone\");\n\targv_array_push(&cp.args, \"--no-checkout\");\n\tif (quiet)\n\t\targv_array_push(&cp.args, \"--quiet\");\n\tif (progress)\n\t\targv_array_push(&cp.args, \"--progress\");\n\tif (depth && *depth)\n\t\targv_array_pushl(&cp.args, \"--depth\", depth, NULL);\n\tif (reference->nr) {\n\t\tstruct string_list_item *item;\n\t\tfor_each_string_list_item(item, reference)\n\t\t\targv_array_pushl(&cp.args, \"--reference\",\n\t\t\t\t\t item->string, NULL);\n\t}\n\tif (gitdir && *gitdir)\n\t\targv_array_pushl(&cp.args, \"--separate-git-dir\", gitdir, NULL);\n\n\targv_array_push(&cp.args, url);\n\targv_array_push(&cp.args, path);\n\n\tcp.git_cmd = 1;\n\tprepare_submodule_repo_env(&cp.env_array);\n\tcp.no_stdin = 1;\n\n\treturn run_command(&cp);\n}",
        "output": "1",
        "idx": 4861
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t lm4549_write_samples(lm4549_state *s, uint32_t left, uint32_t right)\n\n{\n\n    /* The left and right samples are in 20-bit resolution.\n\n       The LM4549 has 18-bit resolution and only uses the bits [19:2].\n\n       This model supports 16-bit playback.\n\n    */\n\n\n\n    if (s->buffer_level >= LM4549_BUFFER_SIZE) {\n\n        DPRINTF(\"write_sample Buffer full\\n\");\n\n        return 0;\n\n    }\n\n\n\n    /* Store 16-bit samples in the buffer */\n\n    s->buffer[s->buffer_level++] = (left >> 4);\n\n    s->buffer[s->buffer_level++] = (right >> 4);\n\n\n\n    if (s->buffer_level == LM4549_BUFFER_SIZE) {\n\n        /* Trigger the transfer of the buffer to the audio host */\n\n        lm4549_audio_transfer(s);\n\n    }\n\n\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 4268
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\n      static double mp_avg(_cimg_math_parser& mp) {\n        const unsigned int i_end = (unsigned int)mp.opcode[2];\n        double val = _mp_arg(3);\n        for (unsigned int i = 4; i<i_end; ++i) val+=_mp_arg(i);\n        return val/(i_end - 3);",
        "output": "0",
        "idx": 1249
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sg_build_iovec(sg_io_hdr_t __user *sgio, void __user *dxferp, u16 iovec_count)\n{\n\tsg_iovec_t __user *iov = (sg_iovec_t __user *) (sgio + 1);\n\tsg_iovec32_t __user *iov32 = dxferp;\n\tint i;\n\n\tfor (i = 0; i < iovec_count; i++) {\n\t\tu32 base, len;\n\n\t\tif (get_user(base, &iov32[i].iov_base) ||\n\t\t    get_user(len, &iov32[i].iov_len) ||\n\t\t    put_user(compat_ptr(base), &iov[i].iov_base) ||\n\t\t    put_user(len, &iov[i].iov_len))\n\t\t\treturn -EFAULT;\n\t}\n\n\tif (put_user(iov, &sgio->dxferp))\n\t\treturn -EFAULT;\n\treturn 0;\n}",
        "output": "0",
        "idx": 2409
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void apic_reset_irq_delivered(void)\n\n{\n\n    trace_apic_reset_irq_delivered(apic_irq_delivered);\n\n\n\n    apic_irq_delivered = 0;\n\n}\n",
        "output": "1",
        "idx": 2057
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "X509::X509(const char* i, size_t iSz, const char* s, size_t sSz,\n           const char* b, int bSz, const char* a, int aSz)\n    : issuer_(i, iSz), subject_(s, sSz),\n      beforeDate_(b, bSz), afterDate_(a, aSz)\n{}",
        "output": "1",
        "idx": 2736
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "flatpak_dir_lookup_cached_summary (FlatpakDir *self,\n                                   GBytes    **bytes_out,\n                                   GBytes    **bytes_sig_out,\n                                   const char *name,\n                                   const char *url)\n{\n  CachedSummary *summary;\n  gboolean res = FALSE;\n\n  G_LOCK (cache);\n\n  if (self->summary_cache == NULL)\n    self->summary_cache = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, (GDestroyNotify) cached_summary_free);\n\n  summary = g_hash_table_lookup (self->summary_cache, name);\n  if (summary)\n    {\n      guint64 now = g_get_monotonic_time ();\n      if ((now - summary->time) < (1000 * 1000 * (SUMMARY_CACHE_TIMEOUT_SEC)) &&\n          strcmp (url, summary->url) == 0)\n        {\n          /* g_debug (\"Using cached summary for remote %s\", name); */\n          *bytes_out = g_bytes_ref (summary->bytes);\n          if (bytes_sig_out)\n            {\n              if (summary->bytes_sig)\n                *bytes_sig_out = g_bytes_ref (summary->bytes_sig);\n              else\n                *bytes_sig_out = NULL;\n            }\n          res = TRUE;\n        }\n    }\n\n  G_UNLOCK (cache);\n\n  return res;\n}",
        "output": "0",
        "idx": 104
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "make_url (char **url, const char *dn, const char *filter)\n{\n  gpg_error_t err;\n  char *u_dn, *u_filter;\n  char const attrs[] = (USERCERTIFICATE \",\"\n/*                         USERSMIMECERTIFICATE \",\" */\n                        CACERTIFICATE \",\"\n                        X509CACERT );\n\n  *url = NULL;\n\n  u_dn = escape4url (dn);\n  if (!u_dn)\n      return gpg_error_from_errno (errno);\n\n  u_filter = escape4url (filter);\n  if (!u_filter)\n    {\n      err = gpg_error_from_errno (errno);\n      xfree (u_dn);\n      return err;\n    }\n  *url = malloc ( 8 + strlen (u_dn)\n                 + 1 + strlen (attrs)\n                 + 5 + strlen (u_filter) + 1 );\n  if (!*url)\n    {\n      err = gpg_error_from_errno (errno);\n      xfree (u_dn);\n      xfree (u_filter);\n      return err;\n    }\n\n  stpcpy (stpcpy (stpcpy (stpcpy (stpcpy (stpcpy (*url, \"ldap:///\"),\n                                          u_dn),\n                                  \"?\"),\n                          attrs),\n                  \"?sub?\"),\n          u_filter);\n  xfree (u_dn);\n  xfree (u_filter);\n  return 0;\n}",
        "output": "0",
        "idx": 2913
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_peek_buffer(QEMUFile *f, uint8_t *buf, int size, size_t offset)\n\n{\n\n    int pending;\n\n    int index;\n\n\n\n    assert(!qemu_file_is_writable(f));\n\n\n\n    index = f->buf_index + offset;\n\n    pending = f->buf_size - index;\n\n    if (pending < size) {\n\n        qemu_fill_buffer(f);\n\n        index = f->buf_index + offset;\n\n        pending = f->buf_size - index;\n\n    }\n\n\n\n    if (pending <= 0) {\n\n        return 0;\n\n    }\n\n    if (size > pending) {\n\n        size = pending;\n\n    }\n\n\n\n    memcpy(buf, f->buf + index, size);\n\n    return size;\n\n}\n",
        "output": "1",
        "idx": 3994
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int htab_save_setup(QEMUFile *f, void *opaque)\n\n{\n\n    sPAPRMachineState *spapr = opaque;\n\n\n\n    /* \"Iteration\" header */\n\n    qemu_put_be32(f, spapr->htab_shift);\n\n\n\n    if (spapr->htab) {\n\n        spapr->htab_save_index = 0;\n\n        spapr->htab_first_pass = true;\n\n    } else {\n\n        assert(kvm_enabled());\n\n\n\n        spapr->htab_fd = kvmppc_get_htab_fd(false);\n\n        spapr->htab_fd_stale = false;\n\n        if (spapr->htab_fd < 0) {\n\n            fprintf(stderr, \"Unable to open fd for reading hash table from KVM: %s\\n\",\n\n                    strerror(errno));\n\n            return -1;\n\n        }\n\n    }\n\n\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2256
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ossl_asn1_class2sym(int tc)\n{\n    if((tc & V_ASN1_PRIVATE) == V_ASN1_PRIVATE)\n\treturn sym_PRIVATE;\n    else if((tc & V_ASN1_CONTEXT_SPECIFIC) == V_ASN1_CONTEXT_SPECIFIC)\n\treturn sym_CONTEXT_SPECIFIC;\n    else if((tc & V_ASN1_APPLICATION) == V_ASN1_APPLICATION)\n\treturn sym_APPLICATION;\n    else\n\treturn sym_UNIVERSAL;\n}",
        "output": "0",
        "idx": 1815
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dec_store(DisasContext *dc)\n\n{\n\n    TCGv t, *addr;\n\n    unsigned int size;\n\n\n\n    size = 1 << (dc->opcode & 3);\n\n\n\n    if (size > 4 && (dc->tb_flags & MSR_EE_FLAG)\n\n          && !(dc->env->pvr.regs[2] & PVR2_ILL_OPCODE_EXC_MASK)) {\n\n        tcg_gen_movi_tl(cpu_SR[SR_ESR], ESR_EC_ILLEGAL_OP);\n\n        t_gen_raise_exception(dc, EXCP_HW_EXCP);\n\n        return;\n\n    }\n\n\n\n    LOG_DIS(\"s%d%s\\n\", size, dc->type_b ? \"i\" : \"\");\n\n    t_sync_flags(dc);\n\n    /* If we get a fault on a dslot, the jmpstate better be in sync.  */\n\n    sync_jmpstate(dc);\n\n    addr = compute_ldst_addr(dc, &t);\n\n\n\n    /* Verify alignment if needed.  */\n\n    if ((dc->env->pvr.regs[2] & PVR2_UNALIGNED_EXC_MASK) && size > 1) {\n\n        gen_helper_memalign(*addr, tcg_const_tl(dc->rd),\n\n                            tcg_const_tl(1), tcg_const_tl(size - 1));\n\n    }\n\n\n\n    gen_store(dc, *addr, cpu_R[dc->rd], size);\n\n    if (addr == &t)\n\n        tcg_temp_free(t);\n\n}\n",
        "output": "0",
        "idx": 3946
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ast_for_arg(struct compiling *c, const node *n)\n{\n    identifier name;\n    expr_ty annotation = NULL;\n    node *ch;\n    arg_ty ret;\n\n    assert(TYPE(n) == tfpdef || TYPE(n) == vfpdef);\n    ch = CHILD(n, 0);\n    name = NEW_IDENTIFIER(ch);\n    if (!name)\n        return NULL;\n    if (forbidden_name(c, name, ch, 0))\n        return NULL;\n\n    if (NCH(n) == 3 && TYPE(CHILD(n, 1)) == COLON) {\n        annotation = ast_for_expr(c, CHILD(n, 2));\n        if (!annotation)\n            return NULL;\n    }\n\n    ret = arg(name, annotation, LINENO(n), n->n_col_offset,\n              n->n_end_lineno, n->n_end_col_offset, c->c_arena);\n    if (!ret)\n        return NULL;\n    return ret;\n}",
        "output": "1",
        "idx": 794
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void check_no_speaker_on_headset(struct snd_kcontrol *kctl,\n\t\t\t\t\tstruct snd_card *card)\n{\n\tconst char *names_to_check[] = {\n\t\t\"Headset\", \"headset\", \"Headphone\", \"headphone\", NULL};\n\tconst char **s;\n\tbool found = false;\n\n\tif (strcmp(\"Speaker\", kctl->id.name))\n\t\treturn;\n\n\tfor (s = names_to_check; *s; s++)\n\t\tif (strstr(card->shortname, *s)) {\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\n\tif (!found)\n\t\treturn;\n\n\tstrlcpy(kctl->id.name, \"Headphone\", sizeof(kctl->id.name));\n}",
        "output": "0",
        "idx": 1787
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vhost_kernel_memslots_limit(struct vhost_dev *dev)\n\n{\n\n    int limit = 64;\n\n    char *s;\n\n\n\n    if (g_file_get_contents(\"/sys/module/vhost/parameters/max_mem_regions\",\n\n                            &s, NULL, NULL)) {\n\n        uint64_t val = g_ascii_strtoull(s, NULL, 10);\n\n        if (!((val == G_MAXUINT64 || !val) && errno)) {\n\n\n            return val;\n\n        }\n\n        error_report(\"ignoring invalid max_mem_regions value in vhost module:\"\n\n                     \" %s\", s);\n\n    }\n\n\n    return limit;\n\n}",
        "output": "1",
        "idx": 2063
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ga_init2(garray_T *gap, int itemsize, int growsize)\n{\n    ga_init(gap);\n    gap->ga_itemsize = itemsize;\n    gap->ga_growsize = growsize;\n}",
        "output": "1",
        "idx": 3557
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "e1000e_ring_empty(E1000ECore *core, const E1000E_RingInfo *r)\n\n{\n\n    return core->mac[r->dh] == core->mac[r->dt];\n\n}\n",
        "output": "1",
        "idx": 787
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct dst_entry *inet6_csk_route_req(const struct sock *sk,\n\t\t\t\t      struct flowi6 *fl6,\n\t\t\t\t      const struct request_sock *req,\n\t\t\t\t      u8 proto)\n{\n\tstruct inet_request_sock *ireq = inet_rsk(req);\n\tconst struct ipv6_pinfo *np = inet6_sk(sk);\n\tstruct in6_addr *final_p, final;\n\tstruct dst_entry *dst;\n\n\tmemset(fl6, 0, sizeof(*fl6));\n\tfl6->flowi6_proto = proto;\n\tfl6->daddr = ireq->ir_v6_rmt_addr;\n\trcu_read_lock();\n\tfinal_p = fl6_update_dst(fl6, rcu_dereference(np->opt), &final);\n\trcu_read_unlock();\n\tfl6->saddr = ireq->ir_v6_loc_addr;\n\tfl6->flowi6_oif = ireq->ir_iif;\n\tfl6->flowi6_mark = ireq->ir_mark;\n\tfl6->fl6_dport = ireq->ir_rmt_port;\n\tfl6->fl6_sport = htons(ireq->ir_num);\n\tsecurity_req_classify_flow(req, flowi6_to_flowi(fl6));\n\n\tdst = ip6_dst_lookup_flow(sk, fl6, final_p);\n\tif (IS_ERR(dst))\n\t\treturn NULL;\n\n\treturn dst;\n}",
        "output": "0",
        "idx": 4992
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "napi_status napi_set_named_property(napi_env env,\n                                    napi_value object,\n                                    const char* utf8name,\n                                    napi_value value) {\n  NAPI_PREAMBLE(env);\n  CHECK_ARG(env, value);\n\n  v8::Local<v8::Context> context = env->context();\n  v8::Local<v8::Object> obj;\n\n  CHECK_TO_OBJECT(env, context, obj, object);\n\n  v8::Local<v8::Name> key;\n  CHECK_NEW_FROM_UTF8(env, key, utf8name);\n\n  v8::Local<v8::Value> val = v8impl::V8LocalValueFromJsValue(value);\n\n  v8::Maybe<bool> set_maybe = obj->Set(context, key, val);\n\n  RETURN_STATUS_IF_FALSE(env, set_maybe.FromMaybe(false), napi_generic_failure);\n  return GET_RETURN_STATUS(env);\n}",
        "output": "0",
        "idx": 86
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int resize_runtime_buffer(struct snd_rawmidi_runtime *runtime,\n\t\t\t\t struct snd_rawmidi_params *params,\n\t\t\t\t bool is_input)\n{\n\tchar *newbuf, *oldbuf;\n\n\tif (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L)\n\t\treturn -EINVAL;\n\tif (params->avail_min < 1 || params->avail_min > params->buffer_size)\n\t\treturn -EINVAL;\n\tif (params->buffer_size != runtime->buffer_size) {\n\t\tnewbuf = kvzalloc(params->buffer_size, GFP_KERNEL);\n\t\tif (!newbuf)\n\t\t\treturn -ENOMEM;\n\t\tspin_lock_irq(&runtime->lock);\n\t\toldbuf = runtime->buffer;\n\t\truntime->buffer = newbuf;\n\t\truntime->buffer_size = params->buffer_size;\n\t\t__reset_runtime_ptrs(runtime, is_input);\n\t\tspin_unlock_irq(&runtime->lock);\n\t\tkvfree(oldbuf);\n\t}\n\truntime->avail_min = params->avail_min;\n\treturn 0;\n}",
        "output": "1",
        "idx": 5842
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void block_job_completed(BlockJob *job, int ret)\n\n{\n\n    BlockDriverState *bs = job->bs;\n\n\n\n    assert(bs->job == job);\n\n    job->cb(job->opaque, ret);\n\n    bs->job = NULL;\n\n    g_free(job);\n\n    bdrv_set_in_use(bs, 0);\n\n}\n",
        "output": "0",
        "idx": 1992
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int net_slirp_redir(const char *redir_str)\n\n{\n\n    struct slirp_config_str *config;\n\n\n\n    if (QTAILQ_EMPTY(&slirp_stacks)) {\n\n        config = g_malloc(sizeof(*config));\n\n        pstrcpy(config->str, sizeof(config->str), redir_str);\n\n        config->flags = SLIRP_CFG_HOSTFWD | SLIRP_CFG_LEGACY;\n\n        config->next = slirp_configs;\n\n        slirp_configs = config;\n\n        return 0;\n\n    }\n\n\n\n    return slirp_hostfwd(QTAILQ_FIRST(&slirp_stacks), redir_str, 1);\n\n}\n",
        "output": "1",
        "idx": 3772
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_vcpu_ioctl_get_lapic(struct kvm_vcpu *vcpu,\n\t\t\t\t    struct kvm_lapic_state *s)\n{\n\tstatic_call_cond(kvm_x86_sync_pir_to_irr)(vcpu);\n\n\treturn kvm_apic_get_state(vcpu, s);\n}",
        "output": "0",
        "idx": 5741
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int init_pitch_v1(struct snd_usb_audio *chip, int iface,\n\t\t\t struct usb_host_interface *alts,\n\t\t\t struct audioformat *fmt)\n{\n\tstruct usb_device *dev = chip->dev;\n\tunsigned int ep;\n\tunsigned char data[1];\n\tint err;\n\n\tep = get_endpoint(alts, 0)->bEndpointAddress;\n\n\tdata[0] = 1;\n\tif ((err = snd_usb_ctl_msg(dev, usb_sndctrlpipe(dev, 0), UAC_SET_CUR,\n\t\t\t\t   USB_TYPE_CLASS|USB_RECIP_ENDPOINT|USB_DIR_OUT,\n\t\t\t\t   UAC_EP_CS_ATTR_PITCH_CONTROL << 8, ep,\n\t\t\t\t   data, sizeof(data))) < 0) {\n\t\tusb_audio_err(chip, \"%d:%d: cannot set enable PITCH\\n\",\n\t\t\t      iface, ep);\n\t\treturn err;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 4965
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(SplFileInfo, getFileInfo)\n{\n\tspl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\tzend_class_entry *ce = intern->info_class;\n\tzend_error_handling error_handling;\n\t\n\tzend_replace_error_handling(EH_THROW, spl_ce_UnexpectedValueException, &error_handling TSRMLS_CC);\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|C\", &ce) == SUCCESS) {\n\t\tspl_filesystem_object_create_type(ht, intern, SPL_FS_INFO, ce, return_value TSRMLS_CC);\n\t}\n\n\tzend_restore_error_handling(&error_handling TSRMLS_CC);\n}",
        "output": "1",
        "idx": 1197
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct mnt_namespace *create_mnt_ns(struct vfsmount *m)\n{\n\tstruct mnt_namespace *new_ns = alloc_mnt_ns(&init_user_ns);\n\tif (!IS_ERR(new_ns)) {\n\t\tstruct mount *mnt = real_mount(m);\n\t\tmnt->mnt_ns = new_ns;\n\t\tnew_ns->root = mnt;\n\t\tlist_add(&mnt->mnt_list, &new_ns->list);\n\t} else {\n\t\tmntput(m);\n\t}\n\treturn new_ns;\n}",
        "output": "1",
        "idx": 5675
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void mct_decode(Jpeg2000DecoderContext *s, Jpeg2000Tile *tile)\n\n{\n\n    int i, csize = 1;\n\n    void *src[3];\n\n\n\n    for (i = 1; i < 3; i++)\n\n        if (tile->codsty[0].transform != tile->codsty[i].transform) {\n\n            av_log(s->avctx, AV_LOG_ERROR, \"Transforms mismatch, MCT not supported\\n\");\n\n            return;\n\n        }\n\n\n\n    for (i = 0; i < 3; i++)\n\n        if (tile->codsty[0].transform == FF_DWT97)\n\n            src[i] = tile->comp[i].f_data;\n\n        else\n\n            src[i] = tile->comp[i].i_data;\n\n\n\n    for (i = 0; i < 2; i++)\n\n        csize *= tile->comp[0].coord[i][1] - tile->comp[0].coord[i][0];\n\n\n\n    s->dsp.mct_decode[tile->codsty[0].transform](src[0], src[1], src[2], csize);\n\n}\n",
        "output": "0",
        "idx": 262
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static TS_RESP *read_PKCS7(BIO *in_bio)\n\t{\n\tint ret = 0;\n\tPKCS7 *token = NULL;\n\tTS_TST_INFO *tst_info = NULL;\n\tTS_RESP *resp = NULL;\n\tTS_STATUS_INFO *si = NULL;\n\n\t/* Read PKCS7 object and extract the signed time stamp info. */\n\tif (!(token = d2i_PKCS7_bio(in_bio, NULL))) goto end;\n\tif (!(tst_info = PKCS7_to_TS_TST_INFO(token))) goto end;\n\n\t/* Creating response object. */\n\tif (!(resp = TS_RESP_new())) goto end;\n\n\t/* Create granted status info. */\n\tif (!(si = TS_STATUS_INFO_new())) goto end;\n\tif (!(ASN1_INTEGER_set(si->status, TS_STATUS_GRANTED))) goto end;\n\tif (!TS_RESP_set_status_info(resp, si)) goto end;\n\n\t/* Setting encapsulated token. */\n\tTS_RESP_set_tst_info(resp, token, tst_info);\n\ttoken = NULL;\t\t/* Ownership is lost. */\n\ttst_info = NULL;\t/* Ownership is lost. */\n\n\tret = 1;\n end:\n\tPKCS7_free(token);\n\tTS_TST_INFO_free(tst_info);\n\tif (!ret)\n\t\t{\n\t\tTS_RESP_free(resp);\n\t\tresp = NULL;\n\t\t}\n\tTS_STATUS_INFO_free(si);\n\treturn resp;\n\t}",
        "output": "0",
        "idx": 3780
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int hashtable_init(hashtable_t *hashtable)\n{\n    size_t i;\n\n    hashtable->size = 0;\n    hashtable->num_buckets = 0;  /* index to primes[] */\n    hashtable->buckets = jsonp_malloc(num_buckets(hashtable) * sizeof(bucket_t));\n    if(!hashtable->buckets)\n        return -1;\n\n    list_init(&hashtable->list);\n\n    for(i = 0; i < num_buckets(hashtable); i++)\n    {\n        hashtable->buckets[i].first = hashtable->buckets[i].last =\n            &hashtable->list;\n    }\n\n    return 0;\n}",
        "output": "1",
        "idx": 5114
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "internal_write_rsa_key(struct sc_card *card, unsigned short fid, struct sc_pkcs15_prkey_rsa *rsa)\n{\n\tint r;\n\n\tLOG_FUNC_CALLED(card->ctx);\n\n\tr = internal_write_rsa_key_factor(card, fid, 0x02, rsa->modulus);\n\tLOG_TEST_RET(card->ctx, r, \"write n failed\");\n\tr = internal_write_rsa_key_factor(card, fid, 0x03, rsa->d);\n\tLOG_TEST_RET(card->ctx, r, \"write d failed\");\n\n\tLOG_FUNC_RETURN(card->ctx, SC_SUCCESS);\n}",
        "output": "0",
        "idx": 3414
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    virtual UBool appendCodeUnit(UChar c) { str.append(c); return TRUE; }",
        "output": "0",
        "idx": 4200
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int basic_authentication(zval* this_ptr, smart_str* soap_headers TSRMLS_DC)\n{\n\tzval **login, **password;\n\n\tif (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_login\", sizeof(\"_login\"), (void **)&login) == SUCCESS &&\n\t\t\t!zend_hash_exists(Z_OBJPROP_P(this_ptr), \"_digest\", sizeof(\"_digest\"))) {\n\t\tunsigned char* buf;\n\t\tint len;\n\t\tsmart_str auth = {0};\n\n\t\tsmart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));\n\t\tsmart_str_appendc(&auth, ':');\n\t\tif (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_password\", sizeof(\"_password\"), (void **)&password) == SUCCESS) {\n\t\t\tsmart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));\n\t\t}\n\t\tsmart_str_0(&auth);\n\t\tbuf = php_base64_encode((unsigned char*)auth.c, auth.len, &len);\n\t\tsmart_str_append_const(soap_headers, \"Authorization: Basic \");\n\t\tsmart_str_appendl(soap_headers, (char*)buf, len);\n\t\tsmart_str_append_const(soap_headers, \"\\r\\n\");\n\t\tefree(buf);\n\t\tsmart_str_free(&auth);\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 3290
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ShutdownWrap::OnDone(int status) {\n  stream()->EmitAfterShutdown(this, status);\n  Dispose();\n}",
        "output": "0",
        "idx": 2707
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cmsBool CMSEXPORT cmsIT8SetPropertyDbl(cmsHANDLE hIT8, const char* cProp, cmsFloat64Number Val)\n{\n    cmsIT8* it8 = (cmsIT8*) hIT8;\n    char Buffer[1024];\n\n    sprintf(Buffer, it8->DoubleFormatter, Val);\n\n    return AddToList(it8, &GetTable(it8)->HeaderList, cProp, NULL, Buffer, WRITE_UNCOOKED) != NULL;\n}",
        "output": "0",
        "idx": 1662
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold void uninit(AVFilterContext *ctx)\n{\n    VignetteContext *s = ctx->priv;\n    av_freep(&s->fmap);\n    av_expr_free(s->angle_pexpr);\n    av_expr_free(s->x0_pexpr);\n    av_expr_free(s->y0_pexpr);\n}",
        "output": "0",
        "idx": 3297
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vmxnet3_pop_rxc_descr(VMXNET3State *s, int qidx, uint32_t *descr_gen)\n\n{\n\n    uint8_t ring_gen;\n\n    struct Vmxnet3_RxCompDesc rxcd;\n\n\n\n    hwaddr daddr =\n\n        vmxnet3_ring_curr_cell_pa(&s->rxq_descr[qidx].comp_ring);\n\n\n\n    pci_dma_read(PCI_DEVICE(s), daddr,\n\n                 &rxcd, sizeof(struct Vmxnet3_RxCompDesc));\n\n\n\n    ring_gen = vmxnet3_ring_curr_gen(&s->rxq_descr[qidx].comp_ring);\n\n\n\n    if (rxcd.gen != ring_gen) {\n\n        *descr_gen = ring_gen;\n\n        vmxnet3_inc_rx_completion_counter(s, qidx);\n\n        return daddr;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1649
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int f2fs_set_data_page_dirty(struct page *page)\n{\n\tstruct address_space *mapping = page->mapping;\n\tstruct inode *inode = mapping->host;\n\n\ttrace_f2fs_set_page_dirty(page, DATA);\n\n\tif (!PageUptodate(page))\n\t\tSetPageUptodate(page);\n\n\tif (f2fs_is_atomic_file(inode) && !f2fs_is_commit_atomic_write(inode)) {\n\t\tif (!IS_ATOMIC_WRITTEN_PAGE(page)) {\n\t\t\tf2fs_register_inmem_page(inode, page);\n\t\t\treturn 1;\n\t\t}\n\t\t/*\n\t\t * Previously, this page has been registered, we just\n\t\t * return here.\n\t\t */\n\t\treturn 0;\n\t}\n\n\tif (!PageDirty(page)) {\n\t\t__set_page_dirty_nobuffers(page);\n\t\tf2fs_update_dirty_page(inode, page);\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 2387
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Pl_ASCII85Decoder::flush()\n{\n    if (this->pos == 0)\n    {\n\tQTC::TC(\"libtests\", \"Pl_ASCII85Decoder no-op flush\");\n\treturn;\n    }\n    unsigned long lval = 0;\n    for (int i = 0; i < 5; ++i)\n    {\n\tlval *= 85;\n\tlval += (this->inbuf[i] - 33U);\n    }\n\n    unsigned char outbuf[4];\n    memset(outbuf, 0, 4);\n    for (int i = 3; i >= 0; --i)\n    {\n\toutbuf[i] = lval & 0xff;\n\tlval >>= 8;\n    }\n\n    QTC::TC(\"libtests\", \"Pl_ASCII85Decoder partial flush\",\n\t    (this->pos == 5) ? 0 : 1);\n    getNext()->write(outbuf, this->pos - 1);\n\n    this->pos = 0;\n    memset(this->inbuf, 117, 5);\n}",
        "output": "1",
        "idx": 2846
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pad_or_truncate_password_V4(std::string const& password)\n{\n    char k1[key_bytes];\n    pad_or_truncate_password_V4(password, k1);\n    return std::string(k1, key_bytes);\n}",
        "output": "1",
        "idx": 3359
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "VideoTrack::VideoTrack(unsigned int* seed)\n    : Track(seed),\n      display_height_(0),\n      display_width_(0),\n      pixel_height_(0),\n      pixel_width_(0),\n      crop_left_(0),\n      crop_right_(0),\n      crop_top_(0),\n      crop_bottom_(0),\n      frame_rate_(0.0),\n      height_(0),\n      stereo_mode_(0),\n      alpha_mode_(0),\n      width_(0),\n      colour_(NULL),\n      projection_(NULL) {}",
        "output": "1",
        "idx": 4832
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int putpwent_sane(const struct passwd *pw, FILE *stream) {\n        assert(pw);\n        assert(stream);\n\n        errno = 0;\n        if (putpwent(pw, stream) != 0)\n                return errno_or_else(EIO);\n\n        return 0;\n}",
        "output": "0",
        "idx": 4569
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int16_t decodeSample(ms_adpcm_state &state,\n\tuint8_t code, const int16_t *coefficient)\n{\n\tint linearSample = (state.sample1 * coefficient[0] +\n\t\tstate.sample2 * coefficient[1]) >> 8;\n\n\tlinearSample += ((code & 0x08) ? (code - 0x10) : code) * state.delta;\n\n\tlinearSample = clamp(linearSample, MIN_INT16, MAX_INT16);\n\n\tint delta = (state.delta * adaptationTable[code]) >> 8;\n\tif (delta < 16)\n\t\tdelta = 16;\n\n\tstate.delta = delta;\n\tstate.sample2 = state.sample1;\n\tstate.sample1 = linearSample;\n\n\treturn static_cast<int16_t>(linearSample);\n}",
        "output": "1",
        "idx": 2364
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QStringList PostgreSqlStorage::setupKeys() const\n{\n    QStringList keys;\n    keys << \"Username\"\n         << \"Password\"\n         << \"Hostname\"\n         << \"Port\"\n         << \"Database\";\n    return keys;\n}",
        "output": "0",
        "idx": 2056
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dead_tmp(TCGv tmp)\n\n{\n\n    tcg_temp_free(tmp);\n\n    num_temps--;\n\n}\n",
        "output": "1",
        "idx": 2779
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Panic(const char *fmtstr,\n      va_list args)\n{\n   /* Ignored */\n   sLog(log_warning, \"Panic call back invoked. \\n\");\n}",
        "output": "1",
        "idx": 1211
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int scsi_event_status_media(SCSIDiskState *s, uint8_t *outbuf)\n\n{\n\n    uint8_t event_code, media_status;\n\n\n\n    media_status = 0;\n\n    if (s->tray_open) {\n\n        media_status = MS_TRAY_OPEN;\n\n    } else if (bdrv_is_inserted(s->qdev.conf.bs)) {\n\n        media_status = MS_MEDIA_PRESENT;\n\n    }\n\n\n\n    /* Event notification descriptor */\n\n    event_code = MEC_NO_CHANGE;\n\n    if (media_status != MS_TRAY_OPEN) {\n\n        if (s->media_event) {\n\n            event_code = MEC_NEW_MEDIA;\n\n            s->media_event = false;\n\n        } else if (s->eject_request) {\n\n            event_code = MEC_EJECT_REQUESTED;\n\n            s->eject_request = false;\n\n        }\n\n    }\n\n\n\n    outbuf[0] = event_code;\n\n    outbuf[1] = media_status;\n\n\n\n    /* These fields are reserved, just clear them. */\n\n    outbuf[2] = 0;\n\n    outbuf[3] = 0;\n\n    return 4;\n\n}\n",
        "output": "0",
        "idx": 4150
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void l2x0_class_init(ObjectClass *klass, void *data)\n\n{\n\n    SysBusDeviceClass *k = SYS_BUS_DEVICE_CLASS(klass);\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n\n\n    k->init = l2x0_priv_init;\n\n    dc->vmsd = &vmstate_l2x0;\n\n    dc->no_user = 1;\n\n    dc->props = l2x0_properties;\n\n    dc->reset = l2x0_priv_reset;\n\n}\n",
        "output": "1",
        "idx": 982
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void glue(rop_32_,ROP_NAME)(uint32_t *dst, uint32_t src)\n{\n    *dst = ROP_FN(*dst, src);\n}",
        "output": "1",
        "idx": 1541
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "EXPORTED void mailbox_make_uniqueid(struct mailbox *mailbox)\n{\n    free(mailbox->h.uniqueid);\n    mailbox->h.uniqueid = xstrdup(makeuuid());\n    mailbox->header_dirty = 1;\n}",
        "output": "1",
        "idx": 2629
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static QObject *qmp_output_pop(QmpOutputVisitor *qov, void *qapi)\n\n{\n\n    QStackEntry *e = QSLIST_FIRST(&qov->stack);\n\n    QObject *value;\n\n\n\n    assert(e);\n\n    assert(e->qapi == qapi);\n\n    QSLIST_REMOVE_HEAD(&qov->stack, node);\n\n    value = e->value;\n\n    assert(value);\n\n    g_free(e);\n\n    return value;\n\n}\n",
        "output": "0",
        "idx": 5418
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qmp_output_visitor_cleanup(QmpOutputVisitor *v)\n\n{\n\n    QStackEntry *e, *tmp;\n\n\n\n    QTAILQ_FOREACH_SAFE(e, &v->stack, node, tmp) {\n\n        QTAILQ_REMOVE(&v->stack, e, node);\n\n        if (e->value) {\n\n            qobject_decref(e->value);\n\n        }\n\n        g_free(e);\n\n    }\n\n\n\n    g_free(v);\n\n}\n",
        "output": "1",
        "idx": 921
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_error_internal(const char *file, int linenr, const char *func,\n\n                         const char *fmt, ...)\n\n{\n\n    va_list va;\n\n    QError *qerror;\n\n\n\n    assert(qemu_error_sink != NULL);\n\n\n\n    va_start(va, fmt);\n\n    qerror = qerror_from_info(file, linenr, func, fmt, &va);\n\n    va_end(va);\n\n\n\n    switch (qemu_error_sink->dest) {\n\n    case ERR_SINK_FILE:\n\n        qerror_print(qerror);\n\n        QDECREF(qerror);\n\n        break;\n\n    case ERR_SINK_MONITOR:\n\n        assert(qemu_error_sink->mon->error == NULL);\n\n        qemu_error_sink->mon->error = qerror;\n\n        break;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4301
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void exif_error_docref(const char *docref EXIFERR_DC, const image_info_type *ImageInfo, int type, const char *format, ...)\n{\n\tva_list args;\n\t\n\tva_start(args, format);\n#ifdef EXIF_DEBUG\n\t{\n\t\tchar *buf;\n\n\t\tspprintf(&buf, 0, \"%s(%d): %s\", _file, _line, format);\n\t\tphp_verror(docref, ImageInfo->FileName?ImageInfo->FileName:\"\", type, buf, args TSRMLS_CC);\n\t\tefree(buf);\n\t}\n#else\n\tphp_verror(docref, ImageInfo->FileName?ImageInfo->FileName:\"\", type, format, args TSRMLS_CC);\n#endif\n\tva_end(args);\n}",
        "output": "1",
        "idx": 907
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int nbd_client_co_pdiscard(BlockDriverState *bs, int64_t offset, int bytes)\n\n{\n\n    NBDClientSession *client = nbd_get_client_session(bs);\n\n    NBDRequest request = {\n\n        .type = NBD_CMD_TRIM,\n\n        .from = offset,\n\n        .len = bytes,\n\n    };\n\n\n\n\n    if (!(client->info.flags & NBD_FLAG_SEND_TRIM)) {\n\n        return 0;\n\n    }\n\n\n\n    return nbd_co_request(bs, &request, NULL);\n\n}",
        "output": "1",
        "idx": 2967
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ring_buffer_reset_cpu(struct trace_buffer *buffer, int cpu)\n{\n\tstruct ring_buffer_per_cpu *cpu_buffer = buffer->buffers[cpu];\n\n\tif (!cpumask_test_cpu(cpu, buffer->cpumask))\n\t\treturn;\n\n\tatomic_inc(&cpu_buffer->resize_disabled);\n\tatomic_inc(&cpu_buffer->record_disabled);\n\n\t/* Make sure all commits have finished */\n\tsynchronize_rcu();\n\n\treset_disabled_cpu_buffer(cpu_buffer);\n\n\tatomic_dec(&cpu_buffer->record_disabled);\n\tatomic_dec(&cpu_buffer->resize_disabled);\n}",
        "output": "1",
        "idx": 1024
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void omap_mpui_io_write(void *opaque, target_phys_addr_t addr,\n\n                               uint64_t value, unsigned size)\n\n{\n\n    /* FIXME: infinite loop */\n\n    omap_badwidth_write16(opaque, addr, value);\n\n}\n",
        "output": "0",
        "idx": 4901
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static VirtIOSCSIReq *virtio_scsi_pop_req(VirtIOSCSI *s, VirtQueue *vq)\n\n{\n\n    VirtIOSCSIReq *req;\n\n    req = g_malloc(sizeof(*req));\n\n    if (!virtqueue_pop(vq, &req->elem)) {\n\n        g_free(req);\n\n        return NULL;\n\n    }\n\n\n\n    virtio_scsi_parse_req(s, vq, req);\n\n    return req;\n\n}\n",
        "output": "0",
        "idx": 771
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "val_inq_ctx_args(\n    OM_uint32 *minor_status,\n    gss_ctx_id_t context_handle,\n    gss_name_t *src_name,\n    gss_name_t *targ_name,\n    OM_uint32 *lifetime_rec,\n    gss_OID *mech_type,\n    OM_uint32 *ctx_flags,\n    int *locally_initiated,\n    int *opened)\n{\n\n    /* Initialize outputs. */\n\n    if (minor_status != NULL)\n\t*minor_status = 0;\n\n    if (src_name != NULL)\n\t*src_name = GSS_C_NO_NAME;\n\n    if (targ_name != NULL)\n\t*targ_name = GSS_C_NO_NAME;\n\n    if (mech_type != NULL)\n\t*mech_type = GSS_C_NO_OID;\n\n    /* Validate arguments. */\n\n    if (minor_status == NULL)\n\treturn (GSS_S_CALL_INACCESSIBLE_WRITE);\n\n    if (context_handle == GSS_C_NO_CONTEXT)\n\treturn (GSS_S_CALL_INACCESSIBLE_READ | GSS_S_NO_CONTEXT);\n\n    return (GSS_S_COMPLETE);\n}",
        "output": "0",
        "idx": 2870
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void set_pixel_format(VncState *vs,\n                             int bits_per_pixel, int depth,\n                             int big_endian_flag, int true_color_flag,\n                             int red_max, int green_max, int blue_max,\n                             int red_shift, int green_shift, int blue_shift)\n{\n    if (!true_color_flag) {\n    vs->client_pf.rmax = red_max;\n    vs->client_pf.rbits = hweight_long(red_max);\n    vs->client_pf.rshift = red_shift;\n    vs->client_pf.rmask = red_max << red_shift;\n    vs->client_pf.gmax = green_max;\n    vs->client_pf.gbits = hweight_long(green_max);\n    vs->client_pf.gshift = green_shift;\n    vs->client_pf.gmask = green_max << green_shift;\n    vs->client_pf.bmax = blue_max;\n    vs->client_pf.bbits = hweight_long(blue_max);\n    vs->client_pf.bshift = blue_shift;\n    vs->client_pf.bmask = blue_max << blue_shift;\n    vs->client_pf.bits_per_pixel = bits_per_pixel;\n    vs->client_pf.bytes_per_pixel = bits_per_pixel / 8;\n    vs->client_pf.depth = bits_per_pixel == 32 ? 24 : bits_per_pixel;\n    vs->client_be = big_endian_flag;\n    set_pixel_conversion(vs);\n    graphic_hw_invalidate(NULL);\n    graphic_hw_update(NULL);",
        "output": "1",
        "idx": 3209
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool Krecipes::queryClose()\n{\n\tif ( !m_view->inputPanel->everythingSaved() ) {\n\t\tswitch ( KMessageBox::questionYesNoCancel( this,\n\t\t         i18n( \"A recipe contains unsaved changes.\\n\"\n\t\t               \"Do you want to save the changes before exiting?\" ),\n\t\t         i18n( \"Unsaved Changes\" ) ) ) {\n\t\tcase KMessageBox::Yes:\n\t\t\treturn m_view->save();\n\t\tcase KMessageBox::No:\n\t\t\treturn true;\n\t\tcase KMessageBox::Cancel:\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t\treturn true;\n}",
        "output": "0",
        "idx": 2980
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "datetime_s_jisx0301(int argc, VALUE *argv, VALUE klass)\n{\n    VALUE str, sg;\n\n    rb_scan_args(argc, argv, \"02\", &str, &sg);\n\n    switch (argc) {\n      case 0:\n\tstr = rb_str_new2(\"-4712-01-01T00:00:00+00:00\");\n      case 1:\n\tsg = INT2FIX(DEFAULT_SG);\n    }\n\n    {\n\tVALUE hash = date_s__jisx0301(klass, str);\n\treturn dt_new_by_frags(klass, hash, sg);\n    }\n}",
        "output": "1",
        "idx": 2276
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int handle_pause(struct kvm_vcpu *vcpu)\n{\n\tif (!kvm_pause_in_guest(vcpu->kvm))\n\t\tgrow_ple_window(vcpu);\n\n\t/*\n\t * Intel sdm vol3 ch-25.1.3 says: The \"PAUSE-loop exiting\"\n\t * VM-execution control is ignored if CPL > 0. OTOH, KVM\n\t * never set PAUSE_EXITING and just set PLE if supported,\n\t * so the vcpu must be CPL=0 if it gets a PAUSE exit.\n\t */\n\tkvm_vcpu_on_spin(vcpu, true);\n\treturn kvm_skip_emulated_instruction(vcpu);\n}",
        "output": "0",
        "idx": 4736
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void Mounter::startTimer()\n{\n    if (!timer) {\n        timer=new QTimer(this);\n        connect(timer, SIGNAL(timeout()), SLOT(timeout()));\n    }\n    timer->start(30000);\n}",
        "output": "1",
        "idx": 3790
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    bool Image::isPrintICC(uint16_t type, Exiv2::PrintStructureOption option)\n    {\n        return type == 0x8773 && option == kpsIccProfile;\n    }",
        "output": "0",
        "idx": 4908
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct sctp_chunk *sctp_assoc_lookup_asconf_ack(\n\t\t\t\t\tconst struct sctp_association *asoc,\n\t\t\t\t\t__be32 serial)\n{\n\tstruct sctp_chunk *ack;\n\n\t/* Walk through the list of cached ASCONF-ACKs and find the\n\t * ack chunk whose serial number matches that of the request.\n\t */\n\tlist_for_each_entry(ack, &asoc->asconf_ack_list, transmitted_list) {\n\t\tif (ack->subh.addip_hdr->serial == serial) {\n\t\t\tsctp_chunk_hold(ack);\n\t\t\treturn ack;\n\t\t}\n\t}\n\n\treturn NULL;\n}",
        "output": "1",
        "idx": 5515
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int hashtable_del(hashtable_t *hashtable, const char *key)\n{\n    size_t hash = hash_str(key);\n    return hashtable_do_del(hashtable, key, hash);\n}",
        "output": "0",
        "idx": 2022
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MONGO_EXPORT int bson_append_string_n( bson *b, const char *name, const char *value, int len ) {\n    return bson_append_string_base( b, name, value, len, BSON_STRING );\n}",
        "output": "1",
        "idx": 3288
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "entry_guard_obeys_restriction(const entry_guard_t *guard,\n                              const entry_guard_restriction_t *rst)\n{\n  tor_assert(guard);\n  if (! rst)\n    return 1; // No restriction?  No problem.\n\n  // Only one kind of restriction exists right now\n  return tor_memneq(guard->identity, rst->exclude_id, DIGEST_LEN);\n}",
        "output": "1",
        "idx": 3093
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SwapCreateRegister(ClientPtr client, xRecordRegisterClientsReq * stuff)\n{\n    int i;\n    XID *pClientID;\n\n    swapl(&stuff->context);\n    swapl(&stuff->nClients);\n    swapl(&stuff->nRanges);\n    pClientID = (XID *) &stuff[1];\n    if (stuff->nClients >\n        client->req_len - bytes_to_int32(sz_xRecordRegisterClientsReq))\n        return BadLength;\n    for (i = 0; i < stuff->nClients; i++, pClientID++) {\n        swapl(pClientID);\n    }\n    if (stuff->nRanges >\n        client->req_len - bytes_to_int32(sz_xRecordRegisterClientsReq)\n        - stuff->nClients)\n        return BadLength;\n    RecordSwapRanges((xRecordRange *) pClientID, stuff->nRanges);\n    return Success;\n}                               /* SwapCreateRegister */",
        "output": "1",
        "idx": 1999
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int jas_iccputuint(jas_stream_t *out, int n, ulonglong val)\n{\n\tint i;\n\tint c;\n\tfor (i = n; i > 0; --i) {\n\t\tc = (val >> (8 * (i - 1))) & 0xff;\n\t\tif (jas_stream_putc(out, c) == EOF)\n\t\t\treturn -1;\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 4902
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ssl_parse_truncated_hmac_ext( mbedtls_ssl_context *ssl,\n                                         const unsigned char *buf,\n                                         size_t len )\n{\n    if( len != 0 )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad client hello message\" ) );\n        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,\n                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );\n        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );\n    }\n\n    ((void) buf);\n\n    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )\n        ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;\n\n    return( 0 );\n}",
        "output": "0",
        "idx": 4379
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void dma_acct_start(BlockDriverState *bs, BlockAcctCookie *cookie,\n\n                    QEMUSGList *sg, enum BlockAcctType type)\n\n{\n\n    block_acct_start(bdrv_get_stats(bs), cookie, sg->size, type);\n\n}\n",
        "output": "0",
        "idx": 1506
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_add(DisasContext *dc, TCGv dest, TCGv srca, TCGv srcb)\n\n{\n\n    TCGv t0 = tcg_const_tl(0);\n\n    TCGv res = tcg_temp_new();\n\n    TCGv sr_cy = tcg_temp_new();\n\n    TCGv sr_ov = tcg_temp_new();\n\n\n\n    tcg_gen_add2_tl(res, sr_cy, srca, t0, srcb, t0);\n\n    tcg_gen_xor_tl(sr_ov, srca, srcb);\n\n    tcg_gen_xor_tl(t0, res, srcb);\n\n    tcg_gen_andc_tl(sr_ov, t0, sr_ov);\n\n    tcg_temp_free(t0);\n\n\n\n    tcg_gen_mov_tl(dest, res);\n\n    tcg_temp_free(res);\n\n\n\n    tcg_gen_shri_tl(sr_ov, sr_ov, TARGET_LONG_BITS - 1);\n\n    tcg_gen_deposit_tl(cpu_sr, cpu_sr, sr_cy, ctz32(SR_CY), 1);\n\n    tcg_gen_deposit_tl(cpu_sr, cpu_sr, sr_ov, ctz32(SR_OV), 1);\n\n\n\n    gen_ove_cyov(dc, sr_ov, sr_cy);\n\n    tcg_temp_free(sr_ov);\n\n    tcg_temp_free(sr_cy);\n\n}\n",
        "output": "1",
        "idx": 2339
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "evdev_log_msg(struct evdev_device *device,\n\t      enum libinput_log_priority priority,\n\t      const char *format,\n\t      ...)\n{\n\tva_list args;\n\tchar buf[1024];\n\n\tif (!is_logged(evdev_libinput_context(device), priority))\n\t\treturn;\n\n\t/* Anything info and above is user-visible, use the device name */\n\tsnprintf(buf,\n\t\t sizeof(buf),\n\t\t \"%-7s - %s%s%s\",\n\t\t evdev_device_get_sysname(device),\n\t\t (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  device->devname : \"\",\n\t\t (priority > LIBINPUT_LOG_PRIORITY_DEBUG) ?  \": \" : \"\",\n\t\t format);\n\n\tva_start(args, format);\n\tlog_msg_va(evdev_libinput_context(device), priority, buf, args);\n\tva_end(args);\n\n}",
        "output": "1",
        "idx": 3704
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void flush_buffer(ByteIOContext *s)\n\n{\n\n    if (s->buf_ptr > s->buffer) {\n\n        if (s->write_packet)\n\n            s->write_packet(s->opaque, s->buffer, s->buf_ptr - s->buffer);\n\n        if(s->checksum_ptr){\n\n            s->checksum= s->update_checksum(s->checksum, s->checksum_ptr, s->buf_ptr - s->checksum_ptr);\n\n            s->checksum_ptr= s->buffer;\n\n        }\n\n        s->pos += s->buf_ptr - s->buffer;\n\n    }\n\n    s->buf_ptr = s->buffer;\n\n}\n",
        "output": "0",
        "idx": 478
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mrb_mruby_fiber_gem_init(mrb_state* mrb)\n{\n  struct RClass *c;\n\n  c = mrb_define_class(mrb, \"Fiber\", mrb->object_class);\n  MRB_SET_INSTANCE_TT(c, MRB_TT_FIBER);\n\n  mrb_define_method(mrb, c, \"initialize\", fiber_init,    MRB_ARGS_NONE());\n  mrb_define_method(mrb, c, \"resume\",     fiber_resume,  MRB_ARGS_ANY());\n  mrb_define_method(mrb, c, \"transfer\",   fiber_transfer, MRB_ARGS_ANY());\n  mrb_define_method(mrb, c, \"alive?\",     fiber_alive_p, MRB_ARGS_NONE());\n  mrb_define_method(mrb, c, \"==\",         fiber_eq,      MRB_ARGS_REQ(1));\n\n  mrb_define_class_method(mrb, c, \"yield\", fiber_yield, MRB_ARGS_ANY());\n  mrb_define_class_method(mrb, c, \"current\", fiber_current, MRB_ARGS_NONE());\n\n  mrb_define_class(mrb, \"FiberError\", mrb->eStandardError_class);\n}",
        "output": "0",
        "idx": 3491
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "}\n\nstatic char *format_date(u64 time, char *szTime)\n{\n\ttime_t now;\n\tif (!time) {\n\t\tstrcpy(szTime, \"UNKNOWN DATE\");\n\t} else {\n\t\ttime -= 2082844800;\n\t\tnow = (u32) time;\n\t\tsprintf(szTime, \"GMT %s\", asctime(gf_gmtime(&now)) );\n\t}",
        "output": "0",
        "idx": 3317
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rtcp_parse_packet(RTPDemuxContext *s, const unsigned char *buf, int len)\n\n{\n\n    int payload_len;\n\n    while (len >= 2) {\n\n        switch (buf[1]) {\n\n        case RTCP_SR:\n\n            if (len < 16) {\n\n                av_log(NULL, AV_LOG_ERROR, \"Invalid length for RTCP SR packet\\n\");\n\n                return AVERROR_INVALIDDATA;\n\n            }\n\n            payload_len = (AV_RB16(buf + 2) + 1) * 4;\n\n\n\n            s->last_rtcp_ntp_time = AV_RB64(buf + 8);\n\n            s->last_rtcp_timestamp = AV_RB32(buf + 16);\n\n            if (s->first_rtcp_ntp_time == AV_NOPTS_VALUE) {\n\n                s->first_rtcp_ntp_time = s->last_rtcp_ntp_time;\n\n                if (!s->base_timestamp)\n\n                    s->base_timestamp = s->last_rtcp_timestamp;\n\n                s->rtcp_ts_offset = s->last_rtcp_timestamp - s->base_timestamp;\n\n            }\n\n\n\n            buf += payload_len;\n\n            len -= payload_len;\n\n            break;\n\n        case RTCP_BYE:\n\n            return -RTCP_BYE;\n\n        default:\n\n            return -1;\n\n        }\n\n    }\n\n    return -1;\n\n}\n",
        "output": "1",
        "idx": 1946
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool StringMatching::matchString(const char* str1, const char* str2)\n{\n\tif(fnmatch(str1,str2,FNM_NOESCAPE)==0)\n\t\treturn true;\n\tif(fnmatch(str2,str1,FNM_NOESCAPE)==0)\n\t\treturn true;\n\treturn false;\n}",
        "output": "1",
        "idx": 4389
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PPC_OP(divwu)\n\n{\n\n    if (T1 == 0) {\n\n        T0 = 0;\n\n    } else {\n\n        T0 /= T1;\n\n    }\n\n    RETURN();\n\n}\n",
        "output": "1",
        "idx": 5389
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int register_savevm(DeviceState *dev,\n\n                    const char *idstr,\n\n                    int instance_id,\n\n                    int version_id,\n\n                    SaveStateHandler *save_state,\n\n                    LoadStateHandler *load_state,\n\n                    void *opaque)\n\n{\n\n    SaveVMHandlers *ops = g_malloc0(sizeof(SaveVMHandlers));\n\n    ops->save_state = save_state;\n\n    ops->load_state = load_state;\n\n    return register_savevm_live(dev, idstr, instance_id, version_id,\n\n                                ops, opaque);\n\n}\n",
        "output": "1",
        "idx": 4000
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void cris_fidx_i(unsigned int x)\n\n{\n\n\tregister unsigned int v asm(\"$r10\") = x;\n\n\tasm (\"fidxi\\t[%0]\\n\" : : \"r\" (v) );\n\n}\n",
        "output": "1",
        "idx": 1975
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mxf_write_header_metadata_sets(AVFormatContext *s)\n\n{\n\n    AVStream *st;\n\n    MXFStreamContext *sc = NULL;\n\n    int i;\n\n\n\n    mxf_write_preface(s);\n\n    mxf_write_identification(s);\n\n    mxf_write_content_storage(s);\n\n\n\n    for (i = 0; i < s->nb_streams; i++) {\n\n        st = s->streams[i];\n\n        sc = av_mallocz(sizeof(MXFStreamContext));\n\n        if (!sc)\n\n            return AVERROR(ENOMEM);\n\n        st->priv_data = sc;\n\n        // set pts information\n\n        if (st->codec->codec_type == CODEC_TYPE_VIDEO)\n\n            av_set_pts_info(st, 64, 1, st->codec->time_base.den);\n\n        else if (st->codec->codec_type == CODEC_TYPE_AUDIO)\n\n            av_set_pts_info(st, 64, 1, st->codec->sample_rate);\n\n    }\n\n\n\n    mxf_build_structural_metadata(s, MaterialPackage);\n\n    mxf_build_structural_metadata(s, SourcePackage);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 744
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vmci_transport_send_invalid_bh(struct sockaddr_vm *dst,\n\t\t\t\t\t  struct sockaddr_vm *src)\n{\n\treturn vmci_transport_send_control_pkt_bh(\n\t\t\t\t\tdst, src,\n\t\t\t\t\tVMCI_TRANSPORT_PACKET_TYPE_INVALID,\n\t\t\t\t\t0, 0, NULL, VMCI_INVALID_HANDLE);\n}",
        "output": "0",
        "idx": 5922
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int module_enforce_rwx_sections(Elf_Ehdr *hdr, Elf_Shdr *sechdrs,\n\t\t\t\t       char *secstrings, struct module *mod)\n{\n\treturn 0;\n}",
        "output": "0",
        "idx": 5613
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int asf_probe(AVProbeData *pd)\n\n{\n\n    /* check file header */\n\n    if (pd->buf_size <= 32)\n\n        return 0;\n\n\n\n    if (!memcmp(pd->buf, &asf_header, sizeof(GUID)))\n\n        return AVPROBE_SCORE_MAX;\n\n    else\n\n        return 0;\n\n}\n",
        "output": "0",
        "idx": 5146
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SYSCALL_DEFINE6(recvfrom, int, fd, void __user *, ubuf, size_t, size,\n\t\tunsigned int, flags, struct sockaddr __user *, addr,\n\t\tint __user *, addr_len)\n{\n\tstruct socket *sock;\n\tstruct iovec iov;\n\tstruct msghdr msg;\n\tstruct sockaddr_storage address;\n\tint err, err2;\n\tint fput_needed;\n\n\tif (size > INT_MAX)\n\t\tsize = INT_MAX;\n\tsock = sockfd_lookup_light(fd, &err, &fput_needed);\n\tif (!sock)\n\t\tgoto out;\n\n\tmsg.msg_control = NULL;\n\tmsg.msg_controllen = 0;\n\tmsg.msg_iovlen = 1;\n\tmsg.msg_iov = &iov;\n\tiov.iov_len = size;\n\tiov.iov_base = ubuf;\n\tmsg.msg_name = (struct sockaddr *)&address;\n\tmsg.msg_namelen = sizeof(address);\n\tif (sock->file->f_flags & O_NONBLOCK)\n\t\tflags |= MSG_DONTWAIT;\n\terr = sock_recvmsg(sock, &msg, size, flags);\n\n\tif (err >= 0 && addr != NULL) {\n\t\terr2 = move_addr_to_user(&address,\n\t\t\t\t\t msg.msg_namelen, addr, addr_len);\n\t\tif (err2 < 0)\n\t\t\terr = err2;\n\t}\n\n\tfput_light(sock->file, fput_needed);\nout:\n\treturn err;\n}",
        "output": "1",
        "idx": 5087
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int pci_drive_hot_add(Monitor *mon, const QDict *qdict, DriveInfo *dinfo)\n\n{\n\n    int dom, pci_bus;\n\n    unsigned slot;\n\n    PCIDevice *dev;\n\n    const char *pci_addr = qdict_get_str(qdict, \"pci_addr\");\n\n\n\n    switch (dinfo->type) {\n\n    case IF_SCSI:\n\n        if (pci_read_devaddr(mon, pci_addr, &dom, &pci_bus, &slot)) {\n\n            goto err;\n\n        }\n\n        dev = pci_find_device(pci_find_root_bus(dom), pci_bus,\n\n                              PCI_DEVFN(slot, 0));\n\n        if (!dev) {\n\n            monitor_printf(mon, \"no pci device with address %s\\n\", pci_addr);\n\n            goto err;\n\n        }\n\n        if (scsi_hot_add(mon, &dev->qdev, dinfo, 1) != 0) {\n\n            goto err;\n\n        }\n\n        break;\n\n    default:\n\n        monitor_printf(mon, \"Can't hot-add drive to type %d\\n\", dinfo->type);\n\n        goto err;\n\n    }\n\n\n\n    return 0;\n\nerr:\n\n    return -1;\n\n}\n",
        "output": "0",
        "idx": 4135
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void bdrv_drain_recurse(BlockDriverState *bs)\n\n{\n\n    BdrvChild *child;\n\n\n\n    if (bs->drv && bs->drv->bdrv_drain) {\n\n        bs->drv->bdrv_drain(bs);\n\n    }\n\n    QLIST_FOREACH(child, &bs->children, next) {\n\n        bdrv_drain_recurse(child->bs);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2775
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int fread_targphys_ok(target_phys_addr_t dst_addr, size_t nbytes, FILE *f)\n\n{\n\n    return fread_targphys(dst_addr, nbytes, f) == nbytes;\n\n}\n",
        "output": "0",
        "idx": 494
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)\n{\n   if ( input[3] != 0 ) {\n      float f1;\n      // Exponent\n      f1 = (float) ldexp(1.0f, input[3] - (int)(128 + 8));\n      if (req_comp <= 2)\n         output[0] = (input[0] + input[1] + input[2]) * f1 / 3;\n      else {\n         output[0] = input[0] * f1;\n         output[1] = input[1] * f1;\n         output[2] = input[2] * f1;\n      }\n      if (req_comp == 2) output[1] = 1;\n      if (req_comp == 4) output[3] = 1;\n   } else {\n      switch (req_comp) {\n         case 4: output[3] = 1; /* fallthrough */\n         case 3: output[0] = output[1] = output[2] = 0;\n                 break;\n         case 2: output[1] = 1; /* fallthrough */\n         case 1: output[0] = 0;\n                 break;\n      }\n   }\n}",
        "output": "0",
        "idx": 5165
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PublicKey::PublicKey(const byte* k, word32 s) : key_(0), sz_(0)\n{\n    if (s) {\n        SetSize(s);\n        SetKey(k);\n    }\n}",
        "output": "0",
        "idx": 1288
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "push_symbol(Str str, char symbol, int width, int n)\n{\n    char buf[2], *p;\n    int i;\n\n#ifdef USE_M17N\n    if (width == 2)\n\tp = alt2_symbol[(int)symbol];\n    else\n#endif\n\tp = alt_symbol[(int)symbol];\n    for (i = 0; i < 2 && *p; i++, p++)\n\tbuf[i] = (*p == ' ') ? NBSP_CODE : *p;\n\n    Strcat(str, Sprintf(\"<_SYMBOL TYPE=%d>\", symbol));\n    for (; n > 0; n--)\n\tStrcat_charp_n(str, buf, i);\n    Strcat_charp(str, \"</_SYMBOL>\");\n}",
        "output": "1",
        "idx": 5773
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const char *parse_value( cJSON *item, const char *value )\n{\n\tif ( ! value )\n\t\treturn 0;\t/* Fail on null. */\n\tif ( ! strncmp( value, \"null\", 4 ) ) {\n\t\titem->type = cJSON_NULL;\n\t\treturn value + 4;\n\t}\n\tif ( ! strncmp( value, \"false\", 5 ) ) {\n\t\titem->type = cJSON_False;\n\t\treturn value + 5;\n\t}\n\tif ( ! strncmp( value, \"true\", 4 ) ) {\n\t\titem->type = cJSON_True;\n\t\titem->valueint = 1;\n\t\treturn value + 4;\n\t}\n\tif ( *value == '\\\"' )\n\t\treturn parse_string( item, value );\n\tif ( *value == '-' || ( *value >= '0' && *value <= '9' ) )\n\t\treturn parse_number( item, value );\n\tif ( *value == '[' )\n\t\treturn parse_array( item, value );\n\tif ( *value == '{' )\n\t\treturn parse_object( item, value );\n\n\t/* Fail. */\n\tep = value;\n\treturn 0;\n}",
        "output": "1",
        "idx": 5626
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "asmlinkage long sys_mkdirat(int dfd, const char __user *pathname, int mode)\n{\n\tint error = 0;\n\tchar * tmp;\n\tstruct dentry *dentry;\n\tstruct nameidata nd;\n\n\ttmp = getname(pathname);\n\terror = PTR_ERR(tmp);\n\tif (IS_ERR(tmp))\n\t\tgoto out_err;\n\n\terror = do_path_lookup(dfd, tmp, LOOKUP_PARENT, &nd);\n\tif (error)\n\t\tgoto out;\n\tdentry = lookup_create(&nd, 1);\n\terror = PTR_ERR(dentry);\n\tif (IS_ERR(dentry))\n\t\tgoto out_unlock;\n\n\tif (!IS_POSIXACL(nd.path.dentry->d_inode))\n\t\tmode &= ~current->fs->umask;\n\terror = mnt_want_write(nd.path.mnt);\n\tif (error)\n\t\tgoto out_dput;\n\terror = vfs_mkdir(nd.path.dentry->d_inode, dentry, mode);\n\tmnt_drop_write(nd.path.mnt);\nout_dput:\n\tdput(dentry);\nout_unlock:\n\tmutex_unlock(&nd.path.dentry->d_inode->i_mutex);\n\tpath_put(&nd.path);\nout:\n\tputname(tmp);\nout_err:\n\treturn error;\n}",
        "output": "0",
        "idx": 2042
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void clear_all_pkt_pointers(struct bpf_verifier_env *env)\n{\n\tstruct bpf_verifier_state *state = env->cur_state;\n\tstruct bpf_reg_state *regs = state->regs, *reg;\n\tint i;\n\n\tfor (i = 0; i < MAX_BPF_REG; i++)\n\t\tif (reg_is_pkt_pointer_any(&regs[i]))\n\t\t\tmark_reg_unknown(env, regs, i);\n\n\tfor (i = 0; i < state->allocated_stack / BPF_REG_SIZE; i++) {\n\t\tif (state->stack[i].slot_type[0] != STACK_SPILL)\n\t\t\tcontinue;\n\t\treg = &state->stack[i].spilled_ptr;\n\t\tif (reg_is_pkt_pointer_any(reg))\n\t\t\t__mark_reg_unknown(reg);\n\t}\n}",
        "output": "0",
        "idx": 2579
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_addmeo_64 (void)\n\n{\n\n    T1 = T0;\n\n    T0 += xer_ca + (-1);\n\n    if (likely(!((uint64_t)T1 &\n\n                 ((uint64_t)T1 ^ (uint64_t)T0) & (1ULL << 63)))) {\n\n        xer_ov = 0;\n\n    } else {\n\n        xer_so = 1;\n\n        xer_ov = 1;\n\n    }\n\n    if (likely(T1 != 0))\n\n        xer_ca = 1;\n\n}\n",
        "output": "1",
        "idx": 763
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "on_unregister_handler(TCMUService1HandlerManager1 *interface,\n\t\t      GDBusMethodInvocation *invocation,\n\t\t      gchar *subtype,\n\t\t      gpointer user_data)\n{\n\tstruct tcmur_handler *handler = find_handler_by_subtype(subtype);\n\tstruct dbus_info *info = handler->opaque;\n\n\tif (!handler) {\n\t\tg_dbus_method_invocation_return_value(invocation,\n\t\t\tg_variant_new(\"(bs)\", FALSE,\n\t\t\t\t      \"unknown subtype\"));\n\t\treturn TRUE;\n\t}\n\tdbus_unexport_handler(handler);\n\ttcmur_unregister_handler(handler);\n\tg_bus_unwatch_name(info->watcher_id);\n\tg_free(info);\n\tg_free(handler);\n\tg_dbus_method_invocation_return_value(invocation,\n\t\tg_variant_new(\"(bs)\", TRUE, \"succeeded\"));\n\treturn TRUE;\n}",
        "output": "1",
        "idx": 802
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "opts_end_list(Visitor *v, Error **errp)\n\n{\n\n    OptsVisitor *ov = DO_UPCAST(OptsVisitor, visitor, v);\n\n\n\n    assert(ov->list_mode == LM_STARTED || ov->list_mode == LM_IN_PROGRESS);\n\n    ov->repeated_opts = NULL;\n\n    ov->list_mode = LM_NONE;\n\n}\n",
        "output": "0",
        "idx": 2505
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void dvb_usb_device_exit(struct usb_interface *intf)\n{\n\tstruct dvb_usb_device *d = usb_get_intfdata(intf);\n\tconst char *name = \"generic DVB-USB module\";\n\n\tusb_set_intfdata(intf, NULL);\n\tif (d != NULL && d->desc != NULL) {\n\t\tname = d->desc->name;\n\t\tdvb_usb_exit(d);\n\t}\n\tinfo(\"%s successfully deinitialized and disconnected.\", name);\n\n}",
        "output": "1",
        "idx": 1044
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QEMUFile *qemu_fdopen(int fd, const char *mode)\n\n{\n\n    QEMUFileSocket *s;\n\n\n\n    if (mode == NULL ||\n\n        (mode[0] != 'r' && mode[0] != 'w') ||\n\n        mode[1] != 'b' || mode[2] != 0) {\n\n        fprintf(stderr, \"qemu_fdopen: Argument validity check failed\\n\");\n\n        return NULL;\n\n    }\n\n\n\n    s = g_malloc0(sizeof(QEMUFileSocket));\n\n    s->fd = fd;\n\n\n\n    if (mode[0] == 'r') {\n\n        s->file = qemu_fopen_ops(s, &unix_read_ops);\n\n    } else {\n\n        s->file = qemu_fopen_ops(s, &unix_write_ops);\n\n    }\n\n    return s->file;\n\n}\n",
        "output": "1",
        "idx": 2833
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pdf_filter_fstar(fz_context *ctx, pdf_processor *proc)\n{\n\tpdf_filter_processor *p = (pdf_filter_processor*)proc;\n\tfilter_flush(ctx, p, FLUSH_FILL);\n\tif (p->chain->op_fstar)\n\t\tp->chain->op_fstar(ctx, p->chain);\n}",
        "output": "0",
        "idx": 4393
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ptaaCreate(l_int32  n)\n{\nPTAA  *ptaa;\n\n    PROCNAME(\"ptaaCreate\");\n\n    if (n <= 0)\n        n = INITIAL_PTR_ARRAYSIZE;\n\n    if ((ptaa = (PTAA *)LEPT_CALLOC(1, sizeof(PTAA))) == NULL)\n        return (PTAA *)ERROR_PTR(\"ptaa not made\", procName, NULL);\n    ptaa->n = 0;\n    ptaa->nalloc = n;\n    if ((ptaa->pta = (PTA **)LEPT_CALLOC(n, sizeof(PTA *))) == NULL) {\n        ptaaDestroy(&ptaa);\n        return (PTAA *)ERROR_PTR(\"pta ptrs not made\", procName, NULL);\n    }\n    return ptaa;\n}",
        "output": "0",
        "idx": 4828
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int serial_link_irq_chain(struct mp_port *mtpt)\n{\n\tstruct irq_info *i = irq_lists + mtpt->port.irq;\n\tint ret, irq_flags = mtpt->port.flags & UPF_SHARE_IRQ ? IRQF_SHARED : 0;\n\tspin_lock_irq(&i->lock);\n\n\tif (i->head) {\n\t\tlist_add(&mtpt->list, i->head);\n\t\tspin_unlock_irq(&i->lock);\n\n\t\tret = 0;\n\t} else {\n\t\tINIT_LIST_HEAD(&mtpt->list);\n\t\ti->head = &mtpt->list;\n\t\tspin_unlock_irq(&i->lock);\n\n\t\tret = request_irq(mtpt->port.irq, multi_interrupt,\n\t\t\t\tirq_flags, \"serial\", i);\n\t\tif (ret < 0)\n\t\t\tserial_do_unlink(i, mtpt);\n\t}\n\n\treturn ret;\n}",
        "output": "0",
        "idx": 2907
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qvirtio_pci_foreach(QPCIBus *bus, uint16_t device_type,\n\n                void (*func)(QVirtioDevice *d, void *data), void *data)\n\n{\n\n    QVirtioPCIForeachData d = { .func = func,\n\n                                .device_type = device_type,\n\n                                .user_data = data };\n\n\n\n    qpci_device_foreach(bus, PCI_VENDOR_ID_REDHAT_QUMRANET, -1,\n\n                                qvirtio_pci_foreach_callback, &d);\n\n}\n",
        "output": "1",
        "idx": 5369
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct io_buffer_list *io_buffer_get_list(struct io_ring_ctx *ctx,\n\t\t\t\t\t\t unsigned int bgid)\n{\n\tif (ctx->io_bl && bgid < BGID_ARRAY)\n\t\treturn &ctx->io_bl[bgid];\n\n\treturn xa_load(&ctx->io_bl_xa, bgid);\n}",
        "output": "0",
        "idx": 1639
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int webm_dash_manifest_write_header(AVFormatContext *s)\n\n{\n\n    int i;\n\n    double start = 0.0;\n\n    WebMDashMuxContext *w = s->priv_data;\n\n    parse_adaptation_sets(s);\n\n    write_header(s);\n\n    avio_printf(s->pb, \"<Period id=\\\"0\\\"\");\n\n    avio_printf(s->pb, \" start=\\\"PT%gS\\\"\", start);\n\n    if (!w->is_live) {\n\n        avio_printf(s->pb, \" duration=\\\"PT%gS\\\"\", get_duration(s));\n\n    }\n\n    avio_printf(s->pb, \" >\\n\");\n\n\n\n    for (i = 0; i < w->nb_as; i++) {\n\n        if (write_adaptation_set(s, i) < 0) return -1;\n\n    }\n\n\n\n    avio_printf(s->pb, \"</Period>\\n\");\n\n    write_footer(s);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 720
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool bdrv_is_valid_name(const char *name)\n\n{\n\n    return qemu_opts_id_wellformed(name);\n\n}\n",
        "output": "0",
        "idx": 3776
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static MagickBooleanType RenderFreetype(Image *image,const DrawInfo *draw_info,\n  const char *magick_unused(encoding),const PointInfo *offset,\n  TypeMetric *metrics)\n{\n  (void) ThrowMagickException(&image->exception,GetMagickModule(),\n    MissingDelegateWarning,\"DelegateLibrarySupportNotBuiltIn\",\"`%s' (Freetype)\",\n    draw_info->font != (char *) NULL ? draw_info->font : \"none\");\n  return(RenderPostscript(image,draw_info,offset,metrics));\n}",
        "output": "0",
        "idx": 2040
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void etsec_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n\n\n    dc->realize = etsec_realize;\n\n    dc->reset = etsec_reset;\n\n    dc->props = etsec_properties;\n\n\n\n}",
        "output": "1",
        "idx": 3073
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int DMA_write_memory (int nchan, void *buf, int pos, int len)\n\n{\n\n    struct dma_regs *r = &dma_controllers[nchan > 3].regs[nchan & 3];\n\n    target_phys_addr_t addr = ((r->pageh & 0x7f) << 24) | (r->page << 16) | r->now[ADDR];\n\n\n\n    if (r->mode & 0x20) {\n\n        int i;\n\n        uint8_t *p = buf;\n\n\n\n        cpu_physical_memory_write (addr - pos - len, buf, len);\n\n        /* What about 16bit transfers? */\n\n        for (i = 0; i < len; i++) {\n\n            uint8_t b = p[len - i - 1];\n\n            p[i] = b;\n\n        }\n\n    }\n\n    else\n\n        cpu_physical_memory_write (addr + pos, buf, len);\n\n\n\n    return len;\n\n}\n",
        "output": "0",
        "idx": 659
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static BOOL update_send_pointer_new(rdpContext* context,\n                                    const POINTER_NEW_UPDATE* pointer_new)\n{\n\twStream* s;\n\trdpRdp* rdp = context->rdp;\n\tBOOL ret = FALSE;\n\ts = fastpath_update_pdu_init(rdp->fastpath);\n\n\tif (!s)\n\t\treturn FALSE;\n\n\tif (!Stream_EnsureRemainingCapacity(s, 16))\n\t\tgoto out_fail;\n\n\tStream_Write_UINT16(s, pointer_new->xorBpp); /* xorBpp (2 bytes) */\n\tupdate_write_pointer_color(s, &pointer_new->colorPtrAttr);\n\tret = fastpath_send_update_pdu(rdp->fastpath, FASTPATH_UPDATETYPE_POINTER, s,\n\t                               FALSE);\nout_fail:\n\tStream_Release(s);\n\treturn ret;\n}",
        "output": "0",
        "idx": 4611
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ff_get_cpu_flags_arm(void)\n{\n    int flags = CORE_CPU_FLAGS;\n    uint32_t hwcap;\n    if (get_hwcap(&hwcap) < 0)\n        if (get_cpuinfo(&hwcap) < 0)\n            return flags;\n#define check_cap(cap, flag) do {               \\\n        if (hwcap & HWCAP_ ## cap)              \\\n            flags |= AV_CPU_FLAG_ ## flag;      \\\n    } while (0)\n    /* No flags explicitly indicate v6 or v6T2 so check others which\n       imply support. */\n    check_cap(EDSP,    ARMV5TE);\n    check_cap(TLS,     ARMV6);\n    check_cap(THUMBEE, ARMV6T2);\n    check_cap(VFP,     VFP);\n    check_cap(VFPv3,   VFPV3);\n    check_cap(NEON,    NEON);\n    /* The v6 checks above are not reliable so let higher flags\n       trickle down. */\n    if (flags & (AV_CPU_FLAG_VFPV3 | AV_CPU_FLAG_NEON))\n        flags |= AV_CPU_FLAG_ARMV6T2;\n    if (flags & AV_CPU_FLAG_ARMV6T2)\n        flags |= AV_CPU_FLAG_ARMV6;\n    return flags;\n}",
        "output": "1",
        "idx": 1723
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_put_buffer(QEMUFile *f, const uint8_t *buf, int size)\n\n{\n\n    int l;\n\n\n\n    if (f->last_error) {\n\n        return;\n\n    }\n\n\n\n    while (size > 0) {\n\n        l = IO_BUF_SIZE - f->buf_index;\n\n        if (l > size) {\n\n            l = size;\n\n        }\n\n        memcpy(f->buf + f->buf_index, buf, l);\n\n        f->bytes_xfer += l;\n\n        if (f->ops->writev_buffer) {\n\n            add_to_iovec(f, f->buf + f->buf_index, l);\n\n        }\n\n        f->buf_index += l;\n\n        if (f->buf_index == IO_BUF_SIZE) {\n\n            qemu_fflush(f);\n\n        }\n\n        if (qemu_file_get_error(f)) {\n\n            break;\n\n        }\n\n        buf += l;\n\n        size -= l;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4243
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vfio_vga_quirk_teardown(VFIOPCIDevice *vdev)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < ARRAY_SIZE(vdev->vga.region); i++) {\n\n        while (!QLIST_EMPTY(&vdev->vga.region[i].quirks)) {\n\n            VFIOQuirk *quirk = QLIST_FIRST(&vdev->vga.region[i].quirks);\n\n            memory_region_del_subregion(&vdev->vga.region[i].mem, &quirk->mem);\n\n            object_unparent(OBJECT(&quirk->mem));\n\n            QLIST_REMOVE(quirk, next);\n\n            g_free(quirk);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2044
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rdp_out_ts_cache_definition(STREAM s, uint16 entries, uint16 maxcellsize)\n{\n\tout_uint16_le(s, entries);\n\tout_uint16_le(s, maxcellsize);\n}",
        "output": "0",
        "idx": 2401
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t pci_default_read_config(PCIDevice *d,\n\n                                 uint32_t address, int len)\n\n{\n\n    uint32_t val;\n\n\n\n    switch(len) {\n\n    default:\n\n    case 4:\n\n\tif (address <= 0xfc) {\n\n            val = pci_get_long(d->config + address);\n\n\t    break;\n\n\t}\n\n\t/* fall through */\n\n    case 2:\n\n        if (address <= 0xfe) {\n\n            val = pci_get_word(d->config + address);\n\n\t    break;\n\n\t}\n\n\t/* fall through */\n\n    case 1:\n\n        val = pci_get_byte(d->config + address);\n\n        break;\n\n    }\n\n    return val;\n\n}\n",
        "output": "0",
        "idx": 2986
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ati_vga_register_types(void)\n{\n    type_register_static(&ati_vga_info);\n}",
        "output": "0",
        "idx": 3968
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pc_dimm_realize(DeviceState *dev, Error **errp)\n\n{\n\n    PCDIMMDevice *dimm = PC_DIMM(dev);\n\n\n\n    if (!dimm->hostmem) {\n\n        error_setg(errp, \"'\" PC_DIMM_MEMDEV_PROP \"' property is not set\");\n\n        return;\n\n    }\n\n    if ((nb_numa_nodes > 0) && (dimm->node >= nb_numa_nodes)) {\n\n        error_setg(errp, \"'DIMM property \" PC_DIMM_NODE_PROP \" has value %\"\n\n                   PRIu32 \"' which exceeds the number of numa nodes: %d\",\n\n                   dimm->node, nb_numa_nodes);\n\n        return;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5331
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int state_putws (const wchar_t *ws, STATE *s)\n{\n  const wchar_t *p = ws;\n\n  while (p && *p != L'\\0')\n  {\n    if (state_putwc (*p, s) < 0)\n      return -1;\n    p++;\n  }\n  return 0;\n}",
        "output": "0",
        "idx": 378
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void adb_mouse_realizefn(DeviceState *dev, Error **errp)\n\n{\n\n    MouseState *s = ADB_MOUSE(dev);\n\n    ADBMouseClass *amc = ADB_MOUSE_GET_CLASS(dev);\n\n\n\n    amc->parent_realize(dev, errp);\n\n\n\n    qemu_add_mouse_event_handler(adb_mouse_event, s, 0, \"QEMU ADB Mouse\");\n\n}\n",
        "output": "1",
        "idx": 5574
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nfs4_open_revalidate(struct inode *dir, struct dentry *dentry, int openflags, struct nameidata *nd)\n{\n\tstruct path path = {\n\t\t.mnt = nd->path.mnt,\n\t\t.dentry = dentry,\n\t};\n\tstruct rpc_cred *cred;\n\tstruct nfs4_state *state;\n\n\tcred = rpc_lookup_cred();\n\tif (IS_ERR(cred))\n\t\treturn PTR_ERR(cred);\n\tstate = nfs4_do_open(dir, &path, openflags, NULL, cred);\n\tput_rpccred(cred);\n\tif (IS_ERR(state)) {\n\t\tswitch (PTR_ERR(state)) {\n\t\t\tcase -EPERM:\n\t\t\tcase -EACCES:\n\t\t\tcase -EDQUOT:\n\t\t\tcase -ENOSPC:\n\t\t\tcase -EROFS:\n\t\t\t\tlookup_instantiate_filp(nd, (struct dentry *)state, NULL);\n\t\t\t\treturn 1;\n\t\t\tdefault:\n\t\t\t\tgoto out_drop;\n\t\t}\n\t}\n\tif (state->inode == dentry->d_inode) {\n\t\tnfs_set_verifier(dentry, nfs_save_change_attribute(dir));\n\t\tnfs4_intent_set_file(nd, &path, state);\n\t\treturn 1;\n\t}\n\tnfs4_close_sync(&path, state, openflags);\nout_drop:\n\td_drop(dentry);\n\treturn 0;\n}",
        "output": "1",
        "idx": 4817
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline unsigned long get_desc_base(const struct desc_struct *desc)\n{\n\treturn desc->base0 | ((desc->base1) << 16) | ((desc->base2) << 24);\n}",
        "output": "0",
        "idx": 90
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t gadget_dev_desc_max_speed_show(struct config_item *item,\n\t\t\t\t\t      char *page)\n{\n\tenum usb_device_speed speed = to_gadget_info(item)->composite.max_speed;\n\n\treturn sprintf(page, \"%s\\n\", usb_speed_string(speed));\n}",
        "output": "0",
        "idx": 553
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Interval IndexBoundsBuilder::makeRangeInterval(const BSONObj& obj, BoundInclusion boundInclusion) {\n    Interval ret;\n    ret._intervalData = obj;\n    ret.startInclusive = IndexBounds::isStartIncludedInBound(boundInclusion);\n    ret.endInclusive = IndexBounds::isEndIncludedInBound(boundInclusion);\n    BSONObjIterator it(obj);\n    verify(it.more());\n    ret.start = it.next();\n    verify(it.more());\n    ret.end = it.next();\n    return ret;\n}",
        "output": "0",
        "idx": 4223
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "date_s_new_bang(int argc, VALUE *argv, VALUE klass)\n{\n    VALUE ajd, of, sg, nth, sf;\n    int jd, df, rof;\n    double rsg;\n\n    rb_scan_args(argc, argv, \"03\", &ajd, &of, &sg);\n\n    switch (argc) {\n      case 0:\n\tajd = INT2FIX(0);\n      case 1:\n\tof = INT2FIX(0);\n      case 2:\n\tsg = INT2FIX(DEFAULT_SG);\n    }\n\n    old_to_new(ajd, of, sg,\n\t       &nth, &jd, &df, &sf, &rof, &rsg);\n\n    if (!df && f_zero_p(sf) && !rof)\n\treturn d_simple_new_internal(klass,\n\t\t\t\t     nth, jd,\n\t\t\t\t     rsg,\n\t\t\t\t     0, 0, 0,\n\t\t\t\t     HAVE_JD);\n    else\n\treturn d_complex_new_internal(klass,\n\t\t\t\t      nth, jd,\n\t\t\t\t      df, sf,\n\t\t\t\t      rof, rsg,\n\t\t\t\t      0, 0, 0,\n\t\t\t\t      0, 0, 0,\n\t\t\t\t      HAVE_JD | HAVE_DF);\n}",
        "output": "0",
        "idx": 3374
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_window_check3(DisasContext *dc, unsigned r1, unsigned r2,\n\n        unsigned r3)\n\n{\n\n    gen_window_check2(dc, r1, r2 > r3 ? r2 : r3);\n\n}\n",
        "output": "1",
        "idx": 5257
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pnprintf(char *string, int size, const char *f, ...)\n{\n    int rc;\n    va_list args;\n\n    va_start(args, f);\n    rc = vpnprintf(string, size, f, args);\n    va_end(args);\n\n    return rc;\n}",
        "output": "0",
        "idx": 5529
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qdev_print_devinfo(DeviceClass *dc)\n\n{\n\n    error_printf(\"name \\\"%s\\\"\", object_class_get_name(OBJECT_CLASS(dc)));\n\n    if (dc->bus_type) {\n\n        error_printf(\", bus %s\", dc->bus_type);\n\n    }\n\n    if (qdev_class_has_alias(dc)) {\n\n        error_printf(\", alias \\\"%s\\\"\", qdev_class_get_alias(dc));\n\n    }\n\n    if (dc->desc) {\n\n        error_printf(\", desc \\\"%s\\\"\", dc->desc);\n\n    }\n\n    if (dc->no_user) {\n\n        error_printf(\", no-user\");\n\n    }\n\n    error_printf(\"\\n\");\n\n}\n",
        "output": "1",
        "idx": 2498
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cache_space_refresh(Server *s, JournalStorage *storage) {\n        JournalStorageSpace *space;\n        JournalMetrics *metrics;\n        uint64_t vfs_used, vfs_avail, avail;\n        usec_t ts;\n        int r;\n\n        assert(s);\n\n        metrics = &storage->metrics;\n        space = &storage->space;\n\n        ts = now(CLOCK_MONOTONIC);\n\n        if (space->timestamp + RECHECK_SPACE_USEC > ts)\n                return 0;\n\n        r = determine_path_usage(s, storage->path, &vfs_used, &vfs_avail);\n        if (r < 0)\n                return r;\n\n        space->vfs_used = vfs_used;\n        space->vfs_available = vfs_avail;\n\n        avail = LESS_BY(vfs_avail, metrics->keep_free);\n\n        space->limit = MIN(MAX(vfs_used + avail, metrics->min_use), metrics->max_use);\n        space->available = LESS_BY(space->limit, vfs_used);\n        space->timestamp = ts;\n        return 1;\n}",
        "output": "0",
        "idx": 5271
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int register_reboot_notifier(struct notifier_block *nb)\n{\n\treturn blocking_notifier_chain_register(&reboot_notifier_list, nb);\n}",
        "output": "0",
        "idx": 1643
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void vmacache_invalidate(struct mm_struct *mm)\n{\n\tmm->vmacache_seqnum++;\n\n\t/* deal with overflows */\n\tif (unlikely(mm->vmacache_seqnum == 0))\n\t\tvmacache_flush_all(mm);\n}",
        "output": "1",
        "idx": 693
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void prepare_cmd(struct argv_array *out, const struct child_process *cmd)\n{\n\tif (!cmd->argv[0])\n\t\tdie(\"BUG: command is empty\");\n\n\t/*\n\t * Add SHELL_PATH so in the event exec fails with ENOEXEC we can\n\t * attempt to interpret the command with 'sh'.\n\t */\n\targv_array_push(out, SHELL_PATH);\n\n\tif (cmd->git_cmd) {\n\t\targv_array_push(out, \"git\");\n\t\targv_array_pushv(out, cmd->argv);\n\t} else if (cmd->use_shell) {\n\t\tprepare_shell_cmd(out, cmd->argv);\n\t} else {\n\t\targv_array_pushv(out, cmd->argv);\n\t}\n\n\t/*\n\t * If there are no '/' characters in the command then perform a path\n\t * lookup and use the resolved path as the command to exec.  If there\n\t * are no '/' characters or if the command wasn't found in the path,\n\t * have exec attempt to invoke the command directly.\n\t */\n\tif (!strchr(out->argv[1], '/')) {\n\t\tchar *program = locate_in_PATH(out->argv[1]);\n\t\tif (program) {\n\t\t\tfree((char *)out->argv[1]);\n\t\t\tout->argv[1] = program;\n\t\t}\n\t}\n}",
        "output": "1",
        "idx": 5046
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "greeter_display_started (GdmManager *manager,\n                         GdmDisplay *display)\n{\n        if (manager->priv->ran_once) {\n                return;\n        }\n\n        maybe_start_pending_initial_login (manager, display);\n\n        manager->priv->ran_once = TRUE;\n}",
        "output": "1",
        "idx": 2297
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int __save_altstack(stack_t __user *uss, unsigned long sp)\n{\n\tstruct task_struct *t = current;\n\tint err = __put_user((void __user *)t->sas_ss_sp, &uss->ss_sp) |\n\t\t__put_user(t->sas_ss_flags, &uss->ss_flags) |\n\t\t__put_user(t->sas_ss_size, &uss->ss_size);\n\tif (err)\n\t\treturn err;\n\tif (t->sas_ss_flags & SS_AUTODISARM)\n\t\tsas_ss_reset(t);\n\treturn 0;\n}",
        "output": "0",
        "idx": 3520
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct inotify_handle *inotify_init(const struct inotify_operations *ops)\n{\n\tstruct inotify_handle *ih;\n\n\tih = kmalloc(sizeof(struct inotify_handle), GFP_KERNEL);\n\tif (unlikely(!ih))\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tidr_init(&ih->idr);\n\tINIT_LIST_HEAD(&ih->watches);\n\tmutex_init(&ih->mutex);\n\tih->last_wd = 0;\n\tih->in_ops = ops;\n\tatomic_set(&ih->count, 0);\n\tget_inotify_handle(ih);\n\n\treturn ih;\n}",
        "output": "0",
        "idx": 296
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int iommu_dma_memory_rw(DMAContext *dma, dma_addr_t addr,\n\n                        void *buf, dma_addr_t len, DMADirection dir)\n\n{\n\n    target_phys_addr_t paddr, plen;\n\n    int err;\n\n\n\n#ifdef DEBUG_IOMMU\n\n    fprintf(stderr, \"dma_memory_rw context=%p addr=0x\" DMA_ADDR_FMT \" len=0x\"\n\n            DMA_ADDR_FMT \" dir=%d\\n\", dma, addr, len, dir);\n\n#endif\n\n\n\n    while (len) {\n\n        err = dma->translate(dma, addr, &paddr, &plen, dir);\n\n        if (err) {\n\n\t    /*\n\n             * In case of failure on reads from the guest, we clean the\n\n             * destination buffer so that a device that doesn't test\n\n             * for errors will not expose qemu internal memory.\n\n\t     */\n\n\t    memset(buf, 0, len);\n\n            return -1;\n\n        }\n\n\n\n        /* The translation might be valid for larger regions. */\n\n        if (plen > len) {\n\n            plen = len;\n\n        }\n\n\n\n        address_space_rw(dma->as, paddr, buf, plen, dir == DMA_DIRECTION_FROM_DEVICE);\n\n\n\n        len -= plen;\n\n        addr += plen;\n\n        buf += plen;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3162
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mirror_read_complete(void *opaque, int ret)\n\n{\n\n    MirrorOp *op = opaque;\n\n    MirrorBlockJob *s = op->s;\n\n    if (ret < 0) {\n\n        BlockDriverState *source = s->common.bs;\n\n        BlockErrorAction action;\n\n\n\n        bdrv_set_dirty(source, op->sector_num, op->nb_sectors);\n\n        action = mirror_error_action(s, true, -ret);\n\n        if (action == BLOCK_ERROR_ACTION_REPORT && s->ret >= 0) {\n\n            s->ret = ret;\n\n        }\n\n\n\n        mirror_iteration_done(op, ret);\n\n        return;\n\n    }\n\n    bdrv_aio_writev(s->target, op->sector_num, &op->qiov, op->nb_sectors,\n\n                    mirror_write_complete, op);\n\n}\n",
        "output": "1",
        "idx": 954
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ftp_features(FTPContext *s)\n\n{\n\n    static const char *feat_command        = \"FEAT\\r\\n\";\n\n    static const char *enable_utf8_command = \"OPTS UTF8 ON\\r\\n\";\n\n    static const int feat_codes[] = {211, 0};\n\n    static const int opts_codes[] = {200, 451};\n\n    char *feat;\n\n\n\n    if (ftp_send_command(s, feat_command, feat_codes, &feat) == 211) {\n\n        if (av_stristr(feat, \"UTF8\"))\n\n            ftp_send_command(s, enable_utf8_command, opts_codes, NULL);\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4778
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    ConfigProtoVector getConfigProtos() const override { return {}; }",
        "output": "0",
        "idx": 2773
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tgen_ext8u(TCGContext *s, TCGType type, TCGReg dest, TCGReg src)\n\n{\n\n    if (facilities & FACILITY_EXT_IMM) {\n\n        tcg_out_insn(s, RRE, LLGCR, dest, src);\n\n        return;\n\n    }\n\n\n\n    if (dest == src) {\n\n        tcg_out_movi(s, type, TCG_TMP0, 0xff);\n\n        src = TCG_TMP0;\n\n    } else {\n\n        tcg_out_movi(s, type, dest, 0xff);\n\n    }\n\n    if (type == TCG_TYPE_I32) {\n\n        tcg_out_insn(s, RR, NR, dest, src);\n\n    } else {\n\n        tcg_out_insn(s, RRE, NGR, dest, src);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2720
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void RGWCORSRule::format_exp_headers(string& s) {\n  s = \"\";\n  for(list<string>::iterator it = exposable_hdrs.begin();\n      it != exposable_hdrs.end(); ++it) {\n      if (s.length() > 0)\n        s.append(\",\");\n      s.append((*it));\n  }\n}",
        "output": "1",
        "idx": 1812
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ima_adpcm_reset2 (_AFmoduleinst *i)\n{\n\tima_adpcm_data\t*d = (ima_adpcm_data *) i->modspec;\n\tint\t\tframesPerBlock;\n\n\tframesPerBlock = d->samplesPerBlock / d->track->f.channelCount;\n\n\td->track->fpos_next_frame = d->track->fpos_first_frame +\n\t\td->blockAlign * (d->track->nextfframe / framesPerBlock);\n\td->track->frames2ignore += d->framesToIgnore;\n\n\tassert(d->track->nextfframe % framesPerBlock == 0);\n}",
        "output": "1",
        "idx": 1403
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void unterminated_literal(void)\n\n{\n\n    QObject *obj = qobject_from_json(\"nul\", NULL);\n\n    g_assert(obj == NULL);\n\n}\n",
        "output": "1",
        "idx": 692
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void desc_read_cb(struct gatt_db_attribute *attrib,\n\t\t\t\t\tunsigned int id, uint16_t offset,\n\t\t\t\t\tuint8_t opcode, struct bt_att *att,\n\t\t\t\t\tvoid *user_data)\n{\n\tstruct external_desc *desc = user_data;\n\tstruct btd_device *device;\n\n\tif (desc->attrib != attrib) {\n\t\terror(\"Read callback called with incorrect attribute\");\n\t\tgoto fail;\n\t}\n\n\tdevice = att_get_device(att);\n\tif (!device) {\n\t\terror(\"Unable to find device object\");\n\t\tgoto fail;\n\t}\n\n\tif (send_read(device, attrib, desc->proxy, desc->pending_reads, id,\n\t\t\t\t\toffset, bt_att_get_link_type(att)))\n\t\treturn;\n\nfail:\n\tgatt_db_attribute_read_result(attrib, id, BT_ATT_ERROR_UNLIKELY,\n\t\t\t\t\t\t\t\tNULL, 0);\n}",
        "output": "1",
        "idx": 2548
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "symbol_location_as_lhs_set (symbol *sym, location loc)\n{\n  if (!sym->location_of_lhs)\n    {\n      sym->location = loc;\n      sym->location_of_lhs = true;\n    }\n}",
        "output": "0",
        "idx": 4435
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t GPMF_RawDataSize(GPMF_stream *ms)\n{\n\tif (ms && ms->pos+1 < ms->buffer_size_longs)\n\t{\n\t\tuint32_t size = GPMF_DATA_PACKEDSIZE(ms->buffer[ms->pos + 1]);\n\t\tif (GPMF_OK != IsValidSize(ms, size >> 2)) return 0;\n\n\t\treturn size;\n\t}\n\treturn 0;\n}",
        "output": "0",
        "idx": 5744
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_isync(DisasContext *ctx)\n\n{\n\n    /*\n\n     * We need to check for a pending TLB flush. This can only happen in\n\n     * kernel mode however so check MSR_PR\n\n     */\n\n    if (!ctx->pr) {\n\n        gen_check_tlb_flush(ctx);\n\n    }\n\n    gen_stop_exception(ctx);\n\n}\n",
        "output": "1",
        "idx": 3040
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int tcp_close(MigrationState *s)\n\n{\n\n    DPRINTF(\"tcp_close\\n\");\n\n    if (s->fd != -1) {\n\n        close(s->fd);\n\n        s->fd = -1;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2751
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AVBufferRef *av_buffer_pool_get(AVBufferPool *pool)\n\n{\n\n    AVBufferRef *ret;\n\n    BufferPoolEntry *buf;\n\n\n\n    /* check whether the pool is empty */\n\n    buf = get_pool(pool);\n\n    if (!buf)\n\n        return pool_alloc_buffer(pool);\n\n\n\n    /* keep the first entry, return the rest of the list to the pool */\n\n    add_to_pool(buf->next);\n\n    buf->next = NULL;\n\n\n\n    ret = av_buffer_create(buf->data, pool->size, pool_release_buffer,\n\n                           buf, 0);\n\n    if (!ret) {\n\n        add_to_pool(buf);\n\n        return NULL;\n\n    }\n\n    avpriv_atomic_int_add_and_fetch(&pool->refcount, 1);\n\n\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 5488
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void snd_timer_user_ccallback(struct snd_timer_instance *timeri,\n\t\t\t\t     int event,\n\t\t\t\t     struct timespec *tstamp,\n\t\t\t\t     unsigned long resolution)\n{\n\tstruct snd_timer_user *tu = timeri->callback_data;\n\tstruct snd_timer_tread r1;\n\tunsigned long flags;\n\n\tif (event >= SNDRV_TIMER_EVENT_START &&\n\t    event <= SNDRV_TIMER_EVENT_PAUSE)\n\t\ttu->tstamp = *tstamp;\n\tif ((tu->filter & (1 << event)) == 0 || !tu->tread)\n\t\treturn;\n\tr1.event = event;\n\tr1.tstamp = *tstamp;\n\tr1.val = resolution;\n\tspin_lock_irqsave(&tu->qlock, flags);\n\tsnd_timer_user_append_to_tqueue(tu, &r1);\n\tspin_unlock_irqrestore(&tu->qlock, flags);\n\tkill_fasync(&tu->fasync, SIGIO, POLL_IN);\n\twake_up(&tu->qchange_sleep);\n}",
        "output": "1",
        "idx": 4629
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void free_ioctx_users(struct percpu_ref *ref)\n{\n\tstruct kioctx *ctx = container_of(ref, struct kioctx, users);\n\tstruct aio_kiocb *req;\n\n\tspin_lock_irq(&ctx->ctx_lock);\n\n\twhile (!list_empty(&ctx->active_reqs)) {\n\t\treq = list_first_entry(&ctx->active_reqs,\n\t\t\t\t       struct aio_kiocb, ki_list);\n\t\treq->ki_cancel(&req->rw);\n\t\tlist_del_init(&req->ki_list);\n\t}\n\n\tspin_unlock_irq(&ctx->ctx_lock);\n\n\tpercpu_ref_kill(&ctx->reqs);\n\tpercpu_ref_put(&ctx->reqs);\n}",
        "output": "0",
        "idx": 1321
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    TestCheckedArrayByteSink(char* outbuf, int32_t capacity)\n            : CheckedArrayByteSink(outbuf, capacity), calledFlush(FALSE) {}",
        "output": "0",
        "idx": 2535
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void timerlist_rearm(QEMUTimerList *timer_list)\n\n{\n\n    /* Interrupt execution to force deadline recalculation.  */\n\n    if (timer_list->clock->type == QEMU_CLOCK_VIRTUAL) {\n\n        qemu_start_warp_timer();\n\n    }\n\n    timerlist_notify(timer_list);\n\n}\n",
        "output": "0",
        "idx": 5176
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xt_request_find_match(uint8_t nfproto, const char *name, uint8_t revision)\n{\n\tstruct xt_match *match;\n\n\tmatch = xt_find_match(nfproto, name, revision);\n\tif (IS_ERR(match)) {\n\t\trequest_module(\"%st_%s\", xt_prefix[nfproto], name);\n\t\tmatch = xt_find_match(nfproto, name, revision);\n\t}\n\n\treturn match;\n}",
        "output": "0",
        "idx": 1453
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_af_queue_log_state(AudioFrameQueue *afq)\n\n{\n\n    AudioFrame *f;\n\n    av_log(afq->avctx, AV_LOG_DEBUG, \"remaining delay   = %d\\n\",\n\n           afq->remaining_delay);\n\n    av_log(afq->avctx, AV_LOG_DEBUG, \"remaining samples = %d\\n\",\n\n           afq->remaining_samples);\n\n    av_log(afq->avctx, AV_LOG_DEBUG, \"frames:\\n\");\n\n    f = afq->frame_queue;\n\n    while (f) {\n\n        av_log(afq->avctx, AV_LOG_DEBUG, \"  [ pts=%9\"PRId64\" duration=%d ]\\n\",\n\n               f->pts, f->duration);\n\n        f = f->next;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3144
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_change_vnc(const char *target, const char *arg)\n\n{\n\n    if (strcmp(target, \"passwd\") == 0 ||\n\n\tstrcmp(target, \"password\") == 0) {\n\n\tchar password[9];\n\n\tif (arg) {\n\n\t    strncpy(password, arg, sizeof(password));\n\n\t    password[sizeof(password) - 1] = '\\0';\n\n\t} else\n\n\t    monitor_readline(\"Password: \", 1, password, sizeof(password));\n\n\tif (vnc_display_password(NULL, password) < 0)\n\n\t    term_printf(\"could not set VNC server password\\n\");\n\n    } else {\n\n\tif (vnc_display_open(NULL, target) < 0)\n\n\t    term_printf(\"could not start VNC server on %s\\n\", target);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3380
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    GC_API int GC_CALL GC_get_stack_base(struct GC_stack_base *sb)\n    {\n#     ifdef X86_64\n        sb -> mem_base = ((NT_TIB*)NtCurrentTeb())->StackBase;\n#     else\n        void * _tlsbase;\n\n        __asm__ (\"movl %%fs:4, %0\"\n                 : \"=r\" (_tlsbase));\n        sb -> mem_base = _tlsbase;\n#     endif\n      return GC_SUCCESS;\n    }",
        "output": "0",
        "idx": 251
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *rom_add_blob(const char *name, const void *blob, size_t len,\n\n                   hwaddr addr, const char *fw_file_name,\n\n                   FWCfgReadCallback fw_callback, void *callback_opaque)\n\n{\n\n    Rom *rom;\n\n    void *data = NULL;\n\n\n\n    rom           = g_malloc0(sizeof(*rom));\n\n    rom->name     = g_strdup(name);\n\n    rom->addr     = addr;\n\n    rom->romsize  = len;\n\n    rom->datasize = len;\n\n    rom->data     = g_malloc0(rom->datasize);\n\n    memcpy(rom->data, blob, len);\n\n    rom_insert(rom);\n\n    if (fw_file_name && fw_cfg) {\n\n        char devpath[100];\n\n\n\n        snprintf(devpath, sizeof(devpath), \"/rom@%s\", fw_file_name);\n\n\n\n        if (rom_file_has_mr) {\n\n            data = rom_set_mr(rom, OBJECT(fw_cfg), devpath);\n\n        } else {\n\n            data = rom->data;\n\n        }\n\n\n\n        fw_cfg_add_file_callback(fw_cfg, fw_file_name,\n\n                                 fw_callback, callback_opaque,\n\n                                 data, rom->romsize);\n\n    }\n\n    return data;\n\n}\n",
        "output": "1",
        "idx": 2414
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int proxy_mkdir(FsContext *fs_ctx, V9fsPath *dir_path,\n\n                       const char *name, FsCred *credp)\n\n{\n\n    int retval;\n\n    V9fsString fullname;\n\n\n\n    v9fs_string_init(&fullname);\n\n    v9fs_string_sprintf(&fullname, \"%s/%s\", dir_path->data, name);\n\n\n\n    retval = v9fs_request(fs_ctx->private, T_MKDIR, NULL, &fullname,\n\n                          credp->fc_mode, credp->fc_uid, credp->fc_gid);\n\n    v9fs_string_free(&fullname);\n\n    if (retval < 0) {\n\n        errno = -retval;\n\n        retval = -1;\n\n    }\n\n    v9fs_string_free(&fullname);\n\n    return retval;\n\n}\n",
        "output": "1",
        "idx": 299
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int pgpPrtParams(const uint8_t * pkts, size_t pktlen, unsigned int pkttype,\n\t\t pgpDigParams * ret)\n{\n    const uint8_t *p = pkts;\n    const uint8_t *pend = pkts + pktlen;\n    pgpDigParams digp = NULL;\n    struct pgpPkt pkt;\n    int rc = -1; /* assume failure */\n\n    while (p < pend) {\n\tif (decodePkt(p, (pend - p), &pkt))\n\t    break;\n\n\tif (digp == NULL) {\n\t    if (pkttype && pkt.tag != pkttype) {\n\t\tbreak;\n\t    } else {\n\t\tdigp = pgpDigParamsNew(pkt.tag);\n\t    }\n\t}\n\n\tif (pgpPrtPkt(&pkt, digp))\n\t    break;\n\n\tp += (pkt.body - pkt.head) + pkt.blen;\n\tif (pkttype == PGPTAG_SIGNATURE)\n\t    break;\n    }\n\n    rc = (digp && (p == pend)) ? 0 : -1;\n\n    if (ret && rc == 0) {\n\t*ret = digp;\n    } else {\n\tpgpDigParamsFree(digp);\n    }\n    return rc;\n}",
        "output": "1",
        "idx": 549
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus ResizeOutput(TfLiteContext* context, const TfLiteTensor* input,\n                          const TfLiteTensor* axis, TfLiteTensor* output) {\n  int axis_value;\n  // Retrive all 8 bytes when axis type is kTfLiteInt64 to avoid data loss.\n  if (axis->type == kTfLiteInt64) {\n    axis_value = static_cast<int>(*GetTensorData<int64_t>(axis));\n  } else {\n    axis_value = *GetTensorData<int>(axis);\n  }\n  if (axis_value < 0) {\n    axis_value += NumDimensions(input);\n  }\n\n  // Copy the input dimensions to output except the axis dimension.\n  TfLiteIntArray* output_dims = TfLiteIntArrayCreate(NumDimensions(input) - 1);\n  int j = 0;\n  for (int i = 0; i < NumDimensions(input); ++i) {\n    if (i != axis_value) {\n      output_dims->data[j] = SizeOfDimension(input, i);\n      ++j;\n    }\n  }\n  return context->ResizeTensor(context, output, output_dims);\n}",
        "output": "1",
        "idx": 2206
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int dxva2_vc1_end_frame(AVCodecContext *avctx)\n\n{\n\n    VC1Context *v = avctx->priv_data;\n\n    struct dxva2_picture_context *ctx_pic = v->s.current_picture_ptr->hwaccel_picture_private;\n\n    int ret;\n\n\n\n    if (ctx_pic->bitstream_size <= 0)\n\n        return -1;\n\n\n\n    ret = ff_dxva2_common_end_frame(avctx, &v->s.current_picture_ptr->f,\n\n                                    &ctx_pic->pp, sizeof(ctx_pic->pp),\n\n                                    NULL, 0,\n\n                                    commit_bitstream_and_slice_buffer);\n\n    if (!ret)\n\n        ff_mpeg_draw_horiz_band(&v->s, 0, avctx->height);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 3130
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HELPER(ucf64_set_fpscr)(CPUUniCore32State *env, uint32_t val)\n\n{\n\n    int i;\n\n    uint32_t changed;\n\n\n\n    changed = env->ucf64.xregs[UC32_UCF64_FPSCR];\n\n    env->ucf64.xregs[UC32_UCF64_FPSCR] = (val & UCF64_FPSCR_MASK);\n\n\n\n    changed ^= val;\n\n    if (changed & (UCF64_FPSCR_RND_MASK)) {\n\n        i = UCF64_FPSCR_RND(val);\n\n        switch (i) {\n\n        case 0:\n\n            i = float_round_nearest_even;\n\n            break;\n\n        case 1:\n\n            i = float_round_to_zero;\n\n            break;\n\n        case 2:\n\n            i = float_round_up;\n\n            break;\n\n        case 3:\n\n            i = float_round_down;\n\n            break;\n\n        default: /* 100 and 101 not implement */\n\n            cpu_abort(env, \"Unsupported UniCore-F64 round mode\");\n\n        }\n\n        set_float_rounding_mode(i, &env->ucf64.fp_status);\n\n    }\n\n\n\n    i = ucf64_exceptbits_to_host(UCF64_FPSCR_TRAPEN(val));\n\n    set_float_exception_flags(i, &env->ucf64.fp_status);\n\n}\n",
        "output": "0",
        "idx": 3975
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtio_queue_set_align(VirtIODevice *vdev, int n, int align)\n\n{\n\n    BusState *qbus = qdev_get_parent_bus(DEVICE(vdev));\n\n    VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(qbus);\n\n\n\n    /* virtio-1 compliant devices cannot change the alignment */\n\n    if (virtio_vdev_has_feature(vdev, VIRTIO_F_VERSION_1)) {\n\n        error_report(\"tried to modify queue alignment for virtio-1 device\");\n\n        return;\n\n    }\n\n    /* Check that the transport told us it was going to do this\n\n     * (so a buggy transport will immediately assert rather than\n\n     * silently failing to migrate this state)\n\n     */\n\n    assert(k->has_variable_vring_alignment);\n\n\n\n    vdev->vq[n].vring.align = align;\n\n    virtio_queue_update_rings(vdev, n);\n\n}\n",
        "output": "1",
        "idx": 5747
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LOCAL char *value_for_key_as_string(MMDB_entry_s *start, char *key)\n{\n    MMDB_entry_data_s entry_data;\n    const char *path[] = { key, NULL };\n    MMDB_aget_value(start, &entry_data, path);\n    return mmdb_strndup((char *)entry_data.utf8_string, entry_data.data_size);\n}",
        "output": "1",
        "idx": 1682
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "   OFB crypt/decrypt data using key key with cipher cipher starting with iv */\nPHP_FUNCTION(mcrypt_decrypt)\n{\n\tzval **mode;\n\tchar *cipher, *key, *data, *iv = NULL;\n\tint cipher_len, key_len, data_len, iv_len = 0;\n\n\tMCRYPT_GET_CRYPT_ARGS\n\t\n\tconvert_to_string_ex(mode);\n\n\tphp_mcrypt_do_crypt(cipher, key, key_len, data, data_len, Z_STRVAL_PP(mode), iv, iv_len, ZEND_NUM_ARGS(), MCRYPT_DECRYPT, return_value TSRMLS_CC);",
        "output": "1",
        "idx": 800
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void check_reference(struct quota_handle *h, unsigned int blk)\n{\n\tif (blk >= h->qh_info.u.v2_mdqi.dqi_qtree.dqi_blocks)\n\t\tlog_err(\"Illegal reference (%u >= %u) in %s quota file. \"\n\t\t\t\"Quota file is probably corrupted.\\n\"\n\t\t\t\"Please run e2fsck (8) to fix it.\",\n\t\t\tblk,\n\t\t\th->qh_info.u.v2_mdqi.dqi_qtree.dqi_blocks,\n\t\t\tquota_type2name(h->qh_type));\n}",
        "output": "1",
        "idx": 5238
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int udf_read_extent_cache(struct inode *inode, loff_t bcount,\n\t\t\t\t loff_t *lbcount, struct extent_position *pos)\n{\n\tstruct udf_inode_info *iinfo = UDF_I(inode);\n\tint ret = 0;\n\n\tspin_lock(&iinfo->i_extent_cache_lock);\n\tif ((iinfo->cached_extent.lstart <= bcount) &&\n\t    (iinfo->cached_extent.lstart != -1)) {\n\t\t/* Cache hit */\n\t\t*lbcount = iinfo->cached_extent.lstart;\n\t\tmemcpy(pos, &iinfo->cached_extent.epos,\n\t\t       sizeof(struct extent_position));\n\t\tif (pos->bh)\n\t\t\tget_bh(pos->bh);\n\t\tret = 1;\n\t}\n\tspin_unlock(&iinfo->i_extent_cache_lock);\n\treturn ret;\n}",
        "output": "0",
        "idx": 2098
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void unrealize(DeviceState *d, Error **errp)\n\n{\n\n    sPAPRDRConnector *drc = SPAPR_DR_CONNECTOR(d);\n\n    Object *root_container;\n\n    char name[256];\n\n    Error *err = NULL;\n\n\n\n    trace_spapr_drc_unrealize(spapr_drc_index(drc));\n\n    root_container = container_get(object_get_root(), DRC_CONTAINER_PATH);\n\n    snprintf(name, sizeof(name), \"%x\", spapr_drc_index(drc));\n\n    object_property_del(root_container, name, &err);\n\n    if (err) {\n\n        error_report_err(err);\n\n        object_unref(OBJECT(drc));\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5314
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "slap_controls_init( void )\n{\n\tint i, rc;\n\n\trc = LDAP_SUCCESS;\n\n\tfor ( i = 0; control_defs[i].sc_oid != NULL; i++ ) {\n\t\tint *cid = (int *)(((char *)&slap_cids) + control_defs[i].sc_cid );\n\t\trc = register_supported_control( control_defs[i].sc_oid,\n\t\t\tcontrol_defs[i].sc_mask, control_defs[i].sc_extendedops,\n\t\t\tcontrol_defs[i].sc_parse, cid );\n\t\tif ( rc != LDAP_SUCCESS ) break;\n\t}\n\n\treturn rc;\n}",
        "output": "0",
        "idx": 270
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  QUInt8() {}",
        "output": "1",
        "idx": 3228
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ram_addr_t ppc4xx_sdram_adjust(ram_addr_t ram_size, int nr_banks,\n\n                               target_phys_addr_t ram_bases[],\n\n                               target_phys_addr_t ram_sizes[],\n\n                               const unsigned int sdram_bank_sizes[])\n\n{\n\n    ram_addr_t size_left = ram_size;\n\n    int i;\n\n    int j;\n\n\n\n    for (i = 0; i < nr_banks; i++) {\n\n        for (j = 0; sdram_bank_sizes[j] != 0; j++) {\n\n            unsigned int bank_size = sdram_bank_sizes[j];\n\n\n\n            if (bank_size <= size_left) {\n\n                char name[32];\n\n                snprintf(name, sizeof(name), \"ppc4xx.sdram%d\", i);\n\n                ram_bases[i] = qemu_ram_alloc(NULL, name, bank_size);\n\n                ram_sizes[i] = bank_size;\n\n                size_left -= bank_size;\n\n                break;\n\n            }\n\n        }\n\n\n\n        if (!size_left) {\n\n            /* No need to use the remaining banks. */\n\n            break;\n\n        }\n\n    }\n\n\n\n    ram_size -= size_left;\n\n    if (size_left)\n\n        printf(\"Truncating memory to %d MiB to fit SDRAM controller limits.\\n\",\n\n               (int)(ram_size >> 20));\n\n\n\n    return ram_size;\n\n}\n",
        "output": "0",
        "idx": 4388
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void perf_nesting(void)\n\n{\n\n    unsigned int i, maxcycles, maxnesting;\n\n    double duration;\n\n\n\n    maxcycles = 10000;\n\n    maxnesting = 1000;\n\n    Coroutine *root;\n\n\n\n    g_test_timer_start();\n\n    for (i = 0; i < maxcycles; i++) {\n\n        NestData nd = {\n\n            .n_enter  = 0,\n\n            .n_return = 0,\n\n            .max      = maxnesting,\n\n        };\n\n        root = qemu_coroutine_create(nest);\n\n        qemu_coroutine_enter(root, &nd);\n\n    }\n\n    duration = g_test_timer_elapsed();\n\n\n\n    g_test_message(\"Nesting %u iterations of %u depth each: %f s\\n\",\n\n        maxcycles, maxnesting, duration);\n\n}\n",
        "output": "1",
        "idx": 4592
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "R_API int r_socket_read(RSocket *s, unsigned char *buf, int len) {\n\treturn -1;\n}",
        "output": "1",
        "idx": 932
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void pointZZ_pDouble(PointZZ_p * rop, const PointZZ_p * op, const CurveZZ_p * curve) {\n    mpz_t numer, denom, lambda;\n    mpz_inits(numer, denom, lambda, NULL);\n\n    // calculate lambda\n    mpz_mul(numer, op->x, op->x);\n    mpz_mul_ui(numer, numer, 3);\n    mpz_add(numer, numer, curve->a);\n    mpz_mul_ui(denom, op->y, 2);\n    mpz_invert(denom, denom, curve->p);  // TODO check status\n    mpz_mul(lambda, numer, denom);\n    mpz_mod(lambda, lambda, curve->p);\n\n    // calculate resulting x coord\n    mpz_mul(rop->x, lambda, lambda);\n    mpz_sub(rop->x, rop->x, op->x);\n    mpz_sub(rop->x, rop->x, op->x);\n    mpz_mod(rop->x, rop->x, curve->p);\n\n    //calculate resulting y coord\n    mpz_sub(rop->y, op->x, rop->x);\n    mpz_mul(rop->y, lambda, rop->y);\n    mpz_sub(rop->y, rop->y, op->y);\n    mpz_mod(rop->y, rop->y, curve->p);\n\n    mpz_clears(numer, denom, lambda, NULL);\n}",
        "output": "1",
        "idx": 1400
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "atol8(const char *p, size_t char_cnt)\n{\n\tint64_t l;\n\tint digit;\n        \n\tl = 0;\n\twhile (char_cnt-- > 0) {\n\t\tif (*p >= '0' && *p <= '7')\n\t\t\tdigit = *p - '0';\n\t\telse\n\t\t\tbreak;\n\t\tp++;\n\t\tl <<= 3;\n\t\tl |= digit;\n\t}\n\treturn (l);\n}",
        "output": "1",
        "idx": 4374
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_credentials_generation (GoaProvider *provider)\n{\n  return 3;\n}",
        "output": "0",
        "idx": 5966
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ax25_fwd_ioctl(unsigned int cmd, struct ax25_fwd_struct *fwd)\n{\n\tax25_dev *ax25_dev, *fwd_dev;\n\n\tif ((ax25_dev = ax25_addr_ax25dev(&fwd->port_from)) == NULL)\n\t\treturn -EINVAL;\n\n\tswitch (cmd) {\n\tcase SIOCAX25ADDFWD:\n\t\tif ((fwd_dev = ax25_addr_ax25dev(&fwd->port_to)) == NULL)\n\t\t\treturn -EINVAL;\n\t\tif (ax25_dev->forward != NULL)\n\t\t\treturn -EINVAL;\n\t\tax25_dev->forward = fwd_dev->dev;\n\t\tbreak;\n\n\tcase SIOCAX25DELFWD:\n\t\tif (ax25_dev->forward == NULL)\n\t\t\treturn -EINVAL;\n\t\tax25_dev->forward = NULL;\n\t\tbreak;\n\n\tdefault:\n\t\treturn -EINVAL;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 760
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_has_zero_init(BlockDriverState *bs)\n\n{\n\n    assert(bs->drv);\n\n\n\n    if (bs->drv->bdrv_has_zero_init) {\n\n        return bs->drv->bdrv_has_zero_init(bs);\n\n    }\n\n\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 1210
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline QEMUClock *qemu_clock_ptr(QEMUClockType type)\n\n{\n\n    return &qemu_clocks[type];\n\n}\n",
        "output": "0",
        "idx": 5103
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "on_screen_monitors_changed (GdkScreen *screen,\n                            GSManager *manager)\n{\n        GSList *l;\n        int     n_monitors;\n        int     n_windows;\n        int     i;\n\n        n_monitors = gdk_screen_get_n_monitors (screen);\n        n_windows = g_slist_length (manager->priv->windows);\n\n        gs_debug (\"Monitors changed for screen %d: num=%d\",\n                  gdk_screen_get_number (screen),\n                  n_monitors);\n\n        if (n_monitors > n_windows) {\n                /* add more windows */\n                for (i = n_windows; i < n_monitors; i++) {\n                        gs_manager_create_window_for_monitor (manager, screen, i - 1);\n                }\n        } else {\n                /* remove the extra windows */\n                for (l = manager->priv->windows; l != NULL; l = l->next) {\n                        GdkScreen *this_screen;\n                        int        this_monitor;\n\n                        this_screen = gs_window_get_screen (GS_WINDOW (l->data));\n                        this_monitor = gs_window_get_monitor (GS_WINDOW (l->data));\n                        if (this_screen == screen && this_monitor >= n_monitors) {\n                                manager_maybe_stop_job_for_window (manager, GS_WINDOW (l->data));\n                                gs_window_destroy (GS_WINDOW (l->data));\n                                manager->priv->windows = g_slist_delete_link (manager->priv->windows, l);\n                        }\n                }\n        }\n}",
        "output": "1",
        "idx": 5343
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "usage(void)\n{\n#define KEEP(s) s \"\\n\"\n    static const char msg[] =\n    {\n\tKEEP(\"\")\n\tKEEP(\"Options:\")\n\tKEEP(\"  -S <<       read commands from standard input\")\n\tKEEP(\"  -T TERM     use this instead of $TERM\")\n\tKEEP(\"  -V          print curses-version\")\n\tKEEP(\"  -x          do not try to clear scrollback\")\n\tKEEP(\"\")\n\tKEEP(\"Commands:\")\n\tKEEP(\"  clear       clear the screen\")\n\tKEEP(\"  init        initialize the terminal\")\n\tKEEP(\"  reset       reinitialize the terminal\")\n\tKEEP(\"  capname     unlike clear/init/reset, print value for capability \\\"capname\\\"\")\n    };\n#undef KEEP\n    (void) fprintf(stderr, \"Usage: %s [options] [command]\\n\", prg_name);\n    fputs(msg, stderr);\n    ExitProgram(ErrUsage);\n}",
        "output": "0",
        "idx": 812
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static UINT rdpei_touch_update(RdpeiClientContext* context, int externalId, int x, int y,\n                               int* contactId)\n{\n\tunsigned int i;\n\tint contactIdlocal = -1;\n\tRDPINPUT_CONTACT_DATA contact;\n\tRDPINPUT_CONTACT_POINT* contactPoint = NULL;\n\tRDPEI_PLUGIN* rdpei = (RDPEI_PLUGIN*)context->handle;\n\tUINT error = CHANNEL_RC_OK;\n\n\tfor (i = 0; i < rdpei->maxTouchContacts; i++)\n\t{\n\t\tcontactPoint = (RDPINPUT_CONTACT_POINT*)&rdpei->contactPoints[i];\n\n\t\tif (!contactPoint->active)\n\t\t\tcontinue;\n\n\t\tif (contactPoint->externalId == externalId)\n\t\t{\n\t\t\tcontactIdlocal = contactPoint->contactId;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (contactIdlocal >= 0)\n\t{\n\t\tZeroMemory(&contact, sizeof(RDPINPUT_CONTACT_DATA));\n\t\tcontactPoint->lastX = x;\n\t\tcontactPoint->lastY = y;\n\t\tcontact.x = x;\n\t\tcontact.y = y;\n\t\tcontact.contactId = (UINT32)contactIdlocal;\n\t\tcontact.contactFlags |= CONTACT_FLAG_UPDATE;\n\t\tcontact.contactFlags |= CONTACT_FLAG_INRANGE;\n\t\tcontact.contactFlags |= CONTACT_FLAG_INCONTACT;\n\t\terror = context->AddContact(context, &contact);\n\t}\n\n\t*contactId = contactIdlocal;\n\treturn error;\n}",
        "output": "0",
        "idx": 4003
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline uint32_t vmsvga_fifo_read_raw(struct vmsvga_state_s *s)\n\n{\n\n    uint32_t cmd = s->fifo[CMD(stop) >> 2];\n\n\n\n    s->cmd->stop = cpu_to_le32(CMD(stop) + 4);\n\n    if (CMD(stop) >= CMD(max)) {\n\n        s->cmd->stop = s->cmd->min;\n\n    }\n\n    return cmd;\n\n}\n",
        "output": "1",
        "idx": 5079
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int check_opcodes(MMCO *mmco1, MMCO *mmco2, int n_mmcos)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < n_mmcos; i++) {\n\n        if (mmco1[i].opcode != mmco2[i].opcode)\n\n            return -1;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5913
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void check_cmd(AHCIState *s, int port)\n\n{\n\n    AHCIPortRegs *pr = &s->dev[port].port_regs;\n\n    int slot;\n\n\n\n    if ((pr->cmd & PORT_CMD_START) && pr->cmd_issue) {\n\n        for (slot = 0; (slot < 32) && pr->cmd_issue; slot++) {\n\n            if ((pr->cmd_issue & (1 << slot)) &&\n\n                !handle_cmd(s, port, slot)) {\n\n                pr->cmd_issue &= ~(1 << slot);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4945
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ipvideo_decode_block_opcode_0xB(IpvideoContext *s)\n\n{\n\n    int y;\n\n\n\n    /* 64-color encoding (each pixel in block is a different color) */\n\n    CHECK_STREAM_PTR(64);\n\n\n\n    for (y = 0; y < 8; y++) {\n\n        memcpy(s->pixel_ptr, s->stream_ptr, 8);\n\n        s->stream_ptr += 8;\n\n        s->pixel_ptr  += s->stride;\n\n    }\n\n\n\n    /* report success */\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2394
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void smack_netlbl_delete(struct sock *sk)\n{\n\tstruct socket_smack *ssp = sk->sk_security;\n\n\t/*\n\t * Take the label off the socket if one is set.\n\t */\n\tif (ssp->smk_state != SMK_NETLBL_LABELED)\n\t\treturn;\n\n\tlocal_bh_disable();\n\tbh_lock_sock_nested(sk);\n\tnetlbl_sock_delattr(sk);\n\tbh_unlock_sock(sk);\n\tlocal_bh_enable();\n\tssp->smk_state = SMK_NETLBL_UNLABELED;\n}",
        "output": "0",
        "idx": 5340
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int blk_mig_active(void)\n\n{\n\n    return !QSIMPLEQ_EMPTY(&block_mig_state.bmds_list);\n\n}\n",
        "output": "1",
        "idx": 1875
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int writer_print_string(WriterContext *wctx,\n\n                                      const char *key, const char *val, int opt)\n\n{\n\n    const struct section *section = wctx->section[wctx->level];\n\n    int ret = 0;\n\n\n\n    if (opt && !(wctx->writer->flags & WRITER_FLAG_DISPLAY_OPTIONAL_FIELDS))\n\n        return 0;\n\n\n\n    if (section->show_all_entries || av_dict_get(section->entries_to_show, key, NULL, 0)) {\n\n        wctx->writer->print_string(wctx, key, val);\n\n        wctx->nb_item[wctx->level]++;\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 1087
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ber_write_length(wStream* s, int length)\n{\n\tif (length > 0x7F)\n\t{\n\t\tStream_Write_UINT8(s, 0x82);\n\t\tStream_Write_UINT16_BE(s, length);\n\t\treturn 3;\n\t}\n\telse\n\t{\n\t\tStream_Write_UINT8(s, length);\n\t\treturn 1;\n\t}\n}",
        "output": "1",
        "idx": 2105
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void window_resize(IMAGE *img)\n{\n    gtk_drawing_area_size(GTK_DRAWING_AREA (img->darea),\n        img->width, img->height);\n    if (!(GTK_WIDGET_FLAGS(img->window) & GTK_VISIBLE)) {\n        /* We haven't yet shown the window, so set a default size\n         * which is smaller than the desktop to allow room for\n         * desktop toolbars, and if possible a little larger than\n         * the image to allow room for the scroll bars.\n         * We don't know the width of the scroll bars, so just guess. */\n        gtk_window_set_default_size(GTK_WINDOW(img->window),\n            min(gdk_screen_width()-96, img->width+24),\n            min(gdk_screen_height()-96, img->height+24));\n    }\n}",
        "output": "1",
        "idx": 1785
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const CPUArchIdList *pc_possible_cpu_arch_ids(MachineState *machine)\n\n{\n\n    assert(machine->possible_cpus);\n\n    return machine->possible_cpus;\n\n}\n",
        "output": "0",
        "idx": 2240
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {\n  if (data.empty()) {\n    return;\n  }\n  if (!header.empty()) {\n    header.append(\",\", 1);\n  }\n  header.append(data.data(), data.size());\n}",
        "output": "1",
        "idx": 2723
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LOG_OpenFileLog(const char *log_file)\n{\n  FILE *f;\n\n  if (log_file) {\n    f = fopen(log_file, \"a\");\n    if (!f)\n      LOG_FATAL(\"Could not open log file %s\", log_file);\n  } else {\n    f = stderr;\n  }\n\n  /* Enable line buffering */\n  setvbuf(f, NULL, _IOLBF, BUFSIZ);\n\n  if (file_log && file_log != stderr)\n    fclose(file_log);\n\n  file_log = f;\n}",
        "output": "1",
        "idx": 413
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int64_t ga_get_fd_handle(GAState *s, Error **errp)\n\n{\n\n    int64_t handle;\n\n\n\n    g_assert(s->pstate_filepath);\n\n    /* we blacklist commands and avoid operations that potentially require\n\n     * writing to disk when we're in a frozen state. this includes opening\n\n     * new files, so we should never get here in that situation\n\n     */\n\n    g_assert(!ga_is_frozen(s));\n\n\n\n    handle = s->pstate.fd_counter++;\n\n    if (s->pstate.fd_counter < 0) {\n\n        s->pstate.fd_counter = 0;\n\n    }\n\n    if (!write_persistent_state(&s->pstate, s->pstate_filepath)) {\n\n        error_setg(errp, \"failed to commit persistent state to disk\");\n\n    }\n\n\n\n    return handle;\n\n}\n",
        "output": "1",
        "idx": 4341
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "INLINE bits64 extractFloat64Frac( float64 a )\n\n{\n\n\n\n    return a & LIT64( 0x000FFFFFFFFFFFFF );\n\n\n\n}\n",
        "output": "0",
        "idx": 4880
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_cpu_reset(void *opaque)\n\n{\n\n    ARMCPU *cpu = opaque;\n\n    CPUARMState *env = &cpu->env;\n\n    const struct arm_boot_info *info = env->boot_info;\n\n\n\n    cpu_reset(CPU(cpu));\n\n    if (info) {\n\n        if (!info->is_linux) {\n\n            /* Jump to the entry point.  */\n\n            env->regs[15] = info->entry & 0xfffffffe;\n\n            env->thumb = info->entry & 1;\n\n        } else {\n\n            if (CPU(cpu) == first_cpu) {\n\n                env->regs[15] = info->loader_start;\n\n                if (!info->dtb_filename) {\n\n                    if (old_param) {\n\n                        set_kernel_args_old(info);\n\n                    } else {\n\n                        set_kernel_args(info);\n\n                    }\n\n                }\n\n            } else {\n\n                info->secondary_cpu_reset_hook(cpu, info);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5366
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int cris_addc_m(int a, const int *b)\n\n{\n\n\tasm volatile (\"addc [%1], %0\\n\" : \"+r\" (a) : \"r\" (b));\n\n\treturn a;\n\n}\n",
        "output": "1",
        "idx": 4515
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sp_add_point_to_mbr(uchar *(*wkb), uchar *end, uint n_dims, \n\t\t\t       uchar byte_order __attribute__((unused)),\n\t\t\t       double *mbr)\n{\n  double ord;\n  double *mbr_end = mbr + n_dims * 2;\n\n  while (mbr < mbr_end)\n  {\n    if ((*wkb) > end - 8)\n      return -1;\n    float8get(ord, (*wkb));\n    (*wkb) += 8;\n    if (ord < *mbr)\n      *mbr = ord;\n    mbr++;\n    if (ord > *mbr)\n      *mbr = ord;\n    mbr++;\n  }\n  return 0;\n}",
        "output": "0",
        "idx": 614
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_scsi_vring_teardown(VirtIOSCSI *s)\n\n{\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(s);\n\n    VirtIOSCSICommon *vs = VIRTIO_SCSI_COMMON(s);\n\n    int i;\n\n\n\n    if (s->ctrl_vring) {\n\n        vring_teardown(&s->ctrl_vring->vring, vdev, 0);\n\n\n\n    }\n\n    if (s->event_vring) {\n\n        vring_teardown(&s->event_vring->vring, vdev, 1);\n\n\n\n    }\n\n    if (s->cmd_vrings) {\n\n        for (i = 0; i < vs->conf.num_queues && s->cmd_vrings[i]; i++) {\n\n            vring_teardown(&s->cmd_vrings[i]->vring, vdev, 2 + i);\n\n\n\n        }\n\n        free(s->cmd_vrings);\n\n        s->cmd_vrings = NULL;\n\n    }\n\n}",
        "output": "1",
        "idx": 604
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dec_user(DisasContext *dc)\n\n{\n\n    LOG_DIS(\"user\");\n\n\n\n    cpu_abort(dc->env, \"user insn undefined\\n\");\n\n}\n",
        "output": "1",
        "idx": 2027
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void term_update(void)\n\n{\n\n    int i, delta;\n\n\n\n    if (term_cmd_buf_size != term_last_cmd_buf_size ||\n\n        memcmp(term_cmd_buf, term_last_cmd_buf, term_cmd_buf_size) != 0) {\n\n        for(i = 0; i < term_last_cmd_buf_index; i++) {\n\n            term_printf(\"\\033[D\");\n\n        }\n\n        term_cmd_buf[term_cmd_buf_size] = '\\0';\n\n        term_printf(\"%s\", term_cmd_buf);\n\n        term_printf(\"\\033[K\");\n\n        memcpy(term_last_cmd_buf, term_cmd_buf, term_cmd_buf_size);\n\n        term_last_cmd_buf_size = term_cmd_buf_size;\n\n        term_last_cmd_buf_index = term_cmd_buf_size;\n\n    }\n\n    if (term_cmd_buf_index != term_last_cmd_buf_index) {\n\n        delta = term_cmd_buf_index - term_last_cmd_buf_index;\n\n        if (delta > 0) {\n\n            for(i = 0;i < delta; i++) {\n\n                term_printf(\"\\033[C\");\n\n            }\n\n        } else {\n\n            delta = -delta;\n\n            for(i = 0;i < delta; i++) {\n\n                term_printf(\"\\033[D\");\n\n            }\n\n        }\n\n        term_last_cmd_buf_index = term_cmd_buf_index;\n\n    }\n\n    term_flush();\n\n}\n",
        "output": "0",
        "idx": 5149
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool ha_rollback_to_savepoint_can_release_mdl(THD *thd)\n{\n  Ha_trx_info *ha_info;\n  THD_TRANS *trans= (thd->in_sub_stmt ? &thd->transaction.stmt :\n                                        &thd->transaction.all);\n\n  DBUG_ENTER(\"ha_rollback_to_savepoint_can_release_mdl\");\n\n  /**\n    Checking whether it is safe to release metadata locks after rollback to\n    savepoint in all the storage engines that are part of the transaction.\n  */\n  for (ha_info= trans->ha_list; ha_info; ha_info= ha_info->next())\n  {\n    handlerton *ht= ha_info->ht();\n    DBUG_ASSERT(ht);\n\n    if (ht->savepoint_rollback_can_release_mdl == 0 ||\n        ht->savepoint_rollback_can_release_mdl(ht, thd) == false)\n      DBUG_RETURN(false);\n  }\n\n  DBUG_RETURN(true);\n}",
        "output": "0",
        "idx": 1401
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int hugetlb_overcommit_handler(struct ctl_table *table, int write,\n\t\tvoid *buffer, size_t *length, loff_t *ppos)\n{\n\tstruct hstate *h = &default_hstate;\n\tunsigned long tmp;\n\tint ret;\n\n\tif (!hugepages_supported())\n\t\treturn -EOPNOTSUPP;\n\n\ttmp = h->nr_overcommit_huge_pages;\n\n\tif (write && hstate_is_gigantic(h))\n\t\treturn -EINVAL;\n\n\ttable->data = &tmp;\n\ttable->maxlen = sizeof(unsigned long);\n\tret = proc_doulongvec_minmax(table, write, buffer, length, ppos);\n\tif (ret)\n\t\tgoto out;\n\n\tif (write) {\n\t\tspin_lock(&hugetlb_lock);\n\t\th->nr_overcommit_huge_pages = tmp;\n\t\tspin_unlock(&hugetlb_lock);\n\t}\nout:\n\treturn ret;\n}",
        "output": "1",
        "idx": 470
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int em_ret_near_imm(struct x86_emulate_ctxt *ctxt)\n{\n\tint rc;\n\n\tctxt->dst.type = OP_REG;\n\tctxt->dst.addr.reg = &ctxt->_eip;\n\tctxt->dst.bytes = ctxt->op_bytes;\n\trc = emulate_pop(ctxt, &ctxt->dst.val, ctxt->op_bytes);\n\tif (rc != X86EMUL_CONTINUE)\n\t\treturn rc;\n\trsp_increment(ctxt, ctxt->src.val);\n\treturn X86EMUL_CONTINUE;\n}",
        "output": "1",
        "idx": 3210
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void spin_reset(void *opaque)\n\n{\n\n    SpinState *s = opaque;\n\n    int i;\n\n\n\n    for (i = 0; i < MAX_CPUS; i++) {\n\n        SpinInfo *info = &s->spin[i];\n\n\n\n        info->pir = i;\n\n        info->r3 = i;\n\n        info->addr = 1;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3892
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int source_config_props(AVFilterLink *outlink)\n\n{\n\n    AVFilterContext *ctx = outlink->src;\n\n    Frei0rContext *s = ctx->priv;\n\n\n\n    if (av_image_check_size(s->w, s->h, 0, ctx) < 0)\n\n        return AVERROR(EINVAL);\n\n    outlink->w = s->w;\n\n    outlink->h = s->h;\n\n    outlink->time_base = s->time_base;\n\n\n\n\n\n    if (!(s->instance = s->construct(outlink->w, outlink->h))) {\n\n        av_log(ctx, AV_LOG_ERROR, \"Impossible to load frei0r instance\");\n\n        return AVERROR(EINVAL);\n\n    }\n\n\n\n    return set_params(ctx, s->params);\n\n}",
        "output": "1",
        "idx": 1472
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,\n                     const T& val6, const T& val7, const T& val8) const {\n      return CImg<T>(_width,_height,_depth,_spectrum).fill(val0,val1,val2,val3,val4,val5,val6,val7,val8);\n    }",
        "output": "0",
        "idx": 5853
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void *load_bytes(RBinFile *arch, const ut8 *buf, ut64 sz, ut64 loaddr, Sdb *sdb) {\n\tif (!buf || !sz || sz == UT64_MAX) {\n\t\treturn NULL;\n\t}\n\tRBuffer *tbuf = r_buf_new ();\n\tr_buf_set_bytes (tbuf, buf, sz);\n\tstruct r_bin_bflt_obj *res = r_bin_bflt_new_buf (tbuf);\n\tr_buf_free (tbuf);\n\treturn res ? res : NULL;\n}",
        "output": "1",
        "idx": 2295
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ext4_io_end_t *ext4_init_io_end (struct inode *inode)\n{\n\text4_io_end_t *io = NULL;\n\n\tio = kmalloc(sizeof(*io), GFP_NOFS);\n\n\tif (io) {\n\t\tigrab(inode);\n\t\tio->inode = inode;\n\t\tio->flag = 0;\n\t\tio->offset = 0;\n\t\tio->size = 0;\n\t\tio->error = 0;\n\t\tINIT_WORK(&io->work, ext4_end_io_work);\n\t\tINIT_LIST_HEAD(&io->list);\n\t}\n\n\treturn io;\n}",
        "output": "1",
        "idx": 823
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(ServerSelectorTestFixture, ShouldReturnNoneIfTopologyUnknown) {\n    auto topologyDescription = std::make_shared<TopologyDescription>(sdamConfiguration);\n    ASSERT_EQ(TopologyType::kUnknown, topologyDescription->getType());\n    ASSERT_EQ(boost::none, selector.selectServers(topologyDescription, ReadPreferenceSetting()));\n}",
        "output": "1",
        "idx": 6023
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void spapr_cpu_core_realize_child(Object *child, Error **errp)\n\n{\n\n    Error *local_err = NULL;\n\n    sPAPRMachineState *spapr = SPAPR_MACHINE(qdev_get_machine());\n\n    CPUState *cs = CPU(child);\n\n    PowerPCCPU *cpu = POWERPC_CPU(cs);\n\n    Object *obj;\n\n\n\n    obj = object_new(spapr->icp_type);\n\n    object_property_add_child(OBJECT(cpu), \"icp\", obj, NULL);\n\n    object_property_add_const_link(obj, \"xics\", OBJECT(spapr), &error_abort);\n\n    object_property_set_bool(obj, true, \"realized\", &local_err);\n\n    if (local_err) {\n\n        goto error;\n\n    }\n\n\n\n    object_property_set_bool(child, true, \"realized\", &local_err);\n\n    if (local_err) {\n\n        goto error;\n\n    }\n\n\n\n    spapr_cpu_init(spapr, cpu, &local_err);\n\n    if (local_err) {\n\n        goto error;\n\n    }\n\n\n\n    xics_cpu_setup(XICS_FABRIC(spapr), cpu, ICP(obj));\n\n    return;\n\n\n\nerror:\n\n    object_unparent(obj);\n\n    error_propagate(errp, local_err);\n\n}\n",
        "output": "1",
        "idx": 5156
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ActivationPtr createActivation(const StreamInfo::StreamInfo& info,\n                               const Http::RequestHeaderMap* request_headers,\n                               const Http::ResponseHeaderMap* response_headers,\n                               const Http::ResponseTrailerMap* response_trailers) {\n  auto activation = std::make_unique<Activation>();\n  activation->InsertValueProducer(Request, std::make_unique<RequestWrapper>(request_headers, info));\n  activation->InsertValueProducer(\n      Response, std::make_unique<ResponseWrapper>(response_headers, response_trailers, info));\n  activation->InsertValueProducer(Connection, std::make_unique<ConnectionWrapper>(info));\n  activation->InsertValueProducer(Upstream, std::make_unique<UpstreamWrapper>(info));\n  activation->InsertValueProducer(Source, std::make_unique<PeerWrapper>(info, false));\n  activation->InsertValueProducer(Destination, std::make_unique<PeerWrapper>(info, true));\n  activation->InsertValueProducer(Metadata,\n                                  std::make_unique<MetadataProducer>(info.dynamicMetadata()));\n  activation->InsertValueProducer(FilterState,\n                                  std::make_unique<FilterStateWrapper>(info.filterState()));\n  return activation;\n}",
        "output": "1",
        "idx": 1319
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qcow2_mark_dirty(BlockDriverState *bs)\n{\n    BDRVQcowState *s = bs->opaque;\n    uint64_t val;\n    int ret;\n\n    assert(s->qcow_version >= 3);\n\n    if (s->incompatible_features & QCOW2_INCOMPAT_DIRTY) {\n        return 0; /* already dirty */\n    }\n\n    val = cpu_to_be64(s->incompatible_features | QCOW2_INCOMPAT_DIRTY);\n    ret = bdrv_pwrite(bs->file, offsetof(QCowHeader, incompatible_features),\n                      &val, sizeof(val));\n    if (ret < 0) {\n        return ret;\n    }\n    ret = bdrv_flush(bs->file);\n    if (ret < 0) {\n        return ret;\n    }\n\n    /* Only treat image as dirty if the header was updated successfully */\n    s->incompatible_features |= QCOW2_INCOMPAT_DIRTY;\n    return 0;\n}",
        "output": "0",
        "idx": 4387
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_devtree_setprop(void *fdt, const char *node_path,\n\n                         const char *property, void *val_array, int size)\n\n{\n\n    int offset;\n\n\n\n    offset = fdt_path_offset(fdt, node_path);\n\n    if (offset < 0)\n\n        return offset;\n\n\n\n    return fdt_setprop(fdt, offset, property, val_array, size);\n\n}\n",
        "output": "1",
        "idx": 3691
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void jas_matrix_clip(jas_matrix_t *matrix, jas_seqent_t minval,\n  jas_seqent_t maxval)\n{\n\tint i;\n\tint j;\n\tjas_seqent_t v;\n\tjas_seqent_t *rowstart;\n\tjas_seqent_t *data;\n\tint rowstep;\n\n\tif (jas_matrix_numrows(matrix) > 0 && jas_matrix_numcols(matrix) > 0) {\n\t\tassert(matrix->rows_);\n\t\trowstep = jas_matrix_rowstep(matrix);\n\t\tfor (i = matrix->numrows_, rowstart = matrix->rows_[0]; i > 0; --i,\n\t\t  rowstart += rowstep) {\n\t\t\tdata = rowstart;\n\t\t\tfor (j = matrix->numcols_, data = rowstart; j > 0; --j,\n\t\t\t  ++data) {\n\t\t\t\tv = *data;\n\t\t\t\tif (v < minval) {\n\t\t\t\t\t*data = minval;\n\t\t\t\t} else if (v > maxval) {\n\t\t\t\t\t*data = maxval;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
        "output": "1",
        "idx": 4361
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t block_crypto_init_func(QCryptoBlock *block,\n\n                                      void *opaque,\n\n                                      size_t headerlen,\n\n                                      Error **errp)\n\n{\n\n    struct BlockCryptoCreateData *data = opaque;\n\n    int ret;\n\n\n\n    /* User provided size should reflect amount of space made\n\n     * available to the guest, so we must take account of that\n\n     * which will be used by the crypto header\n\n     */\n\n    data->size += headerlen;\n\n\n\n    qemu_opt_set_number(data->opts, BLOCK_OPT_SIZE, data->size, &error_abort);\n\n    ret = bdrv_create_file(data->filename, data->opts, errp);\n\n    if (ret < 0) {\n\n        return -1;\n\n    }\n\n\n\n    data->blk = blk_new_open(data->filename, NULL, NULL,\n\n                             BDRV_O_RDWR | BDRV_O_PROTOCOL, errp);\n\n    if (!data->blk) {\n\n        return -1;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2185
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMI_RH_ENABLES_Unmarshal(TPMI_RH_ENABLES *target, BYTE **buffer, INT32 *size, BOOL allowNull)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n\n    if (rc == TPM_RC_SUCCESS) {\n\trc = TPM_HANDLE_Unmarshal(target, buffer, size);  \n    }\n    if (rc == TPM_RC_SUCCESS) {\n\tswitch (*target) {\n\t  case TPM_RH_OWNER:\n\t  case TPM_RH_PLATFORM:\n\t  case TPM_RH_ENDORSEMENT:\n\t  case TPM_RH_PLATFORM_NV:\n\t    break;\n\t  case TPM_RH_NULL:\n\t    if (allowNull) {\n\t\tbreak;\n\t    }\n\t  default:\n\t    rc = TPM_RC_VALUE;\n\t}\n    }\n    return rc;\n}",
        "output": "1",
        "idx": 3294
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_new_polyline (void)\n{\n    return rsvg_new_any_poly (TRUE);\n}",
        "output": "1",
        "idx": 5076
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "print_values(int byte_offset, unsigned int bit_offset,\n\t     unsigned int bits_available)\n{\n    std::cout << \"byte offset = \" << byte_offset << \", \"\n\t      << \"bit offset = \" << bit_offset << \", \"\n\t      << \"bits available = \" << bits_available << std::endl;\n}",
        "output": "1",
        "idx": 1830
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool IS_CLOSER(float x, float y, float z) { return fabs((x)-(y)) < fabs((x)-(z)); }",
        "output": "0",
        "idx": 4337
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void xen_log_stop(MemoryListener *listener, MemoryRegionSection *section)\n\n{\n\n    XenIOState *state = container_of(listener, XenIOState, memory_listener);\n\n\n\n    state->log_for_dirtybit = NULL;\n\n    /* Disable dirty bit tracking */\n\n    xc_hvm_track_dirty_vram(xen_xc, xen_domid, 0, 0, NULL);\n\n}\n",
        "output": "0",
        "idx": 2559
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static double get_video_clock(VideoState *is)\n\n{\n\n    double delta;\n\n    if (is->paused) { //FIXME timing gets messed after pause\n\n        delta = 0;\n\n    } else {\n\n        delta = (av_gettime() - is->video_current_pts_time) / 1000000.0;\n\n    }\n\n    return is->video_current_pts + delta;\n\n}\n",
        "output": "0",
        "idx": 5019
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_wsr_windowbase(DisasContext *dc, uint32_t sr, TCGv_i32 v)\n\n{\n\n    gen_helper_wsr_windowbase(cpu_env, v);\n\n    reset_used_window(dc);\n\n}\n",
        "output": "1",
        "idx": 111
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compile_string_node(Node* node, regex_t* reg)\n{\n  int r, len, prev_len, slen, ambig;\n  UChar *p, *prev, *end;\n  StrNode* sn;\n  OnigEncoding enc = reg->enc;\n\n  sn = STR_(node);\n  if (sn->end <= sn->s)\n    return 0;\n\n  end = sn->end;\n  ambig = NODE_STRING_IS_AMBIG(node);\n\n  p = prev = sn->s;\n  prev_len = enclen(enc, p);\n  p += prev_len;\n  slen = 1;\n\n  for (; p < end; ) {\n    len = enclen(enc, p);\n    if (len == prev_len) {\n      slen++;\n    }\n    else {\n      r = add_compile_string(prev, prev_len, slen, reg, ambig);\n      if (r != 0) return r;\n\n      prev  = p;\n      slen  = 1;\n      prev_len = len;\n    }\n\n    p += len;\n  }\n\n  return add_compile_string(prev, prev_len, slen, reg, ambig);\n}",
        "output": "0",
        "idx": 4949
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static target_long monitor_get_psr (const struct MonitorDef *md, int val)\n\n{\n\n    CPUState *env = mon_get_cpu();\n\n    if (!env)\n\n        return 0;\n\n    return GET_PSR(env);\n\n}\n",
        "output": "1",
        "idx": 290
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "fpAcc(TIFF* tif, uint8* cp0, tmsize_t cc)\n{\n\ttmsize_t stride = PredictorState(tif)->stride;\n\tuint32 bps = tif->tif_dir.td_bitspersample / 8;\n\ttmsize_t wc = cc / bps;\n\ttmsize_t count = cc;\n\tuint8 *cp = (uint8 *) cp0;\n\tuint8 *tmp = (uint8 *)_TIFFmalloc(cc);\n\n\tassert((cc%(bps*stride))==0);\n\n\tif (!tmp)\n\t\treturn;\n\n\twhile (count > stride) {\n\t\tREPEAT4(stride, cp[stride] =\n                        (unsigned char) ((cp[stride] + cp[0]) & 0xff); cp++)\n\t\tcount -= stride;\n\t}\n\n\t_TIFFmemcpy(tmp, cp0, cc);\n\tcp = (uint8 *) cp0;\n\tfor (count = 0; count < wc; count++) {\n\t\tuint32 byte;\n\t\tfor (byte = 0; byte < bps; byte++) {\n\t\t\t#if WORDS_BIGENDIAN\n\t\t\tcp[bps * count + byte] = tmp[byte * wc + count];\n\t\t\t#else\n\t\t\tcp[bps * count + byte] =\n\t\t\t\ttmp[(bps - byte - 1) * wc + count];\n\t\t\t#endif\n\t\t}\n\t}\n\t_TIFFfree(tmp);\n}",
        "output": "1",
        "idx": 1554
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void remove_translation_table(FlowSource_t *fs, exporter_ipfix_domain_t *exporter, uint16_t id) {\ninput_translation_t *table, *parent;\n\n\tsyslog(LOG_INFO, \"Process_ipfix: [%u] Withdraw template id: %i\", \n\t\t\texporter->info.id, id);\n\n\tparent = NULL;\n\ttable = exporter->input_translation_table;\n\twhile ( table && ( table->id != id ) ) {\n\t\tparent = table;\n\t\ttable = table->next;\n\t}\n\n\tif ( table == NULL ) {\n\t\tsyslog(LOG_ERR, \"Process_ipfix: [%u] Withdraw template id: %i. translation table not found\", \n\t\t\t\texporter->info.id, id);\n\t\treturn;\n\t}\n\n\tdbg_printf(\"\\n[%u] Withdraw template ID: %u\\n\", exporter->info.id, table->id);\n\n\t// clear table cache, if this is the table to delete\n\tif (exporter->current_table == table)\n\t\texporter->current_table = NULL;\n\n\tif ( parent ) {\n\t\t// remove table from list\n\t\tparent->next = table->next;\n\t} else {\n\t\t// last table removed\n\t\texporter->input_translation_table = NULL;\n\t}\n\n\tRemoveExtensionMap(fs, table->extension_info.map);\n\tfree(table->sequence);\n\tfree(table->extension_info.map);\n\tfree(table);\n\n} // End of remove_translation_table",
        "output": "1",
        "idx": 2610
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ram_control_load_hook(QEMUFile *f, uint64_t flags)\n\n{\n\n    int ret = -EINVAL;\n\n\n\n    if (f->ops->hook_ram_load) {\n\n        ret = f->ops->hook_ram_load(f, f->opaque, flags);\n\n        if (ret < 0) {\n\n            qemu_file_set_error(f, ret);\n\n        }\n\n    } else {\n\n        qemu_file_set_error(f, ret);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5520
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mm_start_timer(struct qemu_alarm_timer *t)\n\n{\n\n    TIMECAPS tc;\n\n\n\n    memset(&tc, 0, sizeof(tc));\n\n    timeGetDevCaps(&tc, sizeof(tc));\n\n\n\n    mm_period = tc.wPeriodMin;\n\n    timeBeginPeriod(mm_period);\n\n\n\n    mm_timer = timeSetEvent(1,                  /* interval (ms) */\n\n                            mm_period,          /* resolution */\n\n                            mm_alarm_handler,   /* function */\n\n                            (DWORD_PTR)t,       /* parameter */\n\n                            TIME_ONESHOT | TIME_CALLBACK_FUNCTION);\n\n\n\n    if (!mm_timer) {\n\n        fprintf(stderr, \"Failed to initialize win32 alarm timer: %ld\\n\",\n\n                GetLastError());\n\n        timeEndPeriod(mm_period);\n\n        return -1;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 81
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "process_button(struct parsed_tag *tag)\n{\n    Str tmp = NULL;\n    char *p, *q, *r, *qq = \"\";\n    int qlen, v;\n\n    if (cur_form_id < 0) {\n       char *s = \"<form_int method=internal action=none>\";\n       tmp = process_form(parse_tag(&s, TRUE));\n    }\n    if (tmp == NULL)\n       tmp = Strnew();\n\n    p = \"submit\";\n    parsedtag_get_value(tag, ATTR_TYPE, &p);\n    q = NULL;\n    parsedtag_get_value(tag, ATTR_VALUE, &q);\n    r = \"\";\n    parsedtag_get_value(tag, ATTR_NAME, &r);\n\n    v = formtype(p);\n    if (v == FORM_UNKNOWN)\n       return NULL;\n\n    if (!q) {\n       switch (v) {\n       case FORM_INPUT_SUBMIT:\n       case FORM_INPUT_BUTTON:\n           q = \"SUBMIT\";\n           break;\n       case FORM_INPUT_RESET:\n           q = \"RESET\";\n           break;\n       }\n    }\n    if (q) {\n       qq = html_quote(q);\n       qlen = strlen(q);\n    }\n\n    /*    Strcat_charp(tmp, \"<pre_int>\"); */\n    Strcat(tmp, Sprintf(\"<input_alt hseq=\\\"%d\\\" fid=\\\"%d\\\" type=%s \"\n                       \"name=\\\"%s\\\" value=\\\"%s\\\">\",\n                       cur_hseq++, cur_form_id, p, html_quote(r), qq));\n    return tmp;\n}",
        "output": "1",
        "idx": 5073
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dp_packet_has_flow_mark(struct dp_packet *p OVS_UNUSED,\n                        uint32_t *mark OVS_UNUSED)\n{\n#ifdef DPDK_NETDEV\n    if (p->mbuf.ol_flags & PKT_RX_FDIR_ID) {\n        *mark = p->mbuf.hash.fdir.hi;\n        return true;\n    }\n#endif\n    return false;\n}",
        "output": "0",
        "idx": 5701
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t msix_bar_size(PCIDevice *dev)\n\n{\n\n    return (dev->cap_present & QEMU_PCI_CAP_MSIX) ?\n\n        dev->msix_bar_size : 0;\n\n}\n",
        "output": "0",
        "idx": 3420
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int parse_chr(DeviceState *dev, Property *prop, const char *str)\n\n{\n\n    CharDriverState **ptr = qdev_get_prop_ptr(dev, prop);\n\n\n\n    *ptr = qemu_chr_find(str);\n\n    if (*ptr == NULL) {\n\n        return -ENOENT;\n\n    }\n\n    if ((*ptr)->assigned) {\n\n        return -EEXIST;\n\n    }\n\n    (*ptr)->assigned = 1;\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3595
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "decrypt (gcry_mpi_t output, gcry_mpi_t a, gcry_mpi_t b, ELG_secret_key *skey )\n{\n  gcry_mpi_t t1 = mpi_alloc_secure( mpi_get_nlimbs( skey->p ) );\n\n  mpi_normalize (a);\n  mpi_normalize (b);\n\n  /* output = b/(a^x) mod p */\n  mpi_powm( t1, a, skey->x, skey->p );\n  mpi_invm( t1, t1, skey->p );\n  mpi_mulm( output, b, t1, skey->p );\n#if 0\n  if( DBG_CIPHER )\n    {\n      log_mpidump (\"elg decrypted x\", skey->x);\n      log_mpidump (\"elg decrypted p\", skey->p);\n      log_mpidump (\"elg decrypted a\", a);\n      log_mpidump (\"elg decrypted b\", b);\n      log_mpidump (\"elg decrypted M\", output);\n    }\n#endif\n  mpi_free(t1);\n}",
        "output": "1",
        "idx": 3800
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_msmpeg4_encode_init(MpegEncContext *s)\n\n{\n\n    static int init_done=0;\n\n    int i;\n\n\n\n    common_init(s);\n\n    if(s->msmpeg4_version>=4){\n\n        s->min_qcoeff= -255;\n\n        s->max_qcoeff=  255;\n\n    }\n\n\n\n    if (!init_done) {\n\n        /* init various encoding tables */\n\n        init_done = 1;\n\n        init_mv_table(&mv_tables[0]);\n\n        init_mv_table(&mv_tables[1]);\n\n        for(i=0;i<NB_RL_TABLES;i++)\n\n            init_rl(&rl_table[i]);\n\n\n\n        for(i=0; i<NB_RL_TABLES; i++){\n\n            int level;\n\n            for(level=0; level<=MAX_LEVEL; level++){\n\n                int run;\n\n                for(run=0; run<=MAX_RUN; run++){\n\n                    int last;\n\n                    for(last=0; last<2; last++){\n\n                        rl_length[i][level][run][last]= get_size_of_code(s, &rl_table[  i], last, run, level, 0);\n\n                    }\n\n                }\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4997
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MONGO_EXPORT bson_oid_t *bson_iterator_oid( const bson_iterator *i ) {\n    return ( bson_oid_t * )bson_iterator_value( i );\n}",
        "output": "0",
        "idx": 2549
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *ask_new_field(struct chfn_control *ctl, const char *question,\n\t\t\t   char *def_val)\n{\n\tint len;\n\tchar *buf = NULL; /* leave initialized to NULL or getline segfaults */\n#ifndef HAVE_LIBREADLINE\n\tsize_t dummy = 0;\n#endif\n\n\tif (!def_val)\n\t\tdef_val = \"\";\n\twhile (true) {\n\t\tprintf(\"%s [%s]:\", question, def_val);\n\t\t__fpurge(stdin);\n#ifdef HAVE_LIBREADLINE\n\t\trl_bind_key('\\t', rl_insert);\n\t\tif ((buf = readline(\" \")) == NULL)\n#else\n\t\tputchar(' ');\n\t\tfflush(stdout);\n\t\tif (getline(&buf, &dummy, stdin) < 0)\n#endif\n\t\t\terrx(EXIT_FAILURE, _(\"Aborted.\"));\n\t\t/* remove white spaces from string end */\n\t\tltrim_whitespace((unsigned char *) buf);\n\t\tlen = rtrim_whitespace((unsigned char *) buf);\n\t\tif (len == 0) {\n\t\t\tfree(buf);\n\t\t\treturn xstrdup(def_val);\n\t\t}\n\t\tif (!strcasecmp(buf, \"none\")) {\n\t\t\tfree(buf);\n\t\t\tctl->changed = 1;\n\t\t\treturn xstrdup(\"\");\n\t\t}\n\t\tif (check_gecos_string(question, buf) >= 0)\n\t\t\tbreak;\n\t}\n\tctl->changed = 1;\n\treturn buf;\n}",
        "output": "1",
        "idx": 5022
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int sqlite3CheckObjectName(\n  Parse *pParse,            /* Parsing context */\n  const char *zName,        /* Name of the object to check */\n  const char *zType,        /* Type of this object */\n  const char *zTblName      /* Parent table name for triggers and indexes */\n){\n  sqlite3 *db = pParse->db;\n  if( sqlite3WritableSchema(db) || db->init.imposterTable ){\n    /* Skip these error checks for writable_schema=ON */\n    return SQLITE_OK;\n  }\n  if( db->init.busy ){\n    if( sqlite3_stricmp(zType, db->init.azInit[0])\n     || sqlite3_stricmp(zName, db->init.azInit[1])\n     || sqlite3_stricmp(zTblName, db->init.azInit[2])\n    ){\n      if( sqlite3Config.bExtraSchemaChecks ){\n        sqlite3ErrorMsg(pParse, \"\"); /* corruptSchema() will supply the error */\n        return SQLITE_ERROR;\n      }\n    }\n  }else{\n    if( pParse->nested==0 \n     && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)\n    ){\n      sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",\n                      zName);\n      return SQLITE_ERROR;\n    }\n  }\n  return SQLITE_OK;\n}",
        "output": "1",
        "idx": 1311
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool is_zero(BlockDriverState *bs, int64_t offset, int64_t bytes)\n\n{\n\n    int nr;\n\n    int64_t res;\n\n    int64_t start;\n\n\n\n    /* TODO: Widening to sector boundaries should only be needed as\n\n     * long as we can't query finer granularity. */\n\n    start = QEMU_ALIGN_DOWN(offset, BDRV_SECTOR_SIZE);\n\n    bytes = QEMU_ALIGN_UP(offset + bytes, BDRV_SECTOR_SIZE) - start;\n\n\n\n    /* Clamp to image length, before checking status of underlying sectors */\n\n    if (start + bytes > bs->total_sectors * BDRV_SECTOR_SIZE) {\n\n        bytes = bs->total_sectors * BDRV_SECTOR_SIZE - start;\n\n    }\n\n\n\n    if (!bytes) {\n\n        return true;\n\n    }\n\n    res = bdrv_get_block_status_above(bs, NULL, start >> BDRV_SECTOR_BITS,\n\n                                      bytes >> BDRV_SECTOR_BITS, &nr, NULL);\n\n    return res >= 0 && (res & BDRV_BLOCK_ZERO) &&\n\n        nr * BDRV_SECTOR_SIZE == bytes;\n\n}\n",
        "output": "0",
        "idx": 3062
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int name_to_handle(int dirfd, const char *name,\n\n                                 struct file_handle *fh, int *mnt_id, int flags)\n\n{\n\n    return syscall(__NR_name_to_handle_at, dirfd, name, fh, mnt_id, flags);\n\n}\n",
        "output": "0",
        "idx": 2313
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "        WritingTaskData(int partNumber, int tx, int ty, int lx, int ly):\n            partNumber(partNumber),\n            tx(tx),\n            ty(ty),\n            lx(lx),\n            ly(ly)\n        {}",
        "output": "0",
        "idx": 747
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void acpi_memory_plug_cb(ACPIREGS *ar, qemu_irq irq, MemHotplugState *mem_st,\n\n                         DeviceState *dev, Error **errp)\n\n{\n\n    MemStatus *mdev;\n\n\n\n    mdev = acpi_memory_slot_status(mem_st, dev, errp);\n\n    if (!mdev) {\n\n        return;\n\n    }\n\n\n\n    mdev->dimm = dev;\n\n    mdev->is_enabled = true;\n\n    mdev->is_inserting = true;\n\n\n\n    /* do ACPI magic */\n\n    acpi_send_gpe_event(ar, irq, ACPI_MEMORY_HOTPLUG_STATUS);\n\n    return;\n\n}\n",
        "output": "0",
        "idx": 295
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *qemu_memalign(size_t alignment, size_t size)\n\n{\n\n    if (!size) {\n\n        abort();\n\n    }\n\n    return oom_check(VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_READWRITE));\n\n}\n",
        "output": "1",
        "idx": 3007
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void __put_task_struct(struct task_struct *tsk)\n{\n\tWARN_ON(!tsk->exit_state);\n\tWARN_ON(refcount_read(&tsk->usage));\n\tWARN_ON(tsk == current);\n\n\tcgroup_free(tsk);\n\ttask_numa_free(tsk, true);\n\tsecurity_task_free(tsk);\n\texit_creds(tsk);\n\tdelayacct_tsk_free(tsk);\n\tput_signal_struct(tsk->signal);\n\n\tif (!profile_handoff_task(tsk))\n\t\tfree_task(tsk);\n}",
        "output": "1",
        "idx": 3100
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void decode_sublayer_hrd(HEVCContext *s, int nb_cpb,\n\n                                int subpic_params_present)\n\n{\n\n    GetBitContext *gb = &s->HEVClc.gb;\n\n    int i;\n\n\n\n    for (i = 0; i < nb_cpb; i++) {\n\n        get_ue_golomb_long(gb); // bit_rate_value_minus1\n\n        get_ue_golomb_long(gb); // cpb_size_value_minus1\n\n\n\n        if (subpic_params_present) {\n\n            get_ue_golomb_long(gb); // cpb_size_du_value_minus1\n\n            get_ue_golomb_long(gb); // bit_rate_du_value_minus1\n\n        }\n\n        skip_bits1(gb); // cbr_flag\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3453
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "md_analyze_table_alignment(MD_CTX* ctx, OFF beg, OFF end, MD_ALIGN* align, int n_align)\n{\n    static const MD_ALIGN align_map[] = { MD_ALIGN_DEFAULT, MD_ALIGN_LEFT, MD_ALIGN_RIGHT, MD_ALIGN_CENTER };\n    OFF off = beg;\n\n    while(n_align > 0) {\n        int index = 0;  /* index into align_map[] */\n\n        while(CH(off) != _T('-'))\n            off++;\n        if(off > beg  &&  CH(off-1) == _T(':'))\n            index |= 1;\n        while(off < end  &&  CH(off) == _T('-'))\n            off++;\n        if(off < end  &&  CH(off) == _T(':'))\n            index |= 2;\n\n        *align = align_map[index];\n        align++;\n        n_align--;\n    }\n\n}",
        "output": "0",
        "idx": 2165
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "NBDExport *nbd_export_new(BlockDriverState *bs, off_t dev_offset,\n\n                          off_t size, uint32_t nbdflags)\n\n{\n\n    NBDExport *exp = g_malloc0(sizeof(NBDExport));\n\n    QSIMPLEQ_INIT(&exp->requests);\n\n    exp->refcount = 1;\n\n    QTAILQ_INIT(&exp->clients);\n\n    exp->bs = bs;\n\n    exp->dev_offset = dev_offset;\n\n    exp->nbdflags = nbdflags;\n\n    exp->size = size == -1 ? bdrv_getlength(bs) : size;\n\n    return exp;\n\n}\n",
        "output": "0",
        "idx": 5209
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned int pcd_check_events(struct cdrom_device_info *cdi,\n\t\t\t\t     unsigned int clearing, int slot_nr)\n{\n\tstruct pcd_unit *cd = cdi->handle;\n\tint res = cd->changed;\n\tif (res)\n\t\tcd->changed = 0;\n\treturn res ? DISK_EVENT_MEDIA_CHANGE : 0;\n}",
        "output": "0",
        "idx": 266
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "stat_location_finish (SoupMessage *msg,\n                      GFileType   *target_type,\n                      guint       *num_children)\n{\n  Multistatus  ms;\n  xmlNodeIter  iter;\n  gboolean     res;\n  GError      *error;\n  guint        child_count;\n  GFileType    file_type;\n\n  if (msg->status_code != 207)\n    return FALSE;\n\n  res = multistatus_parse (msg, &ms, &error);\n\n  if (res == FALSE)\n    return FALSE;\n\n  res = FALSE;\n  child_count = 0;\n  file_type = G_FILE_TYPE_UNKNOWN;\n\n  multistatus_get_response_iter (&ms, &iter);\n  while (xml_node_iter_next (&iter))\n    {\n      MsResponse response;\n\n      if (! multistatus_get_response (&iter, &response))\n        continue;\n\n      if (response.is_target)\n        {\n          file_type = ms_response_to_file_type (&response);\n          res = TRUE;\n        }\n      else\n        child_count++;\n\n      ms_response_clear (&response);\n    }\n\n  if (res)\n    {\n      if (target_type)\n        *target_type = file_type;\n\n      if (num_children)\n        *num_children = child_count;\n    }\n\n  multistatus_free (&ms);\n  return res;\n}",
        "output": "0",
        "idx": 260
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void iscsi_nop_timed_event(void *opaque)\n\n{\n\n    IscsiLun *iscsilun = opaque;\n\n\n\n    if (iscsi_get_nops_in_flight(iscsilun->iscsi) > MAX_NOP_FAILURES) {\n\n        error_report(\"iSCSI: NOP timeout. Reconnecting...\");\n\n        iscsi_reconnect(iscsilun->iscsi);\n\n    }\n\n\n\n    if (iscsi_nop_out_async(iscsilun->iscsi, NULL, NULL, 0, NULL) != 0) {\n\n        error_report(\"iSCSI: failed to sent NOP-Out. Disabling NOP messages.\");\n\n        return;\n\n    }\n\n\n\n    timer_mod(iscsilun->nop_timer, qemu_clock_get_ms(QEMU_CLOCK_REALTIME) + NOP_INTERVAL);\n\n    iscsi_set_events(iscsilun);\n\n}\n",
        "output": "1",
        "idx": 2664
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int copy_fs(unsigned long clone_flags, struct task_struct *tsk)\n{\n\tif (clone_flags & CLONE_FS) {\n\t\tatomic_inc(&current->fs->count);\n\t\treturn 0;\n\t}\n\ttsk->fs = __copy_fs_struct(current->fs);\n\tif (!tsk->fs)\n\t\treturn -ENOMEM;\n\treturn 0;\n}",
        "output": "0",
        "idx": 5468
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sd_reset(SDState *sd, BlockBackend *blk)\n\n{\n\n    uint64_t size;\n\n    uint64_t sect;\n\n\n\n    if (blk) {\n\n        blk_get_geometry(blk, &sect);\n\n    } else {\n\n        sect = 0;\n\n    }\n\n    size = sect << 9;\n\n\n\n    sect = sd_addr_to_wpnum(size) + 1;\n\n\n\n    sd->state = sd_idle_state;\n\n    sd->rca = 0x0000;\n\n    sd_set_ocr(sd);\n\n    sd_set_scr(sd);\n\n    sd_set_cid(sd);\n\n    sd_set_csd(sd, size);\n\n    sd_set_cardstatus(sd);\n\n    sd_set_sdstatus(sd);\n\n\n\n    sd->blk = blk;\n\n\n\n    if (sd->wp_groups)\n\n        g_free(sd->wp_groups);\n\n    sd->wp_switch = blk ? blk_is_read_only(blk) : false;\n\n    sd->wpgrps_size = sect;\n\n    sd->wp_groups = bitmap_new(sd->wpgrps_size);\n\n    memset(sd->function_group, 0, sizeof(sd->function_group));\n\n    sd->erase_start = 0;\n\n    sd->erase_end = 0;\n\n    sd->size = size;\n\n    sd->blk_len = 0x200;\n\n    sd->pwd_len = 0;\n\n    sd->expecting_acmd = false;\n\n}\n",
        "output": "0",
        "idx": 301
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "duint32 dwgCompressor::litLength21(duint8 *cbuf, duint8 oc, duint32 *si){\n\n    duint32 srcIndex=*si;\n\n    duint32 length = oc + 8;\n    if (length == 0x17) {\n        duint32 n = cbuf[srcIndex++];\n        length += n;\n        if (n == 0xff) {\n            do {\n                n = cbuf[srcIndex++];\n                n |= static_cast<duint32>(cbuf[srcIndex++] << 8);\n                length += n;\n            } while (n == 0xffff);\n        }\n    }\n\n    *si = srcIndex;\n    return length;\n}",
        "output": "1",
        "idx": 4468
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_savevm_send_postcopy_advise(QEMUFile *f)\n\n{\n\n    uint64_t tmp[2];\n\n    tmp[0] = cpu_to_be64(getpagesize());\n\n    tmp[1] = cpu_to_be64(1ul << qemu_target_page_bits());\n\n\n\n    trace_qemu_savevm_send_postcopy_advise();\n\n    qemu_savevm_command_send(f, MIG_CMD_POSTCOPY_ADVISE, 16, (uint8_t *)tmp);\n\n}\n",
        "output": "1",
        "idx": 4829
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "std::string Box_irot::dump(Indent& indent) const\n{\n  std::ostringstream sstr;\n  sstr << Box::dump(indent);\n\n  sstr << indent << \"rotation: \" << m_rotation << \" degrees (CCW)\\n\";\n\n  return sstr.str();\n}",
        "output": "0",
        "idx": 2691
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static BlkverifyAIOCB *blkverify_aio_get(BlockDriverState *bs, bool is_write,\n\n                                         int64_t sector_num, QEMUIOVector *qiov,\n\n                                         int nb_sectors,\n\n                                         BlockCompletionFunc *cb,\n\n                                         void *opaque)\n\n{\n\n    BlkverifyAIOCB *acb = qemu_aio_get(&blkverify_aiocb_info, bs, cb, opaque);\n\n\n\n    acb->is_write = is_write;\n\n    acb->sector_num = sector_num;\n\n    acb->nb_sectors = nb_sectors;\n\n    acb->ret = -EINPROGRESS;\n\n    acb->done = 0;\n\n    acb->qiov = qiov;\n\n    acb->buf = NULL;\n\n    acb->verify = NULL;\n\n    return acb;\n\n}\n",
        "output": "1",
        "idx": 1335
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_device_free_virtqueues(VirtIODevice *vdev)\n\n{\n\n    int i;\n\n    if (!vdev->vq) {\n\n        return;\n\n    }\n\n\n\n    for (i = 0; i < VIRTIO_QUEUE_MAX; i++) {\n\n        VRingMemoryRegionCaches *caches;\n\n        if (vdev->vq[i].vring.num == 0) {\n\n            break;\n\n        }\n\n        caches = atomic_read(&vdev->vq[i].vring.caches);\n\n        atomic_set(&vdev->vq[i].vring.caches, NULL);\n\n        virtio_free_region_cache(caches);\n\n    }\n\n    g_free(vdev->vq);\n\n}\n",
        "output": "1",
        "idx": 1041
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Pl_ASCIIHexDecoder::write(unsigned char* buf, size_t len)\n{\n    if (this->eod)\n    {\n\treturn;\n    }\n    for (size_t i = 0; i < len; ++i)\n    {\n\tchar ch = toupper(buf[i]);\n\tswitch (ch)\n\t{\n\t  case ' ':\n\t  case '\\f':\n\t  case '\\v':\n\t  case '\\t':\n\t  case '\\r':\n\t  case '\\n':\n\t    QTC::TC(\"libtests\", \"Pl_ASCIIHexDecoder ignore space\");\n\t    // ignore whitespace\n\t    break;\n\n\t  case '>':\n\t    this->eod = true;\n\t    flush();\n\t    break;\n\n\t  default:\n\t    if (((ch >= '0') && (ch <= '9')) ||\n\t\t((ch >= 'A') && (ch <= 'F')))\n\t    {\n\t\tthis->inbuf[this->pos++] = ch;\n\t\tif (this->pos == 2)\n\t\t{\n\t\t    flush();\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\tchar t[2];\n\t\tt[0] = ch;\n\t\tt[1] = 0;\n\t\tthrow std::runtime_error(\n\t\t    std::string(\"character out of range\"\n\t\t\t\t\" during base Hex decode: \") + t);\n\t    }\n\t    break;\n\t}\n\tif (this->eod)\n\t{\n\t    break;\n\t}\n    }\n}",
        "output": "1",
        "idx": 2089
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void on_vcpu(CPUState *env, void (*func)(void *data), void *data)\n\n{\n\n    if (env == cpu_single_env) {\n\n        func(data);\n\n        return;\n\n    }\n\n    abort();\n\n}\n",
        "output": "1",
        "idx": 5280
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kvm_client_set_memory(struct CPUPhysMemoryClient *client,\n\n\t\t\t\t  target_phys_addr_t start_addr,\n\n\t\t\t\t  ram_addr_t size,\n\n\t\t\t\t  ram_addr_t phys_offset)\n\n{\n\n\tkvm_set_phys_mem(start_addr, size, phys_offset);\n\n}\n",
        "output": "0",
        "idx": 3340
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err gf_seng_dump_rap_on(GF_SceneEngine *seng, Bool dump_rap)\n{\n\tseng->dump_rap = dump_rap;\n\treturn 0;\n}",
        "output": "0",
        "idx": 4572
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AVFilterBufferRef *avfilter_default_get_audio_buffer(AVFilterLink *link, int perms,\n\n                                                     int nb_samples)\n\n{\n\n    AVFilterBufferRef *samplesref = NULL;\n\n    int linesize[8];\n\n    uint8_t *data[8];\n\n    int nb_channels = av_get_channel_layout_nb_channels(link->channel_layout);\n\n\n\n    /* Calculate total buffer size, round to multiple of 16 to be SIMD friendly */\n\n    if (av_samples_alloc(data, linesize,\n\n                         nb_channels, nb_samples, link->format,\n\n                         16) < 0)\n\n        return NULL;\n\n\n\n    samplesref =\n\n        avfilter_get_audio_buffer_ref_from_arrays(data, linesize, perms,\n\n                                                  nb_samples, link->format,\n\n                                                  link->channel_layout, link->planar);\n\n    if (!samplesref) {\n\n        av_free(data[0]);\n\n        return NULL;\n\n    }\n\n\n\n    return samplesref;\n\n}\n",
        "output": "1",
        "idx": 3578
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hevc_init(AVCodecParserContext *s)\n\n{\n\n    HEVCContext  *h  = &((HEVCParseContext *)s->priv_data)->h;\n\n    h->HEVClc = av_mallocz(sizeof(HEVCLocalContext));\n\n\n\n    h->skipped_bytes_pos_size = INT_MAX;\n\n\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 2800
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gboolean io_watch_poll_check(GSource *source)\n\n{\n\n    IOWatchPoll *iwp = io_watch_poll_from_source(source);\n\n\n\n    if (iwp->max_size == 0) {\n\n        return FALSE;\n\n    }\n\n\n\n    return g_io_watch_funcs.check(source);\n\n}\n",
        "output": "0",
        "idx": 2697
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void vty_putchars(VIOsPAPRDevice *sdev, uint8_t *buf, int len)\n\n{\n\n    VIOsPAPRVTYDevice *dev = VIO_SPAPR_VTY_DEVICE(sdev);\n\n\n\n    /* FIXME: should check the qemu_chr_fe_write() return value */\n\n    qemu_chr_fe_write(dev->chardev, buf, len);\n\n}\n",
        "output": "1",
        "idx": 5465
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rb_glob_caller(const char *path, VALUE a, void *enc)\n{\n    int status;\n    struct glob_args *args = (struct glob_args *)a;\n\n    args->path = path;\n    rb_protect(glob_func_caller, a, &status);\n    return status;\n}",
        "output": "0",
        "idx": 5286
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int rom_add_blob(const char *name, const void *blob, size_t len,\n\n                 target_phys_addr_t addr)\n\n{\n\n    Rom *rom;\n\n\n\n    rom = g_malloc0(sizeof(*rom));\n\n    rom->name    = g_strdup(name);\n\n    rom->addr    = addr;\n\n    rom->romsize = len;\n\n    rom->data    = g_malloc0(rom->romsize);\n\n    memcpy(rom->data, blob, len);\n\n    rom_insert(rom);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2669
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    template<typename t>\n    bool contains(const T& pixel, t& x, t& y, t& z) const {\n      const ulongT wh = (ulongT)_width*_height, whd = wh*_depth, siz = whd*_spectrum;\n      const T *const ppixel = &pixel;\n      if (is_empty() || ppixel<_data || ppixel>=_data + siz) return false;\n      ulongT off = ((ulongT)(ppixel - _data))%whd;\n      const ulongT nz = off/wh;\n      off%=wh;\n      const ulongT ny = off/_width, nx = off%_width;\n      x = (t)nx; y = (t)ny; z = (t)nz;\n      return true;",
        "output": "0",
        "idx": 3433
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  unsigned find_file(const StringList & sl, String & filename)\n  {\n    StringListEnumeration els = sl.elements_obj();\n    const char * dir;\n    String path;\n    while ( (dir = els.next()) != 0 ) \n    {\n      path = dir;\n      if (path.back() != '/') path += '/';\n      unsigned dir_len = path.size();\n      path += filename;\n      if (file_exists(path)) {\n        filename.swap(path);\n        return dir_len;\n      }\n    }\n    return 0;\n  }",
        "output": "1",
        "idx": 2266
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "monitor_key_compare (gconstpointer a,\n\t\t     gconstpointer data)\n{\n\tconst Monitor *monitor;\n\tconst Monitor *compare_monitor;\n\n\tmonitor = a;\n\tcompare_monitor = data;\n\t\n\tif (monitor->client < compare_monitor->client) {\n\t\treturn -1;\n\t}\n\tif (monitor->client > compare_monitor->client) {\n\t\treturn +1;\n\t}\n\n\tif (monitor->file < compare_monitor->file) {\n\t\treturn -1;\n\t}\n\tif (monitor->file > compare_monitor->file) {\n\t\treturn +1;\n\t}\n\t\n\treturn 0;\n}",
        "output": "0",
        "idx": 4797
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_net_set_config(VirtIODevice *vdev, const uint8_t *config)\n\n{\n\n    VirtIONet *n = VIRTIO_NET(vdev);\n\n    struct virtio_net_config netcfg = {};\n\n\n\n    memcpy(&netcfg, config, n->config_size);\n\n\n\n    if (!(vdev->guest_features >> VIRTIO_NET_F_CTRL_MAC_ADDR & 1) &&\n\n        memcmp(netcfg.mac, n->mac, ETH_ALEN)) {\n\n        memcpy(n->mac, netcfg.mac, ETH_ALEN);\n\n        qemu_format_nic_info_str(qemu_get_queue(n->nic), n->mac);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 892
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  explicit MaxPooling3dGradGradOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 5,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 5 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 5,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 5 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    const int32 ksize_c = GetTensorDim(ksize_, data_format_, 'C');\n    const int32 stride_c = GetTensorDim(stride_, data_format_, 'C');\n    OP_REQUIRES(context, ksize_c == 1 && stride_c == 1,\n                errors::Unimplemented(\"MaxPooling3dGradGrad is not yet \"\n                                      \"supported on the depth dimension.\"));\n  }",
        "output": "0",
        "idx": 5770
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "input_print(struct input_ctx *ictx)\n{\n\tint\tset;\n\n\tset = ictx->cell.set == 0 ? ictx->cell.g0set : ictx->cell.g1set;\n\tif (set == 1)\n\t\tictx->cell.cell.attr |= GRID_ATTR_CHARSET;\n\telse\n\t\tictx->cell.cell.attr &= ~GRID_ATTR_CHARSET;\n\n\tgrid_cell_one(&ictx->cell.cell, ictx->ch);\n\tscreen_write_cell(&ictx->ctx, &ictx->cell.cell);\n\n\tictx->cell.cell.attr &= ~GRID_ATTR_CHARSET;\n\n\treturn (0);\n}",
        "output": "0",
        "idx": 5949
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int film_probe(AVProbeData *p)\n{\n    if (AV_RB32(&p->buf[0]) != FILM_TAG)\n    return AVPROBE_SCORE_MAX;\n}",
        "output": "1",
        "idx": 1131
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void strongarm_gpio_write(void *opaque, hwaddr offset,\n\n                                 uint64_t value, unsigned size)\n\n{\n\n    StrongARMGPIOInfo *s = opaque;\n\n\n\n    switch (offset) {\n\n    case GPDR:        /* GPIO Pin-Direction registers */\n\n        s->dir = value;\n\n        strongarm_gpio_handler_update(s);\n\n        break;\n\n\n\n    case GPSR:        /* GPIO Pin-Output Set registers */\n\n        s->olevel |= value;\n\n        strongarm_gpio_handler_update(s);\n\n        s->gpsr = value;\n\n        break;\n\n\n\n    case GPCR:        /* GPIO Pin-Output Clear registers */\n\n        s->olevel &= ~value;\n\n        strongarm_gpio_handler_update(s);\n\n        break;\n\n\n\n    case GRER:        /* GPIO Rising-Edge Detect Enable registers */\n\n        s->rising = value;\n\n        break;\n\n\n\n    case GFER:        /* GPIO Falling-Edge Detect Enable registers */\n\n        s->falling = value;\n\n        break;\n\n\n\n    case GAFR:        /* GPIO Alternate Function registers */\n\n        s->gafr = value;\n\n        break;\n\n\n\n    case GEDR:        /* GPIO Edge Detect Status registers */\n\n        s->status &= ~value;\n\n        strongarm_gpio_irq_update(s);\n\n        break;\n\n\n\n    default:\n\n        printf(\"%s: Bad offset 0x\" TARGET_FMT_plx \"\\n\", __func__, offset);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3535
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int cris_bound_d(int v, int b)\n\n{\n\n\tint r = v;\n\n\tasm (\"bound.d\\t%1, %0\\n\" : \"+r\" (r) : \"ri\" (b));\n\n\treturn r;\n\n}\n",
        "output": "1",
        "idx": 2881
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gint compare_expire(gconstpointer a, gconstpointer b)\n{\n\tconst struct dhcp_lease *lease1 = a;\n\tconst struct dhcp_lease *lease2 = b;\n\n\treturn lease2->expire - lease1->expire;\n}",
        "output": "0",
        "idx": 5274
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t zynq_slcr_compute_pll(uint64_t input, uint32_t ctrl_reg)\n{\n    uint32_t mult = ((ctrl_reg & R_xxx_PLL_CTRL_PLL_FPDIV_MASK) >>\n            R_xxx_PLL_CTRL_PLL_FPDIV_SHIFT);\n\n    /* first, check if pll is bypassed */\n    if (ctrl_reg & R_xxx_PLL_CTRL_PLL_BYPASS_FORCE_MASK) {\n        return input;\n    }\n\n    /* is pll disabled ? */\n    if (ctrl_reg & (R_xxx_PLL_CTRL_PLL_RESET_MASK |\n                    R_xxx_PLL_CTRL_PLL_PWRDWN_MASK)) {\n        return 0;\n    }\n\n    /* frequency multiplier -> period division */\n    return input / mult;\n}",
        "output": "1",
        "idx": 3151
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "com_nopager(String *buffer __attribute__((unused)),\n\t    char *line __attribute__((unused)))\n{\n  strmov(pager, \"stdout\");\n  opt_nopager=1;\n  PAGER= stdout;\n  tee_fprintf(stdout, \"PAGER set to stdout\\n\");\n  return 0;\n}",
        "output": "0",
        "idx": 2501
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void vmsvga_update_rect_flush(struct vmsvga_state_s *s)\n\n{\n\n    struct vmsvga_rect_s *rect;\n\n    if (s->invalidated) {\n\n        s->redraw_fifo_first = s->redraw_fifo_last;\n\n        return;\n\n    }\n\n    /* Overlapping region updates can be optimised out here - if someone\n\n     * knows a smart algorithm to do that, please share.  */\n\n    while (s->redraw_fifo_first != s->redraw_fifo_last) {\n\n        rect = &s->redraw_fifo[s->redraw_fifo_first ++];\n\n        s->redraw_fifo_first &= REDRAW_FIFO_LEN - 1;\n\n        vmsvga_update_rect(s, rect->x, rect->y, rect->w, rect->h);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1592
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void Curl_detach_connnection(struct Curl_easy *data)\n{\n  struct connectdata *conn = data->conn;\n  if(conn)\n    Curl_llist_remove(&conn->easyq, &data->conn_queue, NULL);\n  data->conn = NULL;\n}",
        "output": "1",
        "idx": 688
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ZEXPORT inflatePrime(strm, bits, value)\nz_streamp strm;\nint bits;\nint value;\n{\n    struct inflate_state FAR *state;\n\n    if (inflateStateCheck(strm)) return Z_STREAM_ERROR;\n    state = (struct inflate_state FAR *)strm->state;\n    if (bits < 0) {\n        state->hold = 0;\n        state->bits = 0;\n        return Z_OK;\n    }\n    if (bits > 16 || state->bits + (uInt)bits > 32) return Z_STREAM_ERROR;\n    value &= (1L << bits) - 1;\n    state->hold += (unsigned)value << state->bits;\n    state->bits += (uInt)bits;\n    return Z_OK;\n}",
        "output": "0",
        "idx": 5179
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pf_ioctl(struct block_device *bdev, fmode_t mode, unsigned int cmd, unsigned long arg)\n{\n\tstruct pf_unit *pf = bdev->bd_disk->private_data;\n\n\tif (cmd != CDROMEJECT)\n\t\treturn -EINVAL;\n\n\tif (pf->access != 1)\n\t\treturn -EBUSY;\n\tmutex_lock(&pf_mutex);\n\tpf_eject(pf);\n\tmutex_unlock(&pf_mutex);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 5128
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static u8 __from_ib_qp_type(enum ib_qp_type type)\n{\n\tswitch (type) {\n\tcase IB_QPT_GSI:\n\t\treturn CMDQ_CREATE_QP1_TYPE_GSI;\n\tcase IB_QPT_RC:\n\t\treturn CMDQ_CREATE_QP_TYPE_RC;\n\tcase IB_QPT_UD:\n\t\treturn CMDQ_CREATE_QP_TYPE_UD;\n\tdefault:\n\t\treturn IB_QPT_MAX;\n\t}\n}",
        "output": "0",
        "idx": 5051
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct sctp_chunk *sctp_make_abort(const struct sctp_association *asoc,\n\t\t\t      const struct sctp_chunk *chunk,\n\t\t\t      const size_t hint)\n{\n\tstruct sctp_chunk *retval;\n\t__u8 flags = 0;\n\n\t/* Set the T-bit if we have no association and 'chunk' is not\n\t * an INIT (vtag will be reflected).\n\t */\n\tif (!asoc) {\n\t\tif (chunk && chunk->chunk_hdr &&\n\t\t    chunk->chunk_hdr->type == SCTP_CID_INIT)\n\t\t\tflags = 0;\n\t\telse\n\t\t\tflags = SCTP_CHUNK_FLAG_T;\n\t}\n\n\tretval = sctp_make_control(asoc, SCTP_CID_ABORT, flags, hint);\n\n\t/* RFC 2960 6.4 Multi-homed SCTP Endpoints\n\t *\n\t * An endpoint SHOULD transmit reply chunks (e.g., SACK,\n\t * HEARTBEAT ACK, * etc.) to the same destination transport\n\t * address from which it * received the DATA or control chunk\n\t * to which it is replying.\n\t *\n\t * [ABORT back to where the offender came from.]\n\t */\n\tif (retval && chunk)\n\t\tretval->transport = chunk->transport;\n\n\treturn retval;\n}",
        "output": "0",
        "idx": 1215
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_debug_resume(BlockDriverState *bs, const char *tag)\n\n{\n\n    while (bs && (!bs->drv || !bs->drv->bdrv_debug_resume)) {\n\n        bs = bs->file;\n\n    }\n\n\n\n    if (bs && bs->drv && bs->drv->bdrv_debug_resume) {\n\n        return bs->drv->bdrv_debug_resume(bs, tag);\n\n    }\n\n\n\n    return -ENOTSUP;\n\n}\n",
        "output": "0",
        "idx": 5855
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMA_ALGORITHM_Unmarshal(TPMA_ALGORITHM *target, BYTE **buffer, INT32 *size)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n    TPMA_ALGORITHM orig_target = *target; // libtpms added\n\n    if (rc == TPM_RC_SUCCESS) {\n\trc = UINT32_Unmarshal((UINT32 *)target, buffer, size); /* libtpms changed */\n    }\n    if (rc == TPM_RC_SUCCESS) {\n\tif (*target & TPMA_ALGORITHM_reserved) {\n\t    rc = TPM_RC_RESERVED_BITS;\n\t    *target = orig_target; // libtpms added\n\t}\n    }\n    return rc;\n}",
        "output": "0",
        "idx": 4121
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void tracing_snapshot_alloc(void)\n{\n\t/* Give warning */\n\ttracing_snapshot();\n}",
        "output": "0",
        "idx": 2542
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static BlockDriverAIOCB *bdrv_aio_rw_vector(BlockDriverState *bs,\n\n                                            int64_t sector_num,\n\n                                            QEMUIOVector *qiov,\n\n                                            int nb_sectors,\n\n                                            BlockDriverCompletionFunc *cb,\n\n                                            void *opaque,\n\n                                            int is_write)\n\n\n\n{\n\n    BlockDriverAIOCBSync *acb;\n\n\n\n    acb = qemu_aio_get(&bdrv_em_aiocb_info, bs, cb, opaque);\n\n    acb->is_write = is_write;\n\n    acb->qiov = qiov;\n\n    acb->bounce = qemu_blockalign(bs, qiov->size);\n\n    acb->bh = qemu_bh_new(bdrv_aio_bh_cb, acb);\n\n\n\n    if (is_write) {\n\n        qemu_iovec_to_buf(acb->qiov, 0, acb->bounce, qiov->size);\n\n        acb->ret = bs->drv->bdrv_write(bs, sector_num, acb->bounce, nb_sectors);\n\n    } else {\n\n        acb->ret = bs->drv->bdrv_read(bs, sector_num, acb->bounce, nb_sectors);\n\n    }\n\n\n\n    qemu_bh_schedule(acb->bh);\n\n\n\n    return &acb->common;\n\n}\n",
        "output": "0",
        "idx": 1978
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ljpeg_encode_yuv(AVCodecContext *avctx, PutBitContext *pb,\n\n                            const AVFrame *frame)\n\n{\n\n    const int predictor = avctx->prediction_method + 1;\n\n    LJpegEncContext *s  = avctx->priv_data;\n\n    const int mb_width  = (avctx->width  + s->hsample[0] - 1) / s->hsample[0];\n\n    const int mb_height = (avctx->height + s->vsample[0] - 1) / s->vsample[0];\n\n    int mb_x, mb_y;\n\n\n\n    for (mb_y = 0; mb_y < mb_height; mb_y++) {\n\n        if (pb->buf_end - pb->buf - (put_bits_count(pb) >> 3) <\n\n            mb_width * 4 * 3 * s->hsample[0] * s->vsample[0]) {\n\n            av_log(avctx, AV_LOG_ERROR, \"encoded frame too large\\n\");\n\n            return -1;\n\n        }\n\n\n\n        for (mb_x = 0; mb_x < mb_width; mb_x++)\n\n            ljpeg_encode_yuv_mb(s, pb, frame, predictor, mb_x, mb_y);\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2253
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_always_inline void decode_dc_coeffs(GetBitContext *gb, int16_t *out,\n\n                                              int blocks_per_slice)\n\n{\n\n    int16_t prev_dc;\n\n    int code, i, sign;\n\n\n\n    OPEN_READER(re, gb);\n\n\n\n    DECODE_CODEWORD(code, FIRST_DC_CB);\n\n    prev_dc = TOSIGNED(code);\n\n    out[0] = prev_dc;\n\n\n\n    out += 64; // dc coeff for the next block\n\n\n\n    code = 5;\n\n    sign = 0;\n\n    for (i = 1; i < blocks_per_slice; i++, out += 64) {\n\n        DECODE_CODEWORD(code, dc_codebook[FFMIN(code, 6U)]);\n\n        if(code) sign ^= -(code & 1);\n\n        else     sign  = 0;\n\n        prev_dc += (((code + 1) >> 1) ^ sign) - sign;\n\n        out[0] = prev_dc;\n\n    }\n\n    CLOSE_READER(re, gb);\n\n}\n",
        "output": "1",
        "idx": 4204
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int svm_nmi_allowed(struct kvm_vcpu *vcpu)\n{\n\tstruct vcpu_svm *svm = to_svm(vcpu);\n\tstruct vmcb *vmcb = svm->vmcb;\n\tint ret;\n\tret = !(vmcb->control.int_state & SVM_INTERRUPT_SHADOW_MASK) &&\n\t      !(svm->vcpu.arch.hflags & HF_NMI_MASK);\n\tret = ret && gif_set(svm) && nested_svm_nmi(svm);\n\n\treturn ret;\n}",
        "output": "0",
        "idx": 6083
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool allow_auth_to_host(struct Curl_easy *data)\n{\n  struct connectdata *conn = data->conn;\n  return (!data->state.this_is_a_follow ||\n          data->set.allow_auth_to_other_hosts ||\n          (data->state.first_host &&\n           strcasecompare(data->state.first_host, conn->host.name) &&\n           (data->state.first_remote_port == conn->remote_port) &&\n           (data->state.first_remote_protocol == conn->handler->protocol)));\n}",
        "output": "1",
        "idx": 4282
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void tls1_clear(SSL *s)\n{\n    ssl3_clear(s);\n    if (s->method->version == TLS_ANY_VERSION)\n        s->version = TLS_MAX_VERSION;\n    else\n        s->version = s->method->version;\n}",
        "output": "0",
        "idx": 2233
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void error_queue::add_warning(de265_error warning, bool once)\n{\n  // check if warning was already shown\n  bool add=true;\n  if (once) {\n    for (int i=0;i<nWarningsShown;i++) {\n      if (warnings_shown[i] == warning) {\n        add=false;\n        break;\n      }\n    }\n  }\n\n  if (!add) {\n    return;\n  }\n\n\n  // if this is a one-time warning, remember that it was shown\n\n  if (once) {\n    if (nWarningsShown < MAX_WARNINGS) {\n      warnings_shown[nWarningsShown++] = warning;\n    }\n  }\n\n\n  // add warning to output queue\n\n  if (nWarnings == MAX_WARNINGS) {\n    warnings[MAX_WARNINGS-1] = DE265_WARNING_WARNING_BUFFER_FULL;\n    return;\n  }\n\n  warnings[nWarnings++] = warning;\n}",
        "output": "0",
        "idx": 5817
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void get_id3_tag(AVFormatContext *s, int len)\n\n{\n\n    ID3v2ExtraMeta *id3v2_extra_meta = NULL;\n\n\n\n    ff_id3v2_read(s, ID3v2_DEFAULT_MAGIC, &id3v2_extra_meta);\n\n    if (id3v2_extra_meta)\n\n        ff_id3v2_parse_apic(s, &id3v2_extra_meta);\n\n    ff_id3v2_free_extra_meta(&id3v2_extra_meta);\n\n}\n",
        "output": "0",
        "idx": 5933
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_subfco (void)\n\n{\n\n    T2 = T0;\n\n    T0 = T1 - T0;\n\n    if (likely(T0 > T1)) {\n\n        xer_ca = 0;\n\n    } else {\n\n        xer_ca = 1;\n\n    }\n\n    if (likely(!(((~T2) ^ T1 ^ (-1)) & ((~T2) ^ T0) & (1 << 31)))) {\n\n        xer_ov = 0;\n\n    } else {\n\n        xer_so = 1;\n\n        xer_ov = 1;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5724
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void vmstate_save_state(QEMUFile *f, const VMStateDescription *vmsd,\n\n                        void *opaque)\n\n{\n\n    VMStateField *field = vmsd->fields;\n\n\n\n    if (vmsd->pre_save) {\n\n        vmsd->pre_save(opaque);\n\n\n    while (field->name) {\n\n        if (!field->field_exists ||\n\n            field->field_exists(opaque, vmsd->version_id)) {\n\n            void *base_addr = vmstate_base_addr(opaque, field);\n\n            int i, n_elems = vmstate_n_elems(opaque, field);\n\n            int size = vmstate_size(opaque, field);\n\n\n\n            for (i = 0; i < n_elems; i++) {\n\n                void *addr = base_addr + size * i;\n\n\n\n                if (field->flags & VMS_ARRAY_OF_POINTER) {\n\n                    addr = *(void **)addr;\n\n\n                if (field->flags & VMS_STRUCT) {\n\n                    vmstate_save_state(f, field->vmsd, addr);\n\n\n                    field->info->put(f, addr, size);\n\n\n\n\n\n\n\n\n\n\n        field++;\n\n\n    vmstate_subsection_save(f, vmsd, opaque);\n",
        "output": "1",
        "idx": 5096
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CharDriverState *qemu_chr_open_stdio(const char *id,\n\n                                            ChardevBackend *backend,\n\n                                            ChardevReturn *ret,\n\n                                            Error **errp)\n\n{\n\n    ChardevStdio *opts = backend->u.stdio.data;\n\n    CharDriverState *chr;\n\n    struct sigaction act;\n\n    ChardevCommon *common = qapi_ChardevStdio_base(opts);\n\n\n\n    if (is_daemonized()) {\n\n        error_setg(errp, \"cannot use stdio with -daemonize\");\n\n\n\n\n\n    if (stdio_in_use) {\n\n        error_setg(errp, \"cannot use stdio by multiple character devices\");\n\n\n\n\n\n    stdio_in_use = true;\n\n    old_fd0_flags = fcntl(0, F_GETFL);\n\n    tcgetattr(0, &oldtty);\n\n    qemu_set_nonblock(0);\n\n    atexit(term_exit);\n\n\n\n    memset(&act, 0, sizeof(act));\n\n    act.sa_handler = term_stdio_handler;\n\n    sigaction(SIGCONT, &act, NULL);\n\n\n\n    chr = qemu_chr_open_fd(0, 1, common, errp);\n\n\n\n\n    chr->chr_close = qemu_chr_close_stdio;\n\n    chr->chr_set_echo = qemu_chr_set_echo_stdio;\n\n    if (opts->has_signal) {\n\n        stdio_allow_signal = opts->signal;\n\n\n    qemu_chr_fe_set_echo(chr, false);\n\n\n\n    return chr;\n",
        "output": "1",
        "idx": 5808
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int addr_doit(struct sk_buff *skb, struct nlmsghdr *nlh)\n{\n\tstruct net *net = sock_net(skb->sk);\n\tstruct nlattr *tb[IFA_MAX+1];\n\tstruct net_device *dev;\n\tstruct ifaddrmsg *ifm;\n\tint err;\n\tu8 pnaddr;\n\n\tif (!capable(CAP_NET_ADMIN))\n\t\treturn -EPERM;\n\n\tif (!capable(CAP_SYS_ADMIN))\n\t\treturn -EPERM;\n\n\tASSERT_RTNL();\n\n\terr = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_phonet_policy);\n\tif (err < 0)\n\t\treturn err;\n\n\tifm = nlmsg_data(nlh);\n\tif (tb[IFA_LOCAL] == NULL)\n\t\treturn -EINVAL;\n\tpnaddr = nla_get_u8(tb[IFA_LOCAL]);\n\tif (pnaddr & 3)\n\t\t/* Phonet addresses only have 6 high-order bits */\n\t\treturn -EINVAL;\n\n\tdev = __dev_get_by_index(net, ifm->ifa_index);\n\tif (dev == NULL)\n\t\treturn -ENODEV;\n\n\tif (nlh->nlmsg_type == RTM_NEWADDR)\n\t\terr = phonet_address_add(dev, pnaddr);\n\telse\n\t\terr = phonet_address_del(dev, pnaddr);\n\tif (!err)\n\t\tphonet_address_notify(nlh->nlmsg_type, dev, pnaddr);\n\treturn err;\n}",
        "output": "1",
        "idx": 735
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "parsecolorchar(zattr arg, int is_fg)\n{\n    if (bv->fm[1] == '{') {\n\tchar *ep;\n\tbv->fm += 2; /* skip over F{ */\n\tif ((ep = strchr(bv->fm, '}'))) {\n\t    char oc = *ep, *col, *coll;\n\t    *ep = '\\0';\n\t    /* expand the contents of the argument so you can use\n\t     * %v for example */\n\t    coll = col = promptexpand(bv->fm, 0, NULL, NULL, NULL);\n\t    *ep = oc;\n\t    arg = match_colour((const char **)&coll, is_fg, 0);\n\t    free(col);\n\t    bv->fm = ep;\n\t} else {\n\t    arg = match_colour((const char **)&bv->fm, is_fg, 0);\n\t    if (*bv->fm != '}')\n\t\tbv->fm--;\n\t}\n    } else\n\targ = match_colour(NULL, 1, arg);\n    return arg;\n}",
        "output": "1",
        "idx": 4156
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pkey_sm2_decrypt(EVP_PKEY_CTX *ctx,\n                            unsigned char *out, size_t *outlen,\n                            const unsigned char *in, size_t inlen)\n{\n    EC_KEY *ec = ctx->pkey->pkey.ec;\n    SM2_PKEY_CTX *dctx = ctx->data;\n    const EVP_MD *md = (dctx->md == NULL) ? EVP_sm3() : dctx->md;\n\n    if (out == NULL) {\n        if (!sm2_plaintext_size(ec, md, inlen, outlen))\n            return -1;\n        else\n            return 1;\n    }\n\n    return sm2_decrypt(ec, md, in, inlen, out, outlen);\n}",
        "output": "1",
        "idx": 4119
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int msrle_decode_init(AVCodecContext *avctx)\n\n{\n\n    MsrleContext *s = avctx->priv_data;\n\n    int i;\n\n\n\n    s->avctx = avctx;\n\n\n\n    switch (avctx->bits_per_coded_sample) {\n\n    case 1:\n\n        avctx->pix_fmt = AV_PIX_FMT_MONOWHITE;\n\n        break;\n\n    case 4:\n\n    case 8:\n\n        avctx->pix_fmt = AV_PIX_FMT_PAL8;\n\n        break;\n\n    case 24:\n\n        avctx->pix_fmt = AV_PIX_FMT_BGR24;\n\n        break;\n\n    default:\n\n        av_log(avctx, AV_LOG_ERROR, \"unsupported bits per sample\\n\");\n\n        return -1;\n\n    }\n\n\n\n    avcodec_get_frame_defaults(&s->frame);\n\n    s->frame.data[0] = NULL;\n\n\n\n    if (avctx->extradata_size >= AVPALETTE_SIZE)\n\n        for (i = 0; i < AVPALETTE_SIZE/4; i++)\n\n            s->pal[i] = 0xFF<<24 | AV_RL32(avctx->extradata+4*i);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5083
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void portio_list_init(PortioList *piolist,\n\n                      const MemoryRegionPortio *callbacks,\n\n                      void *opaque, const char *name)\n\n{\n\n    unsigned n = 0;\n\n\n\n    while (callbacks[n].size) {\n\n        ++n;\n\n    }\n\n\n\n    piolist->ports = callbacks;\n\n    piolist->nr = 0;\n\n    piolist->regions = g_new0(MemoryRegion *, n);\n\n    piolist->aliases = g_new0(MemoryRegion *, n);\n\n    piolist->address_space = NULL;\n\n    piolist->opaque = opaque;\n\n    piolist->name = name;\n\n}\n",
        "output": "0",
        "idx": 1326
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static GSList *nvdimm_get_plugged_device_list(void)\n\n{\n\n    GSList *list = NULL;\n\n\n\n    object_child_foreach(qdev_get_machine(), nvdimm_plugged_device_list,\n\n                         &list);\n\n    return list;\n\n}\n",
        "output": "0",
        "idx": 3747
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int virtio_ccw_hcall_notify(const uint64_t *args)\n\n{\n\n    uint64_t subch_id = args[0];\n\n    uint64_t queue = args[1];\n\n    SubchDev *sch;\n\n    int cssid, ssid, schid, m;\n\n\n\n    if (ioinst_disassemble_sch_ident(subch_id, &m, &cssid, &ssid, &schid)) {\n\n        return -EINVAL;\n\n    }\n\n    sch = css_find_subch(m, cssid, ssid, schid);\n\n    if (!sch || !css_subch_visible(sch)) {\n\n        return -EINVAL;\n\n    }\n\n    if (queue >= VIRTIO_PCI_QUEUE_MAX) {\n\n        return -EINVAL;\n\n    }\n\n    virtio_queue_notify(virtio_ccw_get_vdev(sch), queue);\n\n    return 0;\n\n\n\n}\n",
        "output": "0",
        "idx": 5348
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vhost_user_migration_done(struct vhost_dev *dev, char* mac_addr)\n\n{\n\n    VhostUserMsg msg = { 0 };\n\n    int err;\n\n\n\n    assert(dev->vhost_ops->backend_type == VHOST_BACKEND_TYPE_USER);\n\n\n\n    /* If guest supports GUEST_ANNOUNCE do nothing */\n\n    if (virtio_has_feature(dev->acked_features, VIRTIO_NET_F_GUEST_ANNOUNCE)) {\n\n        return 0;\n\n    }\n\n\n\n    /* if backend supports VHOST_USER_PROTOCOL_F_RARP ask it to send the RARP */\n\n    if (virtio_has_feature(dev->protocol_features,\n\n                           VHOST_USER_PROTOCOL_F_RARP)) {\n\n        msg.request = VHOST_USER_SEND_RARP;\n\n        msg.flags = VHOST_USER_VERSION;\n\n        memcpy((char *)&msg.u64, mac_addr, 6);\n\n        msg.size = sizeof(m.u64);\n\n\n\n        err = vhost_user_write(dev, &msg, NULL, 0);\n\n        return err;\n\n    }\n\n    return -1;\n\n}\n",
        "output": "1",
        "idx": 1146
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BOOL ber_read_sequence_tag(wStream* s, int* length)\n{\n\tBYTE byte;\n\n\tif(Stream_GetRemainingLength(s) < 1)\n\t\treturn FALSE;\n\tStream_Read_UINT8(s, byte);\n\n\tif (byte != ((BER_CLASS_UNIV | BER_CONSTRUCT) | (BER_TAG_SEQUENCE_OF)))\n\t\treturn FALSE;\n\n\treturn ber_read_length(s, length);\n}",
        "output": "1",
        "idx": 5558
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int fw_cfg_add_i64(FWCfgState *s, uint16_t key, uint64_t value)\n\n{\n\n    uint64_t *copy;\n\n\n\n    copy = g_malloc(sizeof(value));\n\n    *copy = cpu_to_le64(value);\n\n    return fw_cfg_add_bytes(s, key, (uint8_t *)copy, sizeof(value));\n\n}\n",
        "output": "1",
        "idx": 3999
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sp_setup(struct net_device *dev)\n{\n\t/* Finish setting up the DEVICE info. */\n\tdev->netdev_ops\t\t= &sp_netdev_ops;\n\tdev->needs_free_netdev\t= true;\n\tdev->mtu\t\t= SIXP_MTU;\n\tdev->hard_header_len\t= AX25_MAX_HEADER_LEN;\n\tdev->header_ops \t= &ax25_header_ops;\n\n\tdev->addr_len\t\t= AX25_ADDR_LEN;\n\tdev->type\t\t= ARPHRD_AX25;\n\tdev->tx_queue_len\t= 10;\n\n\t/* Only activated in AX.25 mode */\n\tmemcpy(dev->broadcast, &ax25_bcast, AX25_ADDR_LEN);\n\tdev_addr_set(dev, (u8 *)&ax25_defaddr);\n\n\tdev->flags\t\t= 0;\n}",
        "output": "1",
        "idx": 165
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ds1338_recv(I2CSlave *i2c)\n\n{\n\n    DS1338State *s = FROM_I2C_SLAVE(DS1338State, i2c);\n\n    uint8_t res;\n\n\n\n    res  = s->nvram[s->ptr];\n\n    s->ptr = (s->ptr + 1) & 0xff;\n\n    return res;\n\n}\n",
        "output": "1",
        "idx": 2689
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool io_poll_disarm(struct io_kiocb *req)\n\t__must_hold(&ctx->completion_lock)\n{\n\tif (!io_poll_get_ownership(req))\n\t\treturn false;\n\tio_poll_remove_entries(req);\n\thash_del(&req->hash_node);\n\treturn true;",
        "output": "1",
        "idx": 3617
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int query_codec(enum CodecID id, int std_compliance)\n\n{\n\n    CodecMime *cm= ff_id3v2_mime_tags;\n\n    while(cm->id != CODEC_ID_NONE) {\n\n        if(id == cm->id)\n\n            return MKTAG('A', 'P', 'I', 'C');\n\n        cm++;\n\n    }\n\n    return -1;\n\n}\n",
        "output": "1",
        "idx": 2938
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int coroutine_fn raw_co_write_zeroes(\n\n    BlockDriverState *bs, int64_t sector_num,\n\n    int nb_sectors, BdrvRequestFlags flags)\n\n{\n\n    BDRVRawState *s = bs->opaque;\n\n\n\n    if (!(flags & BDRV_REQ_MAY_UNMAP)) {\n\n        return -ENOTSUP;\n\n    }\n\n    if (!s->discard_zeroes) {\n\n        return -ENOTSUP;\n\n    }\n\n    return paio_submit_co(bs, s->fd, sector_num, NULL, nb_sectors,\n\n                          QEMU_AIO_DISCARD);\n\n}\n",
        "output": "1",
        "idx": 5996
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ExprCreateMultiKeysymList(ExprDef *expr)\n{\n    unsigned nLevels = darray_size(expr->keysym_list.symsMapIndex);\n\n    darray_resize(expr->keysym_list.symsMapIndex, 1);\n    darray_resize(expr->keysym_list.symsNumEntries, 1);\n    darray_item(expr->keysym_list.symsMapIndex, 0) = 0;\n    darray_item(expr->keysym_list.symsNumEntries, 0) = nLevels;\n\n    return expr;\n}",
        "output": "0",
        "idx": 48
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int Arg_comparator::compare_e_time()\n{\n  THD *thd= current_thd;\n  longlong val1= (*a)->val_time_packed(thd);\n  longlong val2= (*b)->val_time_packed(thd);\n  if ((*a)->null_value || (*b)->null_value)\n    return MY_TEST((*a)->null_value && (*b)->null_value);\n  return MY_TEST(val1 == val2);\n}",
        "output": "0",
        "idx": 1796
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    inline T pow3(const T& val) {\n      return val*val*val;\n    }",
        "output": "0",
        "idx": 4378
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ldb_vlv_init(const char *version)\n{\n\tLDB_MODULE_CHECK_VERSION(version);\n\treturn ldb_register_module(&ldb_vlv_module_ops);\n}",
        "output": "0",
        "idx": 6038
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void ss_del(struct msg_sender *mss)\n{\n\tif (mss->list.next != NULL)\n\t\tlist_del(&mss->list);\n}",
        "output": "0",
        "idx": 4855
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool format_go_output(const string& file_path) {\n  const string command = \"gofmt -w \" + file_path;\n\n  if (system(command.c_str()) == 0) {\n    return true;\n  }\n\n  fprintf(stderr, \"WARNING - Running '%s' failed.\\n\", command.c_str());\n  return false;\n}",
        "output": "1",
        "idx": 2155
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static umode_t platform_dev_attrs_visible(struct kobject *kobj, struct attribute *a,\n\t\tint n)\n{\n\tstruct device *dev = container_of(kobj, typeof(*dev), kobj);\n\n\tif (a == &dev_attr_numa_node.attr &&\n\t\t\tdev_to_node(dev) == NUMA_NO_NODE)\n\t\treturn 0;\n\n\treturn a->mode;\n}",
        "output": "0",
        "idx": 603
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mpegts_read_packet(AVFormatContext *s,\n\n                              AVPacket *pkt)\n\n{\n\n    MpegTSContext *ts = s->priv_data;\n\n\n\n    if (!ts->mpeg2ts_raw) {\n\n        ts->pkt = pkt;\n\n        return handle_packets(ts, 0);\n\n    } else {\n\n        return mpegts_raw_read_packet(s, pkt);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2186
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ide_flush_cache(IDEState *s)\n\n{\n\n    if (s->bs == NULL) {\n\n        ide_flush_cb(s, 0);\n\n        return;\n\n    }\n\n\n\n\n    bdrv_acct_start(s->bs, &s->acct, 0, BDRV_ACCT_FLUSH);\n\n    bdrv_aio_flush(s->bs, ide_flush_cb, s);\n\n}",
        "output": "1",
        "idx": 3812
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void term_bol(void)\n\n{\n\n    term_cmd_buf_index = 0;\n\n}\n",
        "output": "0",
        "idx": 4532
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    **/\n    CImg<T>& operator^=(const char *const expression) {\n      return *this^=(+*this)._fill(expression,true,true,0,0,\"operator^=\",this);",
        "output": "0",
        "idx": 950
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int coroutine_fn raw_co_preadv(BlockDriverState *bs, uint64_t offset,\n\n                                      uint64_t bytes, QEMUIOVector *qiov,\n\n                                      int flags)\n\n{\n\n    BDRVRawState *s = bs->opaque;\n\n\n\n    if (offset > UINT64_MAX - s->offset) {\n\n        return -EINVAL;\n\n    }\n\n    offset += s->offset;\n\n\n\n    BLKDBG_EVENT(bs->file, BLKDBG_READ_AIO);\n\n    return bdrv_co_preadv(bs->file, offset, bytes, qiov, flags);\n\n}\n",
        "output": "0",
        "idx": 4539
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void *arm_coherent_dma_alloc(struct device *dev, size_t size,\n\tdma_addr_t *handle, gfp_t gfp, struct dma_attrs *attrs)\n{\n\tpgprot_t prot = __get_dma_pgprot(attrs, pgprot_kernel);\n\tvoid *memory;\n\n\tif (dma_alloc_from_coherent(dev, size, handle, &memory))\n\t\treturn memory;\n\n\treturn __dma_alloc(dev, size, handle, gfp, prot, true,\n\t\t\t   __builtin_return_address(0));\n}",
        "output": "1",
        "idx": 784
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int nfc_register_device(struct nfc_dev *dev)\n{\n\tint rc;\n\n\tpr_debug(\"dev_name=%s\\n\", dev_name(&dev->dev));\n\n\tmutex_lock(&nfc_devlist_mutex);\n\tnfc_devlist_generation++;\n\trc = device_add(&dev->dev);\n\tmutex_unlock(&nfc_devlist_mutex);\n\n\tif (rc < 0)\n\t\treturn rc;\n\n\trc = nfc_llcp_register_device(dev);\n\tif (rc)\n\t\tpr_err(\"Could not register llcp device\\n\");\n\n\trc = nfc_genl_device_added(dev);\n\tif (rc)\n\t\tpr_debug(\"The userspace won't be notified that the device %s was added\\n\",\n\t\t\t dev_name(&dev->dev));\n\n\tdev->rfkill = rfkill_alloc(dev_name(&dev->dev), &dev->dev,\n\t\t\t\t   RFKILL_TYPE_NFC, &nfc_rfkill_ops, dev);\n\tif (dev->rfkill) {\n\t\tif (rfkill_register(dev->rfkill) < 0) {\n\t\t\trfkill_destroy(dev->rfkill);\n\t\t\tdev->rfkill = NULL;\n\t\t}\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 4567
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compile_get_env(char_u **arg, cctx_T *cctx)\n{\n    char_u\t*start = *arg;\n    int\t\tlen;\n    int\t\tret;\n    char_u\t*name;\n\n    ++*arg;\n    len = get_env_len(arg);\n    if (len == 0)\n    {\n\tsemsg(_(e_syntax_error_at_str), start - 1);\n\treturn FAIL;\n    }\n\n    // include the '$' in the name, eval_env_var() expects it.\n    name = vim_strnsave(start, len + 1);\n    ret = generate_LOAD(cctx, ISN_LOADENV, 0, name, &t_string);\n    vim_free(name);\n    return ret;\n}",
        "output": "1",
        "idx": 2164
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void stream_joined(h2_mplx *m, h2_stream *stream)\n{\n    ap_assert(!stream->task || stream->task->worker_done);\n    \n    h2_ihash_remove(m->shold, stream->id);\n    h2_ihash_add(m->spurge, stream);\n}",
        "output": "1",
        "idx": 4133
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t sock_sendpage(struct file *file, struct page *page,\n\t\t\t     int offset, size_t size, loff_t *ppos, int more)\n{\n\tstruct socket *sock;\n\tint flags;\n\n\tsock = file->private_data;\n\n\tflags = !(file->f_flags & O_NONBLOCK) ? 0 : MSG_DONTWAIT;\n\tif (more)\n\t\tflags |= MSG_MORE;\n\n\treturn sock->ops->sendpage(sock, page, offset, size, flags);\n}",
        "output": "1",
        "idx": 219
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_hb_buffer_swap( HB_Buffer buffer )\n{\n  HB_GlyphItem tmp_string;\n  int tmp_length;\n  int tmp_pos;\n\n  if ( buffer->separate_out )\n    {\n      tmp_string = buffer->in_string;\n      buffer->in_string = buffer->out_string;\n      buffer->out_string = tmp_string;\n      buffer->alt_string = buffer->out_string;\n    }\n\n  tmp_length = buffer->in_length;\n  buffer->in_length = buffer->out_length;\n  buffer->out_length = tmp_length;\n\n  tmp_pos = buffer->in_pos;\n  buffer->in_pos = buffer->out_pos;\n  buffer->out_pos = tmp_pos;\n}",
        "output": "1",
        "idx": 5126
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_biweight_h264_pixels16_8_msa(uint8_t *dst, uint8_t *src,\n\n                                     int stride, int height,\n\n                                     int log2_denom, int weight_dst,\n\n                                     int weight_src, int offset)\n\n{\n\n    avc_biwgt_16width_msa(src, stride,\n\n                          dst, stride,\n\n                          height, log2_denom,\n\n                          weight_src, weight_dst, offset);\n\n}\n",
        "output": "0",
        "idx": 1523
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static USBPort *xhci_lookup_uport(XHCIState *xhci, uint32_t *slot_ctx)\n\n{\n\n    USBPort *uport;\n\n    char path[32];\n\n    int i, pos, port;\n\n\n\n    port = (slot_ctx[1]>>16) & 0xFF;\n\n\n\n\n    port = xhci->ports[port-1].uport->index+1;\n\n    pos = snprintf(path, sizeof(path), \"%d\", port);\n\n    for (i = 0; i < 5; i++) {\n\n        port = (slot_ctx[0] >> 4*i) & 0x0f;\n\n        if (!port) {\n\n            break;\n\n\n        pos += snprintf(path + pos, sizeof(path) - pos, \".%d\", port);\n\n\n\n\n    QTAILQ_FOREACH(uport, &xhci->bus.used, next) {\n\n        if (strcmp(uport->path, path) == 0) {\n\n            return uport;\n\n\n\n",
        "output": "1",
        "idx": 3855
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ovl_want_write(struct dentry *dentry)\n{\n\tstruct ovl_fs *ofs = dentry->d_sb->s_fs_info;\n\treturn mnt_want_write(ofs->upper_mnt);\n}",
        "output": "0",
        "idx": 1687
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_ownertrust_with_min (PKT_public_key *pk)\n{\n#ifdef NO_TRUST_MODELS\n  (void)pk;\n  return TRUST_UNKNOWN;\n#else\n  unsigned int otrust, otrust_min;\n\n  otrust = (tdb_get_ownertrust (pk) & TRUST_MASK);\n  otrust_min = tdb_get_min_ownertrust (pk);\n  if (otrust < otrust_min)\n    {\n      /* If the trust that the user has set is less than the trust\n\t that was calculated from a trust signature chain, use the\n\t higher of the two.  We do this here and not in\n\t get_ownertrust since the underlying ownertrust should not\n\t really be set - just the appearance of the ownertrust. */\n\n      otrust = otrust_min;\n    }\n\n  return otrust;\n#endif\n}",
        "output": "0",
        "idx": 2048
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t taihu_cpld_readb (void *opaque, hwaddr addr)\n\n{\n\n    taihu_cpld_t *cpld;\n\n    uint32_t ret;\n\n\n\n    cpld = opaque;\n\n    switch (addr) {\n\n    case 0x0:\n\n        ret = cpld->reg0;\n\n        break;\n\n    case 0x1:\n\n        ret = cpld->reg1;\n\n        break;\n\n    default:\n\n        ret = 0;\n\n        break;\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 3451
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int iov_iter_npages(const struct iov_iter *i, int maxpages)\n{\n\tif (unlikely(!i->count))\n\t\treturn 0;\n\t/* iovec and kvec have identical layouts */\n\tif (likely(iter_is_iovec(i) || iov_iter_is_kvec(i)))\n\t\treturn iov_npages(i, maxpages);\n\tif (iov_iter_is_bvec(i))\n\t\treturn bvec_npages(i, maxpages);\n\tif (iov_iter_is_pipe(i)) {\n\t\tunsigned int iter_head;\n\t\tint npages;\n\t\tsize_t off;\n\n\t\tif (!sanity(i))\n\t\t\treturn 0;\n\n\t\tdata_start(i, &iter_head, &off);\n\t\t/* some of this one + all after this one */\n\t\tnpages = pipe_space_for_user(iter_head, i->pipe->tail, i->pipe);\n\t\treturn min(npages, maxpages);\n\t}\n\tif (iov_iter_is_xarray(i)) {\n\t\tunsigned offset = (i->xarray_start + i->iov_offset) % PAGE_SIZE;\n\t\tint npages = DIV_ROUND_UP(offset + i->count, PAGE_SIZE);\n\t\treturn min(npages, maxpages);\n\t}\n\treturn 0;\n}",
        "output": "0",
        "idx": 4274
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ssl2_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)\n\t{\n\tlong l;\n\n\tif (p != NULL)\n\t\t{\n\t\tl=c->id;\n\t\tif ((l & 0xff000000) != 0x02000000) return(0);\n\t\tp[0]=((unsigned char)(l>>16L))&0xFF;\n\t\tp[1]=((unsigned char)(l>> 8L))&0xFF;\n\t\tp[2]=((unsigned char)(l     ))&0xFF;\n\t\t}\n\treturn(3);\n\t}",
        "output": "1",
        "idx": 4984
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void loop_remove(struct loop_device *lo)\n{\n\tblk_cleanup_queue(lo->lo_queue);\n\tdel_gendisk(lo->lo_disk);\n\tblk_mq_free_tag_set(&lo->tag_set);\n\tput_disk(lo->lo_disk);\n\tkfree(lo);\n}",
        "output": "0",
        "idx": 5545
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "irc_server_set_host (struct t_irc_server *server, const char *host)\n{\n    struct t_irc_channel *ptr_channel;\n\n    /* if host is the same, just return */\n    if ((!server->host && !host)\n        || (server->host && host && strcmp (server->host, host) == 0))\n    {\n        return;\n    }\n\n    /* update the nick host in server */\n    if (server->host)\n        free (server->host);\n    server->host = (host) ? strdup (host) : NULL;\n\n    /* set local variable \"host\" for server and all channels/pv */\n    weechat_buffer_set (server->buffer, \"localvar_set_host\", host);\n    for (ptr_channel = server->channels; ptr_channel;\n         ptr_channel = ptr_channel->next_channel)\n    {\n        weechat_buffer_set (ptr_channel->buffer,\n                            \"localvar_set_host\", host);\n    }\n\n    weechat_bar_item_update (\"irc_host\");\n    weechat_bar_item_update (\"irc_nick_host\");\n}",
        "output": "0",
        "idx": 5137
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vc1_inv_trans_4x4_dc_c(uint8_t *dest, int linesize, DCTELEM *block)\n\n{\n\n    int i;\n\n    int dc = block[0];\n\n    const uint8_t *cm;\n\n    dc = (17 * dc +  4) >> 3;\n\n    dc = (17 * dc + 64) >> 7;\n\n    cm = ff_cropTbl + MAX_NEG_CROP + dc;\n\n    for(i = 0; i < 4; i++){\n\n        dest[0] = cm[dest[0]];\n\n        dest[1] = cm[dest[1]];\n\n        dest[2] = cm[dest[2]];\n\n        dest[3] = cm[dest[3]];\n\n        dest += linesize;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1418
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void emulated_push_error(EmulatedState *card, uint64_t code)\n\n{\n\n    EmulEvent *event = (EmulEvent *)g_malloc(sizeof(EmulEvent));\n\n\n\n    assert(event);\n\n    event->p.error.type = EMUL_ERROR;\n\n    event->p.error.code = code;\n\n    emulated_push_event(card, event);\n\n}\n",
        "output": "1",
        "idx": 3997
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void term_up_char(void)\n\n{\n\n    int idx;\n\n\n\n    if (term_hist_entry == 0)\n\n\treturn;\n\n    if (term_hist_entry == -1) {\n\n\t/* Find latest entry */\n\n\tfor (idx = 0; idx < TERM_MAX_CMDS; idx++) {\n\n\t    if (term_history[idx] == NULL)\n\n\t\tbreak;\n\n\t}\n\n\tterm_hist_entry = idx;\n\n    }\n\n    term_hist_entry--;\n\n    if (term_hist_entry >= 0) {\n\n\tpstrcpy(term_cmd_buf, sizeof(term_cmd_buf), \n\n                term_history[term_hist_entry]);\n\n\tterm_cmd_buf_index = term_cmd_buf_size = strlen(term_cmd_buf);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5858
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static u32 read_32(cdk_stream_t s)\n{\n\tbyte buf[4];\n\tsize_t nread;\n\n\tassert(s != NULL);\n\n\tstream_read(s, buf, 4, &nread);\n\tif (nread != 4)\n\t\treturn (u32) - 1;\n\treturn buf[0] << 24 | buf[1] << 16 | buf[2] << 8 | buf[3];\n}",
        "output": "1",
        "idx": 5175
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "tlb_update_vma_flags(struct mmu_gather *tlb, struct vm_area_struct *vma)\n{\n\t/*\n\t * flush_tlb_range() implementations that look at VM_HUGETLB (tile,\n\t * mips-4k) flush only large pages.\n\t *\n\t * flush_tlb_range() implementations that flush I-TLB also flush D-TLB\n\t * (tile, xtensa, arm), so it's ok to just add VM_EXEC to an existing\n\t * range.\n\t *\n\t * We rely on tlb_end_vma() to issue a flush, such that when we reset\n\t * these values the batch is empty.\n\t */\n\ttlb->vma_huge = is_vm_hugetlb_page(vma);\n\ttlb->vma_exec = !!(vma->vm_flags & VM_EXEC);\n}",
        "output": "1",
        "idx": 416
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int em_loop(struct x86_emulate_ctxt *ctxt)\n{\n\tregister_address_increment(ctxt, reg_rmw(ctxt, VCPU_REGS_RCX), -1);\n\tif ((address_mask(ctxt, reg_read(ctxt, VCPU_REGS_RCX)) != 0) &&\n\t    (ctxt->b == 0xe2 || test_cc(ctxt->b ^ 0x5, ctxt->eflags)))\n\t\tjmp_rel(ctxt, ctxt->src.val);\n\n\treturn X86EMUL_CONTINUE;\n}",
        "output": "1",
        "idx": 5831
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PackLinuxElf64::adjABS(Elf64_Sym *sym, unsigned delta)\n{\n    for (int j = 0; abs_symbol_names[j][0]; ++j) {\n        unsigned st_name = get_te32(&sym->st_name);\n        if (!strcmp(abs_symbol_names[j], get_str_name(st_name, (unsigned)-1))) {\n            sym->st_value += delta;\n            return 1;\n        }\n    }\n    return 0;\n}",
        "output": "1",
        "idx": 1807
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "RefreshXtermOSC()\n{\n  int i;\n  struct win *p;\n\n  p = Layer2Window(D_forecv->c_layer);\n  for (i = 3; i >=0; i--)\n    SetXtermOSC(i, p ? p->w_xtermosc[i] : 0);\n}",
        "output": "1",
        "idx": 2436
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    void Close()\n    {\n        if ( m_file )\n        {\n            fclose(m_file);\n            m_file = NULL;\n        }\n    }",
        "output": "0",
        "idx": 18
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint16_t phys_section_add(MemoryRegionSection *section)\n\n{\n\n    /* The physical section number is ORed with a page-aligned\n\n     * pointer to produce the iotlb entries.  Thus it should\n\n     * never overflow into the page-aligned value.\n\n     */\n\n    assert(next_map.sections_nb < TARGET_PAGE_SIZE);\n\n\n\n    if (next_map.sections_nb == next_map.sections_nb_alloc) {\n\n        next_map.sections_nb_alloc = MAX(next_map.sections_nb_alloc * 2,\n\n                                         16);\n\n        next_map.sections = g_renew(MemoryRegionSection, next_map.sections,\n\n                                    next_map.sections_nb_alloc);\n\n    }\n\n    next_map.sections[next_map.sections_nb] = *section;\n\n    memory_region_ref(section->mr);\n\n    return next_map.sections_nb++;\n\n}\n",
        "output": "0",
        "idx": 3457
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "CharDriverState *qemu_chr_find(const char *name)\n\n{\n\n    CharDriverState *chr;\n\n\n\n    TAILQ_FOREACH(chr, &chardevs, next) {\n\n        if (strcmp(chr->label, name) != 0)\n\n            continue;\n\n        return chr;\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 285
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void AES128GCM_OnWireRxHandler::reset_rx_handler()\n{\n  if(1 != EVP_DecryptInit_ex(ectx.get(), nullptr, nullptr, nullptr,\n\treinterpret_cast<const unsigned char*>(&nonce))) {\n    throw std::runtime_error(\"EVP_DecryptInit_ex failed\");\n  }\n  ++nonce.random_seq;\n}",
        "output": "1",
        "idx": 5225
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cpu_ioreq_move(ioreq_t *req)\n\n{\n\n    int i;\n\n\n\n    if (!req->data_is_ptr) {\n\n        if (req->dir == IOREQ_READ) {\n\n            for (i = 0; i < req->count; i++) {\n\n                read_phys_req_item(req->addr, req, i, &req->data);\n\n            }\n\n        } else if (req->dir == IOREQ_WRITE) {\n\n            for (i = 0; i < req->count; i++) {\n\n                write_phys_req_item(req->addr, req, i, &req->data);\n\n            }\n\n        }\n\n    } else {\n\n        uint64_t tmp;\n\n\n\n        if (req->dir == IOREQ_READ) {\n\n            for (i = 0; i < req->count; i++) {\n\n                read_phys_req_item(req->addr, req, i, &tmp);\n\n                write_phys_req_item(req->data, req, i, &tmp);\n\n            }\n\n        } else if (req->dir == IOREQ_WRITE) {\n\n            for (i = 0; i < req->count; i++) {\n\n                read_phys_req_item(req->data, req, i, &tmp);\n\n                write_phys_req_item(req->addr, req, i, &tmp);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1176
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool can_follow_write_pte(pte_t pte, unsigned int flags)\n{\n\treturn pte_write(pte) ||\n\t\t((flags & FOLL_FORCE) && (flags & FOLL_COW) && pte_dirty(pte));\n}",
        "output": "1",
        "idx": 94
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void v9fs_synth_direntry(V9fsSynthNode *node,\n\n                                struct dirent *entry, off_t off)\n\n{\n\n    strcpy(entry->d_name, node->name);\n\n    entry->d_ino = node->attr->inode;\n\n    entry->d_off = off + 1;\n\n}\n",
        "output": "0",
        "idx": 4850
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void monitor_init(CharDriverState *chr, int show_banner)\n\n{\n\n    int i;\n\n\n\n    if (is_first_init) {\n\n        key_timer = qemu_new_timer(vm_clock, release_keys, NULL);\n\n        if (!key_timer)\n\n            return;\n\n        for (i = 0; i < MAX_MON; i++) {\n\n            monitor_hd[i] = NULL;\n\n        }\n\n        is_first_init = 0;\n\n    }\n\n    for (i = 0; i < MAX_MON; i++) {\n\n        if (monitor_hd[i] == NULL) {\n\n            monitor_hd[i] = chr;\n\n            break;\n\n        }\n\n    }\n\n\n\n    hide_banner = !show_banner;\n\n\n\n    qemu_chr_add_handlers(chr, term_can_read, term_read, term_event, cur_mon);\n\n\n\n    readline_start(\"\", 0, monitor_command_cb, NULL);\n\n}\n",
        "output": "0",
        "idx": 4675
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int scsi_req_get_sense(SCSIRequest *req, uint8_t *buf, int len)\n\n{\n\n    assert(len >= 14);\n\n    if (!req->sense_len) {\n\n        return 0;\n\n    }\n\n    return scsi_build_sense(req->sense, req->sense_len, buf, len, true);\n\n}\n",
        "output": "0",
        "idx": 1447
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vt82c686b_write_config(PCIDevice * d, uint32_t address,\n\n                                   uint32_t val, int len)\n\n{\n\n    VT82C686BState *vt686 = DO_UPCAST(VT82C686BState, dev, d);\n\n\n\n    DPRINTF(\"vt82c686b_write_config  address 0x%x  val 0x%x len 0x%x \\n\",\n\n           address, val, len);\n\n\n\n    pci_default_write_config(d, address, val, len);\n\n    if (address == 0x85) {  /* enable or disable super IO configure */\n\n        if (val & 0x2) {\n\n            /* floppy also uses 0x3f0 and 0x3f1.\n\n             * But we do not emulate flopy,so just set it here. */\n\n            isa_unassign_ioport(0x3f0, 2);\n\n            register_ioport_read(0x3f0, 2, 1, superio_ioport_readb,\n\n                                 &vt686->superio_conf);\n\n            register_ioport_write(0x3f0, 2, 1, superio_ioport_writeb,\n\n                                  &vt686->superio_conf);\n\n        } else {\n\n            isa_unassign_ioport(0x3f0, 2);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4543
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "iakerb_gss_delete_sec_context(OM_uint32 *minor_status,\n                              gss_ctx_id_t *context_handle,\n                              gss_buffer_t output_token)\n{\n    OM_uint32 major_status = GSS_S_COMPLETE;\n\n    if (output_token != GSS_C_NO_BUFFER) {\n        output_token->length = 0;\n        output_token->value = NULL;\n    }\n\n    *minor_status = 0;\n\n    if (*context_handle != GSS_C_NO_CONTEXT) {\n        iakerb_ctx_id_t iakerb_ctx = (iakerb_ctx_id_t)*context_handle;\n\n        if (iakerb_ctx->magic == KG_IAKERB_CONTEXT) {\n            iakerb_release_context(iakerb_ctx);\n            *context_handle = GSS_C_NO_CONTEXT;\n        } else {\n            assert(iakerb_ctx->magic == KG_CONTEXT);\n\n            major_status = krb5_gss_delete_sec_context(minor_status,\n                                                       context_handle,\n                                                       output_token);\n        }\n    }\n\n    return major_status;\n}",
        "output": "1",
        "idx": 1694
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(SplFileInfo, __construct)\n{\n\tspl_filesystem_object *intern;\n\tchar *path;\n\tint len;\n\tzend_error_handling error_handling;\n\n\tzend_replace_error_handling(EH_THROW, spl_ce_RuntimeException, &error_handling TSRMLS_CC);\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"s\", &path, &len) == FAILURE) {\n\t\tzend_restore_error_handling(&error_handling TSRMLS_CC);\n\t\treturn;\n\t}\n\n\tintern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\t\n\tspl_filesystem_info_set_filename(intern, path, len, 1 TSRMLS_CC);\n\n\tzend_restore_error_handling(&error_handling TSRMLS_CC);\n\t\n\t/* intern->type = SPL_FS_INFO; already set */\n}",
        "output": "1",
        "idx": 4086
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void options_apply() { /* apply default/validated configuration */\n    unsigned num=0;\n    SERVICE_OPTIONS *section;\n\n    CRYPTO_THREAD_write_lock(stunnel_locks[LOCK_SECTIONS]);\n\n    memcpy(&global_options, &new_global_options, sizeof(GLOBAL_OPTIONS));\n    memset(&new_global_options, 0, sizeof(GLOBAL_OPTIONS));\n\n    /* service_options are used for inetd mode and to enumerate services */\n    for(section=new_service_options.next; section; section=section->next)\n        section->section_number=num++;\n    memcpy(&service_options, &new_service_options, sizeof(SERVICE_OPTIONS));\n    memset(&new_service_options, 0, sizeof(SERVICE_OPTIONS));\n    number_of_sections=num;\n\n    CRYPTO_THREAD_unlock(stunnel_locks[LOCK_SECTIONS]);\n}",
        "output": "0",
        "idx": 2347
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Network::FilterStatus Context::onNetworkNewConnection() {\n  onCreate(root_context_id_);\n  if (!wasm_->onNewConnection_) {\n    return Network::FilterStatus::Continue;\n  }\n  if (wasm_->onNewConnection_(this, id_).u64_ == 0) {\n    return Network::FilterStatus::Continue;\n  }\n  return Network::FilterStatus::StopIteration;\n}",
        "output": "1",
        "idx": 5620
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void vnc_client_write(void *opaque)\n\n{\n\n    long ret;\n\n    VncState *vs = opaque;\n\n\n\n#ifdef CONFIG_VNC_TLS\n\n    if (vs->tls.session) {\n\n\tret = gnutls_write(vs->tls.session, vs->output.buffer, vs->output.offset);\n\n\tif (ret < 0) {\n\n\t    if (ret == GNUTLS_E_AGAIN)\n\n\t\terrno = EAGAIN;\n\n\t    else\n\n\t\terrno = EIO;\n\n\t    ret = -1;\n\n\t}\n\n    } else\n\n#endif /* CONFIG_VNC_TLS */\n\n\tret = send(vs->csock, vs->output.buffer, vs->output.offset, 0);\n\n    ret = vnc_client_io_error(vs, ret, socket_error());\n\n    if (!ret)\n\n\treturn;\n\n\n\n    memmove(vs->output.buffer, vs->output.buffer + ret, (vs->output.offset - ret));\n\n    vs->output.offset -= ret;\n\n\n\n    if (vs->output.offset == 0) {\n\n\tqemu_set_fd_handler2(vs->csock, NULL, vnc_client_read, NULL, vs);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 282
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void spapr_phb_hot_unplug_child(HotplugHandler *plug_handler,\n\n                                       DeviceState *plugged_dev, Error **errp)\n\n{\n\n    sPAPRPHBState *phb = SPAPR_PCI_HOST_BRIDGE(DEVICE(plug_handler));\n\n    PCIDevice *pdev = PCI_DEVICE(plugged_dev);\n\n    sPAPRDRConnectorClass *drck;\n\n    sPAPRDRConnector *drc = spapr_phb_get_pci_drc(phb, pdev);\n\n    Error *local_err = NULL;\n\n\n\n    if (!phb->dr_enabled) {\n\n        error_setg(errp, QERR_BUS_NO_HOTPLUG,\n\n                   object_get_typename(OBJECT(phb)));\n\n        return;\n\n    }\n\n\n\n    g_assert(drc);\n\n\n\n    drck = SPAPR_DR_CONNECTOR_GET_CLASS(drc);\n\n    if (!drck->release_pending(drc)) {\n\n        spapr_phb_remove_pci_device(drc, phb, pdev, &local_err);\n\n        if (local_err) {\n\n            error_propagate(errp, local_err);\n\n            return;\n\n        }\n\n        spapr_hotplug_req_remove_by_index(drc);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 758
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long __sys_recvmsg_sock(struct socket *sock, struct user_msghdr __user *msg,\n\t\t\tunsigned int flags)\n{\n\tstruct msghdr msg_sys;\n\n\treturn ___sys_recvmsg(sock, msg, &msg_sys, flags, 0);\n}",
        "output": "1",
        "idx": 839
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  const std::string& get_tenant() const {\n    ceph_assert(t != Wildcard);\n    return u.tenant;\n  }",
        "output": "1",
        "idx": 363
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mcf_intc_write(void *opaque, target_phys_addr_t addr,\n\n                           uint64_t val, unsigned size)\n\n{\n\n    int offset;\n\n    mcf_intc_state *s = (mcf_intc_state *)opaque;\n\n    offset = addr & 0xff;\n\n    if (offset >= 0x40 && offset < 0x80) {\n\n        int n = offset - 0x40;\n\n        s->icr[n] = val;\n\n        if (val == 0)\n\n            s->enabled &= ~(1ull << n);\n\n        else\n\n            s->enabled |= (1ull << n);\n\n        mcf_intc_update(s);\n\n        return;\n\n    }\n\n    switch (offset) {\n\n    case 0x00: case 0x04:\n\n        /* Ignore IPR writes.  */\n\n        return;\n\n    case 0x08:\n\n        s->imr = (s->imr & 0xffffffff) | ((uint64_t)val << 32);\n\n        break;\n\n    case 0x0c:\n\n        s->imr = (s->imr & 0xffffffff00000000ull) | (uint32_t)val;\n\n        break;\n\n    default:\n\n        hw_error(\"mcf_intc_write: Bad write offset %d\\n\", offset);\n\n        break;\n\n    }\n\n    mcf_intc_update(s);\n\n}\n",
        "output": "0",
        "idx": 1213
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "make_weights (PixopsFilter     *filter,\n\t      PixopsInterpType  interp_type,\t      \n\t      double            scale_x,\n\t      double            scale_y)\n{\n  switch (interp_type)\n    {\n    case PIXOPS_INTERP_NEAREST:\n      g_assert_not_reached ();\n      break;\n\n    case PIXOPS_INTERP_TILES:\n      tile_make_weights (&filter->x, scale_x);\n      tile_make_weights (&filter->y, scale_y);\n      break;\n      \n    case PIXOPS_INTERP_BILINEAR:\n      bilinear_magnify_make_weights (&filter->x, scale_x);\n      bilinear_magnify_make_weights (&filter->y, scale_y);\n      break;\n      \n    case PIXOPS_INTERP_HYPER:\n      bilinear_box_make_weights (&filter->x, scale_x);\n      bilinear_box_make_weights (&filter->y, scale_y);\n      break;\n    }\n}",
        "output": "1",
        "idx": 4726
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_load_vmstate(BlockDriverState *bs, uint8_t *buf,\n\n                      int64_t pos, int size)\n\n{\n\n    BlockDriver *drv = bs->drv;\n\n    if (!drv)\n\n        return -ENOMEDIUM;\n\n    if (drv->bdrv_load_vmstate)\n\n        return drv->bdrv_load_vmstate(bs, buf, pos, size);\n\n    if (bs->file)\n\n        return bdrv_load_vmstate(bs->file, buf, pos, size);\n\n    return -ENOTSUP;\n\n}\n",
        "output": "0",
        "idx": 2781
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline abi_long host_to_target_timespec(abi_ulong target_addr,\n\n                                               struct timespec *host_ts)\n\n{\n\n    struct target_timespec *target_ts;\n\n\n\n    if (!lock_user_struct(VERIFY_WRITE, target_ts, target_addr, 0))\n\n        return -TARGET_EFAULT;\n\n    target_ts->tv_sec = tswapal(host_ts->tv_sec);\n\n    target_ts->tv_nsec = tswapal(host_ts->tv_nsec);\n\n    unlock_user_struct(target_ts, target_addr, 1);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5733
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static OPJ_BOOL opj_tcd_code_block_enc_allocate_data(opj_tcd_cblk_enc_t *\n        p_code_block)\n{\n    OPJ_UINT32 l_data_size;\n\n    l_data_size = (OPJ_UINT32)((p_code_block->x1 - p_code_block->x0) *\n                               (p_code_block->y1 - p_code_block->y0) * (OPJ_INT32)sizeof(OPJ_UINT32));\n\n    if (l_data_size > p_code_block->data_size) {\n        if (p_code_block->data) {\n            /* We refer to data - 1 since below we incremented it */\n            opj_free(p_code_block->data - 1);\n        }\n        p_code_block->data = (OPJ_BYTE*) opj_malloc(l_data_size + 1);\n        if (! p_code_block->data) {\n            p_code_block->data_size = 0U;\n            return OPJ_FALSE;\n        }\n        p_code_block->data_size = l_data_size;\n\n        /* We reserve the initial byte as a fake byte to a non-FF value */\n        /* and increment the data pointer, so that opj_mqc_init_enc() */\n        /* can do bp = data - 1, and opj_mqc_byteout() can safely dereference */\n        /* it. */\n        p_code_block->data[0] = 0;\n        p_code_block->data += 1; /*why +1 ?*/\n    }\n    return OPJ_TRUE;\n}",
        "output": "1",
        "idx": 2435
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cmpfcncc(const void *_a, const void *_b) {\n\tRAnalFunction *a = (RAnalFunction *)_a;\n\tRAnalFunction *b = (RAnalFunction *)_b;\n\tut64 as = r_anal_function_complexity (a);\n\tut64 bs = r_anal_function_complexity (b);\n\treturn (as > bs)? 1: (as < bs)? -1: 0;\n}",
        "output": "0",
        "idx": 3682
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t block_crypto_read_func(QCryptoBlock *block,\n\n                                      size_t offset,\n\n                                      uint8_t *buf,\n\n                                      size_t buflen,\n\n                                      Error **errp,\n\n                                      void *opaque)\n\n{\n\n    BlockDriverState *bs = opaque;\n\n    ssize_t ret;\n\n\n\n    ret = bdrv_pread(bs->file, offset, buf, buflen);\n\n    if (ret < 0) {\n\n        error_setg_errno(errp, -ret, \"Could not read encryption header\");\n\n        return ret;\n\n    }\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 1959
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static target_long monitor_get_decr (const struct MonitorDef *md, int val)\n\n{\n\n    CPUState *env = mon_get_cpu();\n\n    if (!env)\n\n        return 0;\n\n    return cpu_ppc_load_decr(env);\n\n}\n",
        "output": "1",
        "idx": 1912
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "evdns_base_set_option(struct evdns_base *base,\n    const char *option, const char *val)\n{\n\tint res;\n\tEVDNS_LOCK(base);\n\tres = evdns_base_set_option_impl(base, option, val, DNS_OPTIONS_ALL);\n\tEVDNS_UNLOCK(base);\n\treturn res;\n}",
        "output": "0",
        "idx": 5013
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void pci_default_write_config(PCIDevice *d, uint32_t addr, uint32_t val, int l)\n\n{\n\n    int i, was_irq_disabled = pci_irq_disabled(d);\n\n    uint32_t config_size = pci_config_size(d);\n\n\n\n    for (i = 0; i < l && addr + i < config_size; val >>= 8, ++i) {\n\n        uint8_t wmask = d->wmask[addr + i];\n\n        uint8_t w1cmask = d->w1cmask[addr + i];\n\n        assert(!(wmask & w1cmask));\n\n        d->config[addr + i] = (d->config[addr + i] & ~wmask) | (val & wmask);\n\n        d->config[addr + i] &= ~(val & w1cmask); /* W1C: Write 1 to Clear */\n\n    }\n\n    if (ranges_overlap(addr, l, PCI_BASE_ADDRESS_0, 24) ||\n\n        ranges_overlap(addr, l, PCI_ROM_ADDRESS, 4) ||\n\n        ranges_overlap(addr, l, PCI_ROM_ADDRESS1, 4) ||\n\n        range_covers_byte(addr, l, PCI_COMMAND))\n\n        pci_update_mappings(d);\n\n\n\n    if (range_covers_byte(addr, l, PCI_COMMAND))\n\n        pci_update_irq_disabled(d, was_irq_disabled);\n\n}\n",
        "output": "1",
        "idx": 150
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ntlm_print_av_pair_list(NTLM_AV_PAIR* pAvPairList, size_t cbAvPairList)\n{\n\tsize_t cbAvPair = cbAvPairList;\n\tNTLM_AV_PAIR* pAvPair = pAvPairList;\n\n\tif (!ntlm_av_pair_check(pAvPair, cbAvPair))\n\t\treturn;\n\n\tWLog_INFO(TAG, \"AV_PAIRs =\");\n\n\twhile (pAvPair && ntlm_av_pair_get_id(pAvPair) != MsvAvEOL)\n\t{\n\t\tWLog_INFO(TAG, \"\\t%s AvId: %\" PRIu16 \" AvLen: %\" PRIu16 \"\",\n\t\t          AV_PAIR_STRINGS[ntlm_av_pair_get_id(pAvPair)], ntlm_av_pair_get_id(pAvPair),\n\t\t          ntlm_av_pair_get_len(pAvPair));\n\t\twinpr_HexDump(TAG, WLOG_INFO, ntlm_av_pair_get_value_pointer(pAvPair),\n\t\t              ntlm_av_pair_get_len(pAvPair));\n\n\t\tpAvPair = ntlm_av_pair_next(pAvPair, &cbAvPair);\n\t}\n}",
        "output": "1",
        "idx": 2709
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {\n  headers_.remove_if([&](const HeaderEntryImpl& entry) {\n    bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());\n    if (to_remove) {\n      // If this header should be removed, make sure any references in the\n      // static lookup table are cleared as well.\n      EntryCb cb = ConstSingleton<StaticLookupTable>::get().find(entry.key().getStringView());\n      if (cb) {\n        StaticLookupResponse ref_lookup_response = cb(*this);\n        if (ref_lookup_response.entry_) {\n          *ref_lookup_response.entry_ = nullptr;\n        }\n      }\n    }\n    return to_remove;\n  });\n}",
        "output": "1",
        "idx": 5544
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static PHP_FUNCTION(session_id)\n{\n\tzend_string *name = NULL;\n\tint argc = ZEND_NUM_ARGS();\n\n\tif (zend_parse_parameters(argc, \"|S\", &name) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (name && PS(use_cookies) && SG(headers_sent)) {\n\t\tphp_error_docref(NULL, E_WARNING, \"Cannot change session id when headers already sent\");\n\t\tRETURN_FALSE;\n\t}\n\n\tif (PS(id)) {\n\t\t/* keep compatibility for \"\\0\" characters ???\n\t\t * see: ext/session/tests/session_id_error3.phpt */\n\t\tsize_t len = strlen(ZSTR_VAL(PS(id)));\n\t\tif (UNEXPECTED(len != ZSTR_LEN(PS(id)))) {\n\t\t\tRETVAL_NEW_STR(zend_string_init(ZSTR_VAL(PS(id)), len, 0));\n\t\t} else {\n\t\t\tRETVAL_STR_COPY(PS(id));\n\t\t}\n\t} else {\n\t\tRETVAL_EMPTY_STRING();\n\t}\n\n\tif (name) {\n\t\tif (PS(id)) {\n\t\t\tzend_string_release(PS(id));\n\t\t}\n\t\tPS(id) = zend_string_copy(name);\n\t}\n}",
        "output": "0",
        "idx": 1342
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_busid_cmd(ESPState *s, uint8_t *buf, uint8_t busid)\n\n{\n\n    int32_t datalen;\n\n    int lun;\n\n\n\n    DPRINTF(\"do_busid_cmd: busid 0x%x\\n\", busid);\n\n    lun = busid & 7;\n\n    s->current_req = scsi_req_new(s->current_dev, 0, lun, NULL);\n\n    datalen = scsi_req_enqueue(s->current_req, buf);\n\n    s->ti_size = datalen;\n\n    if (datalen != 0) {\n\n        s->rregs[ESP_RSTAT] = STAT_TC;\n\n        s->dma_left = 0;\n\n        s->dma_counter = 0;\n\n        if (datalen > 0) {\n\n            s->rregs[ESP_RSTAT] |= STAT_DI;\n\n        } else {\n\n            s->rregs[ESP_RSTAT] |= STAT_DO;\n\n        }\n\n        scsi_req_continue(s->current_req);\n\n    }\n\n    s->rregs[ESP_RINTR] = INTR_BS | INTR_FC;\n\n    s->rregs[ESP_RSEQ] = SEQ_CD;\n\n    esp_raise_irq(s);\n\n}\n",
        "output": "0",
        "idx": 2113
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "read_rle_pixel(tga_source_ptr sinfo)\n/* Read one Targa pixel from the input file, expanding RLE data as needed */\n{\n  register FILE *infile = sinfo->pub.input_file;\n  register int i;\n\n  /* Duplicate previously read pixel? */\n  if (sinfo->dup_pixel_count > 0) {\n    sinfo->dup_pixel_count--;\n    return;\n  }\n\n  /* Time to read RLE block header? */\n  if (--sinfo->block_count < 0) { /* decrement pixels remaining in block */\n    i = read_byte(sinfo);\n    if (i & 0x80) {             /* Start of duplicate-pixel block? */\n      sinfo->dup_pixel_count = i & 0x7F; /* number of dups after this one */\n      sinfo->block_count = 0;   /* then read new block header */\n    } else {\n      sinfo->block_count = i & 0x7F; /* number of pixels after this one */\n    }\n  }\n\n  /* Read next pixel */\n  for (i = 0; i < sinfo->pixel_size; i++) {\n    sinfo->tga_pixel[i] = (U_CHAR)getc(infile);\n  }\n}",
        "output": "1",
        "idx": 3265
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void free_todo_entries(TodoEntry **todos) {\n        for (TodoEntry *x = *todos; x && x->dir; x++) {\n                closedir(x->dir);\n                free(x->dirname);\n        }\n\n        freep(todos);\n}",
        "output": "0",
        "idx": 5489
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline __u32 secure_dccpv6_sequence_number(__be32 *saddr, __be32 *daddr,\n\t\t\t\t\t\t  __be16 sport, __be16 dport   )\n{\n\treturn secure_tcpv6_sequence_number(saddr, daddr, sport, dport);\n}",
        "output": "1",
        "idx": 984
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void remove_port(VirtIOSerial *vser, uint32_t port_id)\n\n{\n\n    VirtIOSerialPort *port;\n\n    unsigned int i;\n\n\n\n    i = port_id / 32;\n\n    vser->ports_map[i] &= ~(1U << (port_id % 32));\n\n\n\n    port = find_port_by_id(vser, port_id);\n\n    /*\n\n     * This function is only called from qdev's unplug callback; if we\n\n     * get a NULL port here, we're in trouble.\n\n     */\n\n    assert(port);\n\n\n\n    /* Flush out any unconsumed buffers first */\n\n    discard_vq_data(port->ovq, VIRTIO_DEVICE(port->vser));\n\n\n\n    send_control_event(vser, port->id, VIRTIO_CONSOLE_PORT_REMOVE, 1);\n\n}\n",
        "output": "1",
        "idx": 2744
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zend_function *spl_filesystem_object_get_method_check(zval **object_ptr, char *method, int method_len, const struct _zend_literal *key TSRMLS_DC) /* {{{ */\n{\n\tspl_filesystem_object *fsobj = zend_object_store_get_object(*object_ptr TSRMLS_CC);\n\t\n\tif (fsobj->u.dir.entry.d_name[0] == '\\0' && fsobj->orig_path == NULL) {\n\t\tmethod = \"_bad_state_ex\";\n\t\tmethod_len = sizeof(\"_bad_state_ex\") - 1;\n\t\tkey = NULL;\n\t}\n\t\n\treturn zend_get_std_object_handlers()->get_method(object_ptr, method, method_len, key TSRMLS_CC);\n}",
        "output": "1",
        "idx": 3678
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_outParamRef(StringInfo str, const ParamRef *node)\n{\n\tWRITE_NODE_TYPE(\"PARAMREF\");\n\n\tWRITE_INT_FIELD(number);\n\tWRITE_LOCATION_FIELD(location);\n}",
        "output": "0",
        "idx": 6185
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static double get_time (void) {\n#ifdef DO_TIME_DAY\n    struct timeval tv;\n\n    gettimeofday(&tv, NULL);\n\n    return tv.tv_sec + 1e-6 * tv.tv_usec;\n#else\n    struct timeb tb;\n\n    ftime(&tb);\n\n    return tb.time + 1e-3 * tb.millitm;\n#endif\n}",
        "output": "0",
        "idx": 3426
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void kvm_arch_commit_memory_region(struct kvm *kvm,\n\t\t\t\t   struct kvm_userspace_memory_region *mem,\n\t\t\t\t   const struct kvm_memory_slot *old,\n\t\t\t\t   enum kvm_mr_change change)\n{\n}",
        "output": "0",
        "idx": 2287
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const char *swscale_configuration(void)\n\n{\n\n    return FFMPEG_CONFIGURATION;\n\n}\n",
        "output": "0",
        "idx": 3395
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void unlink_queue(struct sem_array *sma, struct sem_queue *q)\n{\n\tlist_del(&q->list);\n\tif (q->nsops > 1)\n\t\tsma->complex_count--;\n}",
        "output": "0",
        "idx": 3674
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ssize_t enc_untrusted_write(int fd, const void *buf, size_t count) {\n  return static_cast<ssize_t>(EnsureInitializedAndDispatchSyscall(\n      asylo::system_call::kSYS_write, fd, buf, count));\n}",
        "output": "0",
        "idx": 2480
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int smc_decode_init(AVCodecContext *avctx)\n\n{\n\n    SmcContext *s = avctx->priv_data;\n\n\n\n    s->avctx = avctx;\n\n    avctx->pix_fmt = AV_PIX_FMT_PAL8;\n\n\n\n    s->frame.data[0] = NULL;\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1207
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MemoryRegionSection *phys_page_find(AddressSpaceDispatch *d, target_phys_addr_t index)\n\n{\n\n    PhysPageEntry lp = d->phys_map;\n\n    PhysPageEntry *p;\n\n    int i;\n\n    uint16_t s_index = phys_section_unassigned;\n\n\n\n    for (i = P_L2_LEVELS - 1; i >= 0 && !lp.is_leaf; i--) {\n\n        if (lp.ptr == PHYS_MAP_NODE_NIL) {\n\n            goto not_found;\n\n        }\n\n        p = phys_map_nodes[lp.ptr];\n\n        lp = p[(index >> (i * L2_BITS)) & (L2_SIZE - 1)];\n\n    }\n\n\n\n    s_index = lp.ptr;\n\nnot_found:\n\n    return &phys_sections[s_index];\n\n}\n",
        "output": "0",
        "idx": 564
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool lockdep_rtnl_is_held(void)\n{\n\treturn lockdep_is_held(&rtnl_mutex);\n}",
        "output": "0",
        "idx": 1604
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QEMUOptionParameter *append_option_parameters(QEMUOptionParameter *dest,\n\n    QEMUOptionParameter *list)\n\n{\n\n    size_t num_options, num_dest_options;\n\n\n\n    num_options = count_option_parameters(dest);\n\n    num_dest_options = num_options;\n\n\n\n    num_options += count_option_parameters(list);\n\n\n\n    dest = qemu_realloc(dest, (num_options + 1) * sizeof(QEMUOptionParameter));\n\n\n\n\n    while (list && list->name) {\n\n        if (get_option_parameter(dest, list->name) == NULL) {\n\n            dest[num_dest_options++] = *list;\n\n\n        }\n\n        list++;\n\n    }\n\n\n\n    return dest;\n\n}",
        "output": "1",
        "idx": 2825
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hash_recvmsg(struct kiocb *unused, struct socket *sock,\n\t\t\tstruct msghdr *msg, size_t len, int flags)\n{\n\tstruct sock *sk = sock->sk;\n\tstruct alg_sock *ask = alg_sk(sk);\n\tstruct hash_ctx *ctx = ask->private;\n\tunsigned ds = crypto_ahash_digestsize(crypto_ahash_reqtfm(&ctx->req));\n\tint err;\n\n\tif (len > ds)\n\t\tlen = ds;\n\telse if (len < ds)\n\t\tmsg->msg_flags |= MSG_TRUNC;\n\n\tmsg->msg_namelen = 0;\n\n\tlock_sock(sk);\n\tif (ctx->more) {\n\t\tctx->more = 0;\n\t\tahash_request_set_crypt(&ctx->req, NULL, ctx->result, 0);\n\t\terr = af_alg_wait_for_completion(crypto_ahash_final(&ctx->req),\n\t\t\t\t\t\t &ctx->completion);\n\t\tif (err)\n\t\t\tgoto unlock;\n\t}\n\n\terr = memcpy_toiovec(msg->msg_iov, ctx->result, len);\n\nunlock:\n\trelease_sock(sk);\n\n\treturn err ?: len;\n}",
        "output": "1",
        "idx": 4039
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void reset_packet_state(AVFormatContext *s)\n\n{\n\n    ASFContext *asf        = s->priv_data;\n\n    int i;\n\n\n\n    asf->state             = PARSE_PACKET_HEADER;\n\n    asf->offset            = 0;\n\n    asf->return_subpayload = 0;\n\n    asf->sub_left          = 0;\n\n    asf->sub_header_offset = 0;\n\n    asf->packet_offset     = asf->first_packet_offset;\n\n    asf->pad_len           = 0;\n\n    asf->rep_data_len      = 0;\n\n    asf->dts_delta         = 0;\n\n    asf->mult_sub_len      = 0;\n\n    asf->nb_mult_left      = 0;\n\n    asf->nb_sub            = 0;\n\n    asf->prop_flags        = 0;\n\n    asf->sub_dts           = 0;\n\n    asf->dts               = 0;\n\n    for (i = 0; i < asf->nb_streams; i++) {\n\n        ASFPacket *pkt = &asf->asf_st[i]->pkt;\n\n        pkt->size_left = 0;\n\n        pkt->data_size = 0;\n\n        pkt->duration  = 0;\n\n        pkt->flags     = 0;\n\n        pkt->dts       = 0;\n\n        pkt->duration  = 0;\n\n        av_free_packet(&pkt->avpkt);\n\n        av_init_packet(&pkt->avpkt);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5425
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dissect_NOTIFY_OPTIONS_ARRAY_CTR(tvbuff_t *tvb, int offset,\n\t\t\t\t packet_info *pinfo, proto_tree *tree,\n\t\t\t\t dcerpc_info *di, guint8 *drep)\n{\n\tif (di->conformant_run)\n\t\treturn offset;\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_options_version, NULL);\n\n\toffset = dissect_notify_options_flags(tvb, offset, pinfo, tree, di, drep);\n\n\toffset = dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep,\n\t\t\t\t    hf_notify_options_count, NULL);\n\n\toffset = dissect_ndr_pointer(\n\t\ttvb, offset, pinfo, tree, di, drep,\n\t\tdissect_NOTIFY_OPTIONS_ARRAY, NDR_POINTER_UNIQUE,\n\t\t\"Notify Options Array\", -1);\n\n\treturn offset;\n}",
        "output": "0",
        "idx": 105
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_validate_fail_union_native_list(TestInputVisitorData *data,\n\n                                                 const void *unused)\n\n{\n\n    UserDefNativeListUnion *tmp = NULL;\n\n    Error *err = NULL;\n\n    Visitor *v;\n\n\n\n    v = validate_test_init(data,\n\n                           \"{ 'type': 'integer', 'data' : [ 'string' ] }\");\n\n\n\n    visit_type_UserDefNativeListUnion(v, &tmp, NULL, &err);\n\n    g_assert(err);\n\n\n    qapi_free_UserDefNativeListUnion(tmp);\n\n}",
        "output": "1",
        "idx": 5837
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int tftp_session_allocate(Slirp *slirp, struct sockaddr_storage *srcsas,\n\n                                 struct tftp_t *tp)\n\n{\n\n  struct tftp_session *spt;\n\n  int k;\n\n\n\n  for (k = 0; k < TFTP_SESSIONS_MAX; k++) {\n\n    spt = &slirp->tftp_sessions[k];\n\n\n\n    if (!tftp_session_in_use(spt))\n\n        goto found;\n\n\n\n    /* sessions time out after 5 inactive seconds */\n\n    if ((int)(curtime - spt->timestamp) > 5000) {\n\n        tftp_session_terminate(spt);\n\n        goto found;\n\n    }\n\n  }\n\n\n\n  return -1;\n\n\n\n found:\n\n  memset(spt, 0, sizeof(*spt));\n\n  spt->client_addr = *srcsas;\n\n  spt->fd = -1;\n\n  spt->block_size = 512;\n\n  spt->client_port = tp->udp.uh_sport;\n\n  spt->slirp = slirp;\n\n\n\n  tftp_session_update(spt);\n\n\n\n  return k;\n\n}\n",
        "output": "1",
        "idx": 6175
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mlx5_queue_state_modify(struct rte_eth_dev *dev,\n\t\t\tstruct mlx5_mp_arg_queue_state_modify *sm)\n{\n\tstruct mlx5_priv *priv = dev->data->dev_private;\n\tint ret = 0;\n\n\tswitch (rte_eal_process_type()) {\n\tcase RTE_PROC_PRIMARY:\n\t\tret = mlx5_queue_state_modify_primary(dev, sm);\n\t\tbreak;\n\tcase RTE_PROC_SECONDARY:\n\t\tret = mlx5_mp_req_queue_state_modify(&priv->mp_id, sm);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn ret;\n}",
        "output": "0",
        "idx": 1107
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static double get_video_clock(VideoState *is)\n\n{\n\n    if (is->paused) {\n\n        return is->video_current_pts;\n\n    } else {\n\n        return is->video_current_pts + (av_gettime() - is->video_current_pts_time) / 1000000.0;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 507
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t timerslack_ns_write(struct file *file, const char __user *buf,\n\t\t\t\t\tsize_t count, loff_t *offset)\n{\n\tstruct inode *inode = file_inode(file);\n\tstruct task_struct *p;\n\tu64 slack_ns;\n\tint err;\n\n\terr = kstrtoull_from_user(buf, count, 10, &slack_ns);\n\tif (err < 0)\n\t\treturn err;\n\n\tp = get_proc_task(inode);\n\tif (!p)\n\t\treturn -ESRCH;\n\n\tif (p != current) {\n\t\tif (!capable(CAP_SYS_NICE)) {\n\t\t\tcount = -EPERM;\n\t\t\tgoto out;\n\t\t}\n\n\t\terr = security_task_setscheduler(p);\n\t\tif (err) {\n\t\t\tcount = err;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\ttask_lock(p);\n\tif (slack_ns == 0)\n\t\tp->timer_slack_ns = p->default_timer_slack_ns;\n\telse\n\t\tp->timer_slack_ns = slack_ns;\n\ttask_unlock(p);\n\nout:\n\tput_task_struct(p);\n\n\treturn count;\n}",
        "output": "0",
        "idx": 1291
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int floatx80_unordered(floatx80 a, floatx80 b, float_status *status)\n\n{\n\n    if (    (    ( extractFloatx80Exp( a ) == 0x7FFF )\n\n              && (uint64_t) ( extractFloatx80Frac( a )<<1 ) )\n\n         || (    ( extractFloatx80Exp( b ) == 0x7FFF )\n\n              && (uint64_t) ( extractFloatx80Frac( b )<<1 ) )\n\n       ) {\n\n        float_raise(float_flag_invalid, status);\n\n        return 1;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2002
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "header_cache_t *imap_hcache_open(struct ImapData *idata, const char *path)\n{\n  struct ImapMbox mx;\n  struct Url url;\n  char cachepath[PATH_MAX];\n  char mbox[PATH_MAX];\n\n  if (path)\n    imap_cachepath(idata, path, mbox, sizeof(mbox));\n  else\n  {\n    if (!idata->ctx || imap_parse_path(idata->ctx->path, &mx) < 0)\n      return NULL;\n\n    imap_cachepath(idata, mx.mbox, mbox, sizeof(mbox));\n    FREE(&mx.mbox);\n  }\n\n  mutt_account_tourl(&idata->conn->account, &url);\n  url.path = mbox;\n  url_tostring(&url, cachepath, sizeof(cachepath), U_PATH);\n\n  return mutt_hcache_open(HeaderCache, cachepath, imap_hcache_namer);\n}",
        "output": "1",
        "idx": 2465
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int newgroup(message_data_t *msg)\n{\n    int r;\n    char *group;\n    char mailboxname[MAX_MAILBOX_BUFFER];\n\n    /* isolate newsgroup */\n    group = msg->control + 8; /* skip \"newgroup\" */\n    while (Uisspace(*group)) group++;\n\n    snprintf(mailboxname, sizeof(mailboxname), \"%s%.*s\",\n\t     newsprefix, (int) strcspn(group, \" \\t\\r\\n\"), group);\n\n    r = mboxlist_createmailbox(mailboxname, 0, NULL, 0,\n\t\t\t       newsmaster, newsmaster_authstate, 0, 0, 0);\n\n    /* XXX check body of message for useful MIME parts */\n\n    return r;\n}",
        "output": "0",
        "idx": 5117
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CharDriverState* create_eventfd_chr_device(void * opaque, EventNotifier *n,\n\n                                                  int vector)\n\n{\n\n    /* create a event character device based on the passed eventfd */\n\n    IVShmemState *s = opaque;\n\n    CharDriverState * chr;\n\n    int eventfd = event_notifier_get_fd(n);\n\n\n\n    chr = qemu_chr_open_eventfd(eventfd);\n\n\n\n    if (chr == NULL) {\n\n        fprintf(stderr, \"creating eventfd for eventfd %d failed\\n\", eventfd);\n\n        exit(-1);\n\n    }\n\n\n\n\n    /* if MSI is supported we need multiple interrupts */\n\n    if (ivshmem_has_feature(s, IVSHMEM_MSI)) {\n\n        s->eventfd_table[vector].pdev = &s->dev;\n\n        s->eventfd_table[vector].vector = vector;\n\n\n\n        qemu_chr_add_handlers(chr, ivshmem_can_receive, fake_irqfd,\n\n                      ivshmem_event, &s->eventfd_table[vector]);\n\n    } else {\n\n        qemu_chr_add_handlers(chr, ivshmem_can_receive, ivshmem_receive,\n\n                      ivshmem_event, s);\n\n    }\n\n\n\n    return chr;\n\n\n\n}",
        "output": "1",
        "idx": 1308
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void net_slirp_redir(Monitor *mon, const char *redir_str, const char *redir_opt2)\n\n{\n\n    struct slirp_config_str *config;\n\n\n\n    if (!slirp_inited) {\n\n        if (mon) {\n\n            monitor_printf(mon, \"user mode network stack not in use\\n\");\n\n        } else {\n\n            config = qemu_malloc(sizeof(*config));\n\n            config->str = redir_str;\n\n            config->next = slirp_redirs;\n\n            slirp_redirs = config;\n\n        }\n\n        return;\n\n    }\n\n\n\n    if (!strcmp(redir_str, \"remove\")) {\n\n        net_slirp_redir_rm(mon, redir_opt2);\n\n        return;\n\n    }\n\n\n\n    slirp_redirection(mon, redir_str);\n\n}\n",
        "output": "0",
        "idx": 5429
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void quit_handler(int sig)\n{\n    /* if we're frozen, don't exit unless we're absolutely forced to,\n     * because it's basically impossible for graceful exit to complete\n     * unless all log/pid files are on unfreezable filesystems. there's\n     * also a very likely chance killing the agent before unfreezing\n     * the filesystems is a mistake (or will be viewed as one later).\n     */\n    if (ga_is_frozen(ga_state)) {\n        return;\n    g_debug(\"received signal num %d, quitting\", sig);\n    if (g_main_loop_is_running(ga_state->main_loop)) {\n        g_main_loop_quit(ga_state->main_loop);",
        "output": "1",
        "idx": 2813
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mlx5_fpga_conn_free_recv_bufs(struct mlx5_fpga_conn *conn)\n{\n\tint ix;\n\n\tfor (ix = 0; ix < conn->qp.rq.size; ix++) {\n\t\tif (!conn->qp.rq.bufs[ix])\n\t\t\tcontinue;\n\t\tmlx5_fpga_conn_unmap_buf(conn, conn->qp.rq.bufs[ix]);\n\t\tkfree(conn->qp.rq.bufs[ix]);\n\t\tconn->qp.rq.bufs[ix] = NULL;\n\t}\n}",
        "output": "0",
        "idx": 5048
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TRIO_PRIVATE int TrioScan TRIO_ARGS8(\n    (source, sourceSize, InStream, UndoStream, format, arglist, argfunc, argarray),\n    trio_pointer_t source, size_t sourceSize, void(*InStream) TRIO_PROTO((trio_class_t*, int*)),\n    void(*UndoStream) TRIO_PROTO((trio_class_t*)), TRIO_CONST char* format, va_list arglist,\n    trio_argfunc_t argfunc, trio_pointer_t* argarray)\n{\n\tint status;\n\ttrio_parameter_t parameters[MAX_PARAMETERS];\n\ttrio_class_t data;\n\n\tassert(VALID(InStream));\n\tassert(VALID(format));\n\n\tmemset(&data, 0, sizeof(data));\n\tdata.InStream = InStream;\n\tdata.UndoStream = UndoStream;\n\tdata.location = (trio_pointer_t)source;\n\tdata.max = sourceSize;\n\tdata.error = 0;\n\n#if defined(USE_LOCALE)\n\tif (NULL == internalLocaleValues)\n\t{\n\t\tTrioSetLocale();\n\t}\n#endif\n\n\tstatus = TrioParse(TYPE_SCAN, format, parameters, arglist, argfunc, argarray);\n\tif (status < 0)\n\t\treturn status;\n\n\tstatus = TrioScanProcess(&data, format, parameters);\n\tif (data.error != 0)\n\t{\n\t\tstatus = data.error;\n\t}\n\treturn status;\n}",
        "output": "0",
        "idx": 6181
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, const char* hostname, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify)\n{\n\tGIOChannel *handle, *ssl_handle;\n\n\thandle = net_connect_ip(ip, port, my_ip);\n\tif (handle == NULL)\n\t\treturn NULL;\n\tssl_handle  = irssi_ssl_get_iochannel(handle, hostname, cert, pkey, cafile, capath, verify);\n\tif (ssl_handle == NULL)\n\t\tg_io_channel_unref(handle);\n\treturn ssl_handle;\n}",
        "output": "0",
        "idx": 1653
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tftp_udp_output(struct tftp_session *spt, struct mbuf *m,\n                            struct tftp_t *recv_tp)\n{\n    if (spt->client_addr.ss_family == AF_INET6) {\n        struct sockaddr_in6 sa6, da6;\n\n        sa6.sin6_addr = spt->slirp->vhost_addr6;\n        sa6.sin6_port = recv_tp->udp.uh_dport;\n        da6.sin6_addr = ((struct sockaddr_in6 *)&spt->client_addr)->sin6_addr;\n        da6.sin6_port = spt->client_port;\n\n        udp6_output(NULL, m, &sa6, &da6);\n    } else {\n        struct sockaddr_in sa4, da4;\n\n        sa4.sin_addr = spt->slirp->vhost_addr;\n        sa4.sin_port = recv_tp->udp.uh_dport;\n        da4.sin_addr = ((struct sockaddr_in *)&spt->client_addr)->sin_addr;\n        da4.sin_port = spt->client_port;\n\n        udp_output(NULL, m, &sa4, &da4, IPTOS_LOWDELAY);\n    }\n}",
        "output": "1",
        "idx": 2483
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tcp_chr_disconnect(CharDriverState *chr)\n\n{\n\n    TCPCharDriver *s = chr->opaque;\n\n\n\n    if (!s->connected) {\n\n        return;\n\n    }\n\n\n\n    s->connected = 0;\n\n    if (s->listen_ioc) {\n\n        s->listen_tag = qio_channel_add_watch(\n\n            QIO_CHANNEL(s->listen_ioc), G_IO_IN, tcp_chr_accept, chr, NULL);\n\n    }\n\n    tcp_set_msgfds(chr, NULL, 0);\n\n    remove_fd_in_watch(chr);\n\n    object_unref(OBJECT(s->sioc));\n\n    s->sioc = NULL;\n\n    object_unref(OBJECT(s->ioc));\n\n    s->ioc = NULL;\n\n    g_free(chr->filename);\n\n    chr->filename = SocketAddress_to_str(\"disconnected:\", s->addr,\n\n                                         s->is_listen, s->is_telnet);\n\n    qemu_chr_be_event(chr, CHR_EVENT_CLOSED);\n\n    if (s->reconnect_time) {\n\n        qemu_chr_socket_restart_timer(chr);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 728
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int SetDatesFromDcert(Cert* cert, DecodedCert* decoded)\n{\n    int ret = 0;\n\n    if (decoded->beforeDate == NULL || decoded->afterDate == NULL) {\n        WOLFSSL_MSG(\"Couldn't extract dates\");\n        ret = -1;\n    }\n    else if (decoded->beforeDateLen > MAX_DATE_SIZE ||\n                                        decoded->afterDateLen > MAX_DATE_SIZE) {\n        WOLFSSL_MSG(\"Bad date size\");\n        ret = -1;\n    }\n    else {\n        XMEMCPY(cert->beforeDate, decoded->beforeDate, decoded->beforeDateLen);\n        XMEMCPY(cert->afterDate,  decoded->afterDate,  decoded->afterDateLen);\n\n        cert->beforeDateSz = decoded->beforeDateLen;\n        cert->afterDateSz  = decoded->afterDateLen;\n    }\n\n    return ret;\n}",
        "output": "0",
        "idx": 2142
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "u_int16_t ndpi_guess_host_protocol_id(struct ndpi_detection_module_struct *ndpi_str,\n\t\t\t\t      struct ndpi_flow_struct *flow) {\n  u_int16_t ret = NDPI_PROTOCOL_UNKNOWN;\n\n  if(flow->packet.iph) {\n    struct in_addr addr;\n    u_int16_t sport, dport;\n\n    addr.s_addr = flow->packet.iph->saddr;\n\n    if((flow->l4_proto == IPPROTO_TCP) && flow->packet.tcp)\n      sport = flow->packet.tcp->source, dport = flow->packet.tcp->dest;\n    else if((flow->l4_proto == IPPROTO_UDP) && flow->packet.udp)\n      sport = flow->packet.udp->source, dport = flow->packet.udp->dest;\n    else\n      sport = dport = 0;\n\n    /* guess host protocol */\n    ret = ndpi_network_port_ptree_match(ndpi_str, &addr, sport);\n\n    if(ret == NDPI_PROTOCOL_UNKNOWN) {\n      addr.s_addr = flow->packet.iph->daddr;\n      ret = ndpi_network_port_ptree_match(ndpi_str, &addr, dport);\n    }\n  }\n\n  return(ret);\n}",
        "output": "0",
        "idx": 3390
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CURLcode imap_connect(struct connectdata *conn, bool *done)\n{\n  CURLcode result = CURLE_OK;\n  struct imap_conn *imapc = &conn->proto.imapc;\n  struct pingpong *pp = &imapc->pp;\n\n  *done = FALSE; /* default to not done yet */\n\n  /* We always support persistent connections in IMAP */\n  connkeep(conn, \"IMAP default\");\n\n  /* Set the default response time-out */\n  pp->response_time = RESP_TIMEOUT;\n  pp->statemach_act = imap_statemach_act;\n  pp->endofresp = imap_endofresp;\n  pp->conn = conn;\n\n  /* Set the default preferred authentication type and mechanism */\n  imapc->preftype = IMAP_TYPE_ANY;\n  Curl_sasl_init(&imapc->sasl, &saslimap);\n\n  /* Initialise the pingpong layer */\n  Curl_pp_init(pp);\n\n  /* Parse the URL options */\n  result = imap_parse_url_options(conn);\n  if(result)\n    return result;\n\n  /* Start off waiting for the server greeting response */\n  state(conn, IMAP_SERVERGREET);\n\n  /* Start off with an response id of '*' */\n  strcpy(imapc->resptag, \"*\");\n\n  result = imap_multi_statemach(conn, done);\n\n  return result;\n}",
        "output": "0",
        "idx": 3198
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "process_cmd_cmdallow(CMD_Request *msg, char *line)\n{\n  int status;\n  msg->command = htons(REQ_CMDALLOW);\n  status = parse_allow_deny(msg, line);\n  return status;\n}",
        "output": "0",
        "idx": 2814
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void term_handle_command(char *cmdline)\n\n{\n\n    char *p, *pstart;\n\n    int argc;\n\n    const char *args[MAX_ARGS + 1];\n\n    term_cmd_t *cmd;\n\n\n\n#ifdef DEBUG\n\n    term_printf(\"command='%s'\\n\", cmdline);\n\n#endif\n\n    \n\n    /* split command in words */\n\n    argc = 0;\n\n    p = cmdline;\n\n    for(;;) {\n\n        while (isspace(*p))\n\n            p++;\n\n        if (*p == '\\0')\n\n            break;\n\n        pstart = p;\n\n        while (*p != '\\0' && !isspace(*p))\n\n            p++;\n\n        args[argc] = pstart;\n\n        argc++;\n\n        if (argc >= MAX_ARGS)\n\n            break;\n\n        if (*p == '\\0')\n\n            break;\n\n        *p++ = '\\0';\n\n    }\n\n    args[argc] = NULL;\n\n#ifdef DEBUG\n\n    for(i=0;i<argc;i++) {\n\n        term_printf(\" '%s'\", args[i]);\n\n    }\n\n    term_printf(\"\\n\");\n\n#endif\n\n    if (argc <= 0)\n\n        return;\n\n    for(cmd = term_cmds; cmd->name != NULL; cmd++) {\n\n        if (compare_cmd(args[0], cmd->name)) \n\n            goto found;\n\n    }\n\n    term_printf(\"unknown command: '%s'\\n\", args[0]);\n\n    return;\n\n found:\n\n    cmd->handler(argc, args);\n\n}\n",
        "output": "0",
        "idx": 3635
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void udp_chr_update_read_handler(CharDriverState *chr)\n\n{\n\n    NetCharDriver *s = chr->opaque;\n\n\n\n    if (s->tag) {\n\n        g_source_remove(s->tag);\n\n        s->tag = 0;\n\n    }\n\n\n\n    if (s->chan) {\n\n        s->tag = io_add_watch_poll(s->chan, udp_chr_read_poll, udp_chr_read, chr);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5937
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "R_API int r_socket_read(RSocket *s, unsigned char *buf, int len) {\n\tif (!s) {\n\t\treturn -1;\n\t}\n#if HAVE_LIB_SSL\n\tif (s->is_ssl) {\n\t\tif (s->bio) {\n\t\t\treturn BIO_read (s->bio, buf, len);\n\t\t}\n\t\treturn SSL_read (s->sfd, buf, len);\n\t}\n#endif\n#if __WINDOWS__\nrep:\n\t{\n\tint ret = recv (s->fd, (void *)buf, len, 0);\n\tif (ret == -1) {\n\t\tgoto rep;\n\t}\n\treturn ret;\n\t}\n#else\n\t// int r = read (s->fd, buf, len);\n\tint r = recv (s->fd, buf, len, 0);\n\tD { eprintf (\"READ \"); int i; for (i = 0; i<len; i++) { eprintf (\"%02x \", buf[i]); } eprintf (\"\\n\"); }\n\treturn r;\n#endif\n}",
        "output": "1",
        "idx": 1224
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int bdrv_prwv_co(BdrvChild *child, int64_t offset,\n\n                        QEMUIOVector *qiov, bool is_write,\n\n                        BdrvRequestFlags flags)\n\n{\n\n    Coroutine *co;\n\n    RwCo rwco = {\n\n        .child = child,\n\n        .offset = offset,\n\n        .qiov = qiov,\n\n        .is_write = is_write,\n\n        .ret = NOT_DONE,\n\n        .flags = flags,\n\n    };\n\n\n\n    if (qemu_in_coroutine()) {\n\n        /* Fast-path if already in coroutine context */\n\n        bdrv_rw_co_entry(&rwco);\n\n    } else {\n\n        AioContext *aio_context = bdrv_get_aio_context(child->bs);\n\n\n\n        co = qemu_coroutine_create(bdrv_rw_co_entry, &rwco);\n\n        qemu_coroutine_enter(co);\n\n        while (rwco.ret == NOT_DONE) {\n\n            aio_poll(aio_context, true);\n\n        }\n\n    }\n\n    return rwco.ret;\n\n}\n",
        "output": "0",
        "idx": 3920
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bgp_connect_check (struct peer *peer)\n{\n  int status;\n  socklen_t slen;\n  int ret;\n\n  /* Anyway I have to reset read and write thread. */\n  BGP_READ_OFF (peer->t_read);\n  BGP_WRITE_OFF (peer->t_write);\n\n  /* Check file descriptor. */\n  slen = sizeof (status);\n  ret = getsockopt(peer->fd, SOL_SOCKET, SO_ERROR, (void *) &status, &slen);\n\n  /* If getsockopt is fail, this is fatal error. */\n  if (ret < 0)\n    {\n      zlog (peer->log, LOG_INFO, \"can't get sockopt for nonblocking connect\");\n      BGP_EVENT_ADD (peer, TCP_fatal_error);\n      return;\n    }      \n\n  /* When status is 0 then TCP connection is established. */\n  if (status == 0)\n    {\n      BGP_EVENT_ADD (peer, TCP_connection_open);\n    }\n  else\n    {\n      if (BGP_DEBUG (events, EVENTS))\n\t  plog_debug (peer->log, \"%s [Event] Connect failed (%s)\",\n\t\t     peer->host, safe_strerror (errno));\n      BGP_EVENT_ADD (peer, TCP_connection_open_failed);\n    }\n}",
        "output": "0",
        "idx": 1343
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void bdrv_flush(BlockDriverState *bs)\n{\n    if (bs->drv && bs->drv->bdrv_flush)\n        bs->drv->bdrv_flush(bs);",
        "output": "1",
        "idx": 3877
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int mp_pack(lua_State *L) {\n    int nargs = lua_gettop(L);\n    int i;\n    mp_buf *buf;\n\n    if (nargs == 0)\n        return luaL_argerror(L, 0, \"MessagePack pack needs input.\");\n\n    buf = mp_buf_new(L);\n    for(i = 1; i <= nargs; i++) {\n        /* Copy argument i to top of stack for _encode processing;\n         * the encode function pops it from the stack when complete. */\n        lua_pushvalue(L, i);\n\n        mp_encode_lua_type(L,buf,0);\n\n        lua_pushlstring(L,(char*)buf->b,buf->len);\n\n        /* Reuse the buffer for the next operation by\n         * setting its free count to the total buffer size\n         * and the current position to zero. */\n        buf->free += buf->len;\n        buf->len = 0;\n    }\n    mp_buf_free(L, buf);\n\n    /* Concatenate all nargs buffers together */\n    lua_concat(L, nargs);\n    return 1;\n}",
        "output": "1",
        "idx": 5442
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void i40e_map_vector_to_qp(struct i40e_vsi *vsi, int v_idx, int qp_idx)\n{\n\tstruct i40e_q_vector *q_vector = vsi->q_vectors[v_idx];\n\tstruct i40e_ring *tx_ring = vsi->tx_rings[qp_idx];\n\tstruct i40e_ring *rx_ring = vsi->rx_rings[qp_idx];\n\n\ttx_ring->q_vector = q_vector;\n\ttx_ring->next = q_vector->tx.ring;\n\tq_vector->tx.ring = tx_ring;\n\tq_vector->tx.count++;\n\n\t/* Place XDP Tx ring in the same q_vector ring list as regular Tx */\n\tif (i40e_enabled_xdp_vsi(vsi)) {\n\t\tstruct i40e_ring *xdp_ring = vsi->xdp_rings[qp_idx];\n\n\t\txdp_ring->q_vector = q_vector;\n\t\txdp_ring->next = q_vector->tx.ring;\n\t\tq_vector->tx.ring = xdp_ring;\n\t\tq_vector->tx.count++;\n\t}\n\n\trx_ring->q_vector = q_vector;\n\trx_ring->next = q_vector->rx.ring;\n\tq_vector->rx.ring = rx_ring;\n\tq_vector->rx.count++;\n}",
        "output": "0",
        "idx": 5739
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void __init check_numabalancing_enable(void)\n{\n}",
        "output": "0",
        "idx": 1838
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "av_cold void rgb2rgb_init_x86(void)\n\n{\n\n#if HAVE_INLINE_ASM\n\n    int cpu_flags = av_get_cpu_flags();\n\n\n\n    if (cpu_flags & AV_CPU_FLAG_MMX)\n\n        rgb2rgb_init_MMX();\n\n    if (HAVE_AMD3DNOW && cpu_flags & AV_CPU_FLAG_3DNOW)\n\n        rgb2rgb_init_3DNOW();\n\n    if (HAVE_MMXEXT   && cpu_flags & AV_CPU_FLAG_MMXEXT)\n\n        rgb2rgb_init_MMX2();\n\n    if (HAVE_SSE      && cpu_flags & AV_CPU_FLAG_SSE2)\n\n        rgb2rgb_init_SSE2();\n\n#endif /* HAVE_INLINE_ASM */\n\n}\n",
        "output": "0",
        "idx": 5065
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    DRW_TableEntry() {\n        tType = DRW::UNKNOWNT;\n        flags = 0;\n        numReactors = xDictFlag = 0;\n        parentHandle = 0;\n        curr = NULL;\n    }",
        "output": "1",
        "idx": 5788
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_S2prot(CPUARMState *env, int s2ap, int xn)\n\n{\n\n    int prot = 0;\n\n\n\n    if (s2ap & 1) {\n\n        prot |= PAGE_READ;\n\n    }\n\n    if (s2ap & 2) {\n\n        prot |= PAGE_WRITE;\n\n    }\n\n    if (!xn) {\n\n        prot |= PAGE_EXEC;\n\n    }\n\n    return prot;\n\n}\n",
        "output": "1",
        "idx": 4025
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int filter_frame(AVFilterLink *inlink, AVFrame *inbuf)\n\n{\n\n    AudioPhaserContext *s = inlink->dst->priv;\n\n    AVFilterLink *outlink = inlink->dst->outputs[0];\n\n    AVFrame *outbuf;\n\n\n\n    if (av_frame_is_writable(inbuf)) {\n\n        outbuf = inbuf;\n\n    } else {\n\n        outbuf = ff_get_audio_buffer(inlink, inbuf->nb_samples);\n\n        if (!outbuf)\n\n            return AVERROR(ENOMEM);\n\n        av_frame_copy_props(outbuf, inbuf);\n\n    }\n\n\n\n    s->phaser(s, inbuf->extended_data, outbuf->extended_data,\n\n              outbuf->nb_samples, outbuf->channels);\n\n\n\n    if (inbuf != outbuf)\n\n        av_frame_free(&inbuf);\n\n\n\n    return ff_filter_frame(outlink, outbuf);\n\n}\n",
        "output": "1",
        "idx": 3063
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void icp_realize(DeviceState *dev, Error **errp)\n\n{\n\n    ICPState *icp = ICP(dev);\n\n    ICPStateClass *icpc = ICP_GET_CLASS(dev);\n\n    Object *obj;\n\n    Error *err = NULL;\n\n\n\n    obj = object_property_get_link(OBJECT(dev), ICP_PROP_XICS, &err);\n\n    if (!obj) {\n\n        error_setg(errp, \"%s: required link '\" ICP_PROP_XICS \"' not found: %s\",\n\n                   __func__, error_get_pretty(err));\n\n        return;\n\n    }\n\n\n\n    icp->xics = XICS_FABRIC(obj);\n\n\n\n    if (icpc->realize) {\n\n        icpc->realize(dev, errp);\n\n    }\n\n\n\n    qemu_register_reset(icp_reset, dev);\n\n}\n",
        "output": "0",
        "idx": 1919
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Context* Wasm::start() {\n  auto root_id = plugin_->root_id_;\n  auto it = root_contexts_.find(root_id);\n  if (it != root_contexts_.end()) {\n    it->second->onStart(root_id, vm_configuration());\n    return it->second.get();\n  }\n  auto context = std::make_unique<Context>(this, root_id, plugin_);\n  auto context_ptr = context.get();\n  root_contexts_[root_id] = std::move(context);\n  context_ptr->onStart(root_id, vm_configuration());\n  return context_ptr;\n};",
        "output": "0",
        "idx": 505
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BGD_DECLARE(gdImagePtr) gdImageCreateFromGd2Ctx (gdIOCtxPtr in)\n{\n\t_noLibzError();\n\treturn NULL;\n}",
        "output": "1",
        "idx": 5874
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint16_t nvme_dma_read_prp(NvmeCtrl *n, uint8_t *ptr, uint32_t len,\n\n    uint64_t prp1, uint64_t prp2)\n\n{\n\n    QEMUSGList qsg;\n\n    QEMUIOVector iov;\n\n    uint16_t status = NVME_SUCCESS;\n\n\n\n    if (nvme_map_prp(&qsg, &iov, prp1, prp2, len, n)) {\n\n        return NVME_INVALID_FIELD | NVME_DNR;\n\n    }\n\n    if (qsg.nsg > 0) {\n\n        if (dma_buf_read(ptr, len, &qsg)) {\n\n            status = NVME_INVALID_FIELD | NVME_DNR;\n\n        }\n\n        qemu_sglist_destroy(&qsg);\n\n    } else {\n\n        if (qemu_iovec_to_buf(&iov, 0, ptr, len) != len) {\n\n            status = NVME_INVALID_FIELD | NVME_DNR;\n\n        }\n\n        qemu_iovec_destroy(&iov);\n\n    }\n\n    return status;\n\n}\n",
        "output": "1",
        "idx": 3404
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_uint16(QEMUFile *f, void *pv, size_t size)\n\n{\n\n    uint16_t *v = pv;\n\n    qemu_get_be16s(f, v);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 6057
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_ssl_ciphers(SCHANNEL_CRED *schannel_cred, char *ciphers,\n                int *algIds)\n{\n  char *startCur = ciphers;\n  int algCount = 0;\n  while(startCur && (0 != *startCur) && (algCount < NUMOF_CIPHERS)) {\n    long alg = strtol(startCur, 0, 0);\n    if(!alg)\n      alg = get_alg_id_by_name(startCur);\n    if(alg)\n      algIds[algCount++] = alg;\n    else if(!strncmp(startCur, \"USE_STRONG_CRYPTO\",\n                     sizeof(\"USE_STRONG_CRYPTO\") - 1) ||\n            !strncmp(startCur, \"SCH_USE_STRONG_CRYPTO\",\n                     sizeof(\"SCH_USE_STRONG_CRYPTO\") - 1))\n      schannel_cred->dwFlags |= SCH_USE_STRONG_CRYPTO;\n    else\n      return CURLE_SSL_CIPHER;\n    startCur = strchr(startCur, ':');\n    if(startCur)\n      startCur++;\n  }\n  schannel_cred->palgSupportedAlgs = algIds;\n  schannel_cred->cSupportedAlgs = algCount;\n  return CURLE_OK;\n}",
        "output": "1",
        "idx": 2699
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PJ_DEF(pj_status_t) pj_ssl_sock_set_user_data(pj_ssl_sock_t *ssock,\n\t\t\t\t\t      void *user_data)\n{\n    PJ_ASSERT_RETURN(ssock, PJ_EINVAL);\n\n    ssock->param.user_data = user_data;\n    return PJ_SUCCESS;\n}",
        "output": "0",
        "idx": 2427
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void bdrv_setup_io_funcs(BlockDriver *bdrv)\n\n{\n\n    /* Block drivers without coroutine functions need emulation */\n\n    if (!bdrv->bdrv_co_readv) {\n\n        bdrv->bdrv_co_readv = bdrv_co_readv_em;\n\n        bdrv->bdrv_co_writev = bdrv_co_writev_em;\n\n\n\n        /* bdrv_co_readv_em()/brdv_co_writev_em() work in terms of aio, so if\n\n         * the block driver lacks aio we need to emulate that too.\n\n         */\n\n        if (!bdrv->bdrv_aio_readv) {\n\n            /* add AIO emulation layer */\n\n            bdrv->bdrv_aio_readv = bdrv_aio_readv_em;\n\n            bdrv->bdrv_aio_writev = bdrv_aio_writev_em;\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1766
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pl061_init(SysBusDevice *dev, const unsigned char *id)\n\n{\n\n    int iomemtype;\n\n    pl061_state *s = FROM_SYSBUS(pl061_state, dev);\n\n    s->id = id;\n\n    iomemtype = cpu_register_io_memory(pl061_readfn,\n\n                                       pl061_writefn, s,\n\n                                       DEVICE_NATIVE_ENDIAN);\n\n    sysbus_init_mmio(dev, 0x1000, iomemtype);\n\n    sysbus_init_irq(dev, &s->irq);\n\n    qdev_init_gpio_in(&dev->qdev, pl061_set_irq, 8);\n\n    qdev_init_gpio_out(&dev->qdev, s->out, 8);\n\n    pl061_reset(s);\n\n    register_savevm(&dev->qdev, \"pl061_gpio\", -1, 1, pl061_save, pl061_load, s);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 738
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int usb_device_detach(USBDevice *dev)\n\n{\n\n    USBBus *bus = usb_bus_from_device(dev);\n\n    USBPort *port;\n\n\n\n    if (!dev->attached) {\n\n        error_report(\"Error: tried to detach unattached usb device %s\\n\",\n\n                dev->product_desc);\n\n        return -1;\n\n    }\n\n    dev->attached--;\n\n\n\n    QTAILQ_FOREACH(port, &bus->used, next) {\n\n        if (port->dev == dev)\n\n            break;\n\n    }\n\n    assert(port != NULL);\n\n\n\n    QTAILQ_REMOVE(&bus->used, port, next);\n\n    bus->nused--;\n\n\n\n    usb_attach(port, NULL);\n\n\n\n    QTAILQ_INSERT_TAIL(&bus->free, port, next);\n\n    bus->nfree++;\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2783
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SRC_RemoveDumpFiles(void)\n{\n  char pattern[PATH_MAX], name[64], *dumpdir, *s;\n  IPAddr ip_addr;\n  glob_t gl;\n  size_t i;\n\n  dumpdir = CNF_GetDumpDir();\n  if (dumpdir[0] == '\\0' ||\n      snprintf(pattern, sizeof (pattern), \"%s/*.dat\", dumpdir) >= sizeof (pattern))\n    return;\n\n  if (glob(pattern, 0, NULL, &gl))\n    return;\n\n  for (i = 0; i < gl.gl_pathc; i++) {\n    s = strrchr(gl.gl_pathv[i], '/');\n    if (!s || snprintf(name, sizeof (name), \"%s\", s + 1) >= sizeof (name))\n      continue;\n\n    /* Remove .dat extension */\n    if (strlen(name) < 4)\n      continue;\n    name[strlen(name) - 4] = '\\0';\n\n    /* Check if it looks like name of an actual dump file */\n    if (strncmp(name, \"refid:\", 6) && !UTI_StringToIP(name, &ip_addr))\n      continue;\n\n    DEBUG_LOG(\"Removing %s\", gl.gl_pathv[i]);\n    unlink(gl.gl_pathv[i]);\n  }\n\n  globfree(&gl);\n}",
        "output": "1",
        "idx": 3609
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_bash_input ()\n{\n  /* Make sure the fd from which we are reading input is not in\n     no-delay mode. */\n#if defined (BUFFERED_INPUT)\n  if (interactive == 0)\n    sh_unset_nodelay_mode (default_buffered_input);\n  else\n#endif /* !BUFFERED_INPUT */\n    sh_unset_nodelay_mode (fileno (stdin));\n\n  /* with_input_from_stdin really means `with_input_from_readline' */\n  if (interactive && no_line_editing == 0)\n    with_input_from_stdin ();\n#if defined (BUFFERED_INPUT)\n  else if (interactive == 0)\n    with_input_from_buffered_stream (default_buffered_input, dollar_vars[0]);\n#endif /* BUFFERED_INPUT */\n  else\n    with_input_from_stream (default_input, dollar_vars[0]);\n}",
        "output": "0",
        "idx": 4189
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void soutp(int offset, u8 value)\n{\n\tif (iommap)\n\t\t/* the register is memory-mapped */\n\t\toffset <<= ioshift;\n\n\toutb(value, io + offset);\n}",
        "output": "0",
        "idx": 6079
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void RENAME(palToY)(uint8_t *dst, uint8_t *src, int width, uint32_t *pal)\n\n{\n\n\tint i;\n\n\tfor(i=0; i<width; i++)\n\n\t{\n\n\t\tint d= src[i];\n\n\n\n\t\tdst[i]= pal[d] & 0xFF;\n\n\t}\n\n}\n",
        "output": "1",
        "idx": 613
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool bdrv_drain_recurse(BlockDriverState *bs)\n\n{\n\n    BdrvChild *child;\n\n    bool waited;\n\n\n\n    waited = bdrv_drain_poll(bs);\n\n\n\n    if (bs->drv && bs->drv->bdrv_drain) {\n\n        bs->drv->bdrv_drain(bs);\n\n    }\n\n\n\n    QLIST_FOREACH(child, &bs->children, next) {\n\n        waited |= bdrv_drain_recurse(child->bs);\n\n    }\n\n\n\n    return waited;\n\n}\n",
        "output": "0",
        "idx": 5757
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nvdec_vp9_end_frame(AVCodecContext *avctx)\n\n{\n\n    NVDECContext *ctx = avctx->internal->hwaccel_priv_data;\n\n    int ret = ff_nvdec_end_frame(avctx);\n\n    ctx->bitstream = NULL;\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 4230
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void stl_le_phys(target_phys_addr_t addr, uint32_t val)\n\n{\n\n    stl_phys_internal(addr, val, DEVICE_LITTLE_ENDIAN);\n\n}\n",
        "output": "0",
        "idx": 1494
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __exit fw_ohci_cleanup(void)\n{\n\tpci_unregister_driver(&fw_ohci_pci_driver);\n}",
        "output": "0",
        "idx": 2679
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qemu_rbd_aio_event_reader(void *opaque)\n\n{\n\n    BDRVRBDState *s = opaque;\n\n\n\n    ssize_t ret;\n\n\n\n    do {\n\n        char *p = (char *)&s->event_rcb;\n\n\n\n        /* now read the rcb pointer that was sent from a non qemu thread */\n\n        ret = read(s->fds[RBD_FD_READ], p + s->event_reader_pos,\n\n                   sizeof(s->event_rcb) - s->event_reader_pos);\n\n        if (ret > 0) {\n\n            s->event_reader_pos += ret;\n\n            if (s->event_reader_pos == sizeof(s->event_rcb)) {\n\n                s->event_reader_pos = 0;\n\n                qemu_rbd_complete_aio(s->event_rcb);\n\n            }\n\n        }\n\n    } while (ret < 0 && errno == EINTR);\n\n}\n",
        "output": "1",
        "idx": 1334
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "snd_seq_oss_synth_make_info(struct seq_oss_devinfo *dp, int dev, struct synth_info *inf)\n{\n\tstruct seq_oss_synth *rec;\n\n\tif (dp->synths[dev].is_midi) {\n\t\tstruct midi_info minf;\n\t\tsnd_seq_oss_midi_make_info(dp, dp->synths[dev].midi_mapped, &minf);\n\t\tinf->synth_type = SYNTH_TYPE_MIDI;\n\t\tinf->synth_subtype = 0;\n\t\tinf->nr_voices = 16;\n\t\tinf->device = dev;\n\t\tstrlcpy(inf->name, minf.name, sizeof(inf->name));\n\t} else {\n\t\tif ((rec = get_synthdev(dp, dev)) == NULL)\n\t\t\treturn -ENXIO;\n\t\tinf->synth_type = rec->synth_type;\n\t\tinf->synth_subtype = rec->synth_subtype;\n\t\tinf->nr_voices = rec->nr_voices;\n\t\tinf->device = dev;\n\t\tstrlcpy(inf->name, rec->name, sizeof(inf->name));\n\t\tsnd_use_lock_free(&rec->use_lock);\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 777
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int targa_encode_init(AVCodecContext *avctx)\n\n{\n\n    avctx->coded_frame = av_frame_alloc();\n\n    if (!avctx->coded_frame)\n\n        return AVERROR(ENOMEM);\n\n\n\n    avctx->coded_frame->key_frame = 1;\n\n    avctx->coded_frame->pict_type = AV_PICTURE_TYPE_I;\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 396
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static __init int setup_numa_zonelist_order(char *s)\n{\n\tif (!s)\n\t\treturn 0;\n\n\treturn __parse_numa_zonelist_order(s);\n}",
        "output": "0",
        "idx": 3462
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AUXBus *aux_init_bus(DeviceState *parent, const char *name)\n\n{\n\n    AUXBus *bus;\n\n\n\n    bus = AUX_BUS(qbus_create(TYPE_AUX_BUS, parent, name));\n\n    bus->bridge = AUXTOI2C(qdev_create(BUS(bus), TYPE_AUXTOI2C));\n\n\n\n    /* Memory related. */\n\n    bus->aux_io = g_malloc(sizeof(*bus->aux_io));\n\n    memory_region_init(bus->aux_io, OBJECT(bus), \"aux-io\", (1 << 20));\n\n    address_space_init(&bus->aux_addr_space, bus->aux_io, \"aux-io\");\n\n    return bus;\n\n}\n",
        "output": "1",
        "idx": 4868
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int bus_manager_append_tainted(Manager *m, DBusMessageIter *i, const char *property, void *data) {\n        const char *t;\n        char buf[64] = \"\", *e = buf, *p = NULL;\n\n        assert(m);\n        assert(i);\n        assert(property);\n\n        if (path_is_mount_point(\"/usr\") > 0 || dir_is_empty(\"/usr\") > 0)\n                e = stpcpy(e, \"usr-separate-fs\");\n\n        if (readlink_malloc(\"/etc/mtab\", &p) < 0) {\n                if (e != buf)\n                        e = stpcpy(e, \" \");\n                e = stpcpy(e, \"etc-mtab-not-symlink\");\n        } else\n                free(p);\n\n        t = buf;\n\n        if (!dbus_message_iter_append_basic(i, DBUS_TYPE_STRING, &t))\n                return -ENOMEM;\n\n        return 0;\n}",
        "output": "0",
        "idx": 5751
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void monitor_control_event(void *opaque, int event)\n\n{\n\n    if (event == CHR_EVENT_OPENED) {\n\n        QObject *data;\n\n        Monitor *mon = opaque;\n\n\n\n        mon->mc->command_mode = 0;\n\n        json_message_parser_init(&mon->mc->parser, handle_qmp_command);\n\n\n\n        data = get_qmp_greeting();\n\n        monitor_json_emitter(mon, data);\n\n        qobject_decref(data);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4063
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static QObject *parser_context_pop_token(JSONParserContext *ctxt)\n\n{\n\n    qobject_decref(ctxt->current);\n\n    assert(!g_queue_is_empty(ctxt->buf));\n\n    ctxt->current = g_queue_pop_head(ctxt->buf);\n\n    return ctxt->current;\n\n}\n",
        "output": "0",
        "idx": 3331
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *sieve_srs_forward(char *return_path __attribute__((unused)))\n{\n    return NULL;\n}",
        "output": "0",
        "idx": 1635
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qmp_input_type_any(Visitor *v, const char *name, QObject **obj,\n\n                               Error **errp)\n\n{\n\n    QmpInputVisitor *qiv = to_qiv(v);\n\n    QObject *qobj = qmp_input_get_object(qiv, name, true, errp);\n\n\n\n    *obj = NULL;\n\n    if (!qobj) {\n\n        return;\n\n    }\n\n\n\n    qobject_incref(qobj);\n\n    *obj = qobj;\n\n}\n",
        "output": "0",
        "idx": 4804
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void parse_options(void *optctx, int argc, char **argv, const OptionDef *options,\n\n                   void (*parse_arg_function)(void *, const char*))\n\n{\n\n    const char *opt;\n\n    int optindex, handleoptions = 1, ret;\n\n\n\n    /* perform system-dependent conversions for arguments list */\n\n    prepare_app_arguments(&argc, &argv);\n\n\n\n    /* parse options */\n\n    optindex = 1;\n\n    while (optindex < argc) {\n\n        opt = argv[optindex++];\n\n\n\n        if (handleoptions && opt[0] == '-' && opt[1] != '\\0') {\n\n            if (opt[1] == '-' && opt[2] == '\\0') {\n\n                handleoptions = 0;\n\n                continue;\n\n            }\n\n            opt++;\n\n\n\n            if ((ret = parse_option(optctx, opt, argv[optindex], options)) < 0)\n\n                exit(1);\n\n            optindex += ret;\n\n        } else {\n\n            if (parse_arg_function)\n\n                parse_arg_function(optctx, opt);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1190
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nautilus_file_mark_desktop_file_trusted (GFile              *file,\n                                         GtkWindow          *parent_window,\n                                         gboolean            interactive,\n                                         NautilusOpCallback  done_callback,\n                                         gpointer            done_callback_data)\n{\n    GTask *task;\n    MarkTrustedJob *job;\n\n    job = op_job_new (MarkTrustedJob, parent_window);\n    job->file = g_object_ref (file);\n    job->interactive = interactive;\n    job->done_callback = done_callback;\n    job->done_callback_data = done_callback_data;\n\n    task = g_task_new (NULL, NULL, mark_trusted_task_done, job);\n    g_task_set_task_data (task, job, NULL);\n    g_task_run_in_thread (task, mark_trusted_task_thread_func);\n    g_object_unref (task);\n}",
        "output": "1",
        "idx": 927
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "on_reauthentication_cancelled (GdmSession *session,\n                               GdmManager *self)\n{\n        g_debug (\"GdmManager: client cancelled reauthentication request\");\n        close_transient_session (self, session);\n}",
        "output": "0",
        "idx": 5717
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int v9fs_synth_fstat(FsContext *fs_ctx, int fid_type,\n\n                            V9fsFidOpenState *fs, struct stat *stbuf)\n\n{\n\n    V9fsSynthOpenState *synth_open = fs->private;\n\n    v9fs_synth_fill_statbuf(synth_open->node, stbuf);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4414
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int bdrv_qed_is_allocated(BlockDriverState *bs, int64_t sector_num,\n\n                                  int nb_sectors, int *pnum)\n\n{\n\n    BDRVQEDState *s = bs->opaque;\n\n    uint64_t pos = (uint64_t)sector_num * BDRV_SECTOR_SIZE;\n\n    size_t len = (size_t)nb_sectors * BDRV_SECTOR_SIZE;\n\n    QEDIsAllocatedCB cb = {\n\n        .is_allocated = -1,\n\n        .pnum = pnum,\n\n    };\n\n    QEDRequest request = { .l2_table = NULL };\n\n\n\n    async_context_push();\n\n\n\n    qed_find_cluster(s, &request, pos, len, qed_is_allocated_cb, &cb);\n\n\n\n    while (cb.is_allocated == -1) {\n\n        qemu_aio_wait();\n\n    }\n\n\n\n    async_context_pop();\n\n\n\n    qed_unref_l2_cache_entry(request.l2_table);\n\n\n\n    return cb.is_allocated;\n\n}\n",
        "output": "0",
        "idx": 4239
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static mz_bool mz_zip_writer_write_zeros(mz_zip_archive *pZip,\n                                         mz_uint64 cur_file_ofs, mz_uint32 n) {\n  char buf[4096];\n  memset(buf, 0, MZ_MIN(sizeof(buf), n));\n  while (n) {\n    mz_uint32 s = MZ_MIN(sizeof(buf), n);\n    if (pZip->m_pWrite(pZip->m_pIO_opaque, cur_file_ofs, buf, s) != s)\n      return MZ_FALSE;\n    cur_file_ofs += s;\n    n -= s;\n  }\n  return MZ_TRUE;\n}",
        "output": "0",
        "idx": 2853
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fts3SqlExec(\n  int *pRC,                /* Result code */\n  Fts3Table *p,            /* The FTS3 table */\n  int eStmt,               /* Index of statement to evaluate */\n  sqlite3_value **apVal    /* Parameters to bind */\n){\n  sqlite3_stmt *pStmt;\n  int rc;\n  if( *pRC ) return;\n  rc = fts3SqlStmt(p, eStmt, &pStmt, apVal); \n  if( rc==SQLITE_OK ){\n    sqlite3_step(pStmt);\n    rc = sqlite3_reset(pStmt);\n  }\n  *pRC = rc;\n}",
        "output": "0",
        "idx": 853
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_load_fpr32h(TCGv_i32 t, int reg)\n\n{\n\n    TCGv_i64 t64 = tcg_temp_new_i64();\n\n    tcg_gen_shri_i64(t64, fpu_f64[reg], 32);\n\n    tcg_gen_trunc_i64_i32(t, t64);\n\n    tcg_temp_free_i64(t64);\n\n}\n",
        "output": "0",
        "idx": 3929
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void* array_get_next(array_t* array) {\n\n    unsigned int next = array->next;\n\n    void* result;\n\n\n\n    if (array_ensure_allocated(array, next) < 0)\n\n\treturn NULL;\n\n\n\n    array->next = next + 1;\n\n    result = array_get(array, next);\n\n\n\n    return result;\n\n}\n",
        "output": "0",
        "idx": 2797
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "R_API int r_socket_close_fd (RSocket *s) {\n\treturn -1;\n}",
        "output": "0",
        "idx": 1763
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rtce_init(VIOsPAPRDevice *dev)\n\n{\n\n    size_t size = (dev->rtce_window_size >> SPAPR_VIO_TCE_PAGE_SHIFT)\n\n        * sizeof(VIOsPAPR_RTCE);\n\n\n\n    if (size) {\n\n        dev->rtce_table = kvmppc_create_spapr_tce(dev->reg,\n\n                                                  dev->rtce_window_size,\n\n                                                  &dev->kvmtce_fd);\n\n\n\n        if (!dev->rtce_table) {\n\n            dev->rtce_table = g_malloc0(size);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5253
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "evbuffer_lock(struct evbuffer *buf)\n{\n\tEVBUFFER_LOCK(buf);\n}",
        "output": "0",
        "idx": 646
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void async_free(AsyncURB *aurb)\n{\n    qemu_free(aurb);\n}",
        "output": "0",
        "idx": 4991
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int iwch_cxgb3_ofld_send(struct t3cdev *tdev, struct sk_buff *skb)\n{\n\tint\terror = 0;\n\tstruct cxio_rdev *rdev;\n\n\trdev = (struct cxio_rdev *)tdev->ulp;\n\tif (cxio_fatal_error(rdev)) {\n\t\tkfree_skb(skb);\n\t\treturn -EIO;\n\t}\n\terror = cxgb3_ofld_send(tdev, skb);\n\tif (error < 0)\n\t\tkfree_skb(skb);\n\treturn error < 0 ? error : 0;\n}",
        "output": "0",
        "idx": 2660
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int64_t bdrv_nb_sectors(BlockDriverState *bs)\n\n{\n\n    BlockDriver *drv = bs->drv;\n\n\n\n    if (!drv)\n\n        return -ENOMEDIUM;\n\n\n\n    if (drv->has_variable_length) {\n\n        int ret = refresh_total_sectors(bs, bs->total_sectors);\n\n        if (ret < 0) {\n\n            return ret;\n\n        }\n\n    }\n\n    return bs->total_sectors;\n\n}\n",
        "output": "0",
        "idx": 997
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t intel_hda_mmio_readw(void *opaque, target_phys_addr_t addr)\n\n{\n\n    IntelHDAState *d = opaque;\n\n    const IntelHDAReg *reg = intel_hda_reg_find(d, addr);\n\n\n\n    return intel_hda_reg_read(d, reg, 0xffff);\n\n}\n",
        "output": "0",
        "idx": 4956
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void wrapper_libxsmm_spmdm_compute_generic_thread(\n    empty_type_wrapper<float>, const libxsmm_spmdm_handle* handle, char transA,\n    char transB, const float* alpha, libxsmm_CSR_sparseslice* A_sparse,\n    const float* B, char transC, const float* beta, float* C, int block_id,\n    int tid, int nthreads) {\n  return libxsmm_spmdm_compute_fp32_thread(handle, transA, transB, alpha,\n                                           A_sparse, B, transC, beta, C,\n                                           block_id, tid, nthreads);\n}",
        "output": "0",
        "idx": 100
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rtc_get_date(Object *obj, Visitor *v, void *opaque,\n\n                         const char *name, Error **errp)\n\n{\n\n    Error *err = NULL;\n\n    RTCState *s = MC146818_RTC(obj);\n\n    struct tm current_tm;\n\n\n\n    rtc_update_time(s);\n\n    rtc_get_time(s, &current_tm);\n\n    visit_start_struct(v, NULL, \"struct tm\", name, 0, &err);\n\n    if (err) {\n\n        goto out;\n\n    }\n\n    visit_type_int32(v, &current_tm.tm_year, \"tm_year\", &err);\n\n    visit_type_int32(v, &current_tm.tm_mon, \"tm_mon\", &err);\n\n    visit_type_int32(v, &current_tm.tm_mday, \"tm_mday\", &err);\n\n    visit_type_int32(v, &current_tm.tm_hour, \"tm_hour\", &err);\n\n    visit_type_int32(v, &current_tm.tm_min, \"tm_min\", &err);\n\n    visit_type_int32(v, &current_tm.tm_sec, \"tm_sec\", &err);\n\n    visit_end_struct(v, &err);\n\n\n\nout:\n\n    error_propagate(errp, err);\n\n}\n",
        "output": "1",
        "idx": 5911
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nbd_coroutine_start(NbdClientSession *s,\n\n   struct nbd_request *request)\n\n{\n\n    /* Poor man semaphore.  The free_sema is locked when no other request\n\n     * can be accepted, and unlocked after receiving one reply.  */\n\n    if (s->in_flight >= MAX_NBD_REQUESTS - 1) {\n\n        qemu_co_mutex_lock(&s->free_sema);\n\n        assert(s->in_flight < MAX_NBD_REQUESTS);\n\n    }\n\n    s->in_flight++;\n\n\n\n    /* s->recv_coroutine[i] is set as soon as we get the send_lock.  */\n\n}\n",
        "output": "1",
        "idx": 5784
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void piix3_reset(void *opaque)\n{\n    PCIIDEState *d = opaque;\n    PCIDevice *pd = PCI_DEVICE(d);\n    uint8_t *pci_conf = pd->config;\n    int i;\n\n    for (i = 0; i < 2; i++) {\n        ide_bus_reset(&d->bus[i]);\n    }\n\n    /* TODO: this is the default. do not override. */\n    pci_conf[PCI_COMMAND] = 0x00;\n    /* TODO: this is the default. do not override. */\n    pci_conf[PCI_COMMAND + 1] = 0x00;\n    /* TODO: use pci_set_word */\n    pci_conf[PCI_STATUS] = PCI_STATUS_FAST_BACK;\n    pci_conf[PCI_STATUS + 1] = PCI_STATUS_DEVSEL_MEDIUM >> 8;\n    pci_conf[0x20] = 0x01; /* BMIBA: 20-23h */\n}",
        "output": "0",
        "idx": 194
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int virtio_balloon_init_pci(PCIDevice *pci_dev)\n\n{\n\n    VirtIOPCIProxy *proxy = DO_UPCAST(VirtIOPCIProxy, pci_dev, pci_dev);\n\n    VirtIODevice *vdev;\n\n\n\n    vdev = virtio_balloon_init(&pci_dev->qdev);\n\n\n\n\n    virtio_init_pci(proxy, vdev);\n\n    return 0;\n",
        "output": "1",
        "idx": 3410
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint8_t qpci_pc_config_readb(QPCIBus *bus, int devfn, uint8_t offset)\n\n{\n\n    outl(0xcf8, (1 << 31) | (devfn << 8) | offset);\n\n    return inb(0xcfc);\n\n}\n",
        "output": "1",
        "idx": 2229
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int btrfs_lookup_and_bind_dio_csum(struct btrfs_root *root,\n\t\t\t\t\t\t struct inode *inode,\n\t\t\t\t\t\t struct btrfs_dio_private *dip,\n\t\t\t\t\t\t struct bio *bio,\n\t\t\t\t\t\t u64 file_offset)\n{\n\tstruct btrfs_io_bio *io_bio = btrfs_io_bio(bio);\n\tstruct btrfs_io_bio *orig_io_bio = btrfs_io_bio(dip->orig_bio);\n\tint ret;\n\n\t/*\n\t * We load all the csum data we need when we submit\n\t * the first bio to reduce the csum tree search and\n\t * contention.\n\t */\n\tif (dip->logical_offset == file_offset) {\n\t\tret = btrfs_lookup_bio_sums_dio(root, inode, dip->orig_bio,\n\t\t\t\t\t\tfile_offset);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\tif (bio == dip->orig_bio)\n\t\treturn 0;\n\n\tfile_offset -= dip->logical_offset;\n\tfile_offset >>= inode->i_sb->s_blocksize_bits;\n\tio_bio->csum = (u8 *)(((u32 *)orig_io_bio->csum) + file_offset);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 3750
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mysql_list_fields(MYSQL *mysql, const char *table, const char *wild)\n{\n  MYSQL_RES *result;\n  MYSQL_DATA *query;\n  char buff[255];\n  int length= 0;\n\n  LINT_INIT(query);\n\n  length= snprintf(buff, 128, \"%s%c%s\", table, '\\0', wild ? wild : \"\");\n\n  if (ma_simple_command(mysql, COM_FIELD_LIST,buff,length,1,0) ||\n      !(query = mysql->methods->db_read_rows(mysql,(MYSQL_FIELD*) 0,8)))\n    return(NULL);\n\n  free_old_query(mysql);\n  if (!(result = (MYSQL_RES *) calloc(1, sizeof(MYSQL_RES))))\n  {\n    free_rows(query);\n    return(NULL);\n  }\n  result->field_alloc=mysql->field_alloc;\n  mysql->fields=0;\n  result->field_count = (uint) query->rows;\n  result->fields= unpack_fields(query,&result->field_alloc,\n\t\t\t\tresult->field_count,1,\n\t\t\t\t(my_bool) test(mysql->server_capabilities &\n\t\t\t\t\t       CLIENT_LONG_FLAG));\n  result->eof=1;\n  return(result);\n}",
        "output": "1",
        "idx": 1594
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fw_cfg_write(FWCfgState *s, uint8_t value)\n\n{\n\n    int arch = !!(s->cur_entry & FW_CFG_ARCH_LOCAL);\n\n    FWCfgEntry *e = &s->entries[arch][s->cur_entry & FW_CFG_ENTRY_MASK];\n\n\n\n    FW_CFG_DPRINTF(\"write %d\\n\", value);\n\n\n\n    if (s->cur_entry & FW_CFG_WRITE_CHANNEL && s->cur_offset < e->len) {\n\n        e->data[s->cur_offset++] = value;\n\n        if (s->cur_offset == e->len) {\n\n            e->callback(e->callback_opaque, e->data);\n\n            s->cur_offset = 0;\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2878
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlLastElementChild(xmlNodePtr parent) {\n    xmlNodePtr cur = NULL;\n\n    if (parent == NULL)\n        return(NULL);\n    switch (parent->type) {\n        case XML_ELEMENT_NODE:\n        case XML_ENTITY_NODE:\n        case XML_DOCUMENT_NODE:\n        case XML_DOCUMENT_FRAG_NODE:\n        case XML_HTML_DOCUMENT_NODE:\n            cur = parent->last;\n            break;\n        default:\n            return(NULL);\n    }\n    while (cur != NULL) {\n        if (cur->type == XML_ELEMENT_NODE)\n            return(cur);\n        cur = cur->prev;\n    }\n    return(NULL);\n}",
        "output": "0",
        "idx": 5095
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int append_ia5(STACK_OF(OPENSSL_STRING) **sk, const ASN1_IA5STRING *email)\n{\n    char *emtmp;\n    /* First some sanity checks */\n    if (email->type != V_ASN1_IA5STRING)\n        return 1;\n    if (!email->data || !email->length)\n        return 1;\n    if (*sk == NULL)\n        *sk = sk_OPENSSL_STRING_new(sk_strcmp);\n    if (*sk == NULL)\n        return 0;\n    /* Don't add duplicates */\n    if (sk_OPENSSL_STRING_find(*sk, (char *)email->data) != -1)\n        return 1;\n    emtmp = OPENSSL_strdup((char *)email->data);\n    if (emtmp == NULL || !sk_OPENSSL_STRING_push(*sk, emtmp)) {\n        OPENSSL_free(emtmp);    /* free on push failure */\n        X509_email_free(*sk);\n        *sk = NULL;\n        return 0;\n    }\n    return 1;\n}",
        "output": "1",
        "idx": 523
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ConnectionImpl::StreamImpl::encodeData(Buffer::Instance& data, bool end_stream) {\n  ASSERT(!local_end_stream_);\n  local_end_stream_ = end_stream;\n  pending_send_data_.move(data);\n  if (data_deferred_) {\n    int rc = nghttp2_session_resume_data(parent_.session_, stream_id_);\n    ASSERT(rc == 0);\n\n    data_deferred_ = false;\n  }\n\n  parent_.sendPendingFrames();\n}",
        "output": "1",
        "idx": 1130
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cliprdr_free_format_list(CLIPRDR_FORMAT_LIST* formatList)\n{\n\tUINT index = 0;\n\n\tif (formatList == NULL)\n\t\treturn;\n\n\tif (formatList->formats)\n\t{\n\t\tfor (index = 0; index < formatList->numFormats; index++)\n\t\t{\n\t\t\tfree(formatList->formats[index].formatName);\n\t\t}\n\n\t\tfree(formatList->formats);\n\t}\n}",
        "output": "1",
        "idx": 4252
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int kvm_read_guest_page(struct kvm *kvm, gfn_t gfn, void *data, int offset,\n\t\t\tint len)\n{\n\tint r;\n\tunsigned long addr;\n\n\taddr = gfn_to_hva(kvm, gfn);\n\tif (kvm_is_error_hva(addr))\n\t\treturn -EFAULT;\n\tr = __copy_from_user(data, (void __user *)addr + offset, len);\n\tif (r)\n\t\treturn -EFAULT;\n\treturn 0;\n}",
        "output": "0",
        "idx": 2627
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SYSCALL_DEFINE2(pipe2, int __user *, fildes, int, flags)\n{\n\treturn do_pipe2(fildes, flags);\n}",
        "output": "0",
        "idx": 3370
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void MSLWarning(void *context,const char *format,...)\n{\n  char\n    *message,\n    reason[MagickPathExtent];\n\n  MSLInfo\n    *msl_info;\n\n  va_list\n    operands;\n\n  /**\n    Display and format a warning messages, gives file, line, position and\n    extra parameters.\n  */\n  va_start(operands,format);\n  (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  SAX.warning: \");\n  (void) LogMagickEvent(CoderEvent,GetMagickModule(),format,operands);\n  msl_info=(MSLInfo *) context;\n  (void) msl_info;\n#if !defined(MAGICKCORE_HAVE_VSNPRINTF)\n  (void) vsprintf(reason,format,operands);\n#else\n  (void) vsnprintf(reason,MagickPathExtent,format,operands);\n#endif\n  message=GetExceptionMessage(errno);\n  ThrowMSLException(CoderError,reason,message);\n  message=DestroyString(message);\n  va_end(operands);\n}",
        "output": "0",
        "idx": 5141
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zzip_mem_disk_entry_strdup_name(ZZIP_MEM_DISK* dir, \n                                ZZIP_DISK_ENTRY* entry) {\n    return zzip_disk_entry_strdup_name(dir->disk, entry); }",
        "output": "1",
        "idx": 3273
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "/* {{{ proto bool pspell_config_repl(int conf, string repl)\n   Use a personal dictionary with replacement pairs for this config */\nstatic PHP_FUNCTION(pspell_config_repl)\n{\n\tint type;\n\tlong conf;\n\tchar *repl;\n\tint repl_len;\n\tPspellConfig *config;\n\t\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ls\", &conf, &repl, &repl_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tPSPELL_FETCH_CONFIG;\n\n\tpspell_config_replace(config, \"save-repl\", \"true\");\n\n\tif (PG(safe_mode) && (!php_checkuid(repl, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_check_open_basedir(repl TSRMLS_CC)) {\n\t\tRETURN_FALSE;\n\t}\n\n\tpspell_config_replace(config, \"repl\", repl);\n",
        "output": "1",
        "idx": 875
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int fit_image_get_comp(const void *fit, int noffset, uint8_t *comp)\n{\n\tint len;\n\tconst void *data;\n\n\t/* Get compression name from property data */\n\tdata = fdt_getprop(fit, noffset, FIT_COMP_PROP, &len);\n\tif (data == NULL) {\n\t\tfit_get_debug(fit, noffset, FIT_COMP_PROP, len);\n\t\t*comp = -1;\n\t\treturn -1;\n\t}\n\n\t/* Translate compression name to id */\n\t*comp = genimg_get_comp_id(data);\n\treturn 0;\n}",
        "output": "0",
        "idx": 2069
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  std::string index(SHalfedge_iterator e) const\n  { return SEI(e,verbose); }",
        "output": "0",
        "idx": 4514
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mov_read_extradata(MOVContext *c, ByteIOContext *pb, MOVAtom atom)\n\n{\n\n    AVStream *st = c->fc->streams[c->fc->nb_streams-1];\n\n    uint64_t size= (uint64_t)st->codec->extradata_size + atom.size + 8 + FF_INPUT_BUFFER_PADDING_SIZE;\n\n    uint8_t *buf;\n\n    if(size > INT_MAX || (uint64_t)atom.size > INT_MAX)\n\n        return -1;\n\n    buf= av_realloc(st->codec->extradata, size);\n\n    if(!buf)\n\n        return -1;\n\n    st->codec->extradata= buf;\n\n    buf+= st->codec->extradata_size;\n\n    st->codec->extradata_size= size - FF_INPUT_BUFFER_PADDING_SIZE;\n\n    AV_WB32(       buf    , atom.size + 8);\n\n    AV_WL32(       buf + 4, atom.type);\n\n    get_buffer(pb, buf + 8, atom.size);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2412
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pci_init_bus_master(PCIDevice *pci_dev)\n\n{\n\n    AddressSpace *dma_as = pci_device_iommu_address_space(pci_dev);\n\n\n\n    memory_region_init_alias(&pci_dev->bus_master_enable_region,\n\n                             OBJECT(pci_dev), \"bus master\",\n\n                             dma_as->root, 0, memory_region_size(dma_as->root));\n\n    memory_region_set_enabled(&pci_dev->bus_master_enable_region, false);\n\n    address_space_init(&pci_dev->bus_master_as,\n\n                       &pci_dev->bus_master_enable_region, pci_dev->name);\n\n}\n",
        "output": "0",
        "idx": 5384
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const char *lftp_ssl_find_ca_file()\n{\n   // a few possible locations of ca-bundle.crt\n   static const char *const ca_file_location[]={\n      \"/etc/pki/tls/certs/ca-bundle.crt\",\n      \"/etc/certs/ca-bundle.crt\",\n      \"/usr/share/ssl/certs/ca-bundle.crt\",\n      \"/etc/ssl/certs/ca-certificates.crt\",\n      \"/usr/local/ssl/certs/ca-bundle.crt\",\n      \"/etc/apache/ssl.crt/ca-bundle.crt\",\n      \"/usr/share/curl/curl-ca-bundle.crt\",\n      0};\n   for(int i=0; ca_file_location[i]; i++)\n   {\n      if(access(ca_file_location[i], R_OK)==0)\n\t return ca_file_location[i];\n   }\n   return 0;\n}",
        "output": "0",
        "idx": 3899
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void av_cold ff_ivi_free_buffers(IVIPlaneDesc *planes)\n\n{\n\n    int p, b, t;\n\n\n\n    for (p = 0; p < 3; p++) {\n\n        for (b = 0; b < planes[p].num_bands; b++) {\n\n            av_freep(&planes[p].bands[b].bufs[0]);\n\n            av_freep(&planes[p].bands[b].bufs[1]);\n\n            av_freep(&planes[p].bands[b].bufs[2]);\n\n\n\n\n\n            for (t = 0; t < planes[p].bands[b].num_tiles; t++)\n\n                av_freep(&planes[p].bands[b].tiles[t].mbs);\n\n            av_freep(&planes[p].bands[b].tiles);\n\n        }\n\n        av_freep(&planes[p].bands);\n\n    }\n\n}",
        "output": "1",
        "idx": 141
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ldns_str2rdf_long_str(ldns_rdf **rd, const char *str)\n{\n\tuint8_t *data, *dp, ch = 0;\n\tsize_t length;\n\n\t/* Worst case space requirement. We'll realloc to actual size later. */\n\tdp = data = LDNS_XMALLOC(uint8_t, strlen(str));\n        if (! data) {\n\t\treturn LDNS_STATUS_MEM_ERR;\n\t}\n\n\t/* Fill data with parsed bytes */\n\twhile (parse_char(&ch, &str)) {\n\t\t*dp++ = ch;\n\t\tif (dp - data > LDNS_MAX_RDFLEN) {\n\t\t\tLDNS_FREE(data);\n\t\t\treturn LDNS_STATUS_INVALID_STR;\n\t\t}\n\t}\n\tif (! str) {\n\t\treturn LDNS_STATUS_SYNTAX_BAD_ESCAPE;\n\t}\n\tlength = (size_t)(dp - data);\n\n\t/* Lose the overmeasure */\n\tdata = LDNS_XREALLOC(dp = data, uint8_t, length);\n\tif (! data) {\n\t\tLDNS_FREE(dp);\n\t\treturn LDNS_STATUS_MEM_ERR;\n\t}\n\n\t/* Create rdf */\n\t*rd = ldns_rdf_new(LDNS_RDF_TYPE_LONG_STR, length, data);\n\tif (! *rd) {\n\t\tLDNS_FREE(data);\n\t\treturn LDNS_STATUS_MEM_ERR;\n\t}\n\treturn LDNS_STATUS_OK;\n}",
        "output": "1",
        "idx": 4219
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CLASS rollei_load_raw()\n{\n  uchar pixel[10];\n  unsigned iten=0, isix, i, buffer=0, todo[16];\n\n  isix = raw_width * raw_height * 5 / 8;\n  while (fread (pixel, 1, 10, ifp) == 10) {\n#ifdef LIBRAW_LIBRARY_BUILD\n    checkCancel();\n#endif\n    for (i=0; i < 10; i+=2) {\n      todo[i]   = iten++;\n      todo[i+1] = pixel[i] << 8 | pixel[i+1];\n      buffer    = pixel[i] >> 2 | buffer << 6;\n    }\n    for (   ; i < 16; i+=2) {\n      todo[i]   = isix++;\n      todo[i+1] = buffer >> (14-i)*5;\n    }\n    for (i=0; i < 16; i+=2)\n      raw_image[todo[i]] = (todo[i+1] & 0x3ff);\n  }\n  maximum = 0x3ff;\n}",
        "output": "1",
        "idx": 4353
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static X509_STORE *init_revocation_store(fr_tls_server_conf_t *conf)\n{\n\tX509_STORE *store = NULL;\n\n\tstore = X509_STORE_new();\n\n\t/* Load the CAs we trust */\n\tif (conf->ca_file || conf->ca_path)\n\t\tif(!X509_STORE_load_locations(store, conf->ca_file, conf->ca_path)) {\n\t\t\tERROR(LOG_PREFIX \": X509_STORE error %s\", ERR_error_string(ERR_get_error(), NULL));\n\t\t\tERROR(LOG_PREFIX \": Error reading Trusted root CA list %s\",conf->ca_file );\n\t\t\treturn NULL;\n\t\t}\n\n#ifdef X509_V_FLAG_CRL_CHECK\n\tif (conf->check_crl)\n\t\tX509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK);\n#endif\n\treturn store;\n}",
        "output": "1",
        "idx": 1774
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_new_filter_primitive_gaussian_blur (void)\n{\n    RsvgFilterPrimitiveGaussianBlur *filter;\n    filter = g_new (RsvgFilterPrimitiveGaussianBlur, 1);\n    _rsvg_node_init (&filter->super.super);\n    filter->super.in = g_string_new (\"none\");\n    filter->super.result = g_string_new (\"none\");\n    filter->super.x.factor = filter->super.y.factor = filter->super.width.factor =\n        filter->super.height.factor = 'n';\n    filter->sdx = 0;\n    filter->sdy = 0;\n    filter->super.render = &rsvg_filter_primitive_gaussian_blur_render;\n    filter->super.super.free = &rsvg_filter_primitive_gaussian_blur_free;\n    filter->super.super.set_atts = rsvg_filter_primitive_gaussian_blur_set_atts;\n    return (RsvgNode *) filter;\n}",
        "output": "1",
        "idx": 4906
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "selinux_determine_inode_label(const struct task_security_struct *tsec,\n\t\t\t\t struct inode *dir,\n\t\t\t\t const struct qstr *name, u16 tclass,\n\t\t\t\t u32 *_new_isid)\n{\n\tconst struct superblock_security_struct *sbsec = dir->i_sb->s_security;\n\n\tif ((sbsec->flags & SE_SBINITIALIZED) &&\n\t    (sbsec->behavior == SECURITY_FS_USE_MNTPOINT)) {\n\t\t*_new_isid = sbsec->mntpoint_sid;\n\t} else if ((sbsec->flags & SBLABEL_MNT) &&\n\t\t   tsec->create_sid) {\n\t\t*_new_isid = tsec->create_sid;\n\t} else {\n\t\tconst struct inode_security_struct *dsec = inode_security(dir);\n\t\treturn security_transition_sid(&selinux_state, tsec->sid,\n\t\t\t\t\t       dsec->sid, tclass,\n\t\t\t\t\t       name, _new_isid);\n\t}\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 5070
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_ioctl(BlockDriverState *bs, unsigned long int req, void *buf)\n\n{\n\n    BdrvIoctlCoData data = {\n\n        .bs = bs,\n\n        .req = req,\n\n        .buf = buf,\n\n        .ret = -EINPROGRESS,\n\n    };\n\n\n\n    if (qemu_in_coroutine()) {\n\n        /* Fast-path if already in coroutine context */\n\n        bdrv_co_ioctl_entry(&data);\n\n    } else {\n\n        Coroutine *co = qemu_coroutine_create(bdrv_co_ioctl_entry);\n\n\n\n        qemu_coroutine_enter(co, &data);\n\n        while (data.ret == -EINPROGRESS) {\n\n            aio_poll(bdrv_get_aio_context(bs), true);\n\n        }\n\n    }\n\n    return data.ret;\n\n}\n",
        "output": "1",
        "idx": 4667
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "find_abbrev_list_by_abbrev_offset (dwarf_vma abbrev_base,\n\t\t\t\t   dwarf_vma abbrev_offset)\n{\n  abbrev_list * list;\n\n  for (list = abbrev_lists; list != NULL; list = list->next)\n    if (list->abbrev_base == abbrev_base\n\t&& list->abbrev_offset == abbrev_offset)\n      return list;\n\n  return NULL;\n}",
        "output": "1",
        "idx": 599
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_net_vmstate_change(void *opaque, int running, int reason)\n\n{\n\n    VirtIONet *n = opaque;\n\n    if (!running) {\n\n        return;\n\n    }\n\n    /* This is called when vm is started, it will start vhost backend if\n\n     * appropriate e.g. after migration. */\n\n    virtio_net_set_status(&n->vdev, n->vdev.status);\n\n}\n",
        "output": "0",
        "idx": 432
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int lua_ap_some_auth_required(request_rec *r)\n{\n    return ap_some_auth_required(r);\n}",
        "output": "0",
        "idx": 6198
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_acl_show(Monitor *mon, const QDict *qdict)\n\n{\n\n    const char *aclname = qdict_get_str(qdict, \"aclname\");\n\n    qemu_acl *acl = find_acl(mon, aclname);\n\n    qemu_acl_entry *entry;\n\n    int i = 0;\n\n\n\n    if (acl) {\n\n        monitor_printf(mon, \"policy: %s\\n\",\n\n                       acl->defaultDeny ? \"deny\" : \"allow\");\n\n        TAILQ_FOREACH(entry, &acl->entries, next) {\n\n            i++;\n\n            monitor_printf(mon, \"%d: %s %s\\n\", i,\n\n                           entry->deny ? \"deny\" : \"allow\", entry->match);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4922
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vte_sequence_handler_offset(VteTerminal *terminal,\n\t\t\t    GValueArray *params,\n\t\t\t    int increment,\n\t\t\t    VteTerminalSequenceHandler handler)\n{\n\tguint i;\n\tlong val;\n\tGValue *value;\n\t/* Decrement the parameters and let the _cs handler deal with it. */\n\tfor (i = 0; (params != NULL) && (i < params->n_values); i++) {\n\t\tvalue = g_value_array_get_nth(params, i);\n\t\tif (G_VALUE_HOLDS_LONG(value)) {\n\t\t\tval = g_value_get_long(value);\n\t\t\tval += increment;\n\t\t\tg_value_set_long(value, val);\n\t\t}\n\t}\n\thandler (terminal, params);\n}",
        "output": "0",
        "idx": 1014
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int line6_send_raw_message_async(struct usb_line6 *line6, const char *buffer,\n\t\t\t\t int size)\n{\n\tstruct message *msg;\n\tstruct urb *urb;\n\n\t/* create message: */\n\tmsg = kmalloc(sizeof(struct message), GFP_ATOMIC);\n\tif (msg == NULL)\n\t\treturn -ENOMEM;\n\n\t/* create URB: */\n\turb = usb_alloc_urb(0, GFP_ATOMIC);\n\n\tif (urb == NULL) {\n\t\tkfree(msg);\n\t\treturn -ENOMEM;\n\t}\n\n\t/* set message data: */\n\tmsg->line6 = line6;\n\tmsg->buffer = buffer;\n\tmsg->size = size;\n\tmsg->done = 0;\n\n\t/* start sending: */\n\treturn line6_send_raw_message_async_part(msg, urb);\n}",
        "output": "0",
        "idx": 3452
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static NFSServer *nfs_config(QDict *options, Error **errp)\n\n{\n\n    NFSServer *server = NULL;\n\n    QDict *addr = NULL;\n\n    QObject *crumpled_addr = NULL;\n\n    Visitor *iv = NULL;\n\n    Error *local_error = NULL;\n\n\n\n    qdict_extract_subqdict(options, &addr, \"server.\");\n\n    if (!qdict_size(addr)) {\n\n        error_setg(errp, \"NFS server address missing\");\n\n        goto out;\n\n    }\n\n\n\n    crumpled_addr = qdict_crumple(addr, errp);\n\n    if (!crumpled_addr) {\n\n        goto out;\n\n    }\n\n\n\n\n\n\n\n\n\n\n    iv = qobject_input_visitor_new(crumpled_addr);\n\n    visit_type_NFSServer(iv, NULL, &server, &local_error);\n\n    if (local_error) {\n\n        error_propagate(errp, local_error);\n\n        goto out;\n\n    }\n\n\n\nout:\n\n    QDECREF(addr);\n\n    qobject_decref(crumpled_addr);\n\n    visit_free(iv);\n\n    return server;\n\n}",
        "output": "1",
        "idx": 2457
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void guest_fsfreeze_cleanup(void)\n\n{\n\n    int64_t ret;\n\n    Error *err = NULL;\n\n\n\n    if (ga_is_frozen(ga_state) == GUEST_FSFREEZE_STATUS_FROZEN) {\n\n        ret = qmp_guest_fsfreeze_thaw(&err);\n\n        if (ret < 0 || err) {\n\n            slog(\"failed to clean up frozen filesystems\");\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4891
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool qemu_savevm_state_blocked(Monitor *mon)\n\n{\n\n    SaveStateEntry *se;\n\n\n\n    QTAILQ_FOREACH(se, &savevm_handlers, entry) {\n\n        if (se->no_migrate) {\n\n            monitor_printf(mon, \"state blocked by non-migratable device '%s'\\n\",\n\n                           se->idstr);\n\n            return true;\n\n        }\n\n    }\n\n    return false;\n\n}\n",
        "output": "0",
        "idx": 4309
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_clock_enable(QEMUClockType type, bool enabled)\n\n{\n\n    QEMUClock *clock = qemu_clock_ptr(type);\n\n    QEMUTimerList *tl;\n\n    bool old = clock->enabled;\n\n    clock->enabled = enabled;\n\n    if (enabled && !old) {\n\n        qemu_clock_notify(type);\n\n    } else if (!enabled && old) {\n\n        QLIST_FOREACH(tl, &clock->timerlists, list) {\n\n            qemu_event_wait(&tl->timers_done_ev);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4074
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qcrypto_hash_bytesv(QCryptoHashAlgorithm alg,\n\n                        const struct iovec *iov,\n\n                        size_t niov,\n\n                        uint8_t **result,\n\n                        size_t *resultlen,\n\n                        Error **errp)\n\n{\n\n#ifdef CONFIG_AF_ALG\n\n    int ret;\n\n\n\n    ret = qcrypto_hash_afalg_driver.hash_bytesv(alg, iov, niov,\n\n                                                result, resultlen,\n\n                                                errp);\n\n    if (ret == 0) {\n\n        return ret;\n\n    }\n\n\n\n    /*\n\n     * TODO:\n\n     * Maybe we should treat some afalg errors as fatal\n\n     */\n\n    error_free(*errp);\n\n#endif\n\n\n\n    return qcrypto_hash_lib_driver.hash_bytesv(alg, iov, niov,\n\n                                               result, resultlen,\n\n                                               errp);\n\n}\n",
        "output": "1",
        "idx": 1783
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nl80211_send_mlme_timeout(struct cfg80211_registered_device *rdev,\n\t\t\t\t      struct net_device *netdev, int cmd,\n\t\t\t\t      const u8 *addr, gfp_t gfp)\n{\n\tstruct sk_buff *msg;\n\tvoid *hdr;\n\n\tmsg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);\n\tif (!msg)\n\t\treturn;\n\n\thdr = nl80211hdr_put(msg, 0, 0, 0, cmd);\n\tif (!hdr) {\n\t\tnlmsg_free(msg);\n\t\treturn;\n\t}\n\n\tif (nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx) ||\n\t    nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex) ||\n\t    nla_put_flag(msg, NL80211_ATTR_TIMED_OUT) ||\n\t    nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, addr))\n\t\tgoto nla_put_failure;\n\n\tgenlmsg_end(msg, hdr);\n\n\tgenlmsg_multicast_netns(&nl80211_fam, wiphy_net(&rdev->wiphy), msg, 0,\n\t\t\t\tNL80211_MCGRP_MLME, gfp);\n\treturn;\n\n nla_put_failure:\n\tnlmsg_free(msg);\n}",
        "output": "0",
        "idx": 2794
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "float32 HELPER(ucf64_sf2si)(float32 x, CPUUniCore32State *env)\n\n{\n\n    return ucf64_itos(float32_to_int32(x, &env->ucf64.fp_status));\n\n}\n",
        "output": "0",
        "idx": 3637
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "glob_func_error(VALUE val)\n{\n    struct glob_error_args *arg = (struct glob_error_args *)val;\n    VALUE path = rb_enc_str_new_cstr(arg->path, arg->enc);\n    rb_syserr_fail_str(arg->error, path);\n    return Qnil;\n}",
        "output": "0",
        "idx": 3487
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void calc_thr_3gpp(const FFPsyWindowInfo *wi, const int num_bands, AacPsyChannel *pch,\n\n                          const uint8_t *band_sizes, const float *coefs)\n\n{\n\n    int i, w, g;\n\n    int start = 0;\n\n    for (w = 0; w < wi->num_windows*16; w += 16) {\n\n        for (g = 0; g < num_bands; g++) {\n\n            AacPsyBand *band = &pch->band[w+g];\n\n\n\n            float form_factor = 0.0f;\n\n            float Temp;\n\n            band->energy = 0.0f;\n\n            for (i = 0; i < band_sizes[g]; i++) {\n\n                band->energy += coefs[start+i] * coefs[start+i];\n\n                form_factor  += sqrtf(fabs(coefs[start+i]));\n\n            }\n\n            Temp = band->energy > 0 ? sqrtf((float)band_sizes[g] / band->energy) : 0;\n\n            band->thr      = band->energy * 0.001258925f;\n\n            band->nz_lines = form_factor * sqrtf(Temp);\n\n\n\n            start += band_sizes[g];\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3138
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void write_header(AVFormatContext *s)\n\n{\n\n    double min_buffer_time = 1.0;\n\n    avio_printf(s->pb, \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n\n    avio_printf(s->pb, \"<MPD\\n\");\n\n    avio_printf(s->pb, \"  xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\");\n\n    avio_printf(s->pb, \"  xmlns=\\\"urn:mpeg:DASH:schema:MPD:2011\\\"\\n\");\n\n    avio_printf(s->pb, \"  xsi:schemaLocation=\\\"urn:mpeg:DASH:schema:MPD:2011\\\"\\n\");\n\n    avio_printf(s->pb, \"  type=\\\"static\\\"\\n\");\n\n    avio_printf(s->pb, \"  mediaPresentationDuration=\\\"PT%gS\\\"\\n\",\n\n                get_duration(s));\n\n    avio_printf(s->pb, \"  minBufferTime=\\\"PT%gS\\\"\\n\",\n\n                min_buffer_time);\n\n    avio_printf(s->pb, \"  profiles=\\\"urn:webm:dash:profile:webm-on-demand:2012\\\"\");\n\n    avio_printf(s->pb, \">\\n\");\n\n}\n",
        "output": "1",
        "idx": 4151
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void spapr_core_unplug_request(HotplugHandler *hotplug_dev, DeviceState *dev,\n\n                               Error **errp)\n\n{\n\n    int index;\n\n    sPAPRDRConnector *drc;\n\n    sPAPRDRConnectorClass *drck;\n\n    Error *local_err = NULL;\n\n    CPUCore *cc = CPU_CORE(dev);\n\n    int smt = kvmppc_smt_threads();\n\n\n\n    if (!spapr_find_cpu_slot(MACHINE(hotplug_dev), cc->core_id, &index)) {\n\n        error_setg(errp, \"Unable to find CPU core with core-id: %d\",\n\n                   cc->core_id);\n\n        return;\n\n    }\n\n    if (index == 0) {\n\n        error_setg(errp, \"Boot CPU core may not be unplugged\");\n\n        return;\n\n    }\n\n\n\n    drc = spapr_dr_connector_by_id(SPAPR_DR_CONNECTOR_TYPE_CPU, index * smt);\n\n    g_assert(drc);\n\n\n\n    drck = SPAPR_DR_CONNECTOR_GET_CLASS(drc);\n\n    drck->detach(drc, dev, spapr_core_release, NULL, &local_err);\n\n    if (local_err) {\n\n        error_propagate(errp, local_err);\n\n        return;\n\n    }\n\n\n\n    spapr_hotplug_req_remove_by_index(drc);\n\n}\n",
        "output": "0",
        "idx": 5970
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PackLinuxElf64::elf_find_dynamic(unsigned int key) const\n{\n    Elf64_Dyn const *dynp= dynseg;\n    if (dynp)\n    for (; (unsigned)((char const *)dynp - (char const *)dynseg) < sz_dynseg\n            && Elf64_Dyn::DT_NULL!=dynp->d_tag; ++dynp) if (get_te64(&dynp->d_tag)==key) {\n        upx_uint64_t const t= elf_get_offset_from_address(get_te64(&dynp->d_val));\n        if (t) {\n            return &((unsigned char const *)file_image)[(size_t)t];\n        }\n        break;\n    }\n    return 0;\n}",
        "output": "1",
        "idx": 1573
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rtas_ibm_read_pci_config(sPAPREnvironment *spapr,\n\n                                     uint32_t token, uint32_t nargs,\n\n                                     target_ulong args,\n\n                                     uint32_t nret, target_ulong rets)\n\n{\n\n    uint64_t buid;\n\n    uint32_t size, addr;\n\n\n\n    if ((nargs != 4) || (nret != 2)) {\n\n        rtas_st(rets, 0, -1);\n\n        return;\n\n    }\n\n\n\n    buid = ((uint64_t)rtas_ld(args, 1) << 32) | rtas_ld(args, 2);\n\n    size = rtas_ld(args, 3);\n\n    addr = rtas_ld(args, 0);\n\n\n\n    finish_read_pci_config(spapr, buid, addr, size, rets);\n\n}\n",
        "output": "0",
        "idx": 1522
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void GCC_FMT_ATTR(2, 3) qtest_sendf(CharBackend *chr,\n\n                                           const char *fmt, ...)\n\n{\n\n    va_list ap;\n\n    gchar *buffer;\n\n\n\n    va_start(ap, fmt);\n\n    buffer = g_strdup_vprintf(fmt, ap);\n\n    qtest_send(chr, buffer);\n\n\n    va_end(ap);\n\n}",
        "output": "1",
        "idx": 3494
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int sm2_plaintext_size(const EC_KEY *key, const EVP_MD *digest, size_t msg_len,\n                       size_t *pt_size)\n{\n    const size_t field_size = ec_field_size(EC_KEY_get0_group(key));\n    const int md_size = EVP_MD_size(digest);\n    size_t overhead;\n\n    if (md_size < 0) {\n        SM2err(SM2_F_SM2_PLAINTEXT_SIZE, SM2_R_INVALID_DIGEST);\n        return 0;\n    }\n    if (field_size == 0) {\n        SM2err(SM2_F_SM2_PLAINTEXT_SIZE, SM2_R_INVALID_FIELD);\n        return 0;\n    }\n\n    overhead = 10 + 2 * field_size + (size_t)md_size;\n    if (msg_len <= overhead) {\n        SM2err(SM2_F_SM2_PLAINTEXT_SIZE, SM2_R_INVALID_ENCODING);\n        return 0;\n    }\n\n    *pt_size = msg_len - overhead;\n    return 1;\n}",
        "output": "1",
        "idx": 6085
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void parse_type_bool(Visitor *v, const char *name, bool *obj,\n\n                            Error **errp)\n\n{\n\n    StringInputVisitor *siv = to_siv(v);\n\n\n\n    if (siv->string) {\n\n        if (!strcasecmp(siv->string, \"on\") ||\n\n            !strcasecmp(siv->string, \"yes\") ||\n\n            !strcasecmp(siv->string, \"true\")) {\n\n            *obj = true;\n\n            return;\n\n        }\n\n        if (!strcasecmp(siv->string, \"off\") ||\n\n            !strcasecmp(siv->string, \"no\") ||\n\n            !strcasecmp(siv->string, \"false\")) {\n\n            *obj = false;\n\n            return;\n\n        }\n\n    }\n\n\n\n    error_setg(errp, QERR_INVALID_PARAMETER_TYPE, name ? name : \"null\",\n\n               \"boolean\");\n\n}\n",
        "output": "1",
        "idx": 5359
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __io_cqring_fill_event(struct io_kiocb *req, long res, long cflags)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_uring_cqe *cqe;\n\n\ttrace_io_uring_complete(ctx, req->user_data, res);\n\n\t/*\n\t * If we can't get a cq entry, userspace overflowed the\n\t * submission (by quite a lot). Increment the overflow count in\n\t * the ring.\n\t */\n\tcqe = io_get_cqring(ctx);\n\tif (likely(cqe)) {\n\t\tWRITE_ONCE(cqe->user_data, req->user_data);\n\t\tWRITE_ONCE(cqe->res, res);\n\t\tWRITE_ONCE(cqe->flags, cflags);\n\t} else if (ctx->cq_overflow_flushed) {\n\t\tWRITE_ONCE(ctx->rings->cq_overflow,\n\t\t\t\tatomic_inc_return(&ctx->cached_cq_overflow));\n\t} else {\n\t\tif (list_empty(&ctx->cq_overflow_list)) {\n\t\t\tset_bit(0, &ctx->sq_check_overflow);\n\t\t\tset_bit(0, &ctx->cq_check_overflow);\n\t\t\tctx->rings->sq_flags |= IORING_SQ_CQ_OVERFLOW;\n\t\t}\n\t\tio_clean_op(req);\n\t\treq->result = res;\n\t\treq->compl.cflags = cflags;\n\t\trefcount_inc(&req->refs);\n\t\tlist_add_tail(&req->compl.list, &ctx->cq_overflow_list);\n\t}\n}",
        "output": "1",
        "idx": 305
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void SetPixelIndex(const Image *magick_restrict image,\n  const Quantum index,Quantum *magick_restrict pixel)\n{\n  if (image->channel_map[IndexPixelChannel].traits != UndefinedPixelTrait)\n    pixel[image->channel_map[IndexPixelChannel].offset]=index;\n}",
        "output": "0",
        "idx": 439
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_pulses(Pulse *pulse, GetBitContext *gb,\n                         const uint16_t *swb_offset, int num_swb)\n{\n    int i, pulse_swb;\n    pulse->num_pulse = get_bits(gb, 2) + 1;\n    pulse_swb        = get_bits(gb, 6);\n    if (pulse_swb >= num_swb)\n        return -1;\n    pulse->pos[0]    = swb_offset[pulse_swb];\n    pulse->pos[0]   += get_bits(gb, 5);\n    if (pulse->pos[0] > 1023)\n        return -1;\n    pulse->amp[0]    = get_bits(gb, 4);\n    for (i = 1; i < pulse->num_pulse; i++) {\n        pulse->pos[i] = get_bits(gb, 5) + pulse->pos[i - 1];\n        if (pulse->pos[i] > 1023)\n            return -1;\n        pulse->amp[i] = get_bits(gb, 4);\n    }\n    return 0;\n}",
        "output": "1",
        "idx": 4687
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_mmu_notifier_clear_flush_young(struct mmu_notifier *mn,\n\t\t\t\t\t      struct mm_struct *mm,\n\t\t\t\t\t      unsigned long start,\n\t\t\t\t\t      unsigned long end)\n{\n\tstruct kvm *kvm = mmu_notifier_to_kvm(mn);\n\tint young, idx;\n\n\tidx = srcu_read_lock(&kvm->srcu);\n\tspin_lock(&kvm->mmu_lock);\n\n\tyoung = kvm_age_hva(kvm, start, end);\n\tif (young)\n\t\tkvm_flush_remote_tlbs(kvm);\n\n\tspin_unlock(&kvm->mmu_lock);\n\tsrcu_read_unlock(&kvm->srcu, idx);\n\n\treturn young;\n}",
        "output": "0",
        "idx": 217
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t m5206_mbar_readl(void *opaque, target_phys_addr_t offset)\n\n{\n\n    m5206_mbar_state *s = (m5206_mbar_state *)opaque;\n\n    int width;\n\n    offset &= 0x3ff;\n\n    if (offset >= 0x200) {\n\n        hw_error(\"Bad MBAR read offset 0x%x\", (int)offset);\n\n    }\n\n    width = m5206_mbar_width[offset >> 2];\n\n    if (width < 4) {\n\n        uint32_t val;\n\n        val = m5206_mbar_readw(opaque, offset) << 16;\n\n        val |= m5206_mbar_readw(opaque, offset + 2);\n\n        return val;\n\n    }\n\n    return m5206_mbar_read(s, offset, 4);\n\n}\n",
        "output": "0",
        "idx": 5824
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tcp_chr_read(void *opaque)\n\n{\n\n    CharDriverState *chr = opaque;\n\n    TCPCharDriver *s = chr->opaque;\n\n    uint8_t buf[READ_BUF_LEN];\n\n    int len, size;\n\n\n\n    if (!s->connected || s->max_size <= 0)\n\n        return;\n\n    len = sizeof(buf);\n\n    if (len > s->max_size)\n\n        len = s->max_size;\n\n    size = tcp_chr_recv(chr, (void *)buf, len);\n\n    if (size == 0) {\n\n        /* connection closed */\n\n        s->connected = 0;\n\n        if (s->listen_fd >= 0) {\n\n            qemu_set_fd_handler(s->listen_fd, tcp_chr_accept, NULL, chr);\n\n        }\n\n        qemu_set_fd_handler(s->fd, NULL, NULL, NULL);\n\n        closesocket(s->fd);\n\n        s->fd = -1;\n\n        qemu_chr_event(chr, CHR_EVENT_CLOSED);\n\n    } else if (size > 0) {\n\n        if (s->do_telnetopt)\n\n            tcp_chr_process_IAC_bytes(chr, s, buf, &size);\n\n        if (size > 0)\n\n            qemu_chr_read(chr, buf, size);\n\n        if (s->msgfd != -1) {\n\n            close(s->msgfd);\n\n            s->msgfd = -1;\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2586
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void allocHealthChecker(const std::string& yaml) {\n    health_checker_ = std::make_shared<TestProdHttpHealthChecker>(\n        *cluster_, parseHealthCheckFromV3Yaml(yaml), dispatcher_, runtime_, random_,\n        HealthCheckEventLoggerPtr(event_logger_storage_.release()));\n  }",
        "output": "0",
        "idx": 1655
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool CIRCSock::OnPartMessage(CPartMessage& Message) {\n    const CNick& Nick = Message.GetNick();\n    CString sChan = Message.GetTarget();\n\n    CChan* pChan = m_pNetwork->FindChan(sChan);\n    bool bDetached = false;\n    if (pChan) {\n        pChan->RemNick(Nick.GetNick());\n        Message.SetChan(pChan);\n        IRCSOCKMODULECALL(OnPartMessage(Message), NOTHING);\n\n        if (pChan->IsDetached()) bDetached = true;\n    }\n\n    if (Nick.NickEquals(GetNick())) {\n        m_pNetwork->DelChan(sChan);\n    }\n\n    /*\n     * We use this boolean because\n     * m_pNetwork->DelChan() will delete this channel\n     * and thus we would dereference an\n     * already-freed pointer!\n     */\n    return bDetached;\n}",
        "output": "0",
        "idx": 3937
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool _db_chain_lt(const struct db_arg_chain_tree *a,\n\t\t\t const struct db_arg_chain_tree *b)\n{\n\treturn ((a->arg < b->arg) ||\n\t\t((a->arg == b->arg) &&\n\t\t ((a->op < b->op) ||\n\t\t  ((a->op == b->op) &&\n\t\t   ((a->mask < b->mask) ||\n\t\t    ((a->mask == b->mask) &&\n\t\t     (a->datum < b->datum)))))));\n}",
        "output": "1",
        "idx": 3881
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void set_store_user_dirty(struct kmem_cache *cachep)\n{\n\tif (is_store_user_clean(cachep))\n\t\tatomic_set(&cachep->store_user_clean, 0);\n}",
        "output": "0",
        "idx": 4522
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_writev_vmstate(BlockDriverState *bs, QEMUIOVector *qiov, int64_t pos)\n\n{\n\n    BlockDriver *drv = bs->drv;\n\n\n\n    if (!drv) {\n\n        return -ENOMEDIUM;\n\n    } else if (drv->bdrv_save_vmstate) {\n\n        return drv->bdrv_save_vmstate(bs, qiov, pos);\n\n    } else if (bs->file) {\n\n        return bdrv_writev_vmstate(bs->file, qiov, pos);\n\n    }\n\n\n\n    return -ENOTSUP;\n\n}\n",
        "output": "0",
        "idx": 75
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void blockdev_mark_auto_del(BlockDriverState *bs)\n\n{\n\n    BlockBackend *blk = bs->blk;\n\n    DriveInfo *dinfo = blk_legacy_dinfo(blk);\n\n\n\n    if (dinfo && !dinfo->enable_auto_del) {\n\n        return;\n\n    }\n\n\n\n    if (bs->job) {\n\n        block_job_cancel(bs->job);\n\n    }\n\n    if (dinfo) {\n\n        dinfo->auto_del = 1;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5930
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pci_unin_map_irq(PCIDevice *pci_dev, int irq_num)\n\n{\n\n    int retval;\n\n    int devfn = pci_dev->devfn & 0x00FFFFFF;\n\n\n\n    retval = (((devfn >> 11) & 0x1F) + irq_num) & 3;\n\n\n\n    return retval;\n\n}\n",
        "output": "0",
        "idx": 2917
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void recovery_abort(void) {\n    if (!dry_run) {\n        storage_reset();\n    }\n\n    awaiting_character = false;\n    memzero(mnemonic, sizeof(mnemonic));\n    memzero(cipher, sizeof(cipher));\n}",
        "output": "1",
        "idx": 2686
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct omap_pwt_s *omap_pwt_init(MemoryRegion *system_memory,\n\n                                        target_phys_addr_t base,\n\n                                        omap_clk clk)\n\n{\n\n    struct omap_pwt_s *s = g_malloc0(sizeof(*s));\n\n    s->clk = clk;\n\n    omap_pwt_reset(s);\n\n\n\n    memory_region_init_io(&s->iomem, &omap_pwt_ops, s,\n\n                          \"omap-pwt\", 0x800);\n\n    memory_region_add_subregion(system_memory, base, &s->iomem);\n\n    return s;\n\n}\n",
        "output": "0",
        "idx": 1095
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "correct_table_matrix(struct table *t, int col, int cspan, int a, double b)\n{\n    int i, j;\n    int ecol = col + cspan;\n    double w = 1. / (b * b);\n\n    for (i = col; i < ecol; i++) {\n\tv_add_val(t->vector, i, w * a);\n\tfor (j = i; j < ecol; j++) {\n\t    m_add_val(t->matrix, i, j, w);\n\t    m_set_val(t->matrix, j, i, m_entry(t->matrix, i, j));\n\t}\n    }\n    return i;\n}",
        "output": "0",
        "idx": 2529
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static DeviceState *sun4c_intctl_init(target_phys_addr_t addr,\n\n                                      qemu_irq *parent_irq)\n\n{\n\n    DeviceState *dev;\n\n    SysBusDevice *s;\n\n    unsigned int i;\n\n\n\n    dev = qdev_create(NULL, \"sun4c_intctl\");\n\n    qdev_init(dev);\n\n\n\n    s = sysbus_from_qdev(dev);\n\n\n\n    for (i = 0; i < MAX_PILS; i++) {\n\n        sysbus_connect_irq(s, i, parent_irq[i]);\n\n    }\n\n    sysbus_mmio_map(s, 0, addr);\n\n\n\n    return dev;\n\n}\n",
        "output": "1",
        "idx": 1650
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "     (CirrusVGAState *s,\n      uint8_t *dst, int dst_pitch,\n      int width, int height)\n{\n    uint8_t *d, *d1;\n    uint32_t col;\n    int x, y;\n\n    col = s->cirrus_blt_fgcol;\n\n    d1 = dst;\n    for(y = 0; y < height; y++) {\n        d = d1;\n        for(x = 0; x < width; x += (DEPTH / 8)) {\n            PUTPIXEL();\n            d += (DEPTH / 8);\n        }\n        d1 += dst_pitch;\n    }\n}",
        "output": "1",
        "idx": 2365
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void branch(DBDMA_channel *ch)\n\n{\n\n    dbdma_cmd *current = &ch->current;\n\n\n\n    ch->regs[DBDMA_CMDPTR_LO] = current->cmd_dep;\n\n    ch->regs[DBDMA_STATUS] |= cpu_to_be32(BT);\n\n    dbdma_cmdptr_load(ch);\n\n}\n",
        "output": "0",
        "idx": 1464
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mz_bool tdefl_compress_mem_to_output(const void *pBuf, size_t buf_len,\n                                     tdefl_put_buf_func_ptr pPut_buf_func,\n                                     void *pPut_buf_user, int flags) {\n  tdefl_compressor *pComp;\n  mz_bool succeeded;\n  if (((buf_len) && (!pBuf)) || (!pPut_buf_func)) return MZ_FALSE;\n  pComp = (tdefl_compressor *)MZ_MALLOC(sizeof(tdefl_compressor));\n  if (!pComp) return MZ_FALSE;\n  succeeded = (tdefl_init(pComp, pPut_buf_func, pPut_buf_user, flags) ==\n               TDEFL_STATUS_OKAY);\n  succeeded =\n      succeeded && (tdefl_compress_buffer(pComp, pBuf, buf_len, TDEFL_FINISH) ==\n                    TDEFL_STATUS_DONE);\n  MZ_FREE(pComp);\n  return succeeded;\n}",
        "output": "0",
        "idx": 4294
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GC_API GC_ATTR_MALLOC void * GC_CALL GC_malloc_explicitly_typed(size_t lb,\n                                                                GC_descr d)\n{\n    word *op;\n    size_t lg;\n\n    GC_ASSERT(GC_explicit_typing_initialized);\n    lb += TYPD_EXTRA_BYTES;\n    op = GC_malloc_kind(lb, GC_explicit_kind);\n    if (EXPECT(NULL == op, FALSE))\n        return NULL;\n    lg = SMALL_OBJ(lb) ? GC_size_map[lb] : BYTES_TO_GRANULES(GC_size(op));\n    op[GRANULES_TO_WORDS(lg) - 1] = d;\n    return op;\n}",
        "output": "1",
        "idx": 1981
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "semantic_type_new (uniqstr tag, const location *loc)\n{\n  semantic_type *res = xmalloc (sizeof *res);\n\n  uniqstr_assert (tag);\n  res->tag = tag;\n  res->location = loc ? *loc : empty_loc;\n  res->status = undeclared;\n  for (int i = 0; i < CODE_PROPS_SIZE; ++i)\n    code_props_none_init (&res->props[i]);\n\n  return res;\n}",
        "output": "0",
        "idx": 658
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BOOL update_write_scrblt_order(wStream* s, ORDER_INFO* orderInfo, const SCRBLT_ORDER* scrblt)\n{\n\tif (!Stream_EnsureRemainingCapacity(s, update_approximate_scrblt_order(orderInfo, scrblt)))\n\t\treturn FALSE;\n\n\torderInfo->fieldFlags = 0;\n\torderInfo->fieldFlags |= ORDER_FIELD_01;\n\tupdate_write_coord(s, scrblt->nLeftRect);\n\torderInfo->fieldFlags |= ORDER_FIELD_02;\n\tupdate_write_coord(s, scrblt->nTopRect);\n\torderInfo->fieldFlags |= ORDER_FIELD_03;\n\tupdate_write_coord(s, scrblt->nWidth);\n\torderInfo->fieldFlags |= ORDER_FIELD_04;\n\tupdate_write_coord(s, scrblt->nHeight);\n\torderInfo->fieldFlags |= ORDER_FIELD_05;\n\tStream_Write_UINT8(s, scrblt->bRop);\n\torderInfo->fieldFlags |= ORDER_FIELD_06;\n\tupdate_write_coord(s, scrblt->nXSrc);\n\torderInfo->fieldFlags |= ORDER_FIELD_07;\n\tupdate_write_coord(s, scrblt->nYSrc);\n\treturn TRUE;\n}",
        "output": "0",
        "idx": 5702
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const AST *ast_iter(const AST *a, uint32_t n, uint32_t m)\n{\n    AST *ast = new AST(a->loc, AST::ITER);\n    ast->iter.ast = a;\n    ast->iter.min = n;\n    ast->iter.max = m;\n    return ast;\n}",
        "output": "1",
        "idx": 3681
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "evbuffer_ptr_memcmp(const struct evbuffer *buf, const struct evbuffer_ptr *pos,\n    const char *mem, size_t len)\n{\n\tstruct evbuffer_chain *chain;\n\tsize_t position;\n\tint r;\n\n\tASSERT_EVBUFFER_LOCKED(buf);\n\n\tif (pos->pos + len > buf->total_len)\n\t\treturn -1;\n\n\tchain = pos->_internal.chain;\n\tposition = pos->_internal.pos_in_chain;\n\twhile (len && chain) {\n\t\tsize_t n_comparable;\n\t\tif (len + position > chain->off)\n\t\t\tn_comparable = chain->off - position;\n\t\telse\n\t\t\tn_comparable = len;\n\t\tr = memcmp(chain->buffer + chain->misalign + position, mem,\n\t\t    n_comparable);\n\t\tif (r)\n\t\t\treturn r;\n\t\tmem += n_comparable;\n\t\tlen -= n_comparable;\n\t\tposition = 0;\n\t\tchain = chain->next;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 5564
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ecEncCtx* wc_ecc_ctx_new_ex(int flags, WC_RNG* rng, void* heap)\n{\n    int       ret = 0;\n    ecEncCtx* ctx = (ecEncCtx*)XMALLOC(sizeof(ecEncCtx), heap,\n                                                              DYNAMIC_TYPE_ECC);\n\n    if (ctx) {\n        ctx->protocol = (byte)flags;\n        ctx->heap     = heap;\n    }\n\n    ret = wc_ecc_ctx_reset(ctx, rng);\n    if (ret != 0) {\n        wc_ecc_ctx_free(ctx);\n        ctx = NULL;\n    }\n\n    return ctx;\n}",
        "output": "0",
        "idx": 4009
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vmxnet3_dump_rx_descr(struct Vmxnet3_RxDesc *descr)\n\n{\n\n    VMW_PKPRN(\"RX DESCR: addr %\" PRIx64 \", len: %d, gen: %d, rsvd: %d, \"\n\n              \"dtype: %d, ext1: %d, btype: %d\",\n\n              le64_to_cpu(descr->addr), descr->len, descr->gen,\n\n              descr->rsvd, descr->dtype, descr->ext1, descr->btype);\n\n}\n",
        "output": "1",
        "idx": 2636
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cris_cpu_initfn(Object *obj)\n\n{\n\n    CPUState *cs = CPU(obj);\n\n    CRISCPU *cpu = CRIS_CPU(obj);\n\n    CRISCPUClass *ccc = CRIS_CPU_GET_CLASS(obj);\n\n    CPUCRISState *env = &cpu->env;\n\n    static bool tcg_initialized;\n\n\n\n    cs->env_ptr = env;\n\n    cpu_exec_init(cs, &error_abort);\n\n\n\n    env->pregs[PR_VR] = ccc->vr;\n\n\n\n#ifndef CONFIG_USER_ONLY\n\n    /* IRQ and NMI lines.  */\n\n    qdev_init_gpio_in(DEVICE(cpu), cris_cpu_set_irq, 2);\n\n#endif\n\n\n\n    if (tcg_enabled() && !tcg_initialized) {\n\n        tcg_initialized = true;\n\n        if (env->pregs[PR_VR] < 32) {\n\n            cris_initialize_crisv10_tcg();\n\n        } else {\n\n            cris_initialize_tcg();\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2560
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xfs_itruncate_clear_reflink_flags(\n\tstruct xfs_inode\t*ip)\n{\n\tstruct xfs_ifork\t*dfork;\n\tstruct xfs_ifork\t*cfork;\n\n\tif (!xfs_is_reflink_inode(ip))\n\t\treturn;\n\tdfork = XFS_IFORK_PTR(ip, XFS_DATA_FORK);\n\tcfork = XFS_IFORK_PTR(ip, XFS_COW_FORK);\n\tif (dfork->if_bytes == 0 && cfork->if_bytes == 0)\n\t\tip->i_d.di_flags2 &= ~XFS_DIFLAG2_REFLINK;\n\tif (cfork->if_bytes == 0)\n\t\txfs_inode_clear_cowblocks_tag(ip);\n}",
        "output": "0",
        "idx": 6051
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int udf_encode_fh(struct inode *inode, __u32 *fh, int *lenp,\n\t\t\t struct inode *parent)\n{\n\tint len = *lenp;\n\tstruct kernel_lb_addr location = UDF_I(inode)->i_location;\n\tstruct fid *fid = (struct fid *)fh;\n\tint type = FILEID_UDF_WITHOUT_PARENT;\n\n\tif (parent && (len < 5)) {\n\t\t*lenp = 5;\n\t\treturn 255;\n\t} else if (len < 3) {\n\t\t*lenp = 3;\n\t\treturn 255;\n\t}\n\n\t*lenp = 3;\n\tfid->udf.block = location.logicalBlockNum;\n\tfid->udf.partref = location.partitionReferenceNum;\n\tfid->udf.generation = inode->i_generation;\n\n\tif (parent) {\n\t\tlocation = UDF_I(parent)->i_location;\n\t\tfid->udf.parent_block = location.logicalBlockNum;\n\t\tfid->udf.parent_partref = location.partitionReferenceNum;\n\t\tfid->udf.parent_generation = inode->i_generation;\n\t\t*lenp = 5;\n\t\ttype = FILEID_UDF_WITH_PARENT;\n\t}\n\n\treturn type;\n}",
        "output": "1",
        "idx": 6089
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "test_non_svg_element (void)\n{\n    char *filename = get_test_filename (\"335-non-svg-element.svg\");\n    RsvgHandle *handle;\n    GError *error = NULL;\n\n    handle = rsvg_handle_new_from_file (filename, &error);\n    g_free (filename);\n\n    g_assert (handle == NULL);\n    g_assert (g_error_matches (error, RSVG_ERROR, RSVG_ERROR_FAILED));\n\n    g_error_free (error);\n}",
        "output": "1",
        "idx": 1882
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LDAPDN_rewrite( LDAPDN dn, unsigned flags, void *ctx )\n{\n\tint \t\tiRDN;\n\tint \t\trc;\n\n\tassert( dn != NULL );\n\n\tfor ( iRDN = 0; dn[ iRDN ]; iRDN++ ) {\n\t\trc = LDAPRDN_rewrite( dn[ iRDN ], flags, ctx );\n\t\tif ( rc != LDAP_SUCCESS ) {\n\t\t\treturn rc;\n\t\t}\n\t}\n\n\treturn LDAP_SUCCESS;\n}",
        "output": "0",
        "idx": 1407
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(bccomp)\n{\n\tchar *left, *right;\n\tint left_len, right_len;\n\tlong scale_param = 0;\n\tbc_num first, second;\n\tint scale = BCG(bc_precision), argc = ZEND_NUM_ARGS();\n\n\tif (zend_parse_parameters(argc TSRMLS_CC, \"ss|l\", &left, &left_len, &right, &right_len, &scale_param) == FAILURE) {\n\t\treturn;\n\t}\n\t\n\tif (argc == 3) {\n\t\tscale = (int) ((int)scale_param < 0) ? 0 : scale_param;\n\t}\n\n\tbc_init_num(&first TSRMLS_CC);\n\tbc_init_num(&second TSRMLS_CC);\n\n\tbc_str2num(&first, left, scale TSRMLS_CC);\n\tbc_str2num(&second, right, scale TSRMLS_CC);\n\tZ_LVAL_P(return_value) = bc_compare(first, second);\n\tZ_TYPE_P(return_value) = IS_LONG;\n\n\tbc_free_num(&first);\n\tbc_free_num(&second);\n\treturn;\n}",
        "output": "1",
        "idx": 450
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const char *pxb_host_root_bus_path(PCIHostState *host_bridge,\n\n                                          PCIBus *rootbus)\n\n{\n\n    PXBBus *bus = PXB_BUS(rootbus);\n\n\n\n    snprintf(bus->bus_path, 8, \"0000:%02x\", pxb_bus_num(rootbus));\n\n    return bus->bus_path;\n\n}\n",
        "output": "0",
        "idx": 2062
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static enum led_brightness k90_backlight_get(struct led_classdev *led_cdev)\n{\n\tint ret;\n\tstruct k90_led *led = container_of(led_cdev, struct k90_led, cdev);\n\tstruct device *dev = led->cdev.dev->parent;\n\tstruct usb_interface *usbif = to_usb_interface(dev->parent);\n\tstruct usb_device *usbdev = interface_to_usbdev(usbif);\n\tint brightness;\n\tchar data[8];\n\n\tret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0),\n\t\t\t      K90_REQUEST_STATUS,\n\t\t\t      USB_DIR_IN | USB_TYPE_VENDOR |\n\t\t\t      USB_RECIP_DEVICE, 0, 0, data, 8,\n\t\t\t      USB_CTRL_SET_TIMEOUT);\n\tif (ret < 0) {\n\t\tdev_warn(dev, \"Failed to get K90 initial state (error %d).\\n\",\n\t\t\t ret);\n\t\treturn -EIO;\n\t}\n\tbrightness = data[4];\n\tif (brightness < 0 || brightness > 3) {\n\t\tdev_warn(dev,\n\t\t\t \"Read invalid backlight brightness: %02hhx.\\n\",\n\t\t\t data[4]);\n\t\treturn -EIO;\n\t}\n\treturn brightness;\n}",
        "output": "1",
        "idx": 3342
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    std::string help() const override {\n        return \"count objects in collection\";\n    }",
        "output": "0",
        "idx": 3556
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int cpu_of(struct rq *rq)\n{\n#ifdef CONFIG_SMP\n\treturn rq->cpu;\n#else\n\treturn 0;\n#endif\n}",
        "output": "0",
        "idx": 3577
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static size_t buffered_set_rate_limit(void *opaque, size_t new_rate)\n\n{\n\n    QEMUFileBuffered *s = opaque;\n\n\n\n    if (s->has_error)\n\n        goto out;\n\n\n\n    s->xfer_limit = new_rate / 10;\n\n    \n\nout:\n\n    return s->xfer_limit;\n\n}\n",
        "output": "0",
        "idx": 609
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err tfdt_box_dump(GF_Box *a, FILE * trace)\n{\n\tGF_TFBaseMediaDecodeTimeBox *ptr = (GF_TFBaseMediaDecodeTimeBox*) a;\n\tif (!a) return GF_BAD_PARAM;\n\tgf_isom_box_dump_start(a, \"TrackFragmentBaseMediaDecodeTimeBox\", trace);\n\n\tgf_fprintf(trace, \"baseMediaDecodeTime=\\\"\"LLD\"\\\">\\n\", ptr->baseMediaDecodeTime);\n\tgf_isom_box_dump_done(\"TrackFragmentBaseMediaDecodeTimeBox\", a, trace);\n\treturn GF_OK;\n}",
        "output": "0",
        "idx": 2121
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int dane_verify_session_crt (\n        dane_state_t s,\n\tgnutls_session_t session,\n\tconst char * hostname, const char* proto, unsigned int port,\n\tunsigned int sflags, unsigned int vflags,\n\tunsigned int *verify)\n{\nconst gnutls_datum_t *cert_list;\nunsigned int cert_list_size = 0;\nunsigned int type;\n\n\tcert_list = gnutls_certificate_get_peers(session, &cert_list_size);\n\tif (cert_list_size == 0) {\n\t\treturn gnutls_assert_val(DANE_E_NO_CERT);\n\t}\n\t\n\ttype = gnutls_certificate_type_get(session);\n\t\n\treturn dane_verify_crt(s, cert_list, cert_list_size, type, hostname, proto, port, sflags, vflags, verify);\n}",
        "output": "1",
        "idx": 1441
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int muscle_list_files(sc_card_t *card, u8 *buf, size_t bufLen)\n{\n\tmuscle_private_t* priv = MUSCLE_DATA(card);\n\tmscfs_t *fs = priv->fs;\n\tint x;\n\tint count = 0;\n\n\tmscfs_check_cache(priv->fs);\n\n\tfor(x = 0; x < fs->cache.size; x++) {\n\t\tu8* oid= fs->cache.array[x].objectId.id;\n\t\tsc_debug(card->ctx, SC_LOG_DEBUG_NORMAL,\n\t\t\t\"FILE: %02X%02X%02X%02X\\n\",\n\t\t\toid[0],oid[1],oid[2],oid[3]);\n\t\tif(0 == memcmp(fs->currentPath, oid, 2)) {\n\t\t\tbuf[0] = oid[2];\n\t\t\tbuf[1] = oid[3];\n\t\t\tif(buf[0] == 0x00 && buf[1] == 0x00) continue; /* No directories/null names outside of root */\n\t\t\tbuf += 2;\n\t\t\tcount+=2;\n\t\t}\n\t}\n\treturn count;\n}",
        "output": "1",
        "idx": 3257
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SYSCALL_DEFINE1(getsid, pid_t, pid)\n{\n\tstruct task_struct *p;\n\tstruct pid *sid;\n\tint retval;\n\n\trcu_read_lock();\n\tif (!pid)\n\t\tsid = task_session(current);\n\telse {\n\t\tretval = -ESRCH;\n\t\tp = find_task_by_vpid(pid);\n\t\tif (!p)\n\t\t\tgoto out;\n\t\tsid = task_session(p);\n\t\tif (!sid)\n\t\t\tgoto out;\n\n\t\tretval = security_task_getsid(p);\n\t\tif (retval)\n\t\t\tgoto out;\n\t}\n\tretval = pid_vnr(sid);\nout:\n\trcu_read_unlock();\n\treturn retval;\n}",
        "output": "0",
        "idx": 1851
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "StringVal EncryptionFunctions::from_base64(FunctionContext* ctx, const StringVal& src) {\n    if (src.len == 0 || src.is_null) {\n        return StringVal::null();\n    }\n\n    int cipher_len = src.len;\n    std::unique_ptr<char[]> p;\n    p.reset(new char[cipher_len]);\n\n    int ret_code = base64_decode((const char*)src.ptr, src.len, p.get());\n    if (ret_code < 0) {\n        return StringVal::null();\n    }\n    return AnyValUtil::from_buffer_temp(ctx, p.get(), ret_code);\n}",
        "output": "1",
        "idx": 404
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void spapr_vlan_cleanup(NetClientState *nc)\n\n{\n\n    VIOsPAPRVLANDevice *dev = qemu_get_nic_opaque(nc);\n\n\n\n    dev->nic = NULL;\n\n}\n",
        "output": "0",
        "idx": 64
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_buffer(QEMUFile *f, void *pv, size_t size)\n\n{\n\n    uint8_t *v = pv;\n\n    qemu_get_buffer(f, v, size);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2187
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_offset(char *memory, int total_size, char *name, void *offset, int size)\n{\n\tptrdiff_t need_size = (char *) offset - memory + size;\n\n\t/*debug(\"check_offset: size=%x vs %x offset=%x size=%x\\n\",\n\t\tneed_size, total_size, (char *) offset - memory, size);*/\n\n\tif (need_size < 0 || need_size > total_size) {\n\t\twarn(_(\"%s: premature end\"), name);\n\t\treturn false;\n\t}\n\n\treturn true;\n}",
        "output": "1",
        "idx": 4366
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LIR_Address* LIRGenerator::emit_array_address(LIR_Opr array_opr, LIR_Opr index_opr,\n                                              BasicType type) {\n  int offset_in_bytes = arrayOopDesc::base_offset_in_bytes(type);\n\n  LIR_Address* addr;\n  if (index_opr->is_constant()) {\n    int elem_size = type2aelembytes(type);\n    addr = new LIR_Address(array_opr,\n                           offset_in_bytes + (intx)(index_opr->as_jint()) * elem_size, type);\n  } else {\n#ifdef _LP64\n    if (index_opr->type() == T_INT) {\n      LIR_Opr tmp = new_register(T_LONG);\n      __ convert(Bytecodes::_i2l, index_opr, tmp);\n      index_opr = tmp;\n    }\n#endif // _LP64\n    addr =  new LIR_Address(array_opr,\n                            index_opr,\n                            LIR_Address::scale(type),\n                            offset_in_bytes, type);\n  }\n  return addr;\n}",
        "output": "1",
        "idx": 106
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "u_savesub(linenr_T lnum)\n{\n    if (undo_off)\n\treturn OK;\n\n    return (u_savecommon(lnum - 1, lnum + 1, lnum + 1, FALSE));\n}",
        "output": "0",
        "idx": 4054
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int qemu_reset_requested(void)\n\n{\n\n    int r = reset_requested;\n\n    if (r && replay_checkpoint(CHECKPOINT_RESET_REQUESTED)) {\n\n        reset_requested = 0;\n\n        return r;\n\n    }\n\n    return false;\n\n}\n",
        "output": "1",
        "idx": 4927
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int connect_namedsocket(const char *path)\n\n{\n\n    int sockfd, size;\n\n    struct sockaddr_un helper;\n\n\n\n    if (strlen(path) >= sizeof(helper.sun_path)) {\n\n        fprintf(stderr, \"Socket name too large\\n\");\n\n        return -1;\n\n    }\n\n    sockfd = socket(AF_UNIX, SOCK_STREAM, 0);\n\n    if (sockfd < 0) {\n\n        fprintf(stderr, \"failed to create socket: %s\\n\", strerror(errno));\n\n        return -1;\n\n    }\n\n    strcpy(helper.sun_path, path);\n\n    helper.sun_family = AF_UNIX;\n\n    size = strlen(helper.sun_path) + sizeof(helper.sun_family);\n\n    if (connect(sockfd, (struct sockaddr *)&helper, size) < 0) {\n\n        fprintf(stderr, \"failed to connect to %s: %s\\n\", path, strerror(errno));\n\n        close(sockfd);\n\n        return -1;\n\n    }\n\n\n\n    /* remove the socket for security reasons */\n\n    unlink(path);\n\n    return sockfd;\n\n}\n",
        "output": "0",
        "idx": 1616
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(PlaintextRecordTest, TestReadAppData) {\n  addToQueue(\"17030100050123456789\");\n  EXPECT_ANY_THROW(read_.read(queue_));\n}",
        "output": "0",
        "idx": 5476
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static QEMUCursor *qxl_cursor(PCIQXLDevice *qxl, QXLCursor *cursor,\n\n                              uint32_t group_id)\n\n{\n\n    QEMUCursor *c;\n\n    size_t size;\n\n\n\n    c = cursor_alloc(cursor->header.width, cursor->header.height);\n\n    c->hot_x = cursor->header.hot_spot_x;\n\n    c->hot_y = cursor->header.hot_spot_y;\n\n    switch (cursor->header.type) {\n\n    case SPICE_CURSOR_TYPE_ALPHA:\n\n        size = sizeof(uint32_t) * cursor->header.width * cursor->header.height;\n\n        qxl_unpack_chunks(c->data, size, qxl, &cursor->chunk, group_id);\n\n        if (qxl->debug > 2) {\n\n            cursor_print_ascii_art(c, \"qxl/alpha\");\n\n        }\n\n        break;\n\n    default:\n\n        fprintf(stderr, \"%s: not implemented: type %d\\n\",\n\n                __FUNCTION__, cursor->header.type);\n\n        goto fail;\n\n    }\n\n    return c;\n\n\n\nfail:\n\n    cursor_put(c);\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 3841
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "have_handshake_fragment(SSL *s, int type, unsigned char *buf,\n                        int len, int peek)\n{\n\n    if ((type == SSL3_RT_HANDSHAKE) && (s->d1->handshake_fragment_len > 0))\n        /* (partially) satisfy request from storage */\n    {\n        unsigned char *src = s->d1->handshake_fragment;\n        unsigned char *dst = buf;\n        unsigned int k, n;\n\n        /* peek == 0 */\n        n = 0;\n        while ((len > 0) && (s->d1->handshake_fragment_len > 0)) {\n            *dst++ = *src++;\n            len--;\n            s->d1->handshake_fragment_len--;\n            n++;\n        }\n        /* move any remaining fragment bytes: */\n        for (k = 0; k < s->d1->handshake_fragment_len; k++)\n            s->d1->handshake_fragment[k] = *src++;\n        return n;\n    }\n\n    return 0;\n}",
        "output": "0",
        "idx": 19
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t helper_bcdsetsgn(ppc_avr_t *r, ppc_avr_t *b, uint32_t ps)\n\n{\n\n    int i;\n\n    int invalid = 0;\n\n    int sgnb = bcd_get_sgn(b);\n\n\n\n    *r = *b;\n\n    bcd_put_digit(r, bcd_preferred_sgn(sgnb, ps), 0);\n\n\n\n    for (i = 1; i < 32; i++) {\n\n        bcd_get_digit(b, i, &invalid);\n\n        if (unlikely(invalid)) {\n\n            return CRF_SO;\n\n        }\n\n    }\n\n\n\n    return bcd_cmp_zero(r);\n\n}\n",
        "output": "0",
        "idx": 3407
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nstatic struct file *io_file_get_normal(struct io_kiocb *req, int fd)\n{\n\tstruct file *file = fget(fd);\n\n\ttrace_io_uring_file_get(req->ctx, req, req->cqe.user_data, fd);\n\n\t/* we don't allow fixed io_uring files */\n\tif (file && file->f_op == &io_uring_fops)\n\t\treq->flags |= REQ_F_INFLIGHT;\n\treturn file;",
        "output": "1",
        "idx": 3182
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cancel_att_send_op(struct att_send_op *op)\n{\n\tif (op->destroy)\n\t\top->destroy(op->user_data);\n\n\top->user_data = NULL;\n\top->callback = NULL;\n\top->destroy = NULL;\n}",
        "output": "1",
        "idx": 1105
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rtas_read_pci_config(sPAPREnvironment *spapr,\n\n                                 uint32_t token, uint32_t nargs,\n\n                                 target_ulong args,\n\n                                 uint32_t nret, target_ulong rets)\n\n{\n\n    uint32_t val, size, addr;\n\n    PCIDevice *dev = find_dev(spapr, 0, rtas_ld(args, 0));\n\n\n\n    if (!dev) {\n\n        rtas_st(rets, 0, -1);\n\n        return;\n\n    }\n\n    size = rtas_ld(args, 1);\n\n    addr = rtas_pci_cfgaddr(rtas_ld(args, 0));\n\n    val = pci_host_config_read_common(dev, addr, pci_config_size(dev), size);\n\n    rtas_st(rets, 0, 0);\n\n    rtas_st(rets, 1, val);\n\n}\n",
        "output": "0",
        "idx": 1898
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t aio_setup_single_vector(struct kiocb *kiocb,\n\t\t\t\t       int rw, char __user *buf,\n\t\t\t\t       unsigned long *nr_segs,\n\t\t\t\t       size_t len,\n\t\t\t\t       struct iovec *iovec)\n{\n\tif (unlikely(!access_ok(!rw, buf, len)))\n\t\treturn -EFAULT;\n\n\tiovec->iov_base = buf;\n\tiovec->iov_len = len;\n\t*nr_segs = 1;\n\treturn 0;\n}",
        "output": "1",
        "idx": 4557
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int update_remove_entry(struct libmnt_update *upd, struct libmnt_lock *lc)\n{\n\tstruct libmnt_table *tb;\n\tint rc = 0, u_lc = -1;\n\n\tassert(upd);\n\tassert(upd->target);\n\n\tDBG(UPDATE, mnt_debug_h(upd, \"%s: remove entry\", upd->filename));\n\n\tif (lc)\n\t\tmnt_lock_file(lc);\n\telse if (upd->userspace_only)\n\t\tu_lc = utab_lock(upd->filename);\n\n\ttb = __mnt_new_table_from_file(upd->filename,\n\t\t\tupd->userspace_only ? MNT_FMT_UTAB : MNT_FMT_MTAB);\n\tif (tb) {\n\t\tstruct libmnt_fs *rem = mnt_table_find_target(tb, upd->target, MNT_ITER_BACKWARD);\n\t\tif (rem) {\n\t\t\tmnt_table_remove_fs(tb, rem);\n\t\t\trc = update_table(upd, tb);\n\t\t\tmnt_free_fs(rem);\n\t\t}\n\t}\n\tif (lc)\n\t\tmnt_unlock_file(lc);\n\telse if (u_lc != -1)\n\t\tutab_unlock(u_lc);\n\n\tmnt_free_table(tb);\n\treturn rc;\n}",
        "output": "1",
        "idx": 876
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_exec_init(CPUState *cpu, Error **errp)\n\n{\n\n    CPUClass *cc ATTRIBUTE_UNUSED = CPU_GET_CLASS(cpu);\n\n\n\n    cpu_list_add(cpu);\n\n\n\n#ifndef CONFIG_USER_ONLY\n\n    if (qdev_get_vmsd(DEVICE(cpu)) == NULL) {\n\n        vmstate_register(NULL, cpu->cpu_index, &vmstate_cpu_common, cpu);\n\n    }\n\n    if (cc->vmsd != NULL) {\n\n        vmstate_register(NULL, cpu->cpu_index, cc->vmsd, cpu);\n\n    }\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 2616
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void v9fs_flush(void *opaque)\n\n{\n\n    int16_t tag;\n\n    size_t offset = 7;\n\n    V9fsPDU *cancel_pdu;\n\n    V9fsPDU *pdu = opaque;\n\n    V9fsState *s = pdu->s;\n\n\n\n    pdu_unmarshal(pdu, offset, \"w\", &tag);\n\n\n\n\n    QLIST_FOREACH(cancel_pdu, &s->active_list, next) {\n\n        if (cancel_pdu->tag == tag) {\n\n            break;\n\n        }\n\n    }\n\n    if (cancel_pdu) {\n\n        cancel_pdu->cancelled = 1;\n\n        /*\n\n         * Wait for pdu to complete.\n\n         */\n\n        qemu_co_queue_wait(&cancel_pdu->complete);\n\n        cancel_pdu->cancelled = 0;\n\n        free_pdu(pdu->s, cancel_pdu);\n\n    }\n\n    complete_pdu(s, pdu, 7);\n\n    return;\n\n}",
        "output": "1",
        "idx": 4616
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void revert_acfilter(WmallDecodeCtx *s, int tile_size)\n\n{\n\n    int ich, pred, i, j;\n\n    int16_t *filter_coeffs = s->acfilter_coeffs;\n\n    int scaling            = s->acfilter_scaling;\n\n    int order              = s->acfilter_order;\n\n\n\n    for (ich = 0; ich < s->num_channels; ich++) {\n\n        int *prevvalues = s->acfilter_prevvalues[ich];\n\n        for (i = 0; i < order; i++) {\n\n            pred = 0;\n\n            for (j = 0; j < order; j++) {\n\n                if (i <= j)\n\n                    pred += filter_coeffs[j] * prevvalues[j - i];\n\n                else\n\n                    pred += s->channel_residues[ich][i - j - 1] * filter_coeffs[j];\n\n            }\n\n            pred >>= scaling;\n\n            s->channel_residues[ich][i] += pred;\n\n        }\n\n        for (i = order; i < tile_size; i++) {\n\n            pred = 0;\n\n            for (j = 0; j < order; j++)\n\n                pred += s->channel_residues[ich][i - j - 1] * filter_coeffs[j];\n\n            pred >>= scaling;\n\n            s->channel_residues[ich][i] += pred;\n\n        }\n\n        for (j = 0; j < order; j++)\n\n            prevvalues[j] = s->channel_residues[ich][tile_size - j - 1];\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5479
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int read_sbr_single_channel_element(AACContext *ac,\n\n                                            SpectralBandReplication *sbr,\n\n                                            GetBitContext *gb)\n\n{\n\n    int ret;\n\n\n\n    if (get_bits1(gb)) // bs_data_extra\n\n        skip_bits(gb, 4); // bs_reserved\n\n\n\n    if (read_sbr_grid(ac, sbr, gb, &sbr->data[0]))\n\n        return -1;\n\n    read_sbr_dtdf(sbr, gb, &sbr->data[0]);\n\n    read_sbr_invf(sbr, gb, &sbr->data[0]);\n\n    read_sbr_envelope(sbr, gb, &sbr->data[0], 0);\n\n    if((ret = read_sbr_noise(ac, sbr, gb, &sbr->data[0], 0)) < 0)\n\n        return ret;\n\n\n\n    if ((sbr->data[0].bs_add_harmonic_flag = get_bits1(gb)))\n\n        get_bits1_vector(gb, sbr->data[0].bs_add_harmonic, sbr->n[1]);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4065
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unsigned long perf_instruction_pointer(struct pt_regs *regs)\n{\n\tbool use_siar = regs_use_siar(regs);\n\tunsigned long siar = mfspr(SPRN_SIAR);\n\n\tif (ppmu->flags & PPMU_P10_DD1) {\n\t\tif (siar)\n\t\t\treturn siar;\n\t\telse\n\t\t\treturn regs->nip;\n\t} else if (use_siar && siar_valid(regs))\n\t\treturn mfspr(SPRN_SIAR) + perf_ip_adjust(regs);\n\telse if (use_siar)\n\t\treturn 0;\t\t// no valid instruction pointer\n\telse\n\t\treturn regs->nip;\n}",
        "output": "1",
        "idx": 939
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "HandShakeType HandShakeHeader::get_handshakeType() const\n{\n    return type_;\n}",
        "output": "0",
        "idx": 319
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_prores_idct(DCTELEM *block, const int16_t *qmat)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < 64; i++)\n\n        block[i] *= qmat[i];\n\n\n\n    for (i = 0; i < 8; i++)\n\n        idctRowCondDC_10(block + i*8);\n\n\n\n    for (i = 0; i < 64; i++)\n\n        block[i] >>= 2;\n\n\n\n    for (i = 0; i < 8; i++)\n\n        idctSparseCol_10(block + i);\n\n}\n",
        "output": "1",
        "idx": 3070
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int find_stream_index(AVFormatContext *s)\n\n{\n\n    int i;\n\n    AVStream *st;\n\n\n\n    if (s->nb_streams <= 0)\n\n        return -1;\n\n    for(i = 0; i < s->nb_streams; i++) {\n\n        st = s->streams[i];\n\n        if (st->codec.codec_type == CODEC_TYPE_VIDEO) {\n\n            return i;\n\n        }\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5333
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    Stats::Scope& listenerScope() override { return parent_.stats_store_; }",
        "output": "0",
        "idx": 1824
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mrb_false(mrb_state *mrb, mrb_value self)\n{\n  return mrb_false_value();\n}",
        "output": "0",
        "idx": 2789
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static size_t virtio_net_rsc_drain_seg(VirtioNetRscChain *chain,\n                                       VirtioNetRscSeg *seg)\n{\n    int ret;\n    struct virtio_net_hdr_v1 *h;\n\n    h = (struct virtio_net_hdr_v1 *)seg->buf;\n    h->flags = 0;\n    h->gso_type = VIRTIO_NET_HDR_GSO_NONE;\n\n    if (seg->is_coalesced) {\n        h->rsc.segments = seg->packets;\n        h->rsc.dup_acks = seg->dup_ack;\n        h->flags = VIRTIO_NET_HDR_F_RSC_INFO;\n        if (chain->proto == ETH_P_IP) {\n            h->gso_type = VIRTIO_NET_HDR_GSO_TCPV4;\n        } else {\n            h->gso_type = VIRTIO_NET_HDR_GSO_TCPV6;\n        }\n    }\n\n    ret = virtio_net_do_receive(seg->nc, seg->buf, seg->size);\n    QTAILQ_REMOVE(&chain->buffers, seg, next);\n    g_free(seg->buf);\n    g_free(seg);\n\n    return ret;\n}",
        "output": "0",
        "idx": 2871
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void decode(AVCodecContext *dec_ctx, AVFrame *frame, AVPacket *pkt,\n\n                   const char *filename)\n\n{\n\n    char buf[1024];\n\n    int ret;\n\n\n\n    ret = avcodec_send_packet(dec_ctx, pkt);\n\n    if (ret < 0) {\n\n        fprintf(stderr, \"Error sending a packet for decoding\\n\");\n\n        exit(1);\n\n    }\n\n\n\n    while (ret >= 0) {\n\n        ret = avcodec_receive_frame(dec_ctx, frame);\n\n        if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)\n\n            return;\n\n        else if (ret < 0) {\n\n            fprintf(stderr, \"Error during decoding\\n\");\n\n            exit(1);\n\n        }\n\n\n\n        printf(\"saving frame %3d\\n\", dec_ctx->frame_number);\n\n        fflush(stdout);\n\n\n\n        /* the picture is allocated by the decoder. no need to\n\n           free it */\n\n        snprintf(buf, sizeof(buf), filename, dec_ctx->frame_number);\n\n        pgm_save(frame->data[0], frame->linesize[0],\n\n                 frame->width, frame->height, buf);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4466
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "afterTriggerCheckState(AfterTriggerShared evtshared)\n{\n\tOid\t\t\ttgoid = evtshared->ats_tgoid;\n\tSetConstraintState state = afterTriggers->state;\n\tint\t\t\ti;\n\n\t/*\n\t * For not-deferrable triggers (i.e. normal AFTER ROW triggers and\n\t * constraints declared NOT DEFERRABLE), the state is always false.\n\t */\n\tif ((evtshared->ats_event & AFTER_TRIGGER_DEFERRABLE) == 0)\n\t\treturn false;\n\n\t/*\n\t * Check if SET CONSTRAINTS has been executed for this specific trigger.\n\t */\n\tfor (i = 0; i < state->numstates; i++)\n\t{\n\t\tif (state->trigstates[i].sct_tgoid == tgoid)\n\t\t\treturn state->trigstates[i].sct_tgisdeferred;\n\t}\n\n\t/*\n\t * Check if SET CONSTRAINTS ALL has been executed; if so use that.\n\t */\n\tif (state->all_isset)\n\t\treturn state->all_isdeferred;\n\n\t/*\n\t * Otherwise return the default state for the trigger.\n\t */\n\treturn ((evtshared->ats_event & AFTER_TRIGGER_INITDEFERRED) != 0);\n}",
        "output": "0",
        "idx": 3581
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void make_dirty(uint8_t device)\n\n{\n\n    QPCIDevice *dev;\n\n    QPCIBar bmdma_bar, ide_bar;\n\n    uint8_t status;\n\n    size_t len = 512;\n\n    uintptr_t guest_buf;\n\n    void* buf;\n\n\n\n    dev = get_pci_device(&bmdma_bar, &ide_bar);\n\n\n\n    guest_buf = guest_alloc(guest_malloc, len);\n\n    buf = g_malloc(len);\n\n    memset(buf, rand() % 255 + 1, len);\n\n    g_assert(guest_buf);\n\n    g_assert(buf);\n\n\n\n    memwrite(guest_buf, buf, len);\n\n\n\n    PrdtEntry prdt[] = {\n\n        {\n\n            .addr = cpu_to_le32(guest_buf),\n\n            .size = cpu_to_le32(len | PRDT_EOT),\n\n        },\n\n    };\n\n\n\n    status = send_dma_request(CMD_WRITE_DMA, 1, 1, prdt,\n\n                              ARRAY_SIZE(prdt), NULL);\n\n    g_assert_cmphex(status, ==, BM_STS_INTR);\n\n    assert_bit_clear(qpci_io_readb(dev, ide_bar, reg_status), DF | ERR);\n\n\n\n    g_free(buf);\n\n\n}",
        "output": "1",
        "idx": 4856
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_set_user_memory_region(KVMState *s, KVMSlot *slot)\n\n{\n\n    struct kvm_userspace_memory_region mem;\n\n\n\n    mem.slot = slot->slot;\n\n    mem.guest_phys_addr = slot->start_addr;\n\n    mem.userspace_addr = (unsigned long)slot->ram;\n\n    mem.flags = slot->flags;\n\n    if (s->migration_log) {\n\n        mem.flags |= KVM_MEM_LOG_DIRTY_PAGES;\n\n    }\n\n    if (mem.flags & KVM_MEM_READONLY) {\n\n        /* Set the slot size to 0 before setting the slot to the desired\n\n         * value. This is needed based on KVM commit 75d61fbc. */\n\n        mem.memory_size = 0;\n\n        kvm_vm_ioctl(s, KVM_SET_USER_MEMORY_REGION, &mem);\n\n    }\n\n    mem.memory_size = slot->memory_size;\n\n    return kvm_vm_ioctl(s, KVM_SET_USER_MEMORY_REGION, &mem);\n\n}\n",
        "output": "1",
        "idx": 3867
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void FAST_FUNC udhcp_add_binary_option(struct dhcp_packet *packet, uint8_t *addopt)\n{\n\tunsigned len;\n\tuint8_t *optionptr = packet->options;\n\tunsigned end = udhcp_end_option(optionptr);\n\n\tlen = OPT_DATA + addopt[OPT_LEN];\n\t/* end position + (option code/length + addopt length) + end option */\n\tif (end + len + 1 >= DHCP_OPTIONS_BUFSIZE) {\n//TODO: learn how to use overflow option if we exhaust packet->options[]\n\t\tbb_error_msg(\"option 0x%02x did not fit into the packet\",\n\t\t\t\taddopt[OPT_CODE]);\n\t\treturn;\n\t}\n\tlog_option(\"Adding option\", addopt);\n\tmemcpy(optionptr + end, addopt, len);\n\toptionptr[end + len] = DHCP_END;\n}",
        "output": "0",
        "idx": 366
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ff_h264_idct8_add4_mmx(uint8_t *dst, const int *block_offset, DCTELEM *block, int stride, const uint8_t nnzc[6*8]){\n\n    int i;\n\n    for(i=0; i<16; i+=4){\n\n        if(nnzc[ scan8[i] ])\n\n            ff_h264_idct8_add_mmx(dst + block_offset[i], block + i*16, stride);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5742
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  C_OnMapCommit(OSD *o, epoch_t f, epoch_t l, MOSDMap *m)\n    : osd(o), first(f), last(l), msg(m) {}",
        "output": "0",
        "idx": 5010
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "format_LEARN(const struct ofpact_learn *a,\n             const struct ofpact_format_params *fp)\n{\n    learn_format(a, fp->port_map, fp->table_map, fp->s);\n}",
        "output": "0",
        "idx": 3389
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "display_shell_version (count, c)\n     int count, c;\n{\n  rl_crlf ();\n  show_shell_version (0);\n  putc ('\\r', rl_outstream);\n  fflush (rl_outstream);\n  rl_on_new_line ();\n  rl_redisplay ();\n  return 0;\n}",
        "output": "0",
        "idx": 1993
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static\nsize_t php_mysqlnd_sha256_pk_request_write(MYSQLND_CONN_DATA * conn, void * _packet)\n{\n\tMYSQLND_ERROR_INFO * error_info = conn->error_info;\n\tMYSQLND_PFC * pfc = conn->protocol_frame_codec;\n\tMYSQLND_VIO * vio = conn->vio;\n\tMYSQLND_STATS * stats = conn->stats;\n\tzend_uchar buffer[MYSQLND_HEADER_SIZE + 1];\n\tsize_t sent;\n\n\tDBG_ENTER(\"php_mysqlnd_sha256_pk_request_write\");\n\n\tint1store(buffer + MYSQLND_HEADER_SIZE, '\\1');\n\tsent = pfc->data->m.send(pfc, vio, buffer, 1, stats, error_info);\n\n\tDBG_RETURN(sent);",
        "output": "0",
        "idx": 199
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void process(char const* whoami,\n                    char const* infile,\n                    std::string outprefix)\n{\n    QPDF inpdf;\n    inpdf.processFile(infile);\n    std::vector<QPDFPageObjectHelper> pages =\n        QPDFPageDocumentHelper(inpdf).getAllPages();\n    int pageno_len = QUtil::int_to_string(pages.size()).length();\n    int pageno = 0;\n    for (std::vector<QPDFPageObjectHelper>::iterator iter = pages.begin();\n         iter != pages.end(); ++iter)\n    {\n        QPDFPageObjectHelper& page(*iter);\n        std::string outfile =\n            outprefix + QUtil::int_to_string(++pageno, pageno_len) + \".pdf\";\n        QPDF outpdf;\n        outpdf.emptyPDF();\n        QPDFPageDocumentHelper(outpdf).addPage(page, false);\n        QPDFWriter outpdfw(outpdf, outfile.c_str());\n\tif (static_id)\n\t{\n\t    // For the test suite, uncompress streams and use static\n\t    // IDs.\n\t    outpdfw.setStaticID(true); // for testing only\n\t    outpdfw.setStreamDataMode(qpdf_s_uncompress);\n\t}\n        outpdfw.write();\n    }\n}",
        "output": "1",
        "idx": 4019
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_real_id(const char *devpath, const char *idname, uint16_t *val)\n\n{\n\n    FILE *f;\n\n    char name[128];\n\n    long id;\n\n\n\n    snprintf(name, sizeof(name), \"%s%s\", devpath, idname);\n\n    f = fopen(name, \"r\");\n\n    if (f == NULL) {\n\n        error_report(\"%s: %s: %m\", __func__, name);\n\n        return -1;\n\n    }\n\n    if (fscanf(f, \"%li\\n\", &id) == 1) {\n\n        *val = id;\n\n    } else {\n\n\n        return -1;\n\n    }\n\n\n\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 5860
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void vga_hw_screen_dump(const char *filename)\n\n{\n\n    TextConsole *previous_active_console;\n\n\n\n    previous_active_console = active_console;\n\n    active_console = consoles[0];\n\n    /* There is currently no way of specifying which screen we want to dump,\n\n       so always dump the first one.  */\n\n    if (consoles[0] && consoles[0]->hw_screen_dump)\n\n        consoles[0]->hw_screen_dump(consoles[0]->hw, filename);\n\n    active_console = previous_active_console;\n\n}\n",
        "output": "1",
        "idx": 3224
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  explicit ReverseSequenceOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"batch_dim\", &batch_dim_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"seq_dim\", &seq_dim_));\n  }",
        "output": "1",
        "idx": 5293
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_image_get_linesize(enum PixelFormat pix_fmt, int width, int plane)\n\n{\n\n    const AVPixFmtDescriptor *desc = &av_pix_fmt_descriptors[pix_fmt];\n\n    int max_step     [4];       /* max pixel step for each plane */\n\n    int max_step_comp[4];       /* the component for each plane which has the max pixel step */\n\n    int s, linesize;\n\n\n\n    if ((unsigned)pix_fmt >= PIX_FMT_NB || desc->flags & PIX_FMT_HWACCEL)\n\n        return AVERROR(EINVAL);\n\n\n\n    av_image_fill_max_pixsteps(max_step, max_step_comp, desc);\n\n    s = (max_step_comp[plane] == 1 || max_step_comp[plane] == 2) ? desc->log2_chroma_w : 0;\n\n    linesize = max_step[plane] * (((width + (1 << s) - 1)) >> s);\n\n    if (desc->flags & PIX_FMT_BITSTREAM)\n\n        linesize = (linesize + 7) >> 3;\n\n    return linesize;\n\n}\n",
        "output": "0",
        "idx": 1825
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vdi_close(BlockDriverState *bs)\n\n{\n\n    BDRVVdiState *s = bs->opaque;\n\n\n\n    g_free(s->bmap);\n\n\n\n    migrate_del_blocker(s->migration_blocker);\n\n    error_free(s->migration_blocker);\n\n}\n",
        "output": "1",
        "idx": 4822
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void m68k_cpu_initfn(Object *obj)\n\n{\n\n    CPUState *cs = CPU(obj);\n\n    M68kCPU *cpu = M68K_CPU(obj);\n\n    CPUM68KState *env = &cpu->env;\n\n    static bool inited;\n\n\n\n    cs->env_ptr = env;\n\n    cpu_exec_init(cs, &error_abort);\n\n\n\n    if (tcg_enabled() && !inited) {\n\n        inited = true;\n\n        m68k_tcg_init();\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5088
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "target_ulong helper_srad(CPUPPCState *env, target_ulong value,\n\n                         target_ulong shift)\n\n{\n\n    int64_t ret;\n\n\n\n    if (likely(!(shift & 0x40))) {\n\n        if (likely((uint64_t)shift != 0)) {\n\n            shift &= 0x3f;\n\n            ret = (int64_t)value >> shift;\n\n            if (likely(ret >= 0 || (value & ((1 << shift) - 1)) == 0)) {\n\n                env->ca = 0;\n\n            } else {\n\n                env->ca = 1;\n\n            }\n\n        } else {\n\n            ret = (int64_t)value;\n\n            env->ca = 0;\n\n        }\n\n    } else {\n\n        ret = (int64_t)value >> 63;\n\n        env->ca = (ret != 0);\n\n    }\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 3255
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void arm_translate_init(void)\n\n{\n\n    cpu_env = tcg_global_reg_new(TCG_TYPE_PTR, TCG_AREG0, \"env\");\n\n\n\n    cpu_T[0] = tcg_global_reg_new(TCG_TYPE_I32, TCG_AREG1, \"T0\");\n\n    cpu_T[1] = tcg_global_reg_new(TCG_TYPE_I32, TCG_AREG2, \"T1\");\n\n}\n",
        "output": "0",
        "idx": 1652
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zdoneshowpage(i_ctx_t *i_ctx_p)\n{\n    gx_device *dev = gs_currentdevice(igs);\n    gx_device *tdev = (*dev_proc(dev, get_page_device)) (dev);\n\n    if (tdev != 0)\n        tdev->ShowpageCount++;\n    return 0;\n}",
        "output": "0",
        "idx": 3428
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __proc_set_tty(struct tty_struct *tty)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&tty->ctrl_lock, flags);\n\t/*\n\t * The session and fg pgrp references will be non-NULL if\n\t * tiocsctty() is stealing the controlling tty\n\t */\n\tput_pid(tty->session);\n\tput_pid(tty->pgrp);\n\ttty->pgrp = get_pid(task_pgrp(current));\n\tspin_unlock_irqrestore(&tty->ctrl_lock, flags);\n\ttty->session = get_pid(task_session(current));\n\tif (current->signal->tty) {\n\t\ttty_debug(tty, \"current tty %s not NULL!!\\n\",\n\t\t\t  current->signal->tty->name);\n\t\ttty_kref_put(current->signal->tty);\n\t}\n\tput_pid(current->signal->tty_old_pgrp);\n\tcurrent->signal->tty = tty_kref_get(tty);\n\tcurrent->signal->tty_old_pgrp = NULL;\n}",
        "output": "1",
        "idx": 1442
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool timer_expired(QEMUTimer *timer_head, int64_t current_time)\n\n{\n\n    return timer_expired_ns(timer_head, current_time * timer_head->scale);\n\n}\n",
        "output": "0",
        "idx": 4190
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void bind_ssbo_locs(struct vrend_linked_shader_program *sprog,\n                           int id)\n{\n   int i;\n   char name[32];\n   if (!has_feature(feat_ssbo))\n      return;\n   if (sprog->ss[id]->sel->sinfo.ssbo_used_mask) {\n      const char *prefix = pipe_shader_to_prefix(id);\n      uint32_t mask = sprog->ss[id]->sel->sinfo.ssbo_used_mask;\n      sprog->ssbo_locs[id] = calloc(util_last_bit(mask), sizeof(uint32_t));\n\n      while (mask) {\n         i = u_bit_scan(&mask);\n         snprintf(name, 32, \"%sssbo%d\", prefix, i);\n         sprog->ssbo_locs[id][i] = glGetProgramResourceIndex(sprog->id, GL_SHADER_STORAGE_BLOCK, name);\n      }\n   } else\n      sprog->ssbo_locs[id] = NULL;\n   sprog->ssbo_used_mask[id] = sprog->ss[id]->sel->sinfo.ssbo_used_mask;\n}",
        "output": "0",
        "idx": 1
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "plperl_sv_to_literal(SV *sv, char *fqtypename)\n{\n\tDatum\t\tstr = CStringGetDatum(fqtypename);\n\tOid\t\t\ttypid = DirectFunctionCall1(regtypein, str);\n\tOid\t\t\ttypoutput;\n\tDatum\t\tdatum;\n\tbool\t\ttypisvarlena,\n\t\t\t\tisnull;\n\n\tif (!OidIsValid(typid))\n\t\telog(ERROR, \"lookup failed for type %s\", fqtypename);\n\n\tdatum = plperl_sv_to_datum(sv,\n\t\t\t\t\t\t\t   typid, -1,\n\t\t\t\t\t\t\t   NULL, NULL, InvalidOid,\n\t\t\t\t\t\t\t   &isnull);\n\n\tif (isnull)\n\t\treturn NULL;\n\n\tgetTypeOutputInfo(typid,\n\t\t\t\t\t  &typoutput, &typisvarlena);\n\n\treturn OidOutputFunctionCall(typoutput, datum);\n}",
        "output": "0",
        "idx": 4226
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int key_notify_policy_flush(const struct km_event *c)\n{\n\tstruct sk_buff *skb_out;\n\tstruct sadb_msg *hdr;\n\n\tskb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);\n\tif (!skb_out)\n\t\treturn -ENOBUFS;\n\thdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));\n\thdr->sadb_msg_type = SADB_X_SPDFLUSH;\n\thdr->sadb_msg_seq = c->seq;\n\thdr->sadb_msg_pid = c->portid;\n\thdr->sadb_msg_version = PF_KEY_V2;\n\thdr->sadb_msg_errno = (uint8_t) 0;\n\thdr->sadb_msg_satype = SADB_SATYPE_UNSPEC;\n\thdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));\n\tpfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);\n\treturn 0;\n\n}",
        "output": "1",
        "idx": 5131
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tilegx_cpu_class_init(ObjectClass *oc, void *data)\n{\n    DeviceClass *dc = DEVICE_CLASS(oc);\n    CPUClass *cc = CPU_CLASS(oc);\n    TileGXCPUClass *tcc = TILEGX_CPU_CLASS(oc);\n    tcc->parent_realize = dc->realize;\n    dc->realize = tilegx_cpu_realizefn;\n    tcc->parent_reset = cc->reset;\n    cc->reset = tilegx_cpu_reset;\n    cc->has_work = tilegx_cpu_has_work;\n    cc->do_interrupt = tilegx_cpu_do_interrupt;\n    cc->cpu_exec_interrupt = tilegx_cpu_exec_interrupt;\n    cc->dump_state = tilegx_cpu_dump_state;\n    cc->set_pc = tilegx_cpu_set_pc;\n    cc->handle_mmu_fault = tilegx_cpu_handle_mmu_fault;\n    cc->gdb_num_core_regs = 0;\n}",
        "output": "1",
        "idx": 1338
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "btreesel(Oid operatorObjectId,\n\t\t Oid indrelid,\n\t\t AttrNumber attributeNumber,\n\t\t char *constValue,\n\t\t int32 constFlag,\n\t\t int32 nIndexKeys,\n\t\t Oid indexrelid)\n{\n\tfloat64\t\tresult;\n\tfloat64data resultData;\n\n\tif (FunctionalSelectivity(nIndexKeys, attributeNumber))\n\t{\n\n\t\t/*\n\t\t * Need to call the functions selectivity function here.  For now\n\t\t * simply assume it's 1/3 since functions don't currently have\n\t\t * selectivity functions\n\t\t */\n\t\tresultData = 1.0 / 3.0;\n\t\tresult = &resultData;\n\t}\n\telse\n\t{\n\t\tresult = (float64) fmgr(get_oprrest(operatorObjectId),\n\t\t\t\t\t\t\t\t(char *) operatorObjectId,\n\t\t\t\t\t\t\t\t(char *) indrelid,\n\t\t\t\t\t\t\t\t(char *) (int) attributeNumber,\n\t\t\t\t\t\t\t\t(char *) constValue,\n\t\t\t\t\t\t\t\t(char *) constFlag,\n\t\t\t\t\t\t\t\tNULL);\n\t}\n\n\tif (!PointerIsValid(result))\n\t\telog(ERROR, \"Btree Selectivity: bad pointer\");\n\tif (*result < 0.0 || *result > 1.0)\n\t\telog(ERROR, \"Btree Selectivity: bad value %lf\", *result);\n\n\treturn result;\n}",
        "output": "0",
        "idx": 5324
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_uint32(QEMUFile *f, void *pv, size_t size)\n\n{\n\n    uint32_t *v = pv;\n\n    qemu_get_be32s(f, v);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2292
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "update_tg_cfs_util(struct cfs_rq *cfs_rq, struct sched_entity *se, struct cfs_rq *gcfs_rq)\n{\n\tlong delta = gcfs_rq->avg.util_avg - se->avg.util_avg;\n\n\t/* Nothing to update */\n\tif (!delta)\n\t\treturn;\n\n\t/*\n\t * The relation between sum and avg is:\n\t *\n\t *   LOAD_AVG_MAX - 1024 + sa->period_contrib\n\t *\n\t * however, the PELT windows are not aligned between grq and gse.\n\t */\n\n\t/* Set new sched_entity's utilization */\n\tse->avg.util_avg = gcfs_rq->avg.util_avg;\n\tse->avg.util_sum = se->avg.util_avg * LOAD_AVG_MAX;\n\n\t/* Update parent cfs_rq utilization */\n\tadd_positive(&cfs_rq->avg.util_avg, delta);\n\tcfs_rq->avg.util_sum = cfs_rq->avg.util_avg * LOAD_AVG_MAX;\n}",
        "output": "0",
        "idx": 2199
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cli_file_t cli_get_container_type(cli_ctx *ctx, int index)\n{\n    if (index < 0)\n\tindex = ctx->recursion + index + 1;\n    if (index >= 0 && index <= ctx->recursion)\n\treturn ctx->containers[index].type;\n    return CL_TYPE_ANY;\n}",
        "output": "1",
        "idx": 1534
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void os_setup_post(void)\n\n{\n\n    int fd = 0;\n\n\n\n    if (daemonize) {\n\n        uint8_t status = 0;\n\n        ssize_t len;\n\n\n\n        do {        \n\n            len = write(daemon_pipe, &status, 1);\n\n        } while (len < 0 && errno == EINTR);\n\n        if (len != 1) {\n\n            exit(1);\n\n        }\n\n        if (chdir(\"/\")) {\n\n            perror(\"not able to chdir to /\");\n\n            exit(1);\n\n        }\n\n        TFR(fd = qemu_open(\"/dev/null\", O_RDWR));\n\n        if (fd == -1) {\n\n            exit(1);\n\n        }\n\n    }\n\n\n\n    change_root();\n\n    change_process_uid();\n\n\n\n    if (daemonize) {\n\n        dup2(fd, 0);\n\n        dup2(fd, 1);\n\n        dup2(fd, 2);\n\n\n\n        close(fd);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5664
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char* sdl_deserialize_string(char **in)\n{\n\tchar *s;\n\tint len;\n\n\tWSDL_CACHE_GET_INT(len, in);\n\tif (len == WSDL_NO_STRING_MARKER) {\n\t\treturn NULL;\n\t} else {\n\t\ts = emalloc(len+1);\n\t\tWSDL_CACHE_GET_N(s, len, in);\n\t\ts[len] = '\\0';\n\t\treturn s;\n\t}\n}",
        "output": "0",
        "idx": 3670
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int check_btf_info(struct bpf_verifier_env *env,\n\t\t\t  const union bpf_attr *attr,\n\t\t\t  union bpf_attr __user *uattr)\n{\n\tstruct btf *btf;\n\tint err;\n\n\tif (!attr->func_info_cnt && !attr->line_info_cnt) {\n\t\tif (check_abnormal_return(env))\n\t\t\treturn -EINVAL;\n\t\treturn 0;\n\t}\n\n\tbtf = btf_get_by_fd(attr->prog_btf_fd);\n\tif (IS_ERR(btf))\n\t\treturn PTR_ERR(btf);\n\tenv->prog->aux->btf = btf;\n\n\terr = check_btf_func(env, attr, uattr);\n\tif (err)\n\t\treturn err;\n\n\terr = check_btf_line(env, attr, uattr);\n\tif (err)\n\t\treturn err;\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 480
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(QueryPlannerTest, MustFetchWhenNotAllSortKeysAreCoveredByIndex) {\n    params.options &= ~QueryPlannerParams::INCLUDE_COLLSCAN;\n    addIndex(fromjson(\"{a: 1, b: 1}\"));\n\n    runQueryAsCommand(\n        fromjson(\"{find: 'testns', filter: {a: {$gt: 0}}, projection: {a: 1, b:1, _id: 0}, \"\n                 \"sort: {b: 1, c: 1}}\"));\n\n    assertNumSolutions(1U);\n    assertSolutionExists(\n        \"{proj: {spec: {a: 1, b:1, _id: 0}, node: {sort: {pattern: {b: 1, c: 1}, limit: 0, node: \"\n        \"{sortKeyGen:{node: {fetch: {node: {ixscan: \"\n        \"{pattern: {a: 1, b: 1}}}}}}}}}}}\");\n}",
        "output": "0",
        "idx": 335
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "httpLocalRequest(ObjectPtr object, int method, int from, int to,\n                 HTTPRequestPtr requestor, void *closure)\n{\n    if(object->requestor == NULL)\n        object->requestor = requestor;\n\n    if(!disableLocalInterface && urlIsSpecial(object->key, object->key_size))\n        return httpSpecialRequest(object, method, from, to, \n                                  requestor, closure);\n\n    if(method >= METHOD_POST) {\n        httpClientError(requestor, 405, internAtom(\"Method not allowed\"));\n        requestor->connection->flags &= ~CONN_READER;\n        return 1;\n    }\n\n    /* objectFillFromDisk already did the real work but we have to\n       make sure we don't get into an infinite loop. */\n    if(object->flags & OBJECT_INITIAL) {\n        abortObject(object, 404, internAtom(\"Not found\"));\n    }\n    object->age = current_time.tv_sec;\n    object->date = current_time.tv_sec;\n\n    object->flags &= ~OBJECT_VALIDATING;\n    notifyObject(object);\n    return 1;\n}",
        "output": "1",
        "idx": 4646
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void trace_init_vcpu_events(void)\n\n{\n\n    TraceEvent *ev = NULL;\n\n    while ((ev = trace_event_pattern(\"*\", ev)) != NULL) {\n\n        if (trace_event_is_vcpu(ev) &&\n\n            trace_event_get_state_static(ev) &&\n\n            trace_event_get_state_dynamic(ev)) {\n\n            TraceEventID id = trace_event_get_id(ev);\n\n            /* check preconditions */\n\n            assert(trace_events_dstate[id] == 1);\n\n            /* disable early-init state ... */\n\n            trace_events_dstate[id] = 0;\n\n            trace_events_enabled_count--;\n\n            /* ... and properly re-enable */\n\n            trace_event_set_state_dynamic(ev, true);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2873
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nvoid pdo_row_free_storage(pdo_stmt_t *stmt TSRMLS_DC)\n{\n\tif (stmt) {\n\t\tZVAL_NULL(&stmt->lazy_object_ref);\n\n\t\tif (--stmt->refcount == 0) {\n\t\t\tfree_statement(stmt TSRMLS_CC);\n\t\t}\n\t}",
        "output": "0",
        "idx": 4475
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int walk_hugetlb_range(unsigned long addr, unsigned long end,\n\t\t\t      struct mm_walk *walk)\n{\n\treturn 0;\n}",
        "output": "1",
        "idx": 1179
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static std::string getComment(const std::string &fulltext, int line)\n{\n\tif (line < 1) return \"\";\n\n\t// Locate line\n\tunsigned int start = 0;\n\tfor (; start<fulltext.length() ; ++start) {\n\t\tif (line <= 1) break;\n\t\tif (fulltext[start] == '\\n') line--;\n\t}\n\n\tint end = start + 1;\n\twhile (fulltext[end] != '\\n') end++;\n\n\tstd::string comment = fulltext.substr(start, end - start);\n\n\t// Locate comment\n\tunsigned int startText = 0;\n\tint noOfSemicolon = 0;\n\tbool inString = false;\n\tfor (; startText < comment.length() - 1; ++startText) {\n\t\tif (inString && comment.compare(startText, 2, \"\\\\\\\"\") == 0) {\n\t\t\tstartText++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (comment[startText] == '\"') inString = !inString;\n\t\tif (!inString) {\n\t\t\tif (comment.compare(startText, 2, \"//\") == 0) break;\n\t\t\tif (comment[startText] == ';' && noOfSemicolon > 0) return \"\";\n\t\t\tif (comment[startText] == ';') noOfSemicolon++;\n\t\t}\n\t}\n\n\tif (startText + 2 > comment.length()) return \"\";\n\n\tstd::string result = comment.substr(startText + 2);\n\treturn result;\n}",
        "output": "1",
        "idx": 5009
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tcp_chr_close(CharDriverState *chr)\n\n{\n\n    TCPCharDriver *s = chr->opaque;\n\n    if (s->fd >= 0) {\n\n        if (s->tag) {\n\n            g_source_remove(s->tag);\n\n            s->tag = 0;\n\n        }\n\n        if (s->chan) {\n\n            g_io_channel_unref(s->chan);\n\n        }\n\n        closesocket(s->fd);\n\n    }\n\n    if (s->listen_fd >= 0) {\n\n        if (s->listen_tag) {\n\n            g_source_remove(s->listen_tag);\n\n            s->listen_tag = 0;\n\n        }\n\n        if (s->listen_chan) {\n\n            g_io_channel_unref(s->listen_chan);\n\n        }\n\n        closesocket(s->listen_fd);\n\n    }\n\n    g_free(s);\n\n    qemu_chr_be_event(chr, CHR_EVENT_CLOSED);\n\n}\n",
        "output": "1",
        "idx": 1258
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void dump_start(struct req_state *s)\n{\n  if (!s->content_started) {\n    s->formatter->output_header();\n    s->content_started = true;\n  }\n}",
        "output": "0",
        "idx": 1352
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool extractFileTo(zip* zip, const std::string &file, std::string& to,\n                          char* buf, size_t len) {\n  auto sep = file.rfind('/');\n  if (sep != std::string::npos) {\n    auto path = to + file.substr(0, sep);\n    if (!HHVM_FN(is_dir)(path) && !HHVM_FN(mkdir)(path, 0777, true)) {\n      return false;\n    }\n\n    if (sep == file.length() - 1) {\n      return true;\n    }\n  }\n\n  to.append(file);\n  struct zip_stat zipStat;\n  if (zip_stat(zip, file.c_str(), 0, &zipStat) != 0) {\n    return false;\n  }\n\n  auto zipFile = zip_fopen_index(zip, zipStat.index, 0);\n  FAIL_IF_INVALID_PTR(zipFile);\n\n  auto outFile = fopen(to.c_str(), \"wb\");\n  if (outFile == nullptr) {\n    zip_fclose(zipFile);\n    return false;\n  }\n\n  for (auto n = zip_fread(zipFile, buf, len); n != 0;\n       n = zip_fread(zipFile, buf, len)) {\n    if (n < 0 || fwrite(buf, sizeof(char), n, outFile) != n) {\n      zip_fclose(zipFile);\n      fclose(outFile);\n      remove(to.c_str());\n      return false;\n    }\n  }\n\n  zip_fclose(zipFile);\n  if (fclose(outFile) != 0) {\n    return false;\n  }\n\n  return true;\n}",
        "output": "1",
        "idx": 2950
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "hugetlb_get_unmapped_area(struct file *file, unsigned long addr,\n\t\tunsigned long len, unsigned long pgoff, unsigned long flags)\n{\n\tstruct hstate *h = hstate_file(file);\n\tstruct mm_struct *mm = current->mm;\n\tstruct vm_area_struct *vma;\n\n\tif (len & ~huge_page_mask(h))\n\t\treturn -EINVAL;\n\tif (len > TASK_SIZE)\n\t\treturn -ENOMEM;\n\n\tif (flags & MAP_FIXED) {\n\t\tif (prepare_hugepage_range(file, addr, len))\n\t\t\treturn -EINVAL;\n\t\treturn addr;\n\t}\n\n\tif (addr) {\n\t\taddr = ALIGN(addr, huge_page_size(h));\n\t\tvma = find_vma(mm, addr);\n\t\tif (TASK_SIZE - len >= addr &&\n\t\t    (!vma || addr + len <= vma->vm_start))\n\t\t\treturn addr;\n\t}\n\tif (mm->get_unmapped_area == arch_get_unmapped_area)\n\t\treturn hugetlb_get_unmapped_area_bottomup(file, addr, len,\n\t\t\t\tpgoff, flags);\n\telse\n\t\treturn hugetlb_get_unmapped_area_topdown(file, addr, len,\n\t\t\t\tpgoff, flags);\n}",
        "output": "1",
        "idx": 5771
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ast2400_rambits(AspeedSDMCState *s)\n\n{\n\n    switch (s->ram_size >> 20) {\n\n    case 64:\n\n        return ASPEED_SDMC_DRAM_64MB;\n\n    case 128:\n\n        return ASPEED_SDMC_DRAM_128MB;\n\n    case 256:\n\n        return ASPEED_SDMC_DRAM_256MB;\n\n    case 512:\n\n        return ASPEED_SDMC_DRAM_512MB;\n\n    default:\n\n        break;\n\n    }\n\n\n\n    /* use a common default */\n\n    error_report(\"warning: Invalid RAM size 0x%\" PRIx64\n\n                 \". Using default 256M\", s->ram_size);\n\n    s->ram_size = 256 << 20;\n\n    return ASPEED_SDMC_DRAM_256MB;\n\n}\n",
        "output": "0",
        "idx": 3695
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vmxnet3_pop_next_tx_descr(VMXNET3State *s,\n\n                          int qidx,\n\n                          struct Vmxnet3_TxDesc *txd,\n\n                          uint32_t *descr_idx)\n\n{\n\n    Vmxnet3Ring *ring = &s->txq_descr[qidx].tx_ring;\n\n    PCIDevice *d = PCI_DEVICE(s);\n\n\n\n    vmxnet3_ring_read_curr_cell(d, ring, txd);\n\n    if (txd->gen == vmxnet3_ring_curr_gen(ring)) {\n\n        /* Only read after generation field verification */\n\n        smp_rmb();\n\n        /* Re-read to be sure we got the latest version */\n\n        vmxnet3_ring_read_curr_cell(d, ring, txd);\n\n        VMXNET3_RING_DUMP(VMW_RIPRN, \"TX\", qidx, ring);\n\n        *descr_idx = vmxnet3_ring_curr_cell_idx(ring);\n\n        vmxnet3_inc_tx_consumption_counter(s, qidx);\n\n        return true;\n\n    }\n\n\n\n    return false;\n\n}\n",
        "output": "1",
        "idx": 4516
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ssize_t mcopy_atomic(struct mm_struct *dst_mm, unsigned long dst_start,\n\t\t     unsigned long src_start, unsigned long len,\n\t\t     bool *mmap_changing)\n{\n\treturn __mcopy_atomic(dst_mm, dst_start, src_start, len, false,\n\t\t\t      mmap_changing);\n}",
        "output": "0",
        "idx": 929
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *ff_png_zalloc(void *opaque, unsigned int items, unsigned int size)\n\n{\n\n    if(items >= UINT_MAX / size)\n\n        return NULL;\n\n    return av_malloc(items * size);\n\n}\n",
        "output": "1",
        "idx": 3326
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int st_select_lex_unit::save_union_explain(Explain_query *output)\n{\n  SELECT_LEX *first= first_select();\n\n  if (output->get_union(first->select_number))\n    return 0; /* Already added */\n    \n  Explain_union *eu= \n    new (output->mem_root) Explain_union(output->mem_root, \n                                         thd->lex->analyze_stmt);\n  if (unlikely(!eu))\n    return 0;\n\n  if (with_element && with_element->is_recursive)\n    eu->is_recursive_cte= true;\n \n  if (derived)\n    eu->connection_type= Explain_node::EXPLAIN_NODE_DERIVED;\n  /* \n    Note: Non-merged semi-joins cannot be made out of UNIONs currently, so we\n    dont ever set EXPLAIN_NODE_NON_MERGED_SJ.\n  */\n  for (SELECT_LEX *sl= first; sl; sl= sl->next_select())\n    eu->add_select(sl->select_number);\n\n  eu->fake_select_type= unit_operation_text[eu->operation= common_op()];\n  eu->using_filesort= MY_TEST(global_parameters()->order_list.first);\n  eu->using_tmp= union_needs_tmp_table();\n\n  // Save the UNION node\n  output->add_node(eu);\n\n  if (eu->get_select_id() == 1)\n    output->query_plan_ready();\n\n  return 0;\n}",
        "output": "0",
        "idx": 4751
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t proxy_readlink(FsContext *fs_ctx, V9fsPath *fs_path,\n\n                              char *buf, size_t bufsz)\n\n{\n\n    int retval;\n\n    retval = v9fs_request(fs_ctx->private, T_READLINK, buf, \"sd\",\n\n                          fs_path, bufsz);\n\n    if (retval < 0) {\n\n        errno = -retval;\n\n        return -1;\n\n    }\n\n    return strlen(buf);\n\n}\n",
        "output": "0",
        "idx": 4741
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int proxy_init(FsContext *ctx)\n\n{\n\n    V9fsProxy *proxy = g_malloc(sizeof(V9fsProxy));\n\n    int sock_id;\n\n\n\n    if (ctx->export_flags & V9FS_PROXY_SOCK_NAME) {\n\n        sock_id = connect_namedsocket(ctx->fs_root);\n\n    } else {\n\n        sock_id = atoi(ctx->fs_root);\n\n        if (sock_id < 0) {\n\n            fprintf(stderr, \"socket descriptor not initialized\\n\");\n\n\n            return -1;\n\n        }\n\n    }\n\n    g_free(ctx->fs_root);\n\n\n\n\n    proxy->in_iovec.iov_base  = g_malloc(PROXY_MAX_IO_SZ + PROXY_HDR_SZ);\n\n    proxy->in_iovec.iov_len   = PROXY_MAX_IO_SZ + PROXY_HDR_SZ;\n\n    proxy->out_iovec.iov_base = g_malloc(PROXY_MAX_IO_SZ + PROXY_HDR_SZ);\n\n    proxy->out_iovec.iov_len  = PROXY_MAX_IO_SZ + PROXY_HDR_SZ;\n\n\n\n    ctx->private = proxy;\n\n    proxy->sockfd = sock_id;\n\n    qemu_mutex_init(&proxy->mutex);\n\n\n\n    ctx->export_flags |= V9FS_PATHNAME_FSCONTEXT;\n\n    ctx->exops.get_st_gen = proxy_ioc_getversion;\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 5961
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xps_select_font_encoding(xps_font_t *font, int idx)\n{\n    byte *cmapdata, *entry;\n    int pid, eid;\n    if (idx < 0 || idx >= font->cmapsubcount)\n        return;\n    cmapdata = font->data + font->cmaptable;\n    entry = cmapdata + 4 + idx * 8;\n    pid = u16(entry + 0);\n    eid = u16(entry + 2);\n    font->cmapsubtable = font->cmaptable + u32(entry + 4);\n    font->usepua = (pid == 3 && eid == 0);\n}",
        "output": "1",
        "idx": 3171
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "release_buffer (HB_Buffer buffer, gboolean free_buffer)\n{\n  if (G_LIKELY (!free_buffer))\n    {\n      hb_buffer_clear (buffer);\n      G_UNLOCK (cached_buffer);\n    }\n  else\n    hb_buffer_free (buffer);\n}",
        "output": "1",
        "idx": 5728
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int kvm_irqchip_add_msi_route(KVMState *s, MSIMessage msg)\n\n{\n\n    struct kvm_irq_routing_entry kroute;\n\n    int virq;\n\n\n\n    if (!kvm_gsi_routing_enabled()) {\n\n        return -ENOSYS;\n\n    }\n\n\n\n    virq = kvm_irqchip_get_virq(s);\n\n    if (virq < 0) {\n\n        return virq;\n\n    }\n\n\n\n    kroute.gsi = virq;\n\n    kroute.type = KVM_IRQ_ROUTING_MSI;\n\n    kroute.flags = 0;\n\n    kroute.u.msi.address_lo = (uint32_t)msg.address;\n\n    kroute.u.msi.address_hi = msg.address >> 32;\n\n    kroute.u.msi.data = le32_to_cpu(msg.data);\n\n\n\n    kvm_add_routing_entry(s, &kroute);\n\n    kvm_irqchip_commit_routes(s);\n\n\n\n    return virq;\n\n}\n",
        "output": "1",
        "idx": 4964
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "d_lite_downto(VALUE self, VALUE min)\n{\n    VALUE date;\n\n    RETURN_ENUMERATOR(self, 1, &min);\n\n    date = self;\n    while (FIX2INT(d_lite_cmp(date, min)) >= 0) {\n\trb_yield(date);\n\tdate = d_lite_plus(date, INT2FIX(-1));\n    }\n    return self;\n}",
        "output": "0",
        "idx": 4434
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    StatusWith<UserHandle> acquireUserForSessionRefresh(OperationContext*,\n                                                        const UserName&,\n                                                        const User::UserId&) override {\n        UASSERT_NOT_IMPLEMENTED;\n    }",
        "output": "0",
        "idx": 2273
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void legacy_kbd_event(DeviceState *dev, QemuConsole *src,\n\n                             InputEvent *evt)\n\n{\n\n    QEMUPutKbdEntry *entry = (QEMUPutKbdEntry *)dev;\n\n    int scancodes[3], i, count;\n\n\n\n    if (!entry || !entry->put_kbd) {\n\n        return;\n\n    }\n\n    count = qemu_input_key_value_to_scancode(evt->key->key,\n\n                                             evt->key->down,\n\n                                             scancodes);\n\n    for (i = 0; i < count; i++) {\n\n        entry->put_kbd(entry->opaque, scancodes[i]);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1732
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "apr_status_t h2_push_diary_digest64_set(h2_push_diary *diary, const char *authority, \n                                        const char *data64url, apr_pool_t *pool)\n{\n    const char *data;\n    apr_size_t len = h2_util_base64url_decode(&data, data64url, pool);\n    /* Intentional no APLOGNO */\n    ap_log_perror(APLOG_MARK, GCSLOG_LEVEL, 0, pool,\n                  \"h2_push_diary_digest64_set: digest=%s, dlen=%d\", \n                  data64url, (int)len);\n    return h2_push_diary_digest_set(diary, authority, data, len);\n}",
        "output": "1",
        "idx": 880
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)\n{\n\t__issue_discard_cmd(sbi, false);\n\t__drop_discard_cmd(sbi);\n\t__wait_discard_cmd(sbi, false);\n}",
        "output": "1",
        "idx": 655
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "send_session_type (GdmSession *self,\n                   GdmSessionConversation *conversation)\n{\n        const char *session_type = \"x11\";\n\n        if (self->priv->session_type != NULL) {\n                session_type = self->priv->session_type;\n        }\n\n        gdm_dbus_worker_call_set_environment_variable (conversation->worker_proxy,\n                                                       \"XDG_SESSION_TYPE\",\n                                                       session_type,\n                                                       NULL, NULL, NULL);\n}",
        "output": "1",
        "idx": 5995
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int wav_parse(wav_reader_t *reader, int64_t *data_length)\n{\n    uint32_t container, fcc, chunk_size;\n\n    *data_length = 0;\n    container = riff_next_chunk(reader, &chunk_size);\n    ENSURE(container == RIFF_FOURCC('R','I','F','F') ||\n           container == RIFF_FOURCC('R','F','6','4'));\n    TRY_IO(pcm_read32le(&reader->io, &fcc));\n    ENSURE(fcc == RIFF_FOURCC('W','A','V','E'));\n\n    if (container == RIFF_FOURCC('R','F','6','4'))\n        riff_ds64(reader, data_length);\n    while ((fcc = riff_next_chunk(reader, &chunk_size)) != 0) {\n        if (fcc == RIFF_FOURCC('f','m','t',' ')) {\n            if (wav_fmt(reader, chunk_size) < 0)\n                goto FAIL;\n        } else if (fcc == RIFF_FOURCC('d','a','t','a')) {\n            if (container == RIFF_FOURCC('R','I','F','F'))\n                *data_length = chunk_size;\n            reader->data_offset = pcm_tell(&reader->io);\n            break;\n        } else {\n            TRY_IO(pcm_skip(&reader->io, (chunk_size + 1) & ~1));\n        }\n    }\n    if (fcc == RIFF_FOURCC('d','a','t','a'))\n        return 0;\nFAIL:\n    return -1;\n}",
        "output": "1",
        "idx": 1916
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ff_thread_get_buffer(AVCodecContext *avctx, ThreadFrame *f, int flags)\n\n{\n\n    f->owner = avctx;\n\n    return ff_get_buffer(avctx, f->f, flags);\n\n}\n",
        "output": "1",
        "idx": 588
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ext4_force_commit(struct super_block *sb)\n{\n\tjournal_t *journal;\n\n\tif (sb->s_flags & MS_RDONLY)\n\t\treturn 0;\n\n\tjournal = EXT4_SB(sb)->s_journal;\n\treturn ext4_journal_force_commit(journal);\n}",
        "output": "0",
        "idx": 370
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void start() {\n    entity_addr_t addr;\n    addr.parse(bindaddr.c_str());\n    msgr->bind(addr);\n    msgr->add_dispatcher_head(&dispatcher);\n    msgr->start();\n    msgr->wait();\n  }",
        "output": "0",
        "idx": 682
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Aml *aml_add(Aml *arg1, Aml *arg2)\n\n{\n\n    Aml *var = aml_opcode(0x72 /* AddOp */);\n\n    aml_append(var, arg1);\n\n    aml_append(var, arg2);\n\n    build_append_byte(var->buf, 0x00 /* NullNameOp */);\n\n    return var;\n\n}\n",
        "output": "0",
        "idx": 1289
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void nvme_sg_init(NvmeCtrl *n, NvmeSg *sg, bool dma)\n{\n    if (dma) {\n        pci_dma_sglist_init(&sg->qsg, &n->parent_obj, 0);\n        sg->flags = NVME_SG_DMA;\n    } else {\n        qemu_iovec_init(&sg->iov, 0);\n    }\n\n    sg->flags |= NVME_SG_ALLOC;\n}",
        "output": "0",
        "idx": 1154
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus GetAxisValueFromTensor(TfLiteContext* context,\n                                    const TfLiteTensor& axis, int* axis_value) {\n  TF_LITE_ENSURE_EQ(context, NumElements(&axis), 1);\n  switch (axis.type) {\n    case kTfLiteInt32:\n      *axis_value = *GetTensorData<int32_t>(&axis);\n      return kTfLiteOk;\n    case kTfLiteInt64:\n      *axis_value = *GetTensorData<int64_t>(&axis);\n      return kTfLiteOk;\n    default:\n      return kTfLiteError;\n  }\n}",
        "output": "0",
        "idx": 1492
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void slow_bar_writel(void *opaque, target_phys_addr_t addr, uint32_t val)\n\n{\n\n    AssignedDevRegion *d = opaque;\n\n    uint32_t *out = (uint32_t *)(d->u.r_virtbase + addr);\n\n\n\n    DEBUG(\"slow_bar_writel addr=0x\" TARGET_FMT_plx \" val=0x%08x\\n\", addr, val);\n\n    *out = val;\n\n}\n",
        "output": "0",
        "idx": 4313
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool umem_access_ok(u64 uaddr, u64 size, int access)\n{\n\tunsigned long a = uaddr;\n\n\t/* Make sure 64 bit math will not overflow. */\n\tif (vhost_overflow(uaddr, size))\n\t\treturn false;\n\n\tif ((access & VHOST_ACCESS_RO) &&\n\t    !access_ok((void __user *)a, size))\n\t\treturn false;\n\tif ((access & VHOST_ACCESS_WO) &&\n\t    !access_ok((void __user *)a, size))\n\t\treturn false;\n\treturn true;\n}",
        "output": "0",
        "idx": 1629
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline MagickBooleanType IsBenchmarkedOpenCLDevice(MagickCLDevice a,\n  MagickCLDeviceBenchmark *b)\n{\n  if ((LocaleCompare(a->platform_name,b->platform_name) == 0) &&\n      (LocaleCompare(a->vendor_name,b->vendor_name) == 0) &&\n      (LocaleCompare(a->name,b->name) == 0) &&\n      (LocaleCompare(a->version,b->version) == 0) &&\n      (a->max_clock_frequency == b->max_clock_frequency) &&\n      (a->max_compute_units == b->max_compute_units))\n    return(MagickTrue);\n\n  return(MagickFalse);\n}",
        "output": "0",
        "idx": 5504
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sctp_setsockopt_hmac_ident(struct sock *sk,\n\t\t\t\t    char __user *optval,\n\t\t\t\t    int optlen)\n{\n\tstruct sctp_hmacalgo *hmacs;\n\tint err;\n\n\tif (!sctp_auth_enable)\n\t\treturn -EACCES;\n\n\tif (optlen < sizeof(struct sctp_hmacalgo))\n\t\treturn -EINVAL;\n\n\thmacs = kmalloc(optlen, GFP_KERNEL);\n\tif (!hmacs)\n\t\treturn -ENOMEM;\n\n\tif (copy_from_user(hmacs, optval, optlen)) {\n\t\terr = -EFAULT;\n\t\tgoto out;\n\t}\n\n\tif (hmacs->shmac_num_idents == 0 ||\n\t    hmacs->shmac_num_idents > SCTP_AUTH_NUM_HMACS) {\n\t\terr = -EINVAL;\n\t\tgoto out;\n\t}\n\n\terr = sctp_auth_ep_set_hmacs(sctp_sk(sk)->ep, hmacs);\nout:\n\tkfree(hmacs);\n\treturn err;\n}",
        "output": "1",
        "idx": 1186
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mac_writereg(E1000State *s, int index, uint32_t val)\n\n{\n\n    uint32_t macaddr[2];\n\n\n\n    s->mac_reg[index] = val;\n\n\n\n    if (index == RA || index == RA + 1) {\n\n        macaddr[0] = cpu_to_le32(s->mac_reg[RA]);\n\n        macaddr[1] = cpu_to_le32(s->mac_reg[RA + 1]);\n\n        qemu_format_nic_info_str(qemu_get_queue(s->nic), (uint8_t *)macaddr);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1314
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void rds_ib_send_add_credits(struct rds_connection *conn, unsigned int credits)\n{\n\tstruct rds_ib_connection *ic = conn->c_transport_data;\n\n\tif (credits == 0)\n\t\treturn;\n\n\trdsdebug(\"rds_ib_send_add_credits(%u): current=%u%s\\n\",\n\t\t\tcredits,\n\t\t\tIB_GET_SEND_CREDITS(atomic_read(&ic->i_credits)),\n\t\t\ttest_bit(RDS_LL_SEND_FULL, &conn->c_flags) ? \", ll_send_full\" : \"\");\n\n\tatomic_add(IB_SET_SEND_CREDITS(credits), &ic->i_credits);\n\tif (test_and_clear_bit(RDS_LL_SEND_FULL, &conn->c_flags))\n\t\tqueue_delayed_work(rds_wq, &conn->c_send_w, 0);\n\n\tWARN_ON(IB_GET_SEND_CREDITS(credits) >= 16384);\n\n\trds_ib_stats_inc(s_ib_rx_credit_updates);\n}",
        "output": "0",
        "idx": 2405
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_put_h264_qpel4_mc03_msa(uint8_t *dst, const uint8_t *src,\n\n                                ptrdiff_t stride)\n\n{\n\n    avc_luma_vt_qrt_4w_msa(src - (stride * 2), stride, dst, stride, 4, 1);\n\n}\n",
        "output": "0",
        "idx": 2096
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int clear_refs_pte_range(pmd_t *pmd, unsigned long addr,\n\t\t\t\tunsigned long end, struct mm_walk *walk)\n{\n\tstruct vm_area_struct *vma = walk->private;\n\tpte_t *pte, ptent;\n\tspinlock_t *ptl;\n\tstruct page *page;\n\n\tsplit_huge_page_pmd(walk->mm, pmd);\n\n\tpte = pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);\n\tfor (; addr != end; pte++, addr += PAGE_SIZE) {\n\t\tptent = *pte;\n\t\tif (!pte_present(ptent))\n\t\t\tcontinue;\n\n\t\tpage = vm_normal_page(vma, addr, ptent);\n\t\tif (!page)\n\t\t\tcontinue;\n\n\t\tif (PageReserved(page))\n\t\t\tcontinue;\n\n\t\t/* Clear accessed and referenced bits. */\n\t\tptep_test_and_clear_young(vma, addr, pte);\n\t\tClearPageReferenced(page);\n\t}\n\tpte_unmap_unlock(pte - 1, ptl);\n\tcond_resched();\n\treturn 0;\n}",
        "output": "1",
        "idx": 701
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cpu_ioreq_pio(ioreq_t *req)\n\n{\n\n    int i;\n\n\n\n    if (req->dir == IOREQ_READ) {\n\n        if (!req->data_is_ptr) {\n\n            req->data = do_inp(req->addr, req->size);\n\n        } else {\n\n            uint32_t tmp;\n\n\n\n            for (i = 0; i < req->count; i++) {\n\n                tmp = do_inp(req->addr, req->size);\n\n                write_phys_req_item(req->data, req, i, &tmp);\n\n            }\n\n        }\n\n    } else if (req->dir == IOREQ_WRITE) {\n\n        if (!req->data_is_ptr) {\n\n            do_outp(req->addr, req->size, req->data);\n\n        } else {\n\n            for (i = 0; i < req->count; i++) {\n\n                uint32_t tmp = 0;\n\n\n\n                read_phys_req_item(req->data, req, i, &tmp);\n\n                do_outp(req->addr, req->size, tmp);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5573
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int vnc_zywrle_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)\n{\n    vs->zrle.type = VNC_ENCODING_ZYWRLE;\n    return zrle_send_framebuffer_update(vs, x, y, w, h);\n}",
        "output": "1",
        "idx": 2334
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static TAPState *net_tap_fd_init(VLANState *vlan, int fd)\n\n{\n\n    TAPState *s;\n\n\n\n    s = qemu_mallocz(sizeof(TAPState));\n\n    if (!s)\n\n        return NULL;\n\n    s->fd = fd;\n\n    s->vc = qemu_new_vlan_client(vlan, tap_receive, s);\n\n    qemu_set_fd_handler(s->fd, tap_send, NULL, s);\n\n    snprintf(s->vc->info_str, sizeof(s->vc->info_str), \"tap: fd=%d\", fd);\n\n    return s;\n\n}\n",
        "output": "1",
        "idx": 958
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void acpi_pcihp_device_unplug_cb(HotplugHandler *hotplug_dev, AcpiPciHpState *s,\n\n                                 DeviceState *dev, Error **errp)\n\n{\n\n    PCIDevice *pdev = PCI_DEVICE(dev);\n\n    int slot = PCI_SLOT(pdev->devfn);\n\n    int bsel = acpi_pcihp_get_bsel(pdev->bus);\n\n    if (bsel < 0) {\n\n        error_setg(errp, \"Unsupported bus. Bus doesn't have property '\"\n\n                   ACPI_PCIHP_PROP_BSEL \"' set\");\n\n        return;\n\n    }\n\n\n\n    s->acpi_pcihp_pci_status[bsel].down |= (1U << slot);\n\n    acpi_send_event(DEVICE(hotplug_dev), ACPI_PCI_HOTPLUG_STATUS);\n\n}\n",
        "output": "0",
        "idx": 1004
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vg_resource_attach_backing(VuGpu *g,\n                           struct virtio_gpu_ctrl_command *cmd)\n{\n    struct virtio_gpu_simple_resource *res;\n    struct virtio_gpu_resource_attach_backing ab;\n    int ret;\n\n    VUGPU_FILL_CMD(ab);\n    virtio_gpu_bswap_32(&ab, sizeof(ab));\n\n    res = virtio_gpu_find_resource(g, ab.resource_id);\n    if (!res) {\n        g_critical(\"%s: illegal resource specified %d\",\n                   __func__, ab.resource_id);\n        cmd->error = VIRTIO_GPU_RESP_ERR_INVALID_RESOURCE_ID;\n        return;\n    }\n\n    ret = vg_create_mapping_iov(g, &ab, cmd, &res->iov);\n    if (ret != 0) {\n        cmd->error = VIRTIO_GPU_RESP_ERR_UNSPEC;\n        return;\n    }\n\n    res->iov_cnt = ab.nr_entries;\n}",
        "output": "1",
        "idx": 3986
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int copy_to_user_auth(struct xfrm_algo_auth *auth, struct sk_buff *skb)\n{\n\tstruct xfrm_algo *algo;\n\tstruct nlattr *nla;\n\n\tnla = nla_reserve(skb, XFRMA_ALG_AUTH,\n\t\t\t  sizeof(*algo) + (auth->alg_key_len + 7) / 8);\n\tif (!nla)\n\t\treturn -EMSGSIZE;\n\n\talgo = nla_data(nla);\n\tstrcpy(algo->alg_name, auth->alg_name);\n\tmemcpy(algo->alg_key, auth->alg_key, (auth->alg_key_len + 7) / 8);\n\talgo->alg_key_len = auth->alg_key_len;\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 781
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tcp_chr_accept(void *opaque)\n\n{\n\n    CharDriverState *chr = opaque;\n\n    TCPCharDriver *s = chr->opaque;\n\n    struct sockaddr_in saddr;\n\n#ifndef _WIN32\n\n    struct sockaddr_un uaddr;\n\n#endif\n\n    struct sockaddr *addr;\n\n    socklen_t len;\n\n    int fd;\n\n\n\n    for(;;) {\n\n#ifndef _WIN32\n\n\tif (s->is_unix) {\n\n\t    len = sizeof(uaddr);\n\n\t    addr = (struct sockaddr *)&uaddr;\n\n\t} else\n\n#endif\n\n\t{\n\n\t    len = sizeof(saddr);\n\n\t    addr = (struct sockaddr *)&saddr;\n\n\t}\n\n        fd = accept(s->listen_fd, addr, &len);\n\n        if (fd < 0 && errno != EINTR) {\n\n            return;\n\n        } else if (fd >= 0) {\n\n            if (s->do_telnetopt)\n\n                tcp_chr_telnet_init(fd);\n\n            break;\n\n        }\n\n    }\n\n    socket_set_nonblock(fd);\n\n    if (s->do_nodelay)\n\n        socket_set_nodelay(fd);\n\n    s->fd = fd;\n\n    qemu_set_fd_handler(s->listen_fd, NULL, NULL, NULL);\n\n    tcp_chr_connect(chr);\n\n}\n",
        "output": "1",
        "idx": 4680
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_keycode(const char *key)\n\n{\n\n    const KeyDef *p;\n\n    char *endp;\n\n    int ret;\n\n\n\n    for(p = key_defs; p->name != NULL; p++) {\n\n        if (!strcmp(key, p->name))\n\n            return p->keycode;\n\n    }\n\n    if (strstart(key, \"0x\", NULL)) {\n\n        ret = strtoul(key, &endp, 0);\n\n        if (*endp == '\\0' && ret >= 0x01 && ret <= 0xff)\n\n            return ret;\n\n    }\n\n    return -1;\n\n}\n",
        "output": "0",
        "idx": 5242
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t driver_override_show(struct device *dev,\n\t\t\t\t    struct device_attribute *attr, char *buf)\n{\n\tstruct platform_device *pdev = to_platform_device(dev);\n\tssize_t len;\n\n\tdevice_lock(dev);\n\tlen = sprintf(buf, \"%s\\n\", pdev->driver_override);\n\tdevice_unlock(dev);\n\treturn len;\n}",
        "output": "1",
        "idx": 5154
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nvdec_vp9_decode_slice(AVCodecContext *avctx, const uint8_t *buffer, uint32_t size)\n\n{\n\n    NVDECContext *ctx = avctx->internal->hwaccel_priv_data;\n\n    void *tmp;\n\n\n\n    tmp = av_fast_realloc(ctx->slice_offsets, &ctx->slice_offsets_allocated,\n\n                          (ctx->nb_slices + 1) * sizeof(*ctx->slice_offsets));\n\n    if (!tmp)\n\n        return AVERROR(ENOMEM);\n\n    ctx->slice_offsets = tmp;\n\n\n\n    if (!ctx->bitstream)\n\n        ctx->bitstream = (uint8_t*)buffer;\n\n\n\n    ctx->slice_offsets[ctx->nb_slices] = buffer - ctx->bitstream;\n\n    ctx->bitstream_len += size;\n\n    ctx->nb_slices++;\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4966
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gnome_desktop_thumbnail_factory_save_thumbnail (GnomeDesktopThumbnailFactory *factory,\n\t\t\t\t\t\tGdkPixbuf             *thumbnail,\n\t\t\t\t\t\tconst char            *uri,\n\t\t\t\t\t\ttime_t                 original_mtime)\n{\n  char *path;\n\n  path = thumbnail_path (uri, factory->priv->size);\n  if (!save_thumbnail (thumbnail, path, uri, original_mtime))\n    {\n      thumbnail = make_failed_thumbnail ();\n      g_free (path);\n      path = thumbnail_failed_path (uri);\n      save_thumbnail (thumbnail, path, uri, original_mtime);\n      g_object_unref (thumbnail);\n    }\n  g_free (path);\n}",
        "output": "0",
        "idx": 3308
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void btrfs_close_one_device(struct btrfs_device *device)\n{\n\tstruct btrfs_fs_devices *fs_devices = device->fs_devices;\n\tstruct btrfs_device *new_device;\n\tstruct rcu_string *name;\n\n\tif (device->bdev)\n\t\tfs_devices->open_devices--;\n\n\tif (test_bit(BTRFS_DEV_STATE_WRITEABLE, &device->dev_state) &&\n\t    device->devid != BTRFS_DEV_REPLACE_DEVID) {\n\t\tlist_del_init(&device->dev_alloc_list);\n\t\tfs_devices->rw_devices--;\n\t}\n\n\tif (test_bit(BTRFS_DEV_STATE_MISSING, &device->dev_state))\n\t\tfs_devices->missing_devices--;\n\n\tbtrfs_close_bdev(device);\n\n\tnew_device = btrfs_alloc_device(NULL, &device->devid,\n\t\t\t\t\tdevice->uuid);\n\tBUG_ON(IS_ERR(new_device)); /* -ENOMEM */\n\n\t/* Safe because we are under uuid_mutex */\n\tif (device->name) {\n\t\tname = rcu_string_strdup(device->name->str, GFP_NOFS);\n\t\tBUG_ON(!name); /* -ENOMEM */\n\t\trcu_assign_pointer(new_device->name, name);\n\t}\n\n\tlist_replace_rcu(&device->dev_list, &new_device->dev_list);\n\tnew_device->fs_devices = device->fs_devices;\n\n\tcall_rcu(&device->rcu, free_device_rcu);\n}",
        "output": "0",
        "idx": 4718
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __exit ipgre_fini(void)\n{\n\trtnl_link_unregister(&ipgre_tap_ops);\n\trtnl_link_unregister(&ipgre_link_ops);\n\tunregister_pernet_device(&ipgre_net_ops);\n\tif (inet_del_protocol(&ipgre_protocol, IPPROTO_GRE) < 0)\n\t\tprintk(KERN_INFO \"ipgre close: can't remove protocol\\n\");\n}",
        "output": "1",
        "idx": 1552
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TIFFNumberOfStrips(TIFF* tif)\n{\n\tTIFFDirectory *td = &tif->tif_dir;\n\tuint32 nstrips;\n\n    /* If the value was already computed and store in td_nstrips, then return it,\n       since ChopUpSingleUncompressedStrip might have altered and resized the\n       since the td_stripbytecount and td_stripoffset arrays to the new value\n       after the initial affectation of td_nstrips = TIFFNumberOfStrips() in\n       tif_dirread.c ~line 3612.\n       See http://bugzilla.maptools.org/show_bug.cgi?id=2587 */\n    if( td->td_nstrips )\n        return td->td_nstrips;\n\n\tnstrips = (td->td_rowsperstrip == (uint32) -1 ? 1 :\n\t     TIFFhowmany_32(td->td_imagelength, td->td_rowsperstrip));\n\tif (td->td_planarconfig == PLANARCONFIG_SEPARATE)\n\t\tnstrips = _TIFFMultiply32(tif, nstrips, (uint32)td->td_samplesperpixel,\n\t\t    \"TIFFNumberOfStrips\");\n\treturn (nstrips);\n}",
        "output": "1",
        "idx": 3030
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void exec_start_incoming_migration(const char *command, Error **errp)\n\n{\n\n    QEMUFile *f;\n\n\n\n    DPRINTF(\"Attempting to start an incoming migration\\n\");\n\n    f = qemu_popen_cmd(command, \"r\");\n\n    if(f == NULL) {\n\n        error_setg_errno(errp, errno, \"failed to popen the migration source\");\n\n        return;\n\n    }\n\n\n\n    qemu_set_fd_handler2(qemu_get_fd(f), NULL,\n\n\t\t\t exec_accept_incoming_migration, NULL, f);\n\n}\n",
        "output": "1",
        "idx": 5460
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int proxy_utimensat(FsContext *s, V9fsPath *fs_path,\n\n                           const struct timespec *buf)\n\n{\n\n    int retval;\n\n    retval = v9fs_request(s->private, T_UTIME, NULL, \"sqqqq\",\n\n                          fs_path,\n\n                          buf[0].tv_sec, buf[0].tv_nsec,\n\n                          buf[1].tv_sec, buf[1].tv_nsec);\n\n    if (retval < 0) {\n\n        errno = -retval;\n\n    }\n\n    return retval;\n\n}\n",
        "output": "0",
        "idx": 1234
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(ZNCTest, AwayNotify) {\n    auto znc = Run();\n    auto ircd = ConnectIRCd();\n    auto client = ConnectClient();\n    client.Write(\"CAP LS\");\n    client.Write(\"PASS :hunter2\");\n    client.Write(\"NICK nick\");\n    client.Write(\"USER user/test x x :x\");\n    QByteArray cap_ls;\n    client.ReadUntilAndGet(\" LS :\", cap_ls);\n    ASSERT_THAT(cap_ls.toStdString(), AllOf(HasSubstr(\"cap-notify\"), Not(HasSubstr(\"away-notify\"))));\n    client.Write(\"CAP REQ :cap-notify\");\n    client.ReadUntil(\"ACK :cap-notify\");\n    client.Write(\"CAP END\");\n    client.ReadUntil(\" 001 \");\n    ircd.ReadUntil(\"USER\");\n    ircd.Write(\"CAP user LS :away-notify\");\n    ircd.ReadUntil(\"CAP REQ :away-notify\");\n    ircd.Write(\"CAP user ACK :away-notify\");\n    ircd.ReadUntil(\"CAP END\");\n    ircd.Write(\":server 001 user :welcome\");\n    client.ReadUntil(\"CAP user NEW :away-notify\");\n    client.Write(\"CAP REQ :away-notify\");\n    client.ReadUntil(\"ACK :away-notify\");\n    ircd.Write(\":x!y@z AWAY :reason\");\n    client.ReadUntil(\":x!y@z AWAY :reason\");\n    ircd.Close();\n    client.ReadUntil(\"DEL :away-notify\");\n}",
        "output": "1",
        "idx": 5082
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_ram_foreach_block(RAMBlockIterFunc func, void *opaque)\n{\n    RAMBlock *block;\n    int ret = 0;\n\n    rcu_read_lock();\n    RAMBLOCK_FOREACH(block) {\n        ret = func(block->idstr, block->host, block->offset,\n                   block->used_length, opaque);\n        if (ret) {\n            break;\n        }\n    }\n    rcu_read_unlock();\n    return ret;\n}",
        "output": "0",
        "idx": 4394
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct iscsi_task *iscsi_itt_to_task(struct iscsi_conn *conn, itt_t itt)\n{\n\tstruct iscsi_session *session = conn->session;\n\tint i;\n\n\tif (itt == RESERVED_ITT)\n\t\treturn NULL;\n\n\tif (session->tt->parse_pdu_itt)\n\t\tsession->tt->parse_pdu_itt(conn, itt, &i, NULL);\n\telse\n\t\ti = get_itt(itt);\n\tif (i >= session->cmds_max)\n\t\treturn NULL;\n\n\treturn session->cmds[i];\n}",
        "output": "0",
        "idx": 1672
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void m5206_mbar_writew(void *opaque, target_phys_addr_t offset,\n\n                              uint32_t value)\n\n{\n\n    m5206_mbar_state *s = (m5206_mbar_state *)opaque;\n\n    int width;\n\n    offset &= 0x3ff;\n\n    if (offset > 0x200) {\n\n        hw_error(\"Bad MBAR write offset 0x%x\", (int)offset);\n\n    }\n\n    width = m5206_mbar_width[offset >> 2];\n\n    if (width > 2) {\n\n        uint32_t tmp;\n\n        tmp = m5206_mbar_readl(opaque, offset & ~3);\n\n        if (offset & 3) {\n\n            tmp = (tmp & 0xffff0000) | value;\n\n        } else {\n\n            tmp = (tmp & 0x0000ffff) | (value << 16);\n\n        }\n\n        m5206_mbar_writel(opaque, offset & ~3, tmp);\n\n        return;\n\n    } else if (width < 2) {\n\n        m5206_mbar_writeb(opaque, offset, value >> 8);\n\n        m5206_mbar_writeb(opaque, offset + 1, value & 0xff);\n\n        return;\n\n    }\n\n    m5206_mbar_write(s, offset, value, 2);\n\n}\n",
        "output": "1",
        "idx": 5971
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void helper_done(CPUSPARCState *env)\n\n{\n\n    trap_state *tsptr = cpu_tsptr(env);\n\n\n\n    env->pc = tsptr->tnpc;\n\n    env->npc = tsptr->tnpc + 4;\n\n    cpu_put_ccr(env, tsptr->tstate >> 32);\n\n    env->asi = (tsptr->tstate >> 24) & 0xff;\n\n    cpu_change_pstate(env, (tsptr->tstate >> 8) & 0xf3f);\n\n    cpu_put_cwp64(env, tsptr->tstate & 0xff);\n\n    if (cpu_has_hypervisor(env)) {\n\n        uint32_t new_gl = (tsptr->tstate >> 40) & 7;\n\n        env->hpstate = env->htstate[env->tl];\n\n        cpu_gl_switch_gregs(env, new_gl);\n\n        env->gl = new_gl;\n\n    }\n\n    env->tl--;\n\n\n\n    trace_win_helper_done(env->tl);\n\n\n\n#if !defined(CONFIG_USER_ONLY)\n\n    if (cpu_interrupts_enabled(env)) {\n\n\n        cpu_check_irqs(env);\n\n\n    }\n\n#endif\n\n}",
        "output": "1",
        "idx": 4661
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void __iomem *hns_rcb_common_get_vaddr(struct rcb_common_cb *rcb_common)\n{\n\tstruct dsaf_device *dsaf_dev = rcb_common->dsaf_dev;\n\n\treturn dsaf_dev->ppe_base + RCB_COMMON_REG_OFFSET;\n}",
        "output": "0",
        "idx": 1164
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "x509_error_string( void )\n{\n\treturn _globus_error_message;\n}",
        "output": "0",
        "idx": 3091
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned char *createIntList() {\n    unsigned char *zl = ziplistNew();\n    char buf[32];\n\n    sprintf(buf, \"100\");\n    zl = ziplistPush(zl, (unsigned char*)buf, strlen(buf), ZIPLIST_TAIL);\n    sprintf(buf, \"128000\");\n    zl = ziplistPush(zl, (unsigned char*)buf, strlen(buf), ZIPLIST_TAIL);\n    sprintf(buf, \"-100\");\n    zl = ziplistPush(zl, (unsigned char*)buf, strlen(buf), ZIPLIST_HEAD);\n    sprintf(buf, \"4294967296\");\n    zl = ziplistPush(zl, (unsigned char*)buf, strlen(buf), ZIPLIST_HEAD);\n    sprintf(buf, \"non integer\");\n    zl = ziplistPush(zl, (unsigned char*)buf, strlen(buf), ZIPLIST_TAIL);\n    sprintf(buf, \"much much longer non integer\");\n    zl = ziplistPush(zl, (unsigned char*)buf, strlen(buf), ZIPLIST_TAIL);\n    return zl;\n}",
        "output": "0",
        "idx": 5430
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long do_rt_sigreturn(CPUState *env)\n\n{\n\n    fprintf(stderr, \"do_rt_sigreturn: not implemented\\n\");\n\n    return -TARGET_ENOSYS;\n\n}\n",
        "output": "1",
        "idx": 3199
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cls_rgw_set_bucket_resharding(cls_method_context_t hctx, bufferlist *in,  bufferlist *out)\n{\n  cls_rgw_set_bucket_resharding_op op;\n\n  bufferlist::iterator in_iter = in->begin();\n  try {\n    ::decode(op, in_iter);\n  } catch (buffer::error& err) {\n    CLS_LOG(1, \"ERROR: cls_rgw_set_bucket_resharding: failed to decode entry\\n\");\n    return -EINVAL;\n  }\n\n  bufferlist bl;\n  ::encode(true, bl);\n  int ret = cls_cxx_setxattr(hctx, resharding_attr.c_str(), &bl);\n  if (ret < 0) {\n    CLS_LOG(0, \"ERROR: %s(): cls_cxx_setxattr (attr=%s) returned %d\", __func__, resharding_attr.c_str(), ret);\n    return ret;\n  }\n\n  ret = cls_cxx_write(hctx, 0, op.entry.data.length(), &op.entry.data);\n  if (ret < 0) {\n    CLS_LOG(0, \"ERROR: %s(): cls_cxx_write returned %d\", __func__, ret);\n    return ret;\n  }\n\n  return 0;\n}",
        "output": "0",
        "idx": 1692
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void xen_be_unbind_evtchn(struct XenDevice *xendev)\n\n{\n\n    if (xendev->local_port == -1) {\n\n        return;\n\n    }\n\n    qemu_set_fd_handler(xc_evtchn_fd(xendev->evtchndev), NULL, NULL, NULL);\n\n    xc_evtchn_unbind(xendev->evtchndev, xendev->local_port);\n\n    xen_be_printf(xendev, 2, \"unbind evtchn port %d\\n\", xendev->local_port);\n\n    xendev->local_port = -1;\n\n}\n",
        "output": "0",
        "idx": 4626
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vnc_tls_handshake_io(void *opaque) {\n\n    struct VncState *vs = (struct VncState *)opaque;\n\n\n\n    VNC_DEBUG(\"Handshake IO continue\\n\");\n\n    vnc_start_vencrypt_handshake(vs);\n\n}\n",
        "output": "0",
        "idx": 3866
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cuda_init (int *cuda_mem_index, qemu_irq irq)\n\n{\n\n    struct tm tm;\n\n    CUDAState *s = &cuda_state;\n\n\n\n    s->irq = irq;\n\n\n\n    s->timers[0].index = 0;\n\n    s->timers[0].timer = qemu_new_timer(vm_clock, cuda_timer1, s);\n\n\n\n    s->timers[1].index = 1;\n\n\n\n    qemu_get_timedate(&tm, RTC_OFFSET);\n\n    s->tick_offset = mktimegm(&tm);\n\n\n\n    s->adb_poll_timer = qemu_new_timer(vm_clock, cuda_adb_poll, s);\n\n    *cuda_mem_index = cpu_register_io_memory(0, cuda_read, cuda_write, s);\n\n    register_savevm(\"cuda\", -1, 1, cuda_save, cuda_load, s);\n\n    qemu_register_reset(cuda_reset, s);\n\n    cuda_reset(s);\n\n}\n",
        "output": "1",
        "idx": 2413
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sk_alloc_security(struct sock *sk, int family, gfp_t priority)\n{\n\tstruct sk_security_struct *ssec;\n\n\tssec = kzalloc(sizeof(*ssec), priority);\n\tif (!ssec)\n\t\treturn -ENOMEM;\n\n\tssec->peer_sid = SECINITSID_UNLABELED;\n\tssec->sid = SECINITSID_UNLABELED;\n\tsk->sk_security = ssec;\n\n\tselinux_netlbl_sk_security_reset(ssec);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 5308
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PPC_OP(cmpli)\n\n{\n\n    if (T0 < PARAM(1)) {\n\n        T0 = 0x08;\n\n    } else if (T0 > PARAM(1)) {\n\n        T0 = 0x04;\n\n    } else {\n\n        T0 = 0x02;\n\n    }\n\n    RETURN();\n\n}\n",
        "output": "1",
        "idx": 4576
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool cpu_thread_is_idle(CPUState *cpu)\n\n{\n\n    if (cpu->stop || cpu->queued_work_first) {\n\n        return false;\n\n    }\n\n    if (cpu->stopped || !runstate_is_running()) {\n\n        return true;\n\n    }\n\n    if (!cpu->halted || qemu_cpu_has_work(cpu) ||\n\n        kvm_async_interrupts_enabled()) {\n\n        return false;\n\n    }\n\n    return true;\n\n}\n",
        "output": "0",
        "idx": 456
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mysql_free_result(MYSQL_RES *result)\n{\n  DBUG_ENTER(\"mysql_free_result\");\n  DBUG_PRINT(\"enter\",(\"mysql_res: 0x%lx\", (long) result));\n  if (result)\n  {\n    MYSQL *mysql= result->handle;\n    if (mysql)\n    {\n      if (mysql->unbuffered_fetch_owner == &result->unbuffered_fetch_cancelled)\n        mysql->unbuffered_fetch_owner= 0;\n      if (mysql->status == MYSQL_STATUS_USE_RESULT)\n      {\n        (*mysql->methods->flush_use_result)(mysql, FALSE);\n        mysql->status=MYSQL_STATUS_READY;\n        if (mysql->unbuffered_fetch_owner)\n          *mysql->unbuffered_fetch_owner= TRUE;\n      }\n    }\n    free_rows(result->data);\n    if (result->fields)\n      free_root(&result->field_alloc,MYF(0));\n    my_free(result->row);\n    my_free(result);\n  }\n  DBUG_VOID_RETURN;\n}",
        "output": "0",
        "idx": 1780
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_int32_equal(QEMUFile *f, void *pv, size_t size,\n\n                           VMStateField *field)\n\n{\n\n    int32_t *v = pv;\n\n    int32_t v2;\n\n    qemu_get_sbe32s(f, &v2);\n\n\n\n    if (*v == v2) {\n\n        return 0;\n\n\n    error_report(\"%\" PRIx32 \" != %\" PRIx32, *v, v2);\n\n\n\n\n    return -EINVAL;\n",
        "output": "1",
        "idx": 1671
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cJSON *cJSON_CreateInt( int64_t num )\n{\n\tcJSON *item = cJSON_New_Item();\n\tif ( item ) {\n\t\titem->type = cJSON_Number;\n\t\titem->valuefloat = num;\n\t\titem->valueint = num;\n\t}\n\treturn item;\n}",
        "output": "1",
        "idx": 4848
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_i_block(FourXContext *f, DCTELEM *block){\n    int code, i, j, level, val;\n    /* DC coef */\n    val = get_vlc2(&f->pre_gb, f->pre_vlc.table, ACDC_VLC_BITS, 3);\n    if (val>>4){\n        av_log(f->avctx, AV_LOG_ERROR, \"error dc run != 0\\n\");\n    if(val)\n        val = get_xbits(&f->gb, val);\n    val = val * dequant_table[0] + f->last_dc;\n    f->last_dc =\n    block[0] = val;\n    /* AC coefs */\n    i = 1;\n    for(;;) {\n        code = get_vlc2(&f->pre_gb, f->pre_vlc.table, ACDC_VLC_BITS, 3);\n        /* EOB */\n        if (code == 0)\n            break;\n        if (code == 0xf0) {\n            i += 16;\n        } else {\n            level = get_xbits(&f->gb, code & 0xf);\n            i += code >> 4;\n            if (i >= 64) {\n                av_log(f->avctx, AV_LOG_ERROR, \"run %d oveflow\\n\", i);\n                return 0;\n            j= ff_zigzag_direct[i];\n            block[j] = level * dequant_table[j];\n            i++;\n            if (i >= 64)\n                break;\n    return 0;",
        "output": "1",
        "idx": 2448
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DocumentSourceLookUp::DocumentSourceLookUp(NamespaceString fromNs,\n                                           std::string as,\n                                           const boost::intrusive_ptr<ExpressionContext>& expCtx)\n    : DocumentSource(kStageName, expCtx),\n      _fromNs(std::move(fromNs)),\n      _as(std::move(as)),\n      _variables(expCtx->variables),\n      _variablesParseState(expCtx->variablesParseState.copyWith(_variables.useIdGenerator())) {\n    const auto& resolvedNamespace = expCtx->getResolvedNamespace(_fromNs);\n    _resolvedNs = resolvedNamespace.ns;\n    _resolvedPipeline = resolvedNamespace.pipeline;\n    _fromExpCtx = expCtx->copyWith(_resolvedNs);\n\n    _fromExpCtx->subPipelineDepth += 1;\n    uassert(ErrorCodes::MaxSubPipelineDepthExceeded,\n            str::stream() << \"Maximum number of nested $lookup sub-pipelines exceeded. Limit is \"\n                          << kMaxSubPipelineDepth,\n            _fromExpCtx->subPipelineDepth <= kMaxSubPipelineDepth);\n}",
        "output": "1",
        "idx": 2291
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TCGv_i64 tcg_global_reg_new_i64(int reg, const char *name)\n\n{\n\n    int idx;\n\n\n\n    idx = tcg_global_reg_new_internal(TCG_TYPE_I64, reg, name);\n\n    return MAKE_TCGV_I64(idx);\n\n}\n",
        "output": "0",
        "idx": 4843
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool spapr_drc_needed(void *opaque)\n\n{\n\n    sPAPRDRConnector *drc = (sPAPRDRConnector *)opaque;\n\n    sPAPRDRConnectorClass *drck = SPAPR_DR_CONNECTOR_GET_CLASS(drc);\n\n\n\n    /* If no dev is plugged in there is no need to migrate the DRC state */\n\n    if (!drc->dev) {\n\n        return false;\n\n    }\n\n\n\n    /*\n\n     * We need to migrate the state if it's not equal to the expected\n\n     * long-term state, which is the same as the coldplugged initial\n\n     * state */\n\n    return (drc->state != drck->ready_state);\n\n}\n",
        "output": "1",
        "idx": 610
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void block_job_cancel_sync(BlockJob *job)\n\n{\n\n    BlockDriverState *bs = job->bs;\n\n\n\n    assert(bs->job == job);\n\n    block_job_cancel(job);\n\n    while (bs->job != NULL && bs->job->busy) {\n\n        qemu_aio_wait();\n\n    }\n\n}\n",
        "output": "1",
        "idx": 745
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(HttpConnectionManagerConfigTest, NormalizePathFalse) {\n  const std::string yaml_string = R\"EOF(\n  stat_prefix: ingress_http\n  route_config:\n    name: local_route\n  normalize_path: false\n  http_filters:\n  - name: envoy.filters.http.router\n  )EOF\";\n\n  EXPECT_CALL(context_.runtime_loader_.snapshot_,\n              featureEnabled(\"http_connection_manager.normalize_path\", An<uint64_t>()))\n      .Times(0);\n  HttpConnectionManagerConfig config(parseHttpConnectionManagerFromYaml(yaml_string), context_,\n                                     date_provider_, route_config_provider_manager_,\n                                     scoped_routes_config_provider_manager_, http_tracer_manager_,\n                                     filter_config_provider_manager_);\n  EXPECT_FALSE(config.shouldNormalizePath());\n}",
        "output": "1",
        "idx": 2198
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct ldb_message *ldb_msg_copy(TALLOC_CTX *mem_ctx,\n\t\t\t\t const struct ldb_message *msg)\n{\n\tstruct ldb_message *msg2;\n\tunsigned int i, j;\n\n\tmsg2 = ldb_msg_copy_shallow(mem_ctx, msg);\n\tif (msg2 == NULL) return NULL;\n\n\tif (msg2->dn != NULL) {\n\t\tmsg2->dn = ldb_dn_copy(msg2, msg2->dn);\n\t\tif (msg2->dn == NULL) goto failed;\n\t}\n\n\tfor (i=0;i<msg2->num_elements;i++) {\n\t\tstruct ldb_message_element *el = &msg2->elements[i];\n\t\tstruct ldb_val *values = el->values;\n\t\tel->name = talloc_strdup(msg2->elements, el->name);\n\t\tif (el->name == NULL) goto failed;\n\t\tel->values = talloc_array(msg2->elements, struct ldb_val, el->num_values);\n\t\tif (el->values == NULL) goto failed;\n\t\tfor (j=0;j<el->num_values;j++) {\n\t\t\tel->values[j] = ldb_val_dup(el->values, &values[j]);\n\t\t\tif (el->values[j].data == NULL && values[j].length != 0) {\n\t\t\t\tgoto failed;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn msg2;\n\nfailed:\n\ttalloc_free(msg2);\n\treturn NULL;\n}",
        "output": "1",
        "idx": 4960
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "      TF_EXCLUSIVE_LOCKS_REQUIRED(mu_) {\n    // Insert key and tuples into the map\n    map_.insert({key, std::move(*tuple)});\n\n    notify_removers();\n\n    return Status::OK();\n  }",
        "output": "1",
        "idx": 4503
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int qemu_chr_open_udp(QemuOpts *opts, CharDriverState **_chr)\n\n{\n\n    CharDriverState *chr = NULL;\n\n    NetCharDriver *s = NULL;\n\n    int fd = -1;\n\n    int ret;\n\n\n\n    chr = g_malloc0(sizeof(CharDriverState));\n\n    s = g_malloc0(sizeof(NetCharDriver));\n\n\n\n    fd = inet_dgram_opts(opts);\n\n    if (fd < 0) {\n\n        fprintf(stderr, \"inet_dgram_opts failed\\n\");\n\n        ret = -errno;\n\n        goto return_err;\n\n    }\n\n\n\n    s->fd = fd;\n\n    s->bufcnt = 0;\n\n    s->bufptr = 0;\n\n    chr->opaque = s;\n\n    chr->chr_write = udp_chr_write;\n\n    chr->chr_update_read_handler = udp_chr_update_read_handler;\n\n    chr->chr_close = udp_chr_close;\n\n\n\n    *_chr = chr;\n\n    return 0;\n\n\n\nreturn_err:\n\n    g_free(chr);\n\n    g_free(s);\n\n    if (fd >= 0) {\n\n        closesocket(fd);\n\n    }\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 3959
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_text_distance(gs_point *pdist, double dx, double dy, const gs_matrix *pmat)\n{\n    int code = gs_distance_transform_inverse(dx, dy, pmat, pdist);\n    double rounded;\n\n    if (code == gs_error_undefinedresult) {\n        /* The CTM is degenerate.\n           Can't know the distance in user space.\n           Set zero because we believe it is not important for rendering.\n           We want to copy the text to PDF to make it searchable.\n           Bug 689006.\n         */\n        pdist->x = pdist->y = 0;\n    } else if (code < 0)\n        return code;\n    /* If the distance is very close to integers, round it. */\n    if (fabs(pdist->x - (rounded = floor(pdist->x + 0.5))) < 0.0005)\n        pdist->x = rounded;\n    if (fabs(pdist->y - (rounded = floor(pdist->y + 0.5))) < 0.0005)\n        pdist->y = rounded;\n    return 0;\n}",
        "output": "1",
        "idx": 5093
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void tftp_input(struct sockaddr_storage *srcsas, struct mbuf *m)\n{\n    struct tftp_t *tp = (struct tftp_t *)m->m_data;\n\n    switch (ntohs(tp->tp_op)) {\n    case TFTP_RRQ:\n        tftp_handle_rrq(m->slirp, srcsas, tp, m->m_len);\n        break;\n\n    case TFTP_ACK:\n        tftp_handle_ack(m->slirp, srcsas, tp, m->m_len);\n        break;\n\n    case TFTP_ERROR:\n        tftp_handle_error(m->slirp, srcsas, tp, m->m_len);\n        break;\n    }\n}",
        "output": "1",
        "idx": 1847
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virgl_cmd_resource_flush(VirtIOGPU *g,\n                                     struct virtio_gpu_ctrl_command *cmd)\n{\n    struct virtio_gpu_resource_flush rf;\n    int i;\n\n    VIRTIO_GPU_FILL_CMD(rf);\n    trace_virtio_gpu_cmd_res_flush(rf.resource_id,\n                                   rf.r.width, rf.r.height, rf.r.x, rf.r.y);\n\n    for (i = 0; i < VIRTIO_GPU_MAX_SCANOUT; i++) {\n        if (g->scanout[i].resource_id != rf.resource_id) {\n            continue;\n        }\n        virtio_gpu_rect_update(g, i, rf.r.x, rf.r.y, rf.r.width, rf.r.height);\n    }\n}",
        "output": "1",
        "idx": 4030
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_get_timedate(struct tm *tm, int offset)\n\n{\n\n    time_t ti;\n\n\n\n    time(&ti);\n\n    ti += offset;\n\n    if (rtc_date_offset == -1) {\n\n        if (rtc_utc)\n\n            gmtime_r(&ti, tm);\n\n        else\n\n            localtime_r(&ti, tm);\n\n    } else {\n\n        ti -= rtc_date_offset;\n\n        gmtime_r(&ti, tm);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3692
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int mongo_env_write_socket( mongo *conn, const void *buf, int len ) {\n    const char *cbuf = buf;\n#ifdef __APPLE__\n    int flags = 0;\n#else\n    int flags = MSG_NOSIGNAL;\n#endif\n\n    while ( len ) {\n        int sent = send( conn->sock, cbuf, len, flags );\n        if ( sent == -1 ) {\n            if (errno == EPIPE)\n                conn->connected = 0;\n            __mongo_set_error( conn, MONGO_IO_ERROR, strerror( errno ), errno );\n            return MONGO_ERROR;\n        }\n        cbuf += sent;\n        len -= sent;\n    }\n\n    return MONGO_OK;\n}",
        "output": "1",
        "idx": 213
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_input_event_sync(void)\n\n{\n\n    QemuInputHandlerState *s;\n\n\n\n    if (!runstate_is_running() && !runstate_check(RUN_STATE_SUSPENDED)) {\n\n        return;\n\n    }\n\n\n\n    trace_input_event_sync();\n\n\n\n    QTAILQ_FOREACH(s, &handlers, node) {\n\n        if (!s->events) {\n\n            continue;\n\n        }\n\n        if (s->handler->sync) {\n\n            s->handler->sync(s->dev);\n\n        }\n\n        s->events = 0;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2083
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    if (dirName == NULL) {\n        return WS_MEMORY_E;\n    }",
        "output": "0",
        "idx": 3730
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pcan_usb_pro_drv_loaded(struct peak_usb_device *dev, int loaded)\n{\n\tu8 *buffer;\n\tint err;\n\n\tbuffer = kmalloc(PCAN_USBPRO_FCT_DRVLD_REQ_LEN, GFP_KERNEL);\n\tif (!buffer)\n\t\treturn -ENOMEM;\n\n\tbuffer[0] = 0;\n\tbuffer[1] = !!loaded;\n\n\terr = pcan_usb_pro_send_req(dev, PCAN_USBPRO_REQ_FCT,\n\t\t\t\t    PCAN_USBPRO_FCT_DRVLD, buffer,\n\t\t\t\t    PCAN_USBPRO_FCT_DRVLD_REQ_LEN);\n\tkfree(buffer);\n\n\treturn err;\n}",
        "output": "1",
        "idx": 3624
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mov_read_elst(MOVContext *c, ByteIOContext *pb, MOVAtom atom)\n\n{\n\n    MOVStreamContext *sc = c->fc->streams[c->fc->nb_streams-1]->priv_data;\n\n    int i, edit_count;\n\n\n\n    get_byte(pb); /* version */\n\n    get_be24(pb); /* flags */\n\n    edit_count= sc->edit_count = get_be32(pb);     /* entries */\n\n\n\n    for(i=0; i<edit_count; i++){\n\n        int time;\n\n        get_be32(pb); /* Track duration */\n\n        time = get_be32(pb); /* Media time */\n\n        get_be32(pb); /* Media rate */\n\n        if (time != 0)\n\n            av_log(c->fc, AV_LOG_WARNING, \"edit list not starting at 0, \"\n\n                   \"a/v desync might occur, patch welcome\\n\");\n\n    }\n\n    dprintf(c->fc, \"track[%i].edit_count = %i\\n\", c->fc->nb_streams-1, sc->edit_count);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3392
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  uint32_t readMapEnd() {\n    T_VIRTUAL_CALL();\n    return readMapEnd_virt();\n  }",
        "output": "0",
        "idx": 5726
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ehci_mem_writew(void *ptr, target_phys_addr_t addr, uint32_t val)\n\n{\n\n    fprintf(stderr, \"EHCI doesn't handle 16-bit writes to MMIO\\n\");\n\n    exit(1);\n\n}\n",
        "output": "1",
        "idx": 1064
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void av_frame_unref(AVFrame *frame)\n{\n    int i;\n    wipe_side_data(frame);\n    for (i = 0; i < FF_ARRAY_ELEMS(frame->buf); i++)\n        av_buffer_unref(&frame->buf[i]);\n    for (i = 0; i < frame->nb_extended_buf; i++)\n        av_buffer_unref(&frame->extended_buf[i]);\n    av_freep(&frame->extended_buf);\n    av_dict_free(&frame->metadata);\n    av_buffer_unref(&frame->qp_table_buf);\n    get_frame_defaults(frame);\n}",
        "output": "1",
        "idx": 4247
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {\n  const char *name;\n  lua_lock(L);\n  if (ar == NULL) {  /* information about non-active function? */\n    if (!isLfunction(s2v(L->top - 1)))  /* not a Lua function? */\n      name = NULL;\n    else  /* consider live variables at function start (parameters) */\n      name = luaF_getlocalname(clLvalue(s2v(L->top - 1))->p, n, 0);\n  }\n  else {  /* active function; get information through 'ar' */\n    StkId pos = NULL;  /* to avoid warnings */\n    name = luaG_findlocal(L, ar->i_ci, n, &pos);\n    if (name) {\n      setobjs2s(L, L->top, pos);\n      api_incr_top(L);\n    }\n  }\n  lua_unlock(L);\n  return name;\n}",
        "output": "0",
        "idx": 4398
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ff_j2k_dwt_init(DWTContext *s, uint16_t border[2][2], int decomp_levels, int type)\n{\n    int i, j, lev = decomp_levels, maxlen,\n        b[2][2];\n\n    if (decomp_levels >= FF_DWT_MAX_DECLVLS)\n        return AVERROR_INVALIDDATA;\n    s->ndeclevels = decomp_levels;\n    s->type = type;\n\n    for (i = 0; i < 2; i++)\n        for(j = 0; j < 2; j++)\n            b[i][j] = border[i][j];\n\n    maxlen = FFMAX(b[0][1] - b[0][0],\n                   b[1][1] - b[1][0]);\n\n    while(--lev >= 0){\n        for (i = 0; i < 2; i++){\n            s->linelen[lev][i] = b[i][1] - b[i][0];\n            s->mod[lev][i] = b[i][0] & 1;\n            for (j = 0; j < 2; j++)\n                b[i][j] = (b[i][j] + 1) >> 1;\n        }\n    }\n    if (type == FF_DWT97)\n        s->linebuf = av_malloc((maxlen + 12) * sizeof(float));\n    else if (type == FF_DWT53)\n        s->linebuf = av_malloc((maxlen + 6) * sizeof(int));\n    else\n        return -1;\n\n    if (!s->linebuf)\n        return AVERROR(ENOMEM);\n\n    return 0;\n}",
        "output": "1",
        "idx": 1845
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cm_get_ack_delay(struct cm_device *cm_dev)\n{\n\tstruct ib_device_attr attr;\n\n\tif (ib_query_device(cm_dev->ib_device, &attr))\n\t\tcm_dev->ack_delay = 0; /* acks will rely on packet life time */\n\telse\n\t\tcm_dev->ack_delay = attr.local_ca_ack_delay;\n}",
        "output": "0",
        "idx": 5064
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "RAMBlock *qemu_ram_block_from_host(struct uc_struct *uc, void *ptr,\n                                   bool round_offset, ram_addr_t *offset)\n{\n    RAMBlock *block;\n    uint8_t *host = ptr;\n\n    block = uc->ram_list.mru_block;\n    if (block && block->host && host - block->host < block->max_length) {\n        goto found;\n    }\n\n    RAMBLOCK_FOREACH(block) {\n        /* This case append when the block is not mapped. */\n        if (block->host == NULL) {\n            continue;\n        }\n        if (host - block->host < block->max_length) {\n            goto found;\n        }\n    }\n\n    return NULL;\n\nfound:\n    *offset = (host - block->host);\n    if (round_offset) {\n        *offset &= TARGET_PAGE_MASK;\n    }\n    return block;\n}",
        "output": "0",
        "idx": 4162
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CharDriverState *qemu_chr_open_pp_fd(int fd)\n\n{\n\n    CharDriverState *chr;\n\n    ParallelCharDriver *drv;\n\n\n\n    if (ioctl(fd, PPCLAIM) < 0) {\n\n        close(fd);\n\n        return NULL;\n\n    }\n\n\n\n    drv = g_malloc0(sizeof(ParallelCharDriver));\n\n    drv->fd = fd;\n\n    drv->mode = IEEE1284_MODE_COMPAT;\n\n\n\n    chr = qemu_chr_alloc();\n\n    chr->chr_write = null_chr_write;\n\n    chr->chr_ioctl = pp_ioctl;\n\n    chr->chr_close = pp_close;\n\n    chr->opaque = drv;\n\n\n\n    return chr;\n\n}\n",
        "output": "1",
        "idx": 3666
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "string RtmpProtocol::get_C1_key(const uint8_t *ptr){\n    /* 764bytes key\u7ed3\u6784\n    random-data: (offset)bytes\n    key-data: 128bytes\n    random-data: (764-offset-128-4)bytes\n    offset: 4bytes\n     */\n    int offset = 0;\n    for (int i = C1_SCHEMA_SIZE - C1_OFFSET_SIZE; i < C1_SCHEMA_SIZE; ++i) {\n        offset += ptr[i];\n    }\n    offset %= (C1_SCHEMA_SIZE - C1_KEY_SIZE - C1_OFFSET_SIZE);\n    string key((char *) ptr + offset, C1_KEY_SIZE);\n    //DebugL << \"key offset:\" << offset << \",key:\" << hexdump(key.data(),key.size());\n    return key;\n}",
        "output": "0",
        "idx": 380
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void FileBody::Dump(std::ostream& os, const std::string& prefix) const {\n  os << prefix << \"<file: \" << path_.string() << \">\" << std::endl;\n}",
        "output": "1",
        "idx": 4125
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void celt_search_for_dual_stereo(OpusPsyContext *s, CeltFrame *f)\n{\n    float td1, td2;\n    f->dual_stereo = 0;\n    bands_dist(s, f, &td1);\n    f->dual_stereo = 1;\n    bands_dist(s, f, &td2);\n    f->dual_stereo = td2 < td1;\n    s->dual_stereo_used += td2 < td1;\n}",
        "output": "1",
        "idx": 4305
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "file_asynch_zero (struct rw *rw, struct command *command,\n                  nbd_completion_callback cb, bool allocate)\n{\n  int dummy = 0;\n\n  if (!file_synch_zero (rw, command->offset, command->slice.len, allocate))\n    return false;\n  if (cb.callback (cb.user_data, &dummy) == -1) {\n    perror (rw->name);\n    exit (EXIT_FAILURE);\n  }\n  return true;\n}",
        "output": "1",
        "idx": 3925
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vhost_vdpa_config_put(struct vhost_vdpa *v)\n{\n\tif (v->config_ctx)\n\t\teventfd_ctx_put(v->config_ctx);\n}",
        "output": "1",
        "idx": 3699
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ehci_init_transfer(EHCIPacket *p)\n\n{\n\n    uint32_t cpage, offset, bytes, plen;\n\n    dma_addr_t page;\n\n    USBBus *bus = &p->queue->ehci->bus;\n\n    BusState *qbus = BUS(bus);\n\n\n\n    cpage  = get_field(p->qtd.token, QTD_TOKEN_CPAGE);\n\n    bytes  = get_field(p->qtd.token, QTD_TOKEN_TBYTES);\n\n    offset = p->qtd.bufptr[0] & ~QTD_BUFPTR_MASK;\n\n    qemu_sglist_init(&p->sgl, qbus->parent, 5, p->queue->ehci->as);\n\n\n\n    while (bytes > 0) {\n\n        if (cpage > 4) {\n\n            fprintf(stderr, \"cpage out of range (%d)\\n\", cpage);\n\n            return -1;\n\n        }\n\n\n\n        page  = p->qtd.bufptr[cpage] & QTD_BUFPTR_MASK;\n\n        page += offset;\n\n        plen  = bytes;\n\n        if (plen > 4096 - offset) {\n\n            plen = 4096 - offset;\n\n            offset = 0;\n\n            cpage++;\n\n        }\n\n\n\n        qemu_sglist_add(&p->sgl, page, plen);\n\n        bytes -= plen;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3187
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMU_SCHEME_KEYEDHASH_Unmarshal(TPMU_SCHEME_KEYEDHASH *target, BYTE **buffer, INT32 *size, UINT32 selector)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n\n    switch (selector) {\n#if ALG_HMAC\n      case TPM_ALG_HMAC:\n\trc = TPMS_SCHEME_HMAC_Unmarshal(&target->hmac, buffer, size);\n\tbreak;\n#endif\n#if ALG_XOR\n      case TPM_ALG_XOR:\n\trc = TPMS_SCHEME_XOR_Unmarshal(&target->xorr, buffer, size);\n\tbreak;\n#endif\n      case TPM_ALG_NULL:\n\tbreak;\n      default:\n\trc = TPM_RC_SELECTOR;\n    }\n    return rc;\n}",
        "output": "0",
        "idx": 517
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int rb_time_cnt(unsigned long val)\n{\n\treturn (val >> RB_TIME_SHIFT) & 3;\n}",
        "output": "0",
        "idx": 1329
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void buffer_reset(Buffer *buffer)\n\n{\n\n\tbuffer->offset = 0;\n\n}\n",
        "output": "1",
        "idx": 3408
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "process_palette(STREAM s)\n{\n\tCOLOURENTRY *entry;\n\tCOLOURMAP map;\n\tRD_HCOLOURMAP hmap;\n\tint i;\n\n\tin_uint8s(s, 2);\t/* pad */\n\tin_uint16_le(s, map.ncolours);\n\tin_uint8s(s, 2);\t/* pad */\n\n\tmap.colours = (COLOURENTRY *) xmalloc(sizeof(COLOURENTRY) * map.ncolours);\n\n\tlogger(Graphics, Debug, \"process_palette(), colour count %d\", map.ncolours);\n\n\tfor (i = 0; i < map.ncolours; i++)\n\t{\n\t\tentry = &map.colours[i];\n\t\tin_uint8(s, entry->red);\n\t\tin_uint8(s, entry->green);\n\t\tin_uint8(s, entry->blue);\n\t}\n\n\thmap = ui_create_colourmap(&map);\n\tui_set_colourmap(hmap);\n\n\txfree(map.colours);\n}",
        "output": "0",
        "idx": 4513
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int blk_root_inactivate(BdrvChild *child)\n\n{\n\n    BlockBackend *blk = child->opaque;\n\n\n\n    if (blk->disable_perm) {\n\n        return 0;\n\n    }\n\n\n\n    /* Only inactivate BlockBackends for guest devices (which are inactive at\n\n     * this point because the VM is stopped) and unattached monitor-owned\n\n     * BlockBackends. If there is still any other user like a block job, then\n\n     * we simply can't inactivate the image. */\n\n    if (!blk->dev && !blk_name(blk)[0]) {\n\n        return -EPERM;\n\n    }\n\n\n\n    blk->disable_perm = true;\n\n    if (blk->root) {\n\n        bdrv_child_try_set_perm(blk->root, 0, BLK_PERM_ALL, &error_abort);\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 915
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_g_file_is_external_link (GFile      *file,\n\t\t\t  GFile      *destination,\n\t\t\t  GHashTable *external_links)\n{\n\tGFileInfo *info;\n\tgboolean   external;\n\n\tif (g_hash_table_lookup (external_links, file) != NULL)\n\t\treturn TRUE;\n\n\tinfo = g_file_query_info (file,\n\t\t\t\t  G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK \",\" G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET,\n\t\t\t\t  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS,\n\t\t\t\t  NULL,\n\t\t\t\t  NULL);\n\n\tif (info == NULL)\n\t\treturn FALSE;\n\n\texternal = FALSE;\n\n\tif (g_file_info_get_is_symlink (info)) {\n\t\tif (_symlink_is_external_to_destination (file,\n\t\t\t\t\t\t\t g_file_info_get_symlink_target (info),\n\t\t\t\t\t\t\t destination,\n\t\t\t\t\t\t\t external_links))\n\t\t{\n\t\t\tg_hash_table_insert (external_links, g_object_ref (file), GINT_TO_POINTER (1));\n\t\t\texternal = TRUE;\n\t\t}\n\t}\n\n\tg_object_unref (info);\n\n\treturn external;\n}",
        "output": "1",
        "idx": 5754
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gd_menu_switch_vc(GtkMenuItem *item, void *opaque)\n{\n    GtkDisplayState *s = opaque;\n    VirtualConsole *vc = gd_vc_find_by_menu(s);\n    GtkNotebook *nb = GTK_NOTEBOOK(s->notebook);\n    gint page;\n    gtk_release_modifiers(s);\n    if (vc) {\n        page = gtk_notebook_page_num(nb, vc->tab_item);\n        gtk_notebook_set_current_page(nb, page);\n        gtk_widget_grab_focus(vc->focus);\n    }\n}",
        "output": "1",
        "idx": 4517
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "header_put_be_8byte (SF_PRIVATE *psf, sf_count_t x)\n{\tif (psf->headindex < SIGNED_SIZEOF (psf->header) - 8)\n\t{\tpsf->header [psf->headindex++] = 0 ;\n\t\tpsf->header [psf->headindex++] = 0 ;\n\t\tpsf->header [psf->headindex++] = 0 ;\n\t\tpsf->header [psf->headindex++] = 0 ;\n\t\tpsf->header [psf->headindex++] = (x >> 24) ;\n\t\tpsf->header [psf->headindex++] = (x >> 16) ;\n\t\tpsf->header [psf->headindex++] = (x >> 8) ;\n\t\tpsf->header [psf->headindex++] = x ;\n\t\t} ;\n} /* header_put_be_8byte */",
        "output": "1",
        "idx": 630
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err tenc_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tu8 iv_size;\n\tGF_TrackEncryptionBox *ptr = (GF_TrackEncryptionBox*)s;\n\n\tISOM_DECREASE_SIZE(ptr, 3);\n\n\tgf_bs_read_u8(bs); //reserved\n\n\tif (!ptr->version) {\n\t\tgf_bs_read_u8(bs); //reserved\n\t} else {\n\t\tptr->crypt_byte_block = gf_bs_read_int(bs, 4);\n\t\tptr->skip_byte_block = gf_bs_read_int(bs, 4);\n\t}\n\tptr->isProtected = gf_bs_read_u8(bs);\n\n\n\tISOM_DECREASE_SIZE(ptr, 17);\n\n\tptr->key_info[0] = 0;\n\tptr->key_info[1] = 0;\n\tptr->key_info[2] = 0;\n\tptr->key_info[3] = iv_size = gf_bs_read_u8(bs);\n\tgf_bs_read_data(bs, ptr->key_info+4, 16);\n\tif (!iv_size && ptr->isProtected) {\n\t\tISOM_DECREASE_SIZE(ptr, 1);\n\t\tiv_size = ptr->key_info[20] = gf_bs_read_u8(bs);\n\t\tISOM_DECREASE_SIZE(ptr, ptr->key_info[20]);\n\t\tgf_bs_read_data(bs, ptr->key_info+21, iv_size);\n\t}\n\treturn GF_OK;\n}",
        "output": "1",
        "idx": 647
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void xrangeGenericCommand(client *c, int rev) {\n    robj *o;\n    stream *s;\n    streamID startid, endid;\n    long long count = 0;\n    robj *startarg = rev ? c->argv[3] : c->argv[2];\n    robj *endarg = rev ? c->argv[2] : c->argv[3];\n\n    if (streamParseIDOrReply(c,startarg,&startid,0) == C_ERR) return;\n    if (streamParseIDOrReply(c,endarg,&endid,UINT64_MAX) == C_ERR) return;\n\n    /* Parse the COUNT option if any. */\n    if (c->argc > 4) {\n        for (int j = 4; j < c->argc; j++) {\n            int additional = c->argc-j-1;\n            if (strcasecmp(c->argv[j]->ptr,\"COUNT\") == 0 && additional >= 1) {\n                if (getLongLongFromObjectOrReply(c,c->argv[j+1],&count,NULL)\n                    != C_OK) return;\n                if (count < 0) count = 0;\n                j++; /* Consume additional arg. */\n            } else {\n                addReply(c,shared.syntaxerr);\n                return;\n            }\n        }\n    }\n\n    /* Return the specified range to the user. */\n    if ((o = lookupKeyReadOrReply(c,c->argv[1],shared.emptymultibulk)) == NULL\n        || checkType(c,o,OBJ_STREAM)) return;\n    s = o->ptr;\n    streamReplyWithRange(c,s,&startid,&endid,count,rev,NULL,NULL,0,NULL);\n}",
        "output": "0",
        "idx": 2148
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int scsi_get_bus(struct request_queue *q, int __user *p)\n{\n\treturn put_user(0, p);\n}",
        "output": "0",
        "idx": 2725
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long ssl2_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp)(void))\n\t{\n\treturn(0);\n\t}",
        "output": "0",
        "idx": 4914
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int getlocalattribute (LexState *ls) {\n  /* ATTRIB -> ['<' Name '>'] */\n  if (testnext(ls, '<')) {\n    const char *attr = getstr(str_checkname(ls));\n    checknext(ls, '>');\n    if (strcmp(attr, \"const\") == 0)\n      return RDKCONST;  /* read-only variable */\n    else if (strcmp(attr, \"close\") == 0)\n      return RDKTOCLOSE;  /* to-be-closed variable */\n    else\n      luaK_semerror(ls,\n        luaO_pushfstring(ls->L, \"unknown attribute '%s'\", attr));\n  }\n  return VDKREG;  /* regular variable */\n}",
        "output": "0",
        "idx": 3794
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vnc_dpy_setdata(DisplayState *ds)\n\n{\n\n    /* We don't have to do anything */\n\n}\n",
        "output": "0",
        "idx": 5228
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtio_queue_update_rings(VirtIODevice *vdev, int n)\n\n{\n\n    VRing *vring = &vdev->vq[n].vring;\n\n\n\n    if (!vring->desc) {\n\n        /* not yet setup -> nothing to do */\n\n        return;\n\n    }\n\n    vring->avail = vring->desc + vring->num * sizeof(VRingDesc);\n\n    vring->used = vring_align(vring->avail +\n\n                              offsetof(VRingAvail, ring[vring->num]),\n\n                              vring->align);\n\n    virtio_init_region_cache(vdev, n);\n\n}\n",
        "output": "1",
        "idx": 628
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int av_dict_set_fxp(AVDictionary **pm, const char *key, uint64_t value, unsigned int digits,\n\n                int flags)\n\n{\n\n    char valuestr[44];\n\n    snprintf(valuestr, sizeof(valuestr), \"%\"PRId64\".%0*\"PRId64,\n\n             value / PRECISION, digits, ( value % PRECISION ) / ( PRECISION / uintpow(10,digits) ));\n\n    return av_dict_set(pm, key, valuestr, flags);\n\n}\n",
        "output": "1",
        "idx": 4167
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int check_sysreg_table(const struct sys_reg_desc *table, unsigned int n)\n{\n\tunsigned int i;\n\n\tfor (i = 1; i < n; i++) {\n\t\tif (cmp_sys_reg(&table[i-1], &table[i]) >= 0) {\n\t\t\tkvm_err(\"sys_reg table %p out of order (%d)\\n\", table, i - 1);\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 497
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "g_socket_client_proxy_connect_callback (GObject      *object,\n\t\t\t\t\tGAsyncResult *result,\n\t\t\t\t\tgpointer      user_data)\n{\n  GSocketClientAsyncConnectData *data = user_data;\n\n  g_object_unref (data->connection);\n  data->connection = g_proxy_connect_finish (G_PROXY (object),\n\t\t\t\t\t     result,\n\t\t\t\t\t     &data->last_error);\n  if (data->connection)\n    {\n      g_socket_client_emit_event (data->client, G_SOCKET_CLIENT_PROXY_NEGOTIATED, data->connectable, data->connection);\n    }\n  else\n    {\n      enumerator_next_async (data);\n      return;\n    }\n\n  g_socket_client_tls_handshake (data);\n}",
        "output": "1",
        "idx": 4740
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void replicationHandleMasterDisconnection(void) {\n    server.master = NULL;\n    server.repl_state = REPL_STATE_CONNECT;\n    server.repl_down_since = server.unixtime;\n    /* We lost connection with our master, force our slaves to resync\n     * with us as well to load the new data set.\n     *\n     * If server.masterhost is NULL the user called SLAVEOF NO ONE so\n     * slave resync is not needed. */\n    if (server.masterhost != NULL) disconnectSlaves();\n}",
        "output": "0",
        "idx": 2303
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ehci_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);\n\n    EHCIPCIInfo *i = data;\n\n\n\n    k->init = usb_ehci_pci_initfn;\n\n    k->vendor_id = i->vendor_id;\n\n    k->device_id = i->device_id;\n\n    k->revision = i->revision;\n\n    k->class_id = PCI_CLASS_SERIAL_USB;\n\n    k->config_write = usb_ehci_pci_write_config;\n\n\n    dc->vmsd = &vmstate_ehci_pci;\n\n    dc->props = ehci_pci_properties;\n\n}",
        "output": "1",
        "idx": 1413
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dequantization_float(int x, int y, Jpeg2000Cblk *cblk,\n\n                                 Jpeg2000Component *comp,\n\n                                 Jpeg2000T1Context *t1, Jpeg2000Band *band)\n\n{\n\n    int i, j, idx;\n\n    float *datap = &comp->data[(comp->coord[0][1] - comp->coord[0][0]) * y + x];\n\n    for (j = 0; j < (cblk->coord[1][1] - cblk->coord[1][0]); ++j)\n\n        for (i = 0; i < (cblk->coord[0][1] - cblk->coord[0][0]); ++i) {\n\n            idx        = (comp->coord[0][1] - comp->coord[0][0]) * j + i;\n\n            datap[idx] = (float)(t1->data[j][i]) * band->f_stepsize;\n\n        }\n\n}\n",
        "output": "1",
        "idx": 2989
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void recv_buffer_cleanup(h2_bucket_beam *beam, h2_beam_lock *bl)\n{\n    if (beam->recv_buffer && !APR_BRIGADE_EMPTY(beam->recv_buffer)) {\n        apr_bucket_brigade *bb = beam->recv_buffer;\n        apr_off_t bblen = 0;\n        \n        beam->recv_buffer = NULL;\n        apr_brigade_length(bb, 0, &bblen);\n        beam->received_bytes += bblen;\n        \n        /* need to do this unlocked since bucket destroy might \n         * call this beam again. */\n        if (bl) leave_yellow(beam, bl);\n        apr_brigade_destroy(bb);\n        if (bl) enter_yellow(beam, bl);\n        \n        if (beam->cons_ev_cb) { \n            beam->cons_ev_cb(beam->cons_ctx, beam);\n        }\n    }\n}",
        "output": "1",
        "idx": 120
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void ms_handle_fast_connect(Connection *con) override {}",
        "output": "0",
        "idx": 5455
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool rom_order_compare(Rom *rom, Rom *item)\n\n{\n\n    return (rom->as > item->as) ||\n\n           (rom->as == item->as && rom->addr >= item->addr);\n\n}\n",
        "output": "1",
        "idx": 2196
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void reset_bit(uint32_t *field, int bit)\n\n{\n\n    field[bit >> 5] &= ~(1 << (bit & 0x1F));\n\n}\n",
        "output": "0",
        "idx": 695
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\n      unsigned int scalar5(const mp_func op,\n                           const unsigned int arg1, const unsigned int arg2, const unsigned int arg3,\n                           const unsigned int arg4, const unsigned int arg5) {\n        const unsigned int pos =\n          arg1!=~0U && arg1>_cimg_mp_slot_c && _cimg_mp_is_comp(arg1)?arg1:\n          arg2!=~0U && arg2>_cimg_mp_slot_c && _cimg_mp_is_comp(arg2)?arg2:\n          arg3!=~0U && arg3>_cimg_mp_slot_c && _cimg_mp_is_comp(arg3)?arg3:\n          arg4!=~0U && arg4>_cimg_mp_slot_c && _cimg_mp_is_comp(arg4)?arg4:\n          arg5!=~0U && arg5>_cimg_mp_slot_c && _cimg_mp_is_comp(arg5)?arg5:scalar();\n        CImg<ulongT>::vector((ulongT)op,pos,arg1,arg2,arg3,arg4,arg5).move_to(code);\n        return pos;",
        "output": "0",
        "idx": 3330
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void coroutine_fn qemu_co_mutex_lock(CoMutex *mutex)\n\n{\n\n    Coroutine *self = qemu_coroutine_self();\n\n\n\n    trace_qemu_co_mutex_lock_entry(mutex, self);\n\n\n\n    while (mutex->locked) {\n\n        qemu_co_queue_wait(&mutex->queue);\n\n    }\n\n\n\n    mutex->locked = true;\n\n\n\n\n    trace_qemu_co_mutex_lock_return(mutex, self);\n\n}",
        "output": "1",
        "idx": 283
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Sql_mode_dependency Item_args::value_depends_on_sql_mode_bit_or() const\n{\n  Sql_mode_dependency res;\n  for (uint i= 0; i < arg_count; i++)\n    res|= args[i]->value_depends_on_sql_mode();\n  return res;\n}",
        "output": "0",
        "idx": 3463
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool error_is_type(Error *err, const char *fmt)\n\n{\n\n    const char *error_class;\n\n    char *ptr;\n\n    char *end;\n\n\n\n    if (!err) {\n\n        return false;\n\n    }\n\n\n\n    ptr = strstr(fmt, \"'class': '\");\n\n    assert(ptr != NULL);\n\n    ptr += strlen(\"'class': '\");\n\n\n\n    end = strchr(ptr, '\\'');\n\n    assert(end != NULL);\n\n\n\n    error_class = error_get_field(err, \"class\");\n\n    if (strlen(error_class) != end - ptr) {\n\n        return false;\n\n    }\n\n\n\n    return strncmp(ptr, error_class, end - ptr) == 0;\n\n}\n",
        "output": "0",
        "idx": 4782
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool fuse_range_is_writeback(struct inode *inode, pgoff_t idx_from,\n\t\t\t\t   pgoff_t idx_to)\n{\n\tstruct fuse_inode *fi = get_fuse_inode(inode);\n\tbool found;\n\n\tspin_lock(&fi->lock);\n\tfound = fuse_find_writeback(fi, idx_from, idx_to);\n\tspin_unlock(&fi->lock);\n\n\treturn found;\n}",
        "output": "0",
        "idx": 2696
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "lyd_new(struct lyd_node *parent, const struct lys_module *module, const char *name)\n{\n    const struct lys_node *snode = NULL, *siblings;\n\n    if ((!parent && !module) || !name) {\n        LOGARG;\n        return NULL;\n    }\n\n    siblings = lyd_new_find_schema(parent, module, 0);\n    if (!siblings) {\n        LOGARG;\n        return NULL;\n    }\n\n    if (lys_getnext_data(module, lys_parent(siblings), name, strlen(name), LYS_CONTAINER | LYS_LIST | LYS_NOTIF\n                         | LYS_RPC | LYS_ACTION, &snode) || !snode) {\n        LOGERR(siblings->module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a sibling to \\\"%s:%s\\\".\",\n               name, lys_node_module(siblings)->name, siblings->name);\n        return NULL;\n    }\n\n    return _lyd_new(parent, snode, 0);\n}",
        "output": "1",
        "idx": 987
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void aarp_cleanup_module(void)\n{\n\tdel_timer_sync(&aarp_timer);\n\tunregister_netdevice_notifier(&aarp_notifier);\n\tunregister_snap_client(aarp_dl);\n\taarp_purge();\n}",
        "output": "0",
        "idx": 4050
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qmp_migrate_set_capabilities(MigrationCapabilityStatusList *params,\n\n                                  Error **errp)\n\n{\n\n    MigrationState *s = migrate_get_current();\n\n    MigrationCapabilityStatusList *cap;\n\n\n\n    if (s->state == MIG_STATE_ACTIVE || s->state == MIG_STATE_SETUP) {\n\n        error_set(errp, QERR_MIGRATION_ACTIVE);\n\n        return;\n\n    }\n\n\n\n    for (cap = params; cap; cap = cap->next) {\n\n        s->enabled_capabilities[cap->value->capability] = cap->value->state;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 273
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool io_mem_read(MemoryRegion *mr, hwaddr addr, uint64_t *pval, unsigned size)\n\n{\n\n    return memory_region_dispatch_read(mr, addr, pval, size);\n\n}\n",
        "output": "1",
        "idx": 103
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  inline boost::shared_ptr<TTransport> getOutputTransport() { return ptrans_; }",
        "output": "0",
        "idx": 414
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    CImgDisplay& move_inside_screen() {\n      if (is_empty()) return *this;\n      const int\n        x0 = window_x(),\n        y0 = window_y(),\n        x1 = x0 + window_width() - 1,\n        y1 = y0 + window_height() - 1,\n        sw = CImgDisplay::screen_width(),\n        sh = CImgDisplay::screen_height();\n      if (x0<0 || y0<0 || x1>=sw || y1>=sh)\n        move(std::max(0,std::min(x0,sw - x1 + x0)),\n             std::max(0,std::min(y0,sh - y1 + y0)));\n      return *this;\n    }",
        "output": "0",
        "idx": 5663
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ms_escher_read_Textbox (MSEscherState *state, MSEscherHeader *h)\n{\n\treturn FALSE;\n}",
        "output": "0",
        "idx": 1061
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long ASN1_INTEGER_get(const ASN1_INTEGER *a)\n\t{\n\tint neg=0,i;\n\tlong r=0;\n\n\tif (a == NULL) return(0L);\n\ti=a->type;\n\tif (i == V_ASN1_NEG_INTEGER)\n\t\tneg=1;\n\telse if (i != V_ASN1_INTEGER)\n\t\treturn -1;\n\t\n\tif (a->length > (int)sizeof(long))\n\t\t{\n\t\t/* hmm... a bit ugly */\n\t\treturn(0xffffffffL);\n\t\t}\n\tif (a->data == NULL)\n\t\treturn 0;\n\n\tfor (i=0; i<a->length; i++)\n\t\t{\n\t\tr<<=8;\n\t\tr|=(unsigned char)a->data[i];\n\t\t}\n\tif (neg) r= -r;\n\treturn(r);\n\t}",
        "output": "0",
        "idx": 1336
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pnv_chip_power8nvl_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    PnvChipClass *k = PNV_CHIP_CLASS(klass);\n\n\n\n    k->cpu_model = \"POWER8NVL\";\n\n    k->chip_type = PNV_CHIP_POWER8NVL;\n\n    k->chip_cfam_id = 0x120d304980000000ull;  /* P8 Naples DD1.0 */\n\n    k->cores_mask = POWER8_CORE_MASK;\n\n    k->core_pir = pnv_chip_core_pir_p8;\n\n\n    dc->desc = \"PowerNV Chip POWER8NVL\";\n\n}",
        "output": "1",
        "idx": 3033
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gboolean compare_by_coherent_set_key(gconstpointer a, gconstpointer b) {\n  const coherent_set_key * guid_a = (const coherent_set_key *)a;\n  const coherent_set_key * guid_b = (const coherent_set_key *)b;\n  return memcmp(guid_a, guid_b, sizeof(coherent_set_key)) == 0;\n}",
        "output": "1",
        "idx": 3538
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gint tvb_skip_wsp_return(tvbuff_t* tvb, gint offset){\n\tgint counter = offset;\n\tgint end;\n\tguint8 tempchar;\n\tend = 0;\n\n\tfor(counter = offset; counter > end &&\n\t\t((tempchar = tvb_get_guint8(tvb,counter)) == ' ' ||\n\t\ttempchar == '\\t'|| tempchar == '\\n');counter--);\n\tcounter++;\n\treturn (counter);\n}",
        "output": "0",
        "idx": 4044
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int stdio_get_buffer(void *opaque, uint8_t *buf, int64_t pos, int size)\n\n{\n\n    QEMUFileStdio *s = opaque;\n\n    FILE *fp = s->stdio_file;\n\n    int bytes;\n\n\n\n    do {\n\n        clearerr(fp);\n\n        bytes = fread(buf, 1, size, fp);\n\n    } while ((bytes == 0) && ferror(fp) && (errno == EINTR));\n\n    return bytes;\n\n}\n",
        "output": "1",
        "idx": 2125
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qxl_reset_surfaces(PCIQXLDevice *d)\n\n{\n\n    dprint(d, 1, \"%s:\\n\", __FUNCTION__);\n\n    d->mode = QXL_MODE_UNDEFINED;\n\n    qemu_mutex_unlock_iothread();\n\n    d->ssd.worker->destroy_surfaces(d->ssd.worker);\n\n    qemu_mutex_lock_iothread();\n\n    memset(&d->guest_surfaces.cmds, 0, sizeof(d->guest_surfaces.cmds));\n\n}\n",
        "output": "1",
        "idx": 4824
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void timer_deinit(QEMUTimer *ts)\n\n{\n\n    assert(ts->expire_time == -1);\n\n    ts->timer_list = NULL;\n\n}\n",
        "output": "0",
        "idx": 4097
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int handle_intercept(CPUS390XState *env)\n\n{\n\n    struct kvm_run *run = env->kvm_run;\n\n    int icpt_code = run->s390_sieic.icptcode;\n\n    int r = 0;\n\n\n\n    dprintf(\"intercept: 0x%x (at 0x%lx)\\n\", icpt_code,\n\n            (long)env->kvm_run->psw_addr);\n\n    switch (icpt_code) {\n\n        case ICPT_INSTRUCTION:\n\n            r = handle_instruction(env, run);\n\n\n        case ICPT_WAITPSW:\n\n\n\n\n\n\n\n        case ICPT_CPU_STOP:\n\n            if (s390_del_running_cpu(env) == 0) {\n\n\n\n\n\n        case ICPT_SOFT_INTERCEPT:\n\n            fprintf(stderr, \"KVM unimplemented icpt SOFT\\n\");\n\n            exit(1);\n\n\n        case ICPT_IO:\n\n            fprintf(stderr, \"KVM unimplemented icpt IO\\n\");\n\n            exit(1);\n\n\n        default:\n\n            fprintf(stderr, \"Unknown intercept code: %d\\n\", icpt_code);\n\n            exit(1);\n\n\n\n\n\n    return r;\n",
        "output": "1",
        "idx": 627
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(chdir)\n{\n\tchar *str;\n\tint ret, str_len;\n\t\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p\", &str, &str_len) == FAILURE) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (php_check_open_basedir(str TSRMLS_CC)) {\n\t\tRETURN_FALSE;\n\t}\n\tret = VCWD_CHDIR(str);\n\t\n\tif (ret != 0) {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s (errno %d)\", strerror(errno), errno);\n\t\tRETURN_FALSE;\n\t}\n\n\tif (BG(CurrentStatFile) && !IS_ABSOLUTE_PATH(BG(CurrentStatFile), strlen(BG(CurrentStatFile)))) {\n\t\tefree(BG(CurrentStatFile));\n\t\tBG(CurrentStatFile) = NULL;\n\t}\n\tif (BG(CurrentLStatFile) && !IS_ABSOLUTE_PATH(BG(CurrentLStatFile), strlen(BG(CurrentLStatFile)))) {\n\t\tefree(BG(CurrentLStatFile));\n\t\tBG(CurrentLStatFile) = NULL;\n\t}\n\n\tRETURN_TRUE;\n}",
        "output": "1",
        "idx": 3214
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void usbredir_do_attach(void *opaque)\n\n{\n\n    USBRedirDevice *dev = opaque;\n\n\n\n    /* In order to work properly with XHCI controllers we need these caps */\n\n    if ((dev->dev.port->speedmask & USB_SPEED_MASK_SUPER) && !(\n\n        usbredirparser_peer_has_cap(dev->parser,\n\n                                    usb_redir_cap_ep_info_max_packet_size) &&\n\n        usbredirparser_peer_has_cap(dev->parser,\n\n                                    usb_redir_cap_32bits_bulk_length) &&\n\n        usbredirparser_peer_has_cap(dev->parser,\n\n                                    usb_redir_cap_64bits_ids))) {\n\n        ERROR(\"usb-redir-host lacks capabilities needed for use with XHCI\\n\");\n\n        usbredir_reject_device(dev);\n\n        return;\n\n    }\n\n\n\n    if (usb_device_attach(&dev->dev) != 0) {\n\n        WARNING(\"rejecting device due to speed mismatch\\n\");\n\n        usbredir_reject_device(dev);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4820
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ntop_snmpget(lua_State* vm)     { return(ntop_snmp_get_fctn(vm, SNMP_GET_REQUEST_TYPE)); }",
        "output": "0",
        "idx": 1425
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void yuv_a_to_rgba(const uint8_t *ycbcr, const uint8_t *alpha, uint32_t *rgba, int num_values)\n\n{\n\n    const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;\n\n    uint8_t r, g, b;\n\n    int i, y, cb, cr;\n\n    int r_add, g_add, b_add;\n\n\n\n    for (i = num_values; i > 0; i--) {\n\n        y = *ycbcr++;\n\n        cr = *ycbcr++;\n\n        cb = *ycbcr++;\n\n        YUV_TO_RGB1_CCIR(cb, cr);\n\n        YUV_TO_RGB2_CCIR(r, g, b, y);\n\n        *rgba++ = (*alpha++ << 24) | (r << 16) | (g << 8) | b;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 208
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void zrle_write_u32(VncState *vs, uint32_t value)\n{\n    vnc_write(vs, (uint8_t *)&value, 4);\n}",
        "output": "0",
        "idx": 894
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int qcow2_save_vmstate(BlockDriverState *bs, QEMUIOVector *qiov,\n\n                              int64_t pos)\n\n{\n\n    BDRVQcowState *s = bs->opaque;\n\n    int64_t total_sectors = bs->total_sectors;\n\n    int growable = bs->growable;\n\n\n    int ret;\n\n\n\n    BLKDBG_EVENT(bs->file, BLKDBG_VMSTATE_SAVE);\n\n    bs->growable = 1;\n\n\n    ret = bdrv_pwritev(bs, qcow2_vm_state_offset(s) + pos, qiov);\n\n    bs->growable = growable;\n\n\n\n\n    /* bdrv_co_do_writev will have increased the total_sectors value to include\n\n     * the VM state - the VM state is however not an actual part of the block\n\n     * device, therefore, we need to restore the old value. */\n\n    bs->total_sectors = total_sectors;\n\n\n\n    return ret;\n\n}",
        "output": "1",
        "idx": 6084
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "do_notify_resume(struct pt_regs *regs, void *unused, __u32 thread_info_flags)\n{\n#ifdef CONFIG_X86_MCE\n\t/* notify userspace of pending MCEs */\n\tif (thread_info_flags & _TIF_MCE_NOTIFY)\n\t\tmce_notify_process();\n#endif /* CONFIG_X86_64 && CONFIG_X86_MCE */\n\n\t/* deal with pending signal delivery */\n\tif (thread_info_flags & _TIF_SIGPENDING)\n\t\tdo_signal(regs);\n\n\tif (thread_info_flags & _TIF_NOTIFY_RESUME) {\n\t\tclear_thread_flag(TIF_NOTIFY_RESUME);\n\t\ttracehook_notify_resume(regs);\n\t\tif (current->replacement_session_keyring)\n\t\t\tkey_replace_session_keyring();\n\t}\n\tif (thread_info_flags & _TIF_USER_RETURN_NOTIFY)\n\t\tfire_user_return_notifiers();\n\n#ifdef CONFIG_X86_32\n\tclear_thread_flag(TIF_IRET);\n#endif /* CONFIG_X86_32 */\n}",
        "output": "1",
        "idx": 4001
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void rgb16tobgr32(const uint8_t *src, uint8_t *dst, unsigned int src_size)\n\n{\n\n\tconst uint16_t *end;\n\n\tuint8_t *d = (uint8_t *)dst;\n\n\tconst uint16_t *s = (uint16_t *)src;\n\n\tend = s + src_size/2;\n\n\twhile(s < end)\n\n\t{\n\n\t\tregister uint16_t bgr;\n\n\t\tbgr = *s++;\n\n\t\t*d++ = (bgr&0xF800)>>8;\n\n\t\t*d++ = (bgr&0x7E0)>>3;\n\n\t\t*d++ = (bgr&0x1F)<<3;\n\n\t\t*d++ = 0;\n\n\t}\n\n}\n",
        "output": "1",
        "idx": 1950
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int r3d_read_packet(AVFormatContext *s, AVPacket *pkt)\n\n{\n\n    R3DContext *r3d = s->priv_data;\n\n    Atom atom;\n\n    int err = 0;\n\n\n\n    while (!err) {\n\n        if (read_atom(s, &atom) < 0) {\n\n            err = -1;\n\n            break;\n\n        }\n\n        switch (atom.tag) {\n\n        case MKTAG('R','E','D','V'):\n\n            if (s->streams[0]->discard == AVDISCARD_ALL)\n\n                goto skip;\n\n            if (!(err = r3d_read_redv(s, pkt, &atom)))\n\n                return 0;\n\n            break;\n\n        case MKTAG('R','E','D','A'):\n\n            if (!r3d->audio_channels)\n\n                return -1;\n\n            if (s->streams[1]->discard == AVDISCARD_ALL)\n\n                goto skip;\n\n            if (!(err = r3d_read_reda(s, pkt, &atom)))\n\n                return 0;\n\n            break;\n\n        default:\n\n        skip:\n\n            avio_skip(s->pb, atom.size-8);\n\n        }\n\n    }\n\n    return err;\n\n}\n",
        "output": "1",
        "idx": 5311
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static QEMUMachine *machine_parse(const char *name)\n\n{\n\n    QEMUMachine *m, *machine = NULL;\n\n\n\n    if (name) {\n\n        machine = find_machine(name);\n\n    }\n\n    if (machine) {\n\n        return machine;\n\n    }\n\n    printf(\"Supported machines are:\\n\");\n\n    for (m = first_machine; m != NULL; m = m->next) {\n\n        if (m->alias) {\n\n            printf(\"%-20s %s (alias of %s)\\n\", m->alias, m->desc, m->name);\n\n        }\n\n        printf(\"%-20s %s%s\\n\", m->name, m->desc,\n\n               m->is_default ? \" (default)\" : \"\");\n\n    }\n\n    exit(!name || *name != '?');\n\n}\n",
        "output": "1",
        "idx": 2279
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mem_cgroup_may_update_nodemask(struct mem_cgroup *memcg)\n{\n\tint nid;\n\t/*\n\t * numainfo_events > 0 means there was at least NUMAINFO_EVENTS_TARGET\n\t * pagein/pageout changes since the last update.\n\t */\n\tif (!atomic_read(&memcg->numainfo_events))\n\t\treturn;\n\tif (atomic_inc_return(&memcg->numainfo_updating) > 1)\n\t\treturn;\n\n\t/* make a nodemask where this memcg uses memory from */\n\tmemcg->scan_nodes = node_states[N_HIGH_MEMORY];\n\n\tfor_each_node_mask(nid, node_states[N_HIGH_MEMORY]) {\n\n\t\tif (!test_mem_cgroup_node_reclaimable(memcg, nid, false))\n\t\t\tnode_clear(nid, memcg->scan_nodes);\n\t}\n\n\tatomic_set(&memcg->numainfo_events, 0);\n\tatomic_set(&memcg->numainfo_updating, 0);\n}",
        "output": "0",
        "idx": 5605
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfFinder::getTf()\n{\n    return this->tf;\n}",
        "output": "0",
        "idx": 3947
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int check_clock(const clockid_t which_clock)\n{\n\tint error = 0;\n\tstruct task_struct *p;\n\tconst pid_t pid = CPUCLOCK_PID(which_clock);\n\n\tif (CPUCLOCK_WHICH(which_clock) >= CPUCLOCK_MAX)\n\t\treturn -EINVAL;\n\n\tif (pid == 0)\n\t\treturn 0;\n\n\tread_lock(&tasklist_lock);\n\tp = find_task_by_vpid(pid);\n\tif (!p || !(CPUCLOCK_PERTHREAD(which_clock) ?\n\t\t   same_thread_group(p, current) : thread_group_leader(p))) {\n\t\terror = -EINVAL;\n\t}\n\tread_unlock(&tasklist_lock);\n\n\treturn error;\n}",
        "output": "0",
        "idx": 1456
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int usb_net_handle_data(USBDevice *dev, USBPacket *p)\n\n{\n\n    USBNetState *s = (USBNetState *) dev;\n\n    int ret = 0;\n\n\n\n    switch(p->pid) {\n\n    case USB_TOKEN_IN:\n\n        switch (p->devep) {\n\n        case 1:\n\n            ret = usb_net_handle_statusin(s, p);\n\n            break;\n\n\n\n        case 2:\n\n            ret = usb_net_handle_datain(s, p);\n\n            break;\n\n\n\n        default:\n\n            goto fail;\n\n        }\n\n        break;\n\n\n\n    case USB_TOKEN_OUT:\n\n        switch (p->devep) {\n\n        case 2:\n\n            ret = usb_net_handle_dataout(s, p);\n\n            break;\n\n\n\n        default:\n\n            goto fail;\n\n        }\n\n        break;\n\n\n\n    default:\n\n    fail:\n\n        ret = USB_RET_STALL;\n\n        break;\n\n    }\n\n    if (ret == USB_RET_STALL)\n\n        fprintf(stderr, \"usbnet: failed data transaction: \"\n\n                        \"pid 0x%x ep 0x%x len 0x%zx\\n\",\n\n                        p->pid, p->devep, p->iov.size);\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 288
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err senc_box_size(GF_Box *s)\n{\n\tu32 sample_count;\n\tu32 i, nb_crypt_samples;\n\tGF_SampleEncryptionBox *ptr = (GF_SampleEncryptionBox*)s;\n\tsample_count = gf_list_count(ptr->samp_aux_info);\n\t//temp patch until we cleanup the spec...\n\tnb_crypt_samples=0;\n\tfor (i = 0; i < sample_count; i++) {\n\t\tGF_CENCSampleAuxInfo *sai = (GF_CENCSampleAuxInfo *)gf_list_get(ptr->samp_aux_info, i);\n\t\tif (!sai->isNotProtected) nb_crypt_samples++;\n\t}\n\n\tif (!nb_crypt_samples) {\n\t\tptr->size = 0;\n\t\treturn GF_OK;\n\t}\n\n\t//WARNING - PSEC (UUID) IS TYPECASTED TO SENC (FULL BOX) SO WE CANNOT USE USUAL FULL BOX FUNCTIONS\n\tptr->size += 4; //version and flags\n\n\tptr->size += 4; //sample count\n\tfor (i = 0; i < sample_count; i++) {\n\t\tGF_CENCSampleAuxInfo *sai = (GF_CENCSampleAuxInfo *)gf_list_get(ptr->samp_aux_info, i);\n\t\tif (sai->isNotProtected)\n\t\t\tcontinue;\n\t\tptr->size += sai->cenc_data_size;\n\t}\n\treturn GF_OK;\n}",
        "output": "0",
        "idx": 5565
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err piff_pssh_box_write(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_PIFFProtectionSystemHeaderBox *ptr = (GF_PIFFProtectionSystemHeaderBox *) s;\n\tGF_Err e = gf_isom_box_write_header(s, bs);\n\tif (e) return e;\n\tgf_bs_write_u8(bs, ptr->version);\n\tgf_bs_write_u24(bs, ptr->flags);\n\n\tgf_bs_write_data(bs, (char *) ptr->SystemID, 16);\n\tgf_bs_write_u32(bs, ptr->private_data_size);\n\tgf_bs_write_data(bs, (char *) ptr->private_data, ptr->private_data_size);\n\treturn GF_OK;\n}",
        "output": "0",
        "idx": 4493
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint64_t HELPER(popcnt)(uint64_t r2)\n\n{\n\n    uint64_t ret = 0;\n\n    int i;\n\n\n\n    for (i = 0; i < 64; i += 8) {\n\n        uint64_t t = ctpop32((r2 >> i) & 0xff);\n\n        ret |= t << i;\n\n    }\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 863
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool Item_in_subselect::fix_having(Item *having, SELECT_LEX *select_lex)\n{\n  bool fix_res= 0;\n  DBUG_ASSERT(thd);\n  if (!having->fixed)\n  {\n    select_lex->having_fix_field= 1;\n    fix_res= having->fix_fields(thd, 0);\n    select_lex->having_fix_field= 0;\n  }\n  return fix_res;\n}",
        "output": "0",
        "idx": 280
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static OPJ_UINT32 opj_j2k_get_specific_header_sizes(opj_j2k_t *p_j2k)\n{\n        OPJ_UINT32 l_nb_bytes = 0;\n        OPJ_UINT32 l_nb_comps;\n        OPJ_UINT32 l_coc_bytes,l_qcc_bytes;\n\n        l_nb_comps = p_j2k->m_private_image->numcomps - 1;\n        l_nb_bytes += opj_j2k_get_max_toc_size(p_j2k);\n\n        if (!(OPJ_IS_CINEMA(p_j2k->m_cp.rsiz))) {\n                l_coc_bytes = opj_j2k_get_max_coc_size(p_j2k);\n                l_nb_bytes += l_nb_comps * l_coc_bytes;\n\n                l_qcc_bytes = opj_j2k_get_max_qcc_size(p_j2k);\n                l_nb_bytes += l_nb_comps * l_qcc_bytes;\n        }\n\n        l_nb_bytes += opj_j2k_get_max_poc_size(p_j2k);\n\n        /*** DEVELOPER CORNER, Add room for your headers ***/\n\n        return l_nb_bytes;\n}",
        "output": "0",
        "idx": 5197
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int unix_recvq_full(struct sock const *sk)\n{\n\treturn skb_queue_len(&sk->sk_receive_queue) > sk->sk_max_ack_backlog;\n}",
        "output": "0",
        "idx": 1201
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void flags_to_str_internal(uint32_t flags, char *flagstr)\n{\n    size_t i, len = 0;\n    size_t map_size;\n    char *p;\n\n    p = flagstr;\n    memset(p, 0, FLAGMAPSTR_MAXLEN);\n    map_size = sizeof(msgflagmap) / sizeof(struct MsgFlagMap);\n\n    for (i = 0; i <  map_size && len < FLAGMAPSTR_MAXLEN; i++) {\n        if (flags & msgflagmap[i].flag) {\n            if (p != flagstr) {\n                *p++ = '|';\n                len++;\n            }\n\n            *p++ = msgflagmap[i].code[0];\n            *p++ = msgflagmap[i].code[1];\n            len += 2;\n        }\n    }\n}",
        "output": "0",
        "idx": 196
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct pxa2xx_i2s_s *pxa2xx_i2s_init(target_phys_addr_t base,\n\n                qemu_irq irq, struct pxa2xx_dma_state_s *dma)\n\n{\n\n    int iomemtype;\n\n    struct pxa2xx_i2s_s *s = (struct pxa2xx_i2s_s *)\n\n            qemu_mallocz(sizeof(struct pxa2xx_i2s_s));\n\n\n\n    s->base = base;\n\n    s->irq = irq;\n\n    s->dma = dma;\n\n    s->data_req = pxa2xx_i2s_data_req;\n\n\n\n    pxa2xx_i2s_reset(s);\n\n\n\n    iomemtype = cpu_register_io_memory(0, pxa2xx_i2s_readfn,\n\n                    pxa2xx_i2s_writefn, s);\n\n    cpu_register_physical_memory(s->base & 0xfff00000, 0xfffff, iomemtype);\n\n\n\n    register_savevm(\"pxa2xx_i2s\", base, 0,\n\n                    pxa2xx_i2s_save, pxa2xx_i2s_load, s);\n\n\n\n    return s;\n\n}\n",
        "output": "1",
        "idx": 1005
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SRP_gN *SRP_get_default_gN(const char *id)\n\t{\n\tsize_t i;\n\n\tif (id == NULL) \n\t\treturn knowngN;\n\tfor(i = 0; i < KNOWN_GN_NUMBER; i++)\n\t\t{\n\t\tif (strcmp(knowngN[i].id, id)==0)\n\t\t\treturn knowngN + i;\n\t\t}\n\treturn NULL;\n\t}",
        "output": "0",
        "idx": 4819
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long do_sigreturn(CPUS390XState *env)\n\n{\n\n    sigframe *frame;\n\n    abi_ulong frame_addr = env->regs[15];\n\n    target_sigset_t target_set;\n\n    sigset_t set;\n\n\n\n    trace_user_do_sigreturn(env, frame_addr);\n\n    if (!lock_user_struct(VERIFY_READ, frame, frame_addr, 1)) {\n\n        goto badframe;\n\n    }\n\n    __get_user(target_set.sig[0], &frame->sc.oldmask[0]);\n\n\n\n    target_to_host_sigset_internal(&set, &target_set);\n\n    set_sigmask(&set); /* ~_BLOCKABLE? */\n\n\n\n    if (restore_sigregs(env, &frame->sregs)) {\n\n        goto badframe;\n\n    }\n\n\n\n    unlock_user_struct(frame, frame_addr, 0);\n\n    return -TARGET_QEMU_ESIGRETURN;\n\n\n\nbadframe:\n\n    force_sig(TARGET_SIGSEGV);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4482
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int opt_new_stream(const char *opt, const char *arg)\n\n{\n\n    AVFormatContext *oc;\n\n    if (nb_output_files <= 0) {\n\n        fprintf(stderr, \"At least one output file must be specified\\n\");\n\n        ffmpeg_exit(1);\n\n    }\n\n    oc = output_files[nb_output_files - 1];\n\n\n\n    if      (!strcmp(opt, \"newvideo\"   )) new_video_stream   (oc);\n\n    else if (!strcmp(opt, \"newaudio\"   )) new_audio_stream   (oc);\n\n    else if (!strcmp(opt, \"newsubtitle\")) new_subtitle_stream(oc);\n\n    else av_assert0(0);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 255
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static target_ulong h_remove(PowerPCCPU *cpu, sPAPRMachineState *spapr,\n\n                             target_ulong opcode, target_ulong *args)\n\n{\n\n    CPUPPCState *env = &cpu->env;\n\n    target_ulong flags = args[0];\n\n    target_ulong pte_index = args[1];\n\n    target_ulong avpn = args[2];\n\n    RemoveResult ret;\n\n\n\n    ret = remove_hpte(cpu, pte_index, avpn, flags,\n\n                      &args[0], &args[1]);\n\n\n\n    switch (ret) {\n\n    case REMOVE_SUCCESS:\n\n        check_tlb_flush(env);\n\n        return H_SUCCESS;\n\n\n\n    case REMOVE_NOT_FOUND:\n\n        return H_NOT_FOUND;\n\n\n\n    case REMOVE_PARM:\n\n        return H_PARAMETER;\n\n\n\n    case REMOVE_HW:\n\n        return H_HARDWARE;\n\n    }\n\n\n\n    g_assert_not_reached();\n\n}\n",
        "output": "1",
        "idx": 3826
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_bytes(const uint8_t *input, uint8_t *out, int bytes)\n\n{\n\n    int i, off;\n\n    uint32_t c;\n\n    const uint32_t *buf;\n\n    uint32_t *output = (uint32_t *)out;\n\n\n\n    off = (intptr_t)input & 3;\n\n    buf = (const uint32_t *)(input - off);\n\n    c   = av_be2ne32((0x537F6103 >> (off * 8)) | (0x537F6103 << (32 - (off * 8))));\n\n    bytes += 3 + off;\n\n    for (i = 0; i < bytes / 4; i++)\n\n        output[i] = c ^ buf[i];\n\n\n\n    if (off)\n\n        avpriv_request_sample(NULL, \"Offset of %d\", off);\n\n\n\n    return off;\n\n}\n",
        "output": "1",
        "idx": 57
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *linetoken(FILE *stream)\n{\n    int ch, idx;\n\n    while ((ch = fgetc(stream)) == ' ' || ch == '\\t' ); \n    \n    idx = 0;\n    while (ch != EOF && ch != lineterm && idx < MAX_NAME)\n    {\n        ident[idx++] = ch;\n        ch = fgetc(stream);\n    } /* while */\n    \n    ungetc(ch, stream);\n    ident[idx] = 0;\n\n    return(ident);\t/* returns pointer to the token */\n\n} /* linetoken */",
        "output": "1",
        "idx": 6202
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void memory_region_notify_one(IOMMUNotifier *notifier,\n\n                              IOMMUTLBEntry *entry)\n\n{\n\n    IOMMUNotifierFlag request_flags;\n\n\n\n    /*\n\n     * Skip the notification if the notification does not overlap\n\n     * with registered range.\n\n     */\n\n    if (notifier->start > entry->iova + entry->addr_mask + 1 ||\n\n        notifier->end < entry->iova) {\n\n        return;\n\n    }\n\n\n\n    if (entry->perm & IOMMU_RW) {\n\n        request_flags = IOMMU_NOTIFIER_MAP;\n\n    } else {\n\n        request_flags = IOMMU_NOTIFIER_UNMAP;\n\n    }\n\n\n\n    if (notifier->notifier_flags & request_flags) {\n\n        notifier->notify(notifier, entry);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3500
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "may_get_cmd_block(exarg_T *eap, char_u *p, char_u **tofree, int *flags)\n{\n    char_u *retp = p;\n\n    if (*p == '{' && ends_excmd2(eap->arg, skipwhite(p + 1))\n\t\t\t\t\t\t       && eap->getline != NULL)\n    {\n\tgarray_T    ga;\n\tchar_u\t    *line = NULL;\n\n\tga_init2(&ga, sizeof(char_u *), 10);\n\tif (ga_add_string(&ga, p) == FAIL)\n\t    return retp;\n\n\t// If the argument ends in \"}\" it must have been concatenated already\n\t// for ISN_EXEC.\n\tif (p[STRLEN(p) - 1] != '}')\n\t    // Read lines between '{' and '}'.  Does not support nesting or\n\t    // here-doc constructs.\n\t    for (;;)\n\t    {\n\t\tvim_free(line);\n\t\tif ((line = eap->getline(':', eap->cookie,\n\t\t\t\t\t   0, GETLINE_CONCAT_CONTBAR)) == NULL)\n\t\t{\n\t\t    emsg(_(e_missing_rcurly));\n\t\t    break;\n\t\t}\n\t\tif (ga_add_string(&ga, line) == FAIL)\n\t\t    break;\n\t\tif (*skipwhite(line) == '}')\n\t\t    break;\n\t    }\n\tvim_free(line);\n\tretp = *tofree = ga_concat_strings(&ga, \"\\n\");\n\tga_clear_strings(&ga);\n\t*flags |= UC_VIM9;\n    }\n    return retp;\n}",
        "output": "1",
        "idx": 4259
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void pcie_cap_slot_hotplug_cb(HotplugHandler *hotplug_dev, DeviceState *dev,\n\n                              Error **errp)\n\n{\n\n    uint8_t *exp_cap;\n\n    PCIDevice *pci_dev = PCI_DEVICE(dev);\n\n\n\n    pcie_cap_slot_hotplug_common(PCI_DEVICE(hotplug_dev), dev, &exp_cap, errp);\n\n\n\n    /* Don't send event when device is enabled during qemu machine creation:\n\n     * it is present on boot, no hotplug event is necessary. We do send an\n\n     * event when the device is disabled later. */\n\n    if (!dev->hotplugged) {\n\n        pci_word_test_and_set_mask(exp_cap + PCI_EXP_SLTSTA,\n\n                                   PCI_EXP_SLTSTA_PDS);\n\n        return;\n\n    }\n\n\n\n    /* TODO: multifunction hot-plug.\n\n     * Right now, only a device of function = 0 is allowed to be\n\n     * hot plugged/unplugged.\n\n     */\n\n    assert(PCI_FUNC(pci_dev->devfn) == 0);\n\n\n\n    pci_word_test_and_set_mask(exp_cap + PCI_EXP_SLTSTA,\n\n                               PCI_EXP_SLTSTA_PDS);\n\n    pcie_cap_slot_event(PCI_DEVICE(hotplug_dev), PCI_EXP_HP_EV_PDC);\n\n}\n",
        "output": "1",
        "idx": 1885
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void xsetenv(const char *key, const char *value)\n{\n    if (setenv(key, value, 1))\n        die_out_of_memory();\n}",
        "output": "0",
        "idx": 4214
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CompressTest::testSetZipComment()\n{\n\tstd::string comment(\"Testing...123...\");\n\tstd::ofstream out(\"comment.zip\", std::ios::binary);\n\tPoco::Path theFile(ZipTest::getTestFile(\"data\", \"test.zip\"));\n\tCompress c(out, true);\n\tc.addFile(theFile, theFile.getFileName());\n\tc.setZipComment(comment);\n\tZipArchive a(c.close());\n\tassert(a.getZipComment() == comment);\n}",
        "output": "1",
        "idx": 5370
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hclge_tm_pg_shapping_cfg(struct hclge_dev *hdev,\n\t\t\t\t    enum hclge_shap_bucket bucket, u8 pg_id,\n\t\t\t\t    u32 shapping_para)\n{\n\tstruct hclge_pg_shapping_cmd *shap_cfg_cmd;\n\tenum hclge_opcode_type opcode;\n\tstruct hclge_desc desc;\n\n\topcode = bucket ? HCLGE_OPC_TM_PG_P_SHAPPING :\n\t\t HCLGE_OPC_TM_PG_C_SHAPPING;\n\thclge_cmd_setup_basic_desc(&desc, opcode, false);\n\n\tshap_cfg_cmd = (struct hclge_pg_shapping_cmd *)desc.data;\n\n\tshap_cfg_cmd->pg_id = pg_id;\n\n\tshap_cfg_cmd->pg_shapping_para = cpu_to_le32(shapping_para);\n\n\treturn hclge_cmd_send(&hdev->hw, &desc, 1);\n}",
        "output": "0",
        "idx": 2011
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init big_key_crypto_init(void)\n{\n\tint ret = -EINVAL;\n\n\t/* init RNG */\n\tbig_key_rng = crypto_alloc_rng(big_key_rng_name, 0, 0);\n\tif (IS_ERR(big_key_rng)) {\n\t\tbig_key_rng = NULL;\n\t\treturn -EFAULT;\n\t}\n\n\t/* seed RNG */\n\tret = crypto_rng_reset(big_key_rng, NULL, crypto_rng_seedsize(big_key_rng));\n\tif (ret)\n\t\tgoto error;\n\n\t/* init block cipher */\n\tbig_key_skcipher = crypto_alloc_skcipher(big_key_alg_name,\n\t\t\t\t\t\t 0, CRYPTO_ALG_ASYNC);\n\tif (IS_ERR(big_key_skcipher)) {\n\t\tbig_key_skcipher = NULL;\n\t\tret = -EFAULT;\n\t\tgoto error;\n\t}\n\n\treturn 0;\n\nerror:\n\tcrypto_free_rng(big_key_rng);\n\tbig_key_rng = NULL;\n\treturn ret;\n}",
        "output": "1",
        "idx": 4331
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int thr_info_create(struct thr_info *thr, pthread_attr_t *attr, void *(*start) (void *), void *arg)\n{\n\treturn pthread_create(&thr->pth, attr, start, arg);\n}",
        "output": "0",
        "idx": 4404
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tilegx_cpu_initfn(Object *obj)\n\n{\n\n    CPUState *cs = CPU(obj);\n\n    TileGXCPU *cpu = TILEGX_CPU(obj);\n\n    CPUTLGState *env = &cpu->env;\n\n    static bool tcg_initialized;\n\n\n\n    cs->env_ptr = env;\n\n    cpu_exec_init(cs, &error_abort);\n\n\n\n    if (tcg_enabled() && !tcg_initialized) {\n\n        tcg_initialized = true;\n\n        tilegx_tcg_init();\n\n    }\n\n}\n",
        "output": "1",
        "idx": 6019
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int property_read_system_call_filter(\n                sd_bus *bus,\n                const char *member,\n                sd_bus_message *m,\n                sd_bus_error *error,\n                void *userdata) {\n\n        struct security_info *info = userdata;\n        int whitelist, r;\n\n        assert(bus);\n        assert(member);\n        assert(m);\n\n        r = sd_bus_message_enter_container(m, 'r', \"bas\");\n        if (r < 0)\n                return r;\n\n        r = sd_bus_message_read(m, \"b\", &whitelist);\n        if (r < 0)\n                return r;\n\n        info->system_call_filter_whitelist = whitelist;\n\n        r = sd_bus_message_enter_container(m, 'a', \"s\");\n        if (r < 0)\n                return r;\n\n        for (;;) {\n                const char *name;\n\n                r = sd_bus_message_read(m, \"s\", &name);\n                if (r < 0)\n                        return r;\n                if (r == 0)\n                        break;\n\n                r = set_ensure_allocated(&info->system_call_filter, &string_hash_ops);\n                if (r < 0)\n                        return r;\n\n                r = set_put_strdup(info->system_call_filter, name);\n                if (r < 0)\n                        return r;\n        }\n\n        r = sd_bus_message_exit_container(m);\n        if (r < 0)\n                return r;\n\n        return sd_bus_message_exit_container(m);\n}",
        "output": "0",
        "idx": 1964
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void free_pipe_info(struct pipe_inode_info *pipe)\n{\n\tint i;\n\n\tfor (i = 0; i < pipe->buffers; i++) {\n\t\tstruct pipe_buffer *buf = pipe->bufs + i;\n\t\tif (buf->ops)\n\t\t\tbuf->ops->release(pipe, buf);\n\t}\n\tif (pipe->tmp_page)\n\t\t__free_page(pipe->tmp_page);\n\tkfree(pipe->bufs);\n\tkfree(pipe);\n}",
        "output": "1",
        "idx": 1372
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "XML_StopParser(XML_Parser parser, XML_Bool resumable)\n{\n  if (parser == NULL)\n    return XML_STATUS_ERROR;\n  switch (parser->m_parsingStatus.parsing) {\n  case XML_SUSPENDED:\n    if (resumable) {\n      parser->m_errorCode = XML_ERROR_SUSPENDED;\n      return XML_STATUS_ERROR;\n    }\n    parser->m_parsingStatus.parsing = XML_FINISHED;\n    break;\n  case XML_FINISHED:\n    parser->m_errorCode = XML_ERROR_FINISHED;\n    return XML_STATUS_ERROR;\n  default:\n    if (resumable) {\n#ifdef XML_DTD\n      if (parser->m_isParamEntity) {\n        parser->m_errorCode = XML_ERROR_SUSPEND_PE;\n        return XML_STATUS_ERROR;\n      }\n#endif\n      parser->m_parsingStatus.parsing = XML_SUSPENDED;\n    }\n    else\n      parser->m_parsingStatus.parsing = XML_FINISHED;\n  }\n  return XML_STATUS_OK;\n}",
        "output": "0",
        "idx": 3798
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void jas_iccattrtab_dump(jas_iccattrtab_t *attrtab, FILE *out)\n{\n\tint i;\n\tjas_iccattr_t *attr;\n\tjas_iccattrval_t *attrval;\n\tjas_iccattrvalinfo_t *info;\n\tchar buf[16];\n\tfprintf(out, \"numattrs=%d\\n\", attrtab->numattrs);\n\tfprintf(out, \"---\\n\");\n\tfor (i = 0; i < attrtab->numattrs; ++i) {\n\t\tattr = &attrtab->attrs[i];\n\t\tattrval = attr->val;\n\t\tinfo = jas_iccattrvalinfo_lookup(attrval->type);\n\t\tif (!info) abort();\n\t\tfprintf(out, \"attrno=%d; attrname=\\\"%s\\\"(0x%08\"PRIxFAST32\"); attrtype=\\\"%s\\\"(0x%08\"PRIxFAST32\")\\n\",\n\t\t  i,\n\t\t  jas_iccsigtostr(attr->name, &buf[0]),\n\t\t  attr->name,\n\t\t  jas_iccsigtostr(attrval->type, &buf[8]),\n\t\t  attrval->type\n\t\t  );\n\t\tjas_iccattrval_dump(attrval, out);\n\t\tfprintf(out, \"---\\n\");\n\t}\n}",
        "output": "0",
        "idx": 972
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t find_subframe_rice_params(FlacEncodeContext *s,\n\n                                          FlacSubframe *sub, int pred_order)\n\n{\n\n    int pmin = get_max_p_order(s->options.min_partition_order,\n\n                               s->frame.blocksize, pred_order);\n\n    int pmax = get_max_p_order(s->options.max_partition_order,\n\n                               s->frame.blocksize, pred_order);\n\n\n\n    uint32_t bits = 8 + pred_order * sub->obits + 2 + 4;\n\n    if (sub->type == FLAC_SUBFRAME_LPC)\n\n        bits += 4 + 5 + pred_order * s->options.lpc_coeff_precision;\n\n    bits += calc_rice_params(&sub->rc, pmin, pmax, sub->residual,\n\n                             s->frame.blocksize, pred_order);\n\n    return bits;\n\n}\n",
        "output": "1",
        "idx": 4894
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline struct stable_node *alloc_stable_node(void)\n{\n\treturn kmem_cache_alloc(stable_node_cache, GFP_KERNEL);\n}",
        "output": "0",
        "idx": 968
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int tls1_cert_verify_mac(SSL *s, int md_nid, unsigned char *out)\n\t{\n\tunsigned int ret;\n\tEVP_MD_CTX ctx, *d=NULL;\n\tint i;\n\n\tif (s->s3->handshake_buffer) \n\t\tif (!ssl3_digest_cached_records(s))\n\t\t\treturn 0;\n\n\tfor (i=0;i<SSL_MAX_DIGEST;i++) \n\t\t{\n\t\t  if (s->s3->handshake_dgst[i]&&EVP_MD_CTX_type(s->s3->handshake_dgst[i])==md_nid) \n\t\t  \t{\n\t\t  \td=s->s3->handshake_dgst[i];\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\tif (!d) {\n\t\tSSLerr(SSL_F_TLS1_CERT_VERIFY_MAC,SSL_R_NO_REQUIRED_DIGEST);\n\t\treturn 0;\n\t}\t\n\n\tEVP_MD_CTX_init(&ctx);\n\tEVP_MD_CTX_copy_ex(&ctx,d);\n\tEVP_DigestFinal_ex(&ctx,out,&ret);\n\tEVP_MD_CTX_cleanup(&ctx);\n\treturn((int)ret);\n\t}",
        "output": "0",
        "idx": 3105
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST(HeaderMapImplTest, DoubleInlineSet) {\n  HeaderMapImpl headers;\n  headers.setReferenceKey(Headers::get().ContentType, \"blah\");\n  headers.setReferenceKey(Headers::get().ContentType, \"text/html\");\n  EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());\n  EXPECT_EQ(1UL, headers.size());\n}",
        "output": "1",
        "idx": 1007
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tiny_dispatch(const MessagesMap_t *entry, uint8_t *msg, uint32_t msg_size)\n{\n    if (!pb_parse(entry, msg, msg_size, msg_tiny)) {\n        call_msg_failure_handler(FailureType_Failure_UnexpectedMessage,\n                                 \"Could not parse tiny protocol buffer message\");\n        return;\n    }\n\n    msg_tiny_id = entry->msg_id;\n}",
        "output": "1",
        "idx": 4098
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int parse_vdiname(BDRVSheepdogState *s, const char *filename,\n\n                         char *vdi, uint32_t *snapid, char *tag)\n\n{\n\n    char *p, *q, *uri;\n\n    const char *host_spec, *vdi_spec;\n\n    int nr_sep, ret;\n\n\n\n    strstart(filename, \"sheepdog:\", &filename);\n\n    p = q = g_strdup(filename);\n\n\n\n    /* count the number of separators */\n\n    nr_sep = 0;\n\n    while (*p) {\n\n        if (*p == ':') {\n\n            nr_sep++;\n\n        }\n\n        p++;\n\n    }\n\n    p = q;\n\n\n\n    /* use the first two tokens as host_spec. */\n\n    if (nr_sep >= 2) {\n\n        host_spec = p;\n\n        p = strchr(p, ':');\n\n        p++;\n\n        p = strchr(p, ':');\n\n        *p++ = '\\0';\n\n    } else {\n\n        host_spec = \"\";\n\n    }\n\n\n\n    vdi_spec = p;\n\n\n\n    p = strchr(vdi_spec, ':');\n\n    if (p) {\n\n        *p++ = '#';\n\n    }\n\n\n\n    uri = g_strdup_printf(\"sheepdog://%s/%s\", host_spec, vdi_spec);\n\n\n\n    ret = sd_parse_uri(s, uri, vdi, snapid, tag);\n\n\n\n    g_free(q);\n\n    g_free(uri);\n\n\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 2662
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlNewTextLen(const xmlChar *content, int len) {\n    xmlNodePtr cur;\n\n    /*\n     * Allocate a new node and fill the fields.\n     */\n    cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));\n    if (cur == NULL) {\n\txmlTreeErrMemory(\"building text\");\n\treturn(NULL);\n    }\n    memset(cur, 0, sizeof(xmlNode));\n    cur->type = XML_TEXT_NODE;\n\n    cur->name = xmlStringText;\n    if (content != NULL) {\n\tcur->content = xmlStrndup(content, len);\n    }\n\n    if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))\n\txmlRegisterNodeDefaultValue(cur);\n    return(cur);\n}",
        "output": "0",
        "idx": 4542
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int proc_oom_score(struct task_struct *task, char *buffer)\n{\n\tunsigned long points;\n\tstruct timespec uptime;\n\n\tdo_posix_clock_monotonic_gettime(&uptime);\n\tread_lock(&tasklist_lock);\n\tpoints = badness(task->group_leader, uptime.tv_sec);\n\tread_unlock(&tasklist_lock);\n\treturn sprintf(buffer, \"%lu\\n\", points);\n}",
        "output": "1",
        "idx": 3816
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char *rindex(const char *s,int c)\n{\n  char *t;\n\n  t = NullS;\n  do if (*s == (char) c) t = (char*) s; while (*s++);\n  return (char*) t;\n}",
        "output": "0",
        "idx": 129
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint8_t pfkey_proto_from_xfrm(uint8_t proto)\n{\n\treturn proto ? proto : IPSEC_PROTO_ANY;\n}",
        "output": "0",
        "idx": 2257
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int virtio_net_has_buffers(VirtIONet *n, int bufsize)\n\n{\n\n    if (virtio_queue_empty(n->rx_vq) ||\n\n        (n->mergeable_rx_bufs &&\n\n         !virtqueue_avail_bytes(n->rx_vq, bufsize, 0))) {\n\n        virtio_queue_set_notification(n->rx_vq, 1);\n\n        return 0;\n\n    }\n\n\n\n    virtio_queue_set_notification(n->rx_vq, 0);\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 3725
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void hidp_process_report(struct hidp_session *session, int type,\n\t\t\t\tconst u8 *data, unsigned int len, int intr)\n{\n\tif (len > HID_MAX_BUFFER_SIZE)\n\t\tlen = HID_MAX_BUFFER_SIZE;\n\n\tmemcpy(session->input_buf, data, len);\n\thid_input_report(session->hid, type, session->input_buf, len, intr);\n}",
        "output": "0",
        "idx": 3348
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "log_cachedcname (const char *dn, const char *dn2)\n{\n    string(\"cached cname \");\n    name (dn);\n    space ();\n    name (dn2);\n\n    line();\n}",
        "output": "0",
        "idx": 2582
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static __u8 *ch_report_fixup(struct hid_device *hdev, __u8 *rdesc,\n\t\tunsigned int *rsize)\n{\n\tif (*rsize >= 17 && rdesc[11] == 0x3c && rdesc[12] == 0x02) {\n\t\thid_info(hdev, \"fixing up Cherry Cymotion report descriptor\\n\");\n\t\trdesc[11] = rdesc[16] = 0xff;\n\t\trdesc[12] = rdesc[17] = 0x03;\n\t}\n\treturn rdesc;\n}",
        "output": "1",
        "idx": 5305
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qbus_initfn(Object *obj)\n\n{\n\n    BusState *bus = BUS(obj);\n\n\n\n    QTAILQ_INIT(&bus->children);\n\n    object_property_add_link(obj, QDEV_HOTPLUG_HANDLER_PROPERTY,\n\n                             TYPE_HOTPLUG_HANDLER,\n\n                             (Object **)&bus->hotplug_handler, NULL);\n\n    object_property_add_bool(obj, \"realized\",\n\n                             bus_get_realized, bus_set_realized, NULL);\n\n}\n",
        "output": "1",
        "idx": 1460
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qemu_chr_parse_spice_port(QemuOpts *opts, ChardevBackend *backend,\n\n                                      Error **errp)\n\n{\n\n    const char *name = qemu_opt_get(opts, \"name\");\n\n    ChardevSpicePort *spiceport;\n\n\n\n    if (name == NULL) {\n\n        error_setg(errp, \"chardev: spice port: no name given\");\n\n        return;\n\n    }\n\n    spiceport = backend->u.spiceport = g_new0(ChardevSpicePort, 1);\n\n    qemu_chr_parse_common(opts, qapi_ChardevSpicePort_base(spiceport));\n\n    spiceport->fqdn = g_strdup(name);\n\n}\n",
        "output": "0",
        "idx": 953
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void memory_region_update_coalesced_range(MemoryRegion *mr)\n\n{\n\n    FlatRange *fr;\n\n    CoalescedMemoryRange *cmr;\n\n    AddrRange tmp;\n\n\n\n    FOR_EACH_FLAT_RANGE(fr, &address_space_memory.current_map) {\n\n        if (fr->mr == mr) {\n\n            qemu_unregister_coalesced_mmio(int128_get64(fr->addr.start),\n\n                                           int128_get64(fr->addr.size));\n\n            QTAILQ_FOREACH(cmr, &mr->coalesced, link) {\n\n                tmp = addrrange_shift(cmr->addr,\n\n                                      int128_sub(fr->addr.start,\n\n                                                 int128_make64(fr->offset_in_region)));\n\n                if (!addrrange_intersects(tmp, fr->addr)) {\n\n                    continue;\n\n                }\n\n                tmp = addrrange_intersection(tmp, fr->addr);\n\n                qemu_register_coalesced_mmio(int128_get64(tmp.start),\n\n                                             int128_get64(tmp.size));\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4831
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void map_linear_vram(CirrusVGAState *s)\n\n{\n\n\n\n\n    if (!s->map_addr && s->lfb_addr && s->lfb_end) {\n\n        s->map_addr = s->lfb_addr;\n\n        s->map_end = s->lfb_end;\n\n        cpu_register_physical_memory(s->map_addr, s->map_end - s->map_addr, s->vram_offset);\n\n    }\n\n\n\n    if (!s->map_addr)\n\n        return;\n\n\n\n    s->lfb_vram_mapped = 0;\n\n\n\n\n\n\n\n    if (!(s->cirrus_srcptr != s->cirrus_srcptr_end)\n\n        && !((s->sr[0x07] & 0x01) == 0)\n\n        && !((s->gr[0x0B] & 0x14) == 0x14)\n\n        && !(s->gr[0x0B] & 0x02)) {\n\n\n\n\n\n                                    (s->vram_offset + s->cirrus_bank_base[0]) | IO_MEM_RAM);\n\n\n                                    (s->vram_offset + s->cirrus_bank_base[1]) | IO_MEM_RAM);\n\n\n\n        s->lfb_vram_mapped = 1;\n\n    }\n\n    else {\n\n        cpu_register_physical_memory(isa_mem_base + 0xa0000, 0x20000,\n\n                                     s->vga_io_memory);\n\n    }\n\n\n\n    vga_dirty_log_start((VGAState *)s);\n\n}",
        "output": "1",
        "idx": 4407
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ppc_hash64_check_prot(int prot, int rw, int access_type)\n\n{\n\n    int ret;\n\n\n\n    if (access_type == ACCESS_CODE) {\n\n        if (prot & PAGE_EXEC) {\n\n            ret = 0;\n\n        } else {\n\n            ret = -2;\n\n        }\n\n    } else if (rw) {\n\n        if (prot & PAGE_WRITE) {\n\n            ret = 0;\n\n        } else {\n\n            ret = -2;\n\n        }\n\n    } else {\n\n        if (prot & PAGE_READ) {\n\n            ret = 0;\n\n        } else {\n\n            ret = -2;\n\n        }\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 1037
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int btrfs_previous_extent_item(struct btrfs_root *root,\n\t\t\tstruct btrfs_path *path, u64 min_objectid)\n{\n\tstruct btrfs_key found_key;\n\tstruct extent_buffer *leaf;\n\tu32 nritems;\n\tint ret;\n\n\twhile (1) {\n\t\tif (path->slots[0] == 0) {\n\t\t\tret = btrfs_prev_leaf(root, path);\n\t\t\tif (ret != 0)\n\t\t\t\treturn ret;\n\t\t} else {\n\t\t\tpath->slots[0]--;\n\t\t}\n\t\tleaf = path->nodes[0];\n\t\tnritems = btrfs_header_nritems(leaf);\n\t\tif (nritems == 0)\n\t\t\treturn 1;\n\t\tif (path->slots[0] == nritems)\n\t\t\tpath->slots[0]--;\n\n\t\tbtrfs_item_key_to_cpu(leaf, &found_key, path->slots[0]);\n\t\tif (found_key.objectid < min_objectid)\n\t\t\tbreak;\n\t\tif (found_key.type == BTRFS_EXTENT_ITEM_KEY ||\n\t\t    found_key.type == BTRFS_METADATA_ITEM_KEY)\n\t\t\treturn 0;\n\t\tif (found_key.objectid == min_objectid &&\n\t\t    found_key.type < BTRFS_EXTENT_ITEM_KEY)\n\t\t\tbreak;\n\t}\n\treturn 1;\n}",
        "output": "0",
        "idx": 5278
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vhost_user_get_u64(struct vhost_dev *dev, int request, uint64_t *u64)\n\n{\n\n    VhostUserMsg msg = {\n\n        .request = request,\n\n        .flags = VHOST_USER_VERSION,\n\n    };\n\n\n\n    if (vhost_user_one_time_request(request) && dev->vq_index != 0) {\n\n        return 0;\n\n    }\n\n\n\n    vhost_user_write(dev, &msg, NULL, 0);\n\n\n\n    if (vhost_user_read(dev, &msg) < 0) {\n\n        return 0;\n\n    }\n\n\n\n    if (msg.request != request) {\n\n        error_report(\"Received unexpected msg type. Expected %d received %d\",\n\n                     request, msg.request);\n\n        return -1;\n\n    }\n\n\n\n    if (msg.size != sizeof(m.u64)) {\n\n        error_report(\"Received bad msg size.\");\n\n        return -1;\n\n    }\n\n\n\n    *u64 = msg.u64;\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 242
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "read_32 (IOBUF inp)\n{\n  unsigned long a;\n  a = iobuf_get_noeof (inp) << 24;\n  a |= iobuf_get_noeof (inp) << 16;\n  a |= iobuf_get_noeof (inp) << 8;\n  a |= iobuf_get_noeof (inp);\n  return a;\n}",
        "output": "1",
        "idx": 2893
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ram_addr_t s390_virtio_device_num_vq(VirtIOS390Device *dev)\n\n{\n\n    VirtIODevice *vdev = dev->vdev;\n\n    int num_vq;\n\n\n\n    for (num_vq = 0; num_vq < VIRTIO_PCI_QUEUE_MAX; num_vq++) {\n\n        if (!virtio_queue_get_num(vdev, num_vq)) {\n\n            break;\n\n        }\n\n    }\n\n\n\n    return num_vq;\n\n}\n",
        "output": "0",
        "idx": 307
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *qemu_memalign(size_t alignment, size_t size)\n\n{\n\n    return VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_READWRITE);\n\n}\n",
        "output": "0",
        "idx": 2874
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mxf_read_cryptographic_context(MXFCryptoContext *cryptocontext, ByteIOContext *pb, int tag, int size, UID uid)\n\n{\n\n    if (size != 16)\n\n        return -1;\n\n    if (IS_KLV_KEY(uid, mxf_crypto_source_container_ul))\n\n        get_buffer(pb, cryptocontext->source_container_ul, 16);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4180
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int snd_timer_stop(struct snd_timer_instance *timeri)\n{\n\tstruct snd_timer *timer;\n\tunsigned long flags;\n\tint err;\n\n\terr = _snd_timer_stop(timeri, 0, SNDRV_TIMER_EVENT_STOP);\n\tif (err < 0)\n\t\treturn err;\n\ttimer = timeri->timer;\n\tif (!timer)\n\t\treturn -EINVAL;\n\tspin_lock_irqsave(&timer->lock, flags);\n\ttimeri->cticks = timeri->ticks;\n\ttimeri->pticks = 0;\n\tspin_unlock_irqrestore(&timer->lock, flags);\n\treturn 0;\n}",
        "output": "1",
        "idx": 2600
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "validate_exec_list(struct drm_i915_gem_exec_object2 *exec,\n\t\t   int count)\n{\n\tint i;\n\n\tfor (i = 0; i < count; i++) {\n\t\tchar __user *ptr = (char __user *)(uintptr_t)exec[i].relocs_ptr;\n\t\tint length; /* limited by fault_in_pages_readable() */\n\n\t\tif (exec[i].flags & __EXEC_OBJECT_UNKNOWN_FLAGS)\n\t\t\treturn -EINVAL;\n\n\t\t/* First check for malicious input causing overflow */\n\t\tif (exec[i].relocation_count >\n\t\t    INT_MAX / sizeof(struct drm_i915_gem_relocation_entry))\n\t\t\treturn -EINVAL;\n\n\t\tlength = exec[i].relocation_count *\n\t\t\tsizeof(struct drm_i915_gem_relocation_entry);\n\t\t/* we may also need to update the presumed offsets */\n\t\tif (!access_ok(VERIFY_WRITE, ptr, length))\n\t\t\treturn -EFAULT;\n\n\t\tif (fault_in_multipages_readable(ptr, length))\n\t\t\treturn -EFAULT;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 1786
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *idr_get_next(struct idr *idp, int *nextidp)\n{\n\tstruct idr_layer *p, *pa[MAX_IDR_LEVEL];\n\tstruct idr_layer **paa = &pa[0];\n\tint id = *nextidp;\n\tint n, max;\n\n\t/* find first ent */\n\tp = rcu_dereference_raw(idp->top);\n\tif (!p)\n\t\treturn NULL;\n\tn = (p->layer + 1) * IDR_BITS;\n\tmax = 1 << n;\n\n\twhile (id < max) {\n\t\twhile (n > 0 && p) {\n\t\t\tn -= IDR_BITS;\n\t\t\t*paa++ = p;\n\t\t\tp = rcu_dereference_raw(p->ary[(id >> n) & IDR_MASK]);\n\t\t}\n\n\t\tif (p) {\n\t\t\t*nextidp = id;\n\t\t\treturn p;\n\t\t}\n\n\t\t/*\n\t\t * Proceed to the next layer at the current level.  Unlike\n\t\t * idr_for_each(), @id isn't guaranteed to be aligned to\n\t\t * layer boundary at this point and adding 1 << n may\n\t\t * incorrectly skip IDs.  Make sure we jump to the\n\t\t * beginning of the next layer using round_up().\n\t\t */\n\t\tid = round_up(id + 1, 1 << n);\n\t\twhile (n < fls(id)) {\n\t\t\tn += IDR_BITS;\n\t\t\tp = *--paa;\n\t\t}\n\t}\n\treturn NULL;\n}",
        "output": "1",
        "idx": 4084
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_spice_display_init(DisplayState *ds)\n\n{\n\n    assert(sdpy.ds == NULL);\n\n    sdpy.ds = ds;\n\n    sdpy.bufsize = (16 * 1024 * 1024);\n\n    sdpy.buf = qemu_malloc(sdpy.bufsize);\n\n    pthread_mutex_init(&sdpy.lock, NULL);\n\n    register_displaychangelistener(ds, &display_listener);\n\n\n\n    sdpy.qxl.base.sif = &dpy_interface.base;\n\n    qemu_spice_add_interface(&sdpy.qxl.base);\n\n    assert(sdpy.worker);\n\n\n\n    qemu_add_vm_change_state_handler(qemu_spice_vm_change_state_handler, &sdpy);\n\n    qemu_spice_create_host_memslot(&sdpy);\n\n    qemu_spice_create_host_primary(&sdpy);\n\n}\n",
        "output": "0",
        "idx": 690
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int64_t LineBasedFrameDecoder::findEndOfLine(IOBufQueue& buf) {\n  Cursor c(buf.front());\n  for (uint32_t i = 0; i < maxLength_ && i < buf.chainLength(); i++) {\n    auto b = c.read<char>();\n    if (b == '\\n' && terminatorType_ != TerminatorType::CARRIAGENEWLINE) {\n      return i;\n    } else if (terminatorType_ != TerminatorType::NEWLINE &&\n               b == '\\r' && !c.isAtEnd() && c.read<char>() == '\\n') {\n      return i;\n    }\n  }\n\n  return -1;\n}",
        "output": "1",
        "idx": 2045
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void flush_free_hpage_work(struct hstate *h)\n{\n\tif (free_vmemmap_pages_per_hpage(h))\n\t\tflush_work(&free_hpage_work);\n}",
        "output": "0",
        "idx": 3516
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nvmet_fc_format_rjt(void *buf, u16 buflen, u8 ls_cmd,\n\t\t\tu8 reason, u8 explanation, u8 vendor)\n{\n\tstruct fcnvme_ls_rjt *rjt = buf;\n\n\tnvmet_fc_format_rsp_hdr(buf, FCNVME_LSDESC_RQST,\n\t\t\tfcnvme_lsdesc_len(sizeof(struct fcnvme_ls_rjt)),\n\t\t\tls_cmd);\n\trjt->rjt.desc_tag = cpu_to_be32(FCNVME_LSDESC_RJT);\n\trjt->rjt.desc_len = fcnvme_lsdesc_len(sizeof(struct fcnvme_lsdesc_rjt));\n\trjt->rjt.reason_code = reason;\n\trjt->rjt.reason_explanation = explanation;\n\trjt->rjt.vendor = vendor;\n\n\treturn sizeof(struct fcnvme_ls_rjt);\n}",
        "output": "0",
        "idx": 4480
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cmm_timeout_handler(struct ctl_table *ctl, int write,\n\t\t\t       void __user *buffer, size_t *lenp, loff_t *ppos)\n{\n\tchar buf[64], *p;\n\tlong nr, seconds;\n\tunsigned int len;\n\n\tif (!*lenp || (*ppos && !write)) {\n\t\t*lenp = 0;\n\t\treturn 0;\n\t}\n\n\tif (write) {\n\t\tlen = *lenp;\n\t\tif (copy_from_user(buf, buffer,\n\t\t\t\t   len > sizeof(buf) ? sizeof(buf) : len))\n\t\t\treturn -EFAULT;\n\t\tbuf[sizeof(buf) - 1] = '\\0';\n\t\tcmm_skip_blanks(buf, &p);\n\t\tnr = simple_strtoul(p, &p, 0);\n\t\tcmm_skip_blanks(p, &p);\n\t\tseconds = simple_strtoul(p, &p, 0);\n\t\tcmm_set_timeout(nr, seconds);\n\t} else {\n\t\tlen = sprintf(buf, \"%ld %ld\\n\",\n\t\t\t      cmm_timeout_pages, cmm_timeout_seconds);\n\t\tif (len > *lenp)\n\t\t\tlen = *lenp;\n\t\tif (copy_to_user(buffer, buf, len))\n\t\t\treturn -EFAULT;\n\t}\n\t*lenp = len;\n\t*ppos += len;\n\treturn 0;\n}",
        "output": "1",
        "idx": 6047
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qpci_spapr_io_writew(QPCIBus *bus, void *addr, uint16_t value)\n\n{\n\n    QPCIBusSPAPR *s = container_of(bus, QPCIBusSPAPR, bus);\n\n    uint64_t port = (uintptr_t)addr;\n\n    value = bswap16(value);\n\n    if (port < s->pio.size) {\n\n        writew(s->pio_cpu_base + port, value);\n\n    } else {\n\n        writew(s->mmio_cpu_base + port, value);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2848
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void qeth_free_cq(struct qeth_card *card)\n{\n\tif (card->qdio.c_q) {\n\t\t--card->qdio.no_in_queues;\n\t\tkfree(card->qdio.c_q);\n\t\tcard->qdio.c_q = NULL;\n\t}\n\tkfree(card->qdio.out_bufstates);\n\tcard->qdio.out_bufstates = NULL;\n}",
        "output": "0",
        "idx": 3533
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void RemoteFsDevice::unmount()\n{\n    if (details.isLocalFile()) {\n        return;\n    }\n\n    if (!isConnected() || proc) {\n        return;\n    }\n\n    if (messageSent) {\n        return;\n    }\n\n    QString cmd;\n    QStringList args;\n    if (!details.isLocalFile()) {\n        QString mp=mountPoint(details, false);\n        if (!mp.isEmpty()) {\n            cmd=Utils::findExe(\"fusermount\");\n            if (!cmd.isEmpty()) {\n                args << QLatin1String(\"-u\") << QLatin1String(\"-z\") << mp;\n            } else {\n                emit error(tr(\"\\\"fusermount\\\" is not installed!\"));\n            }\n        }\n    }\n\n    if (!cmd.isEmpty()) {\n        setStatusMessage(tr(\"Disconnecting...\"));\n        proc=new QProcess(this);\n        proc->setProperty(\"unmount\", true);\n        connect(proc, SIGNAL(finished(int)), SLOT(procFinished(int)));\n        proc->start(cmd, args, QIODevice::ReadOnly);\n    }\n}",
        "output": "0",
        "idx": 904
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  switch (recv_into_rbuf (h)) {\n  case -1: SET_NEXT_STATE (%.DEAD); return 0;\n  case 1:\n    save_reply_state (h);\n    SET_NEXT_STATE (%.READY);\n    return 0;\n  case 0:\n    length = be32toh (h->sbuf.sr.structured_reply.length);\n    offset = be64toh (h->sbuf.sr.payload.offset_data.offset);\n\n    assert (cmd); /* guaranteed by CHECK */\n    if (CALLBACK_IS_NOT_NULL (cmd->cb.fn.chunk)) {\n      int error = cmd->error;\n\n      if (CALL_CALLBACK (cmd->cb.fn.chunk, cmd->data + (offset - cmd->offset),\n                         length - sizeof offset, offset,\n                         LIBNBD_READ_DATA, &error) == -1)\n        if (cmd->error == 0)\n          cmd->error = error ? error : EPROTO;\n    }\n\n    SET_NEXT_STATE (%FINISH);\n  }",
        "output": "1",
        "idx": 4893
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xen_pt_long_reg_write(XenPCIPassthroughState *s, XenPTReg *cfg_entry,\n\n                                 uint32_t *val, uint32_t dev_value,\n\n                                 uint32_t valid_mask)\n\n{\n\n    XenPTRegInfo *reg = cfg_entry->reg;\n\n    uint32_t writable_mask = 0;\n\n    uint32_t throughable_mask = get_throughable_mask(s, reg, valid_mask);\n\n\n\n    /* modify emulate register */\n\n    writable_mask = reg->emu_mask & ~reg->ro_mask & valid_mask;\n\n    cfg_entry->data = XEN_PT_MERGE_VALUE(*val, cfg_entry->data, writable_mask);\n\n\n\n    /* create value for writing to I/O device register */\n\n    *val = XEN_PT_MERGE_VALUE(*val, dev_value, throughable_mask);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2799
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ff_compute_band_indexes(MPADecodeContext *s, GranuleDef *g)\n\n{\n\n    if (g->block_type == 2) {\n\n        if (g->switch_point) {\n\n            /* if switched mode, we handle the 36 first samples as\n\n                long blocks.  For 8000Hz, we handle the 72 first\n\n                exponents as long blocks */\n\n            if (s->sample_rate_index <= 2)\n\n                g->long_end = 8;\n\n            else\n\n                g->long_end = 6;\n\n\n\n            g->short_start = 2 + (s->sample_rate_index != 8);\n\n        } else {\n\n            g->long_end    = 0;\n\n            g->short_start = 0;\n\n        }\n\n    } else {\n\n        g->short_start = 13;\n\n        g->long_end    = 22;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2578
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void FNAME(update_pte)(struct kvm_vcpu *vcpu, struct kvm_mmu_page *sp,\n\t\t\t      u64 *spte, const void *pte)\n{\n\tpt_element_t gpte = *(const pt_element_t *)pte;\n\n\tFNAME(prefetch_gpte)(vcpu, sp, spte, gpte, false);\n}",
        "output": "0",
        "idx": 2426
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *g_try_malloc(size_t n_bytes)\n\n{\n\n    __coverity_negative_sink__(n_bytes);\n\n    return malloc(n_bytes == 0 ? 1 : n_bytes);\n\n}\n",
        "output": "1",
        "idx": 5986
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compile_parenthesis(char_u **arg, cctx_T *cctx, ppconst_T *ppconst)\n{\n    int\t    ret;\n    char_u  *p = *arg + 1;\n\n    if (may_get_next_line_error(p, arg, cctx) == FAIL)\n\treturn FAIL;\n    if (ppconst->pp_used <= PPSIZE - 10)\n    {\n\tret = compile_expr1(arg, cctx, ppconst);\n    }\n    else\n    {\n\t// Not enough space in ppconst, flush constants.\n\tif (generate_ppconst(cctx, ppconst) == FAIL)\n\t    return FAIL;\n\tret = compile_expr0(arg, cctx);\n    }\n    if (may_get_next_line_error(*arg, arg, cctx) == FAIL)\n\treturn FAIL;\n    if (**arg == ')')\n\t++*arg;\n    else if (ret == OK)\n    {\n\temsg(_(e_missing_closing_paren));\n\tret = FAIL;\n    }\n    return ret;\n}",
        "output": "0",
        "idx": 3754
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void extract_nonewprivs(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"/proc/%d/root%s\", pid, RUN_NONEWPRIVS_CFG) == -1)\n\t\terrExit(\"asprintf\");\n\n\tstruct stat s;\n\tif (stat(fname, &s) == -1) {\n\t\tfree(fname);\n\t\treturn;\n\t}\n\n\targ_nonewprivs = 1;\n\tfree(fname);\n}",
        "output": "1",
        "idx": 3098
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gs_copydevice(gx_device ** pnew_dev, const gx_device * dev, gs_memory_t * mem)\n{\n    return gs_copydevice2(pnew_dev, dev, false, mem);\n}",
        "output": "0",
        "idx": 223
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t omap_pwt_read(void *opaque, target_phys_addr_t addr,\n\n                              unsigned size)\n\n{\n\n    struct omap_pwt_s *s = (struct omap_pwt_s *) opaque;\n\n    int offset = addr & OMAP_MPUI_REG_MASK;\n\n\n\n    if (size != 1) {\n\n        return omap_badwidth_read8(opaque, addr);\n\n    }\n\n\n\n    switch (offset) {\n\n    case 0x00:\t/* FRC */\n\n        return s->frc;\n\n    case 0x04:\t/* VCR */\n\n        return s->vrc;\n\n    case 0x08:\t/* GCR */\n\n        return s->gcr;\n\n    }\n\n    OMAP_BAD_REG(addr);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3435
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fts3DoAutoincrmerge(\n  Fts3Table *p,                   /* FTS3 table handle */\n  const char *zParam              /* Nul-terminated string containing boolean */\n){\n  int rc = SQLITE_OK;\n  sqlite3_stmt *pStmt = 0;\n  p->nAutoincrmerge = fts3Getint(&zParam);\n  if( p->nAutoincrmerge==1 || p->nAutoincrmerge>MergeCount(p) ){\n    p->nAutoincrmerge = 8;\n  }\n  if( !p->bHasStat ){\n    assert( p->bFts4==0 );\n    sqlite3Fts3CreateStatTable(&rc, p);\n    if( rc ) return rc;\n  }\n  rc = fts3SqlStmt(p, SQL_REPLACE_STAT, &pStmt, 0);\n  if( rc ) return rc;\n  sqlite3_bind_int(pStmt, 1, FTS_STAT_AUTOINCRMERGE);\n  sqlite3_bind_int(pStmt, 2, p->nAutoincrmerge);\n  sqlite3_step(pStmt);\n  rc = sqlite3_reset(pStmt);\n  return rc;\n}",
        "output": "0",
        "idx": 662
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void xen_map_cache_init(void)\n\n{\n\n    unsigned long size;\n\n    struct rlimit rlimit_as;\n\n\n\n    mapcache = g_malloc0(sizeof (MapCache));\n\n\n\n    QTAILQ_INIT(&mapcache->locked_entries);\n\n    mapcache->last_address_index = -1;\n\n\n\n    getrlimit(RLIMIT_AS, &rlimit_as);\n\n    if (rlimit_as.rlim_max < MCACHE_MAX_SIZE) {\n\n        rlimit_as.rlim_cur = rlimit_as.rlim_max;\n\n    } else {\n\n        rlimit_as.rlim_cur = MCACHE_MAX_SIZE;\n\n    }\n\n\n\n    setrlimit(RLIMIT_AS, &rlimit_as);\n\n    mapcache->max_mcache_size = rlimit_as.rlim_cur;\n\n\n\n    mapcache->nr_buckets =\n\n        (((mapcache->max_mcache_size >> XC_PAGE_SHIFT) +\n\n          (1UL << (MCACHE_BUCKET_SHIFT - XC_PAGE_SHIFT)) - 1) >>\n\n         (MCACHE_BUCKET_SHIFT - XC_PAGE_SHIFT));\n\n\n\n    size = mapcache->nr_buckets * sizeof (MapCacheEntry);\n\n    size = (size + XC_PAGE_SIZE - 1) & ~(XC_PAGE_SIZE - 1);\n\n    DPRINTF(\"%s, nr_buckets = %lx size %lu\\n\", __func__,\n\n            mapcache->nr_buckets, size);\n\n    mapcache->entry = g_malloc0(size);\n\n}\n",
        "output": "1",
        "idx": 3570
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int oidc_handle_redirect_authorization_response(request_rec *r,\n\t\toidc_cfg *c, oidc_session_t *session) {\n\n\toidc_debug(r, \"enter\");\n\n\t/* read the parameters from the query string */\n\tapr_table_t *params = apr_table_make(r->pool, 8);\n\toidc_util_read_form_encoded_params(r, params, r->args);\n\n\t/* do the actual work */\n\treturn oidc_handle_authorization_response(r, c, session, params, \"query\");\n}",
        "output": "0",
        "idx": 2903
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t srpt_tpg_enable_show(struct config_item *item, char *page)\n{\n\tstruct se_portal_group *se_tpg = to_tpg(item);\n\tstruct srpt_port *sport = container_of(se_tpg, struct srpt_port, port_tpg_1);\n\n\treturn snprintf(page, PAGE_SIZE, \"%d\\n\", (sport->enabled) ? 1: 0);\n}",
        "output": "0",
        "idx": 5298
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static pyc_object *get_array_object_generic(RBuffer *buffer, ut32 size) {\n\tpyc_object *tmp = NULL;\n\tpyc_object *ret = NULL;\n\tut32 i = 0;\n\n\tret = R_NEW0 (pyc_object);\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tret->data = r_list_newf ((RListFree)free_object);\n\tif (!ret->data) {\n\t\tfree (ret);\n\t\treturn NULL;\n\t}\n\tfor (i = 0; i < size; i++) {\n\t\ttmp = get_object (buffer);\n\t\tif (!tmp) {\n\t\t\tr_list_free (ret->data);\n\t\t\tR_FREE (ret);\n\t\t\treturn NULL;\n\t\t}\n\t\tif (!r_list_append (ret->data, tmp)) {\n\t\t\tfree_object (tmp);\n\t\t\tr_list_free (ret->data);\n\t\t\tfree (ret);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn ret;\n}",
        "output": "1",
        "idx": 4130
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const struct usb_cdc_union_desc *\nims_pcu_get_cdc_union_desc(struct usb_interface *intf)\n{\n\tconst void *buf = intf->altsetting->extra;\n\tsize_t buflen = intf->altsetting->extralen;\n\tstruct usb_cdc_union_desc *union_desc;\n\n\tif (!buf) {\n\t\tdev_err(&intf->dev, \"Missing descriptor data\\n\");\n\t\treturn NULL;\n\t}\n\n\tif (!buflen) {\n\t\tdev_err(&intf->dev, \"Zero length descriptor\\n\");\n\t\treturn NULL;\n\t}\n\n\twhile (buflen > 0) {\n\t\tunion_desc = (struct usb_cdc_union_desc *)buf;\n\n\t\tif (union_desc->bDescriptorType == USB_DT_CS_INTERFACE &&\n\t\t    union_desc->bDescriptorSubType == USB_CDC_UNION_TYPE) {\n\t\t\tdev_dbg(&intf->dev, \"Found union header\\n\");\n\t\t\treturn union_desc;\n\t\t}\n\n\t\tbuflen -= union_desc->bLength;\n\t\tbuf += union_desc->bLength;\n\t}\n\n\tdev_err(&intf->dev, \"Missing CDC union descriptor\\n\");\n\treturn NULL;",
        "output": "1",
        "idx": 1596
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ssh_parse_filename(const char *filename, QDict *options,\n\n                               Error **errp)\n\n{\n\n    if (qdict_haskey(options, \"user\") ||\n\n        qdict_haskey(options, \"host\") ||\n\n        qdict_haskey(options, \"port\") ||\n\n        qdict_haskey(options, \"path\") ||\n\n        qdict_haskey(options, \"host_key_check\")) {\n\n        error_setg(errp, \"user, host, port, path, host_key_check cannot be used at the same time as a file option\");\n\n        return;\n\n    }\n\n\n\n    parse_uri(filename, options, errp);\n\n}\n",
        "output": "0",
        "idx": 4624
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_syslog_parse_identifier(const char *str,\n                                         const char *ident, const char *pid, int ret) {\n        const char *buf = str;\n        _cleanup_free_ char *ident2 = NULL, *pid2 = NULL;\n        int ret2;\n\n        ret2 = syslog_parse_identifier(&buf, &ident2, &pid2);\n\n        assert_se(ret == ret2);\n        assert_se(ident == ident2 || streq_ptr(ident, ident2));\n        assert_se(pid == pid2 || streq_ptr(pid, pid2));\n}",
        "output": "1",
        "idx": 5834
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static pj_status_t tls_shutdown(pjsip_transport *transport)\n{\n    struct tls_transport *tls = (struct tls_transport*)transport;\n    \n    /* Stop keep-alive timer. */\n    if (tls->ka_timer.id) {\n\tpjsip_endpt_cancel_timer(tls->base.endpt, &tls->ka_timer);\n\ttls->ka_timer.id = PJ_FALSE;\n    }\n\n    return PJ_SUCCESS;\n}",
        "output": "0",
        "idx": 1089
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ext4_dax_fault(struct vm_area_struct *vma, struct vm_fault *vmf)\n{\n\tint result;\n\thandle_t *handle = NULL;\n\tstruct super_block *sb = file_inode(vma->vm_file)->i_sb;\n\tbool write = vmf->flags & FAULT_FLAG_WRITE;\n\n\tif (write) {\n\t\tsb_start_pagefault(sb);\n\t\tfile_update_time(vma->vm_file);\n\t\thandle = ext4_journal_start_sb(sb, EXT4_HT_WRITE_PAGE,\n\t\t\t\t\t\tEXT4_DATA_TRANS_BLOCKS(sb));\n\t}\n\n\tif (IS_ERR(handle))\n\t\tresult = VM_FAULT_SIGBUS;\n\telse\n\t\tresult = __dax_fault(vma, vmf, ext4_get_block_dax,\n\t\t\t\t\t\text4_end_io_unwritten);\n\n\tif (write) {\n\t\tif (!IS_ERR(handle))\n\t\t\text4_journal_stop(handle);\n\t\tsb_end_pagefault(sb);\n\t}\n\n\treturn result;\n}",
        "output": "1",
        "idx": 4381
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err trgr_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\treturn gf_isom_box_array_read(s, bs);\n}",
        "output": "0",
        "idx": 891
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ossl_cipher_set_key_length(VALUE self, VALUE key_length)\n{\n    int len = NUM2INT(key_length);\n    EVP_CIPHER_CTX *ctx;\n\n    GetCipher(self, ctx);\n    if (EVP_CIPHER_CTX_set_key_length(ctx, len) != 1)\n        ossl_raise(eCipherError, NULL);\n\n    return key_length;\n}",
        "output": "0",
        "idx": 3564
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "hook_infolist_get (struct t_weechat_plugin *plugin, const char *infolist_name,\n                   void *pointer, const char *arguments)\n{\n    struct t_hook *ptr_hook, *next_hook;\n    struct t_infolist *value;\n    \n    /* make C compiler happy */\n    (void) plugin;\n    \n    if (!infolist_name || !infolist_name[0])\n        return NULL;\n    \n    hook_exec_start ();\n    \n    ptr_hook = weechat_hooks[HOOK_TYPE_INFOLIST];\n    while (ptr_hook)\n    {\n        next_hook = ptr_hook->next_hook;\n        \n        if (!ptr_hook->deleted\n            && !ptr_hook->running\n            && (string_strcasecmp (HOOK_INFOLIST(ptr_hook, infolist_name),\n                                   infolist_name) == 0))\n        {\n            ptr_hook->running = 1;\n            value = (HOOK_INFOLIST(ptr_hook, callback))\n                (ptr_hook->callback_data, infolist_name, pointer, arguments);\n            ptr_hook->running = 0;\n            \n            hook_exec_end ();\n            return value;\n        }\n        \n        ptr_hook = next_hook;\n    }\n    \n    hook_exec_end ();\n    \n    /* infolist not found */\n    return NULL;\n}",
        "output": "0",
        "idx": 5514
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlDictComputeBigQKey(const xmlChar *prefix, int plen,\n                      const xmlChar *name, int len)\n{\n    uint32_t hash;\n    int i;\n\n    hash = 0;\n\n    for (i = 0;i < plen; i++) {\n        hash += prefix[i];\n\thash += (hash << 10);\n\thash ^= (hash >> 6);\n    }\n    hash += ':';\n    hash += (hash << 10);\n    hash ^= (hash >> 6);\n\n    for (i = 0;i < len; i++) {\n        hash += name[i];\n\thash += (hash << 10);\n\thash ^= (hash >> 6);\n    }\n    hash += (hash << 3);\n    hash ^= (hash >> 11);\n    hash += (hash << 15);\n\n    return hash;\n}",
        "output": "1",
        "idx": 4481
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int au1100fb_fb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)\n{\n\tstruct au1100fb_device *fbdev;\n\tunsigned int len;\n\tunsigned long start=0, off;\n\n\tfbdev = to_au1100fb_device(fbi);\n\n\tif (vma->vm_pgoff > (~0UL >> PAGE_SHIFT)) {\n\t\treturn -EINVAL;\n\t}\n\n\tstart = fbdev->fb_phys & PAGE_MASK;\n\tlen = PAGE_ALIGN((start & ~PAGE_MASK) + fbdev->fb_len);\n\n\toff = vma->vm_pgoff << PAGE_SHIFT;\n\n\tif ((vma->vm_end - vma->vm_start + off) > len) {\n\t\treturn -EINVAL;\n\t}\n\n\toff += start;\n\tvma->vm_pgoff = off >> PAGE_SHIFT;\n\n\tvma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);\n\tpgprot_val(vma->vm_page_prot) |= (6 << 9); //CCA=6\n\n\tif (io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,\n\t\t\t\tvma->vm_end - vma->vm_start,\n\t\t\t\tvma->vm_page_prot)) {\n\t\treturn -EAGAIN;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 3363
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *umm_calloc( size_t num, size_t item_size ) {\n  void *ret;\n  size_t size = item_size * num;\n\n  /* check poison of each blocks, if poisoning is enabled */\n  if (!CHECK_POISON_ALL_BLOCKS()) {\n    return NULL;\n  }\n\n  /* check full integrity of the heap, if this check is enabled */\n  if (!INTEGRITY_CHECK()) {\n    return NULL;\n  }\n\n  if (POISON_SIZE(size) >= SIZE_MAX - size) return NULL;  // Overflow\n  size += POISON_SIZE(size);\n  ret = _umm_malloc(size);\n  if (ret != NULL) memset(ret, 0x00, size);\n\n  ret = GET_POISONED(ret, size);\n\n  umm_account_free_blocks_cnt();\n\n  return ret;\n}",
        "output": "0",
        "idx": 4584
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char ssl3_cbc_record_digest_supported(const EVP_MD *digest)\n\t{\n#ifdef OPENSSL_FIPS\n\tif (FIPS_mode())\n\t\treturn 0;\n#endif\n\tswitch (digest->type)\n\t\t{\n\t\tcase NID_md5:\n\t\tcase NID_sha1:\n\t\tcase NID_sha224:\n\t\tcase NID_sha256:\n\t\tcase NID_sha384:\n\t\tcase NID_sha512:\n\t\t\treturn 1;\n\t\tdefault:\n\t\t\treturn 0;\n\t\t}\n\t}",
        "output": "1",
        "idx": 5948
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void piix4_ide_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);\n\n\n\n    k->no_hotplug = 1;\n\n    k->init = pci_piix_ide_initfn;\n\n    k->exit = pci_piix_ide_exitfn;\n\n    k->vendor_id = PCI_VENDOR_ID_INTEL;\n\n    k->device_id = PCI_DEVICE_ID_INTEL_82371AB;\n\n    k->class_id = PCI_CLASS_STORAGE_IDE;\n\n    set_bit(DEVICE_CATEGORY_STORAGE, dc->categories);\n\n    dc->no_user = 1;\n\n}\n",
        "output": "1",
        "idx": 2315
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void append_info(DYNAMIC_STRING *ds, ulonglong affected_rows,\n                 const char *info)\n{\n  char buf[40], buff2[21];\n  sprintf(buf,\"affected rows: %s\\n\", llstr(affected_rows, buff2));\n  dynstr_append(ds, buf);\n  if (info)\n  {\n    dynstr_append(ds, \"info: \");\n    dynstr_append(ds, info);\n    dynstr_append_mem(ds, \"\\n\", 1);\n  }\n}",
        "output": "0",
        "idx": 3857
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int __xfrm_state_delete(struct xfrm_state *x)\n{\n\tstruct net *net = xs_net(x);\n\tint err = -ESRCH;\n\n\tif (x->km.state != XFRM_STATE_DEAD) {\n\t\tx->km.state = XFRM_STATE_DEAD;\n\t\tspin_lock(&net->xfrm.xfrm_state_lock);\n\t\tlist_del(&x->km.all);\n\t\thlist_del_rcu(&x->bydst);\n\t\thlist_del_rcu(&x->bysrc);\n\t\tif (x->id.spi)\n\t\t\thlist_del_rcu(&x->byspi);\n\t\tnet->xfrm.state_num--;\n\t\tspin_unlock(&net->xfrm.xfrm_state_lock);\n\n\t\txfrm_dev_state_delete(x);\n\n\t\t/* All xfrm_state objects are created by xfrm_state_alloc.\n\t\t * The xfrm_state_alloc call gives a reference, and that\n\t\t * is what we are dropping here.\n\t\t */\n\t\txfrm_state_put(x);\n\t\terr = 0;\n\t}\n\n\treturn err;\n}",
        "output": "0",
        "idx": 1546
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_mov_close_hinting(MOVTrack *track) {\n\n    AVFormatContext* rtp_ctx = track->rtp_ctx;\n\n    uint8_t *ptr;\n\n\n\n    av_freep(&track->enc);\n\n    sample_queue_free(&track->sample_queue);\n\n    if (!rtp_ctx)\n\n        return;\n\n    if (rtp_ctx->pb) {\n\n        av_write_trailer(rtp_ctx);\n\n        url_close_dyn_buf(rtp_ctx->pb, &ptr);\n\n        av_free(ptr);\n\n    }\n\n    av_metadata_free(&rtp_ctx->streams[0]->metadata);\n\n    av_metadata_free(&rtp_ctx->metadata);\n\n\n    av_free(rtp_ctx->streams[0]);\n\n    av_freep(&rtp_ctx);\n\n}",
        "output": "1",
        "idx": 93
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  int ADDCALL sass_compiler_parse(struct Sass_Compiler* compiler)\n  {\n    if (compiler == 0) return 1;\n    if (compiler->state == SASS_COMPILER_PARSED) return 0;\n    if (compiler->state != SASS_COMPILER_CREATED) return -1;\n    if (compiler->c_ctx == NULL) return 1;\n    if (compiler->cpp_ctx == NULL) return 1;\n    if (compiler->c_ctx->error_status)\n      return compiler->c_ctx->error_status;\n    // parse the context we have set up (file or data)\n    compiler->root = sass_parse_block(compiler);\n    // success\n    return 0;\n  }",
        "output": "0",
        "idx": 3057
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static SSL_METHOD *ssl23_get_client_method(int ver)\n\t{\n#ifndef OPENSSL_NO_SSL2\n\tif (ver == SSL2_VERSION)\n\t\treturn(SSLv2_client_method());\n#endif\n\tif (ver == SSL3_VERSION)\n\t\treturn(SSLv3_client_method());\n\telse if (ver == TLS1_VERSION)\n\t\treturn(TLSv1_client_method());\n\telse\n\t\treturn(NULL);\n\t}",
        "output": "1",
        "idx": 4699
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)\n{\n    ssize_t ret;\n    guint watch;\n\n    assert(qemu_in_coroutine());\n    /* Negotiation are always in main loop. */\n    watch = qio_channel_add_watch(ioc,\n                                  G_IO_IN,\n                                  nbd_negotiate_continue,\n                                  qemu_coroutine_self(),\n                                  NULL);\n    ret = nbd_read(ioc, buffer, size, NULL);\n    g_source_remove(watch);\n    return ret;\n\n}",
        "output": "1",
        "idx": 4881
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void local_mapped_file_attr(FsContext *ctx, const char *path,\n\n                                   struct stat *stbuf)\n\n{\n\n    FILE *fp;\n\n    char buf[ATTR_MAX];\n\n    char *attr_path;\n\n\n\n    attr_path = local_mapped_attr_path(ctx, path);\n\n    fp = local_fopen(attr_path, \"r\");\n\n    g_free(attr_path);\n\n    if (!fp) {\n\n        return;\n\n    }\n\n    memset(buf, 0, ATTR_MAX);\n\n    while (fgets(buf, ATTR_MAX, fp)) {\n\n        if (!strncmp(buf, \"virtfs.uid\", 10)) {\n\n            stbuf->st_uid = atoi(buf+11);\n\n        } else if (!strncmp(buf, \"virtfs.gid\", 10)) {\n\n            stbuf->st_gid = atoi(buf+11);\n\n        } else if (!strncmp(buf, \"virtfs.mode\", 11)) {\n\n            stbuf->st_mode = atoi(buf+12);\n\n        } else if (!strncmp(buf, \"virtfs.rdev\", 11)) {\n\n            stbuf->st_rdev = atoi(buf+12);\n\n        }\n\n        memset(buf, 0, ATTR_MAX);\n\n    }\n\n    fclose(fp);\n\n}\n",
        "output": "1",
        "idx": 5256
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int32_t efsctsi(uint32_t val)\n\n{\n\n    CPU_FloatU u;\n\n\n\n    u.l = val;\n\n    /* NaN are not treated the same way IEEE 754 does */\n\n    if (unlikely(float32_is_nan(u.f)))\n\n        return 0;\n\n\n\n    return float32_to_int32(u.f, &env->vec_status);\n\n}\n",
        "output": "0",
        "idx": 6044
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_packet_ref(AVPacket *dst, const AVPacket *src)\n\n{\n\n    int ret;\n\n\n\n    ret = av_packet_copy_props(dst, src);\n\n    if (ret < 0)\n\n        return ret;\n\n\n\n    if (!src->buf) {\n\n        ret = packet_alloc(&dst->buf, src->size);\n\n        if (ret < 0)\n\n            goto fail;\n\n        memcpy(dst->buf->data, src->data, src->size);\n\n\n\n        dst->data = dst->buf->data;\n\n    } else {\n\n        dst->buf = av_buffer_ref(src->buf);\n\n        if (!dst->buf) {\n\n            ret = AVERROR(ENOMEM);\n\n            goto fail;\n\n        }\n\n        dst->data = src->data;\n\n    }\n\n\n\n    dst->size = src->size;\n\n\n\n    return 0;\n\nfail:\n\n    av_packet_free_side_data(dst);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 3940
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "        QueryParamsTest()\n            : cxxtools::unit::TestSuite(\"queryparams\")\n        {\n            registerMethod(\"testQueryParams\", *this, &QueryParamsTest::testQueryParams);\n            registerMethod(\"testCopy\", *this, &QueryParamsTest::testCopy);\n            registerMethod(\"testParseUrl\", *this, &QueryParamsTest::testParseUrl);\n            registerMethod(\"testParseUrlSpecialChar\", *this, &QueryParamsTest::testParseUrlSpecialChar);\n            registerMethod(\"testCount\", *this, &QueryParamsTest::testCount);\n            registerMethod(\"testCombine\", *this, &QueryParamsTest::testCombine);\n            registerMethod(\"testIterator\", *this, &QueryParamsTest::testIterator);\n            registerMethod(\"testGetUrl\", *this, &QueryParamsTest::testGetUrl);\n        }",
        "output": "1",
        "idx": 715
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "time_t base64totime_t(char* s, database* db, const char* field_name){\n  \n  byte* b=decode_base64(s,strlen(s),NULL);\n  char* endp;\n  \n  if (b==NULL||strcmp(s,\"0\")==0) {\n    \n    /* Should we print error here? */\n    free(b);\n    \n    return 0;\n  } else {\n    time_t t = strtol((char *)b,&endp,10);\n    \n    if (endp[0]!='\\0') {\n      LOG_DB_FORMAT_LINE(LOG_LEVEL_WARNING, could not read '%s' from database: strtoll failed for '%s' (base64 encoded value: '%s'), field_name, b, s)\n      free(b);\n      return 0;\n    }\n    log_msg(LOG_LEVEL_DEBUG, \"base64totime_t: converted '%s': '%s' to %lld (base64 encoded value '%s')\", field_name, b, (long long) t, s);\n    free(b);\n    return t;\n  }\n  \n  \n}",
        "output": "1",
        "idx": 2673
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QPDF_Stream::setDescription(QPDF* qpdf, std::string const& description)\n{\n    this->QPDFObject::setDescription(qpdf, description);\n    setDictDescription();\n}",
        "output": "0",
        "idx": 5576
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_max_p_order(int max_porder, int n, int order)\n\n{\n\n    int porder, max_parts;\n\n\n\n    porder = max_porder;\n\n    while(porder > 0) {\n\n        max_parts = (1 << porder);\n\n        if(!(n % max_parts) && (n > max_parts*order)) {\n\n            break;\n\n        }\n\n        porder--;\n\n    }\n\n    return porder;\n\n}\n",
        "output": "0",
        "idx": 5244
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ccid_transceive_escape (ccid_driver_t handle,\n                        const unsigned char *data, size_t datalen,\n                        unsigned char *resp, size_t maxresplen, size_t *nresp)\n{\n  return send_escape_cmd (handle, data, datalen, resp, maxresplen, nresp);\n}",
        "output": "0",
        "idx": 2809
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(xml_parse_into_struct)\n{\n\txml_parser *parser;\n\tzval *pind, **xdata, **info = NULL;\n\tchar *data;\n\tint data_len, ret;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"rsZ|Z\", &pind, &data, &data_len, &xdata, &info) == FAILURE) {\n\t\treturn;\n\t}\n\t\n\tif (info) {\t\n\t\tzval_dtor(*info);\n\t\tarray_init(*info);\n\t}\n\n\tZEND_FETCH_RESOURCE(parser,xml_parser *, &pind, -1, \"XML Parser\", le_xml_parser);\n\n\tzval_dtor(*xdata);\n\tarray_init(*xdata);\n\n\tparser->data = *xdata;\n\t\n\tif (info) {\n\t\tparser->info = *info;\n\t}\n\t\n\tparser->level = 0;\n\tparser->ltags = safe_emalloc(XML_MAXLEVEL, sizeof(char *), 0);\n\n\tXML_SetDefaultHandler(parser->parser, _xml_defaultHandler);\n\tXML_SetElementHandler(parser->parser, _xml_startElementHandler, _xml_endElementHandler);\n\tXML_SetCharacterDataHandler(parser->parser, _xml_characterDataHandler);\n\n\tparser->isparsing = 1;\n\tret = XML_Parse(parser->parser, data, data_len, 1);\n\tparser->isparsing = 0;\n\n\tRETVAL_LONG(ret);\n}",
        "output": "1",
        "idx": 1583
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    char* parseKey( char* ptr, FileNode& map_node, FileNode& value_placeholder )\n    {\n        char c;\n        char *endptr = ptr - 1, *saveptr;\n\n        if( *ptr == '-' )\n            CV_PARSE_ERROR_CPP( \"Key may not start with \\'-\\'\" );\n\n        do c = *++endptr;\n        while( cv_isprint(c) && c != ':' );\n\n        if( c != ':' )\n            CV_PARSE_ERROR_CPP( \"Missing \\':\\'\" );\n\n        saveptr = endptr + 1;\n        do c = *--endptr;\n        while( c == ' ' );\n\n        ++endptr;\n        if( endptr == ptr )\n            CV_PARSE_ERROR_CPP( \"An empty key\" );\n\n        value_placeholder = fs->addNode(map_node, std::string(ptr, endptr - ptr), FileNode::NONE);\n        ptr = saveptr;\n\n        return ptr;\n    }",
        "output": "1",
        "idx": 4691
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CharDriverState *qmp_chardev_open_serial(ChardevHostdev *serial,\n\n                                                Error **errp)\n\n{\n\n#ifdef HAVE_CHARDEV_TTY\n\n    int fd;\n\n\n\n    fd = qmp_chardev_open_file_source(serial->device, O_RDWR, errp);\n\n    if (error_is_set(errp)) {\n\n        return NULL;\n\n    }\n\n    qemu_set_nonblock(fd);\n\n    return qemu_chr_open_tty_fd(fd);\n\n#else\n\n    error_setg(errp, \"character device backend type 'serial' not supported\");\n\n    return NULL;\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 6106
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void gf_filter_abort(GF_Filter *filter)\n{\n\tu32 i;\n\tGF_FilterEvent evt;\n\tif (!filter) return;\n\tgf_mx_p(filter->tasks_mx);\n\tGF_FEVT_INIT(evt, GF_FEVT_STOP, NULL);\n\tfor (i=0; i<filter->num_input_pids; i++) {\n\t\tGF_FilterPid *pid = gf_list_get(filter->input_pids, i);\n\t\tgf_filter_pid_set_discard(pid, GF_TRUE);\n\t\tevt.base.on_pid = pid;\n\t\tgf_filter_pid_send_event(pid, &evt);\n\t}\n\tfor (i=0; i<filter->num_output_pids; i++) {\n\t\tGF_FilterPid *pid = gf_list_get(filter->output_pids, i);\n\t\tgf_filter_pid_set_eos(pid);\n\t}\n\tgf_mx_v(filter->tasks_mx);\n}",
        "output": "0",
        "idx": 63
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cow_read(BlockDriverState *bs, int64_t sector_num,\n\n                    uint8_t *buf, int nb_sectors)\n\n{\n\n    BDRVCowState *s = bs->opaque;\n\n    int ret, n;\n\n\n\n    while (nb_sectors > 0) {\n\n        if (cow_is_allocated(bs, sector_num, nb_sectors, &n)) {\n\n            ret = bdrv_pread(bs->file,\n\n                        s->cow_sectors_offset + sector_num * 512,\n\n                        buf, n * 512);\n\n            if (ret != n * 512)\n\n                return -1;\n\n        } else {\n\n            if (bs->backing_hd) {\n\n                /* read from the base image */\n\n                ret = bdrv_read(bs->backing_hd, sector_num, buf, n);\n\n                if (ret < 0)\n\n                    return -1;\n\n            } else {\n\n            memset(buf, 0, n * 512);\n\n        }\n\n        }\n\n        nb_sectors -= n;\n\n        sector_num += n;\n\n        buf += n * 512;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1296
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sdp_parse_fmtp_config(AVCodecContext *codec, char *attr, char *value)\n\n{\n\n    switch (codec->codec_id) {\n\n        case CODEC_ID_MPEG4:\n\n        case CODEC_ID_AAC:\n\n            if (!strcmp(attr, \"config\")) {\n\n                /* decode the hexa encoded parameter */\n\n                int len = hex_to_data(NULL, value);\n\n\n\n                codec->extradata = av_mallocz(len + FF_INPUT_BUFFER_PADDING_SIZE);\n\n                if (!codec->extradata)\n\n                    return;\n\n                codec->extradata_size = len;\n\n                hex_to_data(codec->extradata, value);\n\n            }\n\n            break;\n\n        default:\n\n            break;\n\n    }\n\n    return;\n\n}",
        "output": "1",
        "idx": 6095
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool migration_bitmap_clear_dirty(RAMState *rs, ram_addr_t addr)\n\n{\n\n    bool ret;\n\n    int nr = addr >> TARGET_PAGE_BITS;\n\n    unsigned long *bitmap = atomic_rcu_read(&rs->ram_bitmap)->bmap;\n\n\n\n    ret = test_and_clear_bit(nr, bitmap);\n\n\n\n    if (ret) {\n\n        rs->migration_dirty_pages--;\n\n    }\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 818
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "handle_raw_data(char *packet, int len, struct query *q, int dns_fd, int tun_fd, int userid)\n{\n\tif (check_user_and_ip(userid, q) != 0) {\n\t\treturn;\n\t}\n\n\t/* Update query and time info for user */\n\tusers[userid].last_pkt = time(NULL);\n\tmemcpy(&(users[userid].q), q, sizeof(struct query));\n\n\t/* copy to packet buffer, update length */\n\tusers[userid].inpacket.offset = 0;\n\tmemcpy(users[userid].inpacket.data, packet, len);\n\tusers[userid].inpacket.len = len;\n\n\tif (debug >= 1) {\n\t\tfprintf(stderr, \"IN   pkt raw, total %d, from user %d\\n\",\n\t\t\tusers[userid].inpacket.len, userid);\n\t}\n\n\thandle_full_packet(tun_fd, dns_fd, userid);\n}",
        "output": "1",
        "idx": 1082
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ff_packet_split_and_drop_side_data(AVPacket *pkt){\n\n    if (!pkt->side_data_elems && pkt->size >12 && AV_RB64(pkt->data + pkt->size - 8) == FF_MERGE_MARKER){\n\n        int i;\n\n        unsigned int size;\n\n        uint8_t *p;\n\n\n\n        p = pkt->data + pkt->size - 8 - 5;\n\n        for (i=1; ; i++){\n\n            size = AV_RB32(p);\n\n            if (size>INT_MAX - 5 || p - pkt->data < size)\n\n\n            if (p[4]&128)\n\n                break;\n\n            if (p - pkt->data < size + 5)\n\n\n            p-= size+5;\n\n\n\n        }\n\n        pkt->size = p - pkt->data - size;\n\n        av_assert0(pkt->size >= 0);\n\n        return 1;\n\n    }\n\n\n}",
        "output": "1",
        "idx": 4603
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void sem_getref_and_unlock(struct sem_array *sma)\n{\n\tipc_rcu_getref(sma);\n\tipc_unlock(&(sma)->sem_perm);\n}",
        "output": "1",
        "idx": 4681
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void reset_offset_limit()\n  {\n    unit->offset_limit_cnt= 0;\n  }",
        "output": "0",
        "idx": 1144
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_tlbwr (void)\n\n{\n\n    int r = cpu_mips_get_random(env);\n\n\n\n    invalidate_tlb(r, 1);\n\n    fill_tlb(r);\n\n}\n",
        "output": "0",
        "idx": 2671
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t omap_lpg_read(void *opaque, target_phys_addr_t addr,\n\n                              unsigned size)\n\n{\n\n    struct omap_lpg_s *s = (struct omap_lpg_s *) opaque;\n\n    int offset = addr & OMAP_MPUI_REG_MASK;\n\n\n\n    if (size != 1) {\n\n        return omap_badwidth_read8(opaque, addr);\n\n    }\n\n\n\n    switch (offset) {\n\n    case 0x00:\t/* LCR */\n\n        return s->control;\n\n\n\n    case 0x04:\t/* PMR */\n\n        return s->power;\n\n    }\n\n\n\n    OMAP_BAD_REG(addr);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1519
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void block_job_sleep_ns(BlockJob *job, QEMUClockType type, int64_t ns)\n\n{\n\n    assert(job->busy);\n\n\n\n    /* Check cancellation *before* setting busy = false, too!  */\n\n    if (block_job_is_cancelled(job)) {\n\n        return;\n\n    }\n\n\n\n    job->busy = false;\n\n    if (!block_job_should_pause(job)) {\n\n        co_aio_sleep_ns(blk_get_aio_context(job->blk), type, ns);\n\n    }\n\n    /* The job can be paused while sleeping, so check this again */\n\n    if (block_job_should_pause(job)) {\n\n        qemu_coroutine_yield();\n\n    }\n\n    job->busy = true;\n\n}\n",
        "output": "1",
        "idx": 5357
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Item::Type Item_name_const::type() const\n{\n  /*\n    As \n    1. one can try to create the Item_name_const passing non-constant \n    arguments, although it's incorrect and \n    2. the type() method can be called before the fix_fields() to get\n    type information for a further type cast, e.g. \n    if (item->type() == FIELD_ITEM) \n      ((Item_field *) item)->... \n    we return NULL_ITEM in the case to avoid wrong casting.\n\n    valid_args guarantees value_item->basic_const_item(); if type is\n    FUNC_ITEM, then we have a fudged item_func_neg() on our hands\n    and return the underlying type.\n    For Item_func_set_collation()\n    e.g. NAME_CONST('name', 'value' COLLATE collation) we return its\n    'value' argument type. \n  */\n  if (!valid_args)\n    return NULL_ITEM;\n  Item::Type value_type= value_item->type();\n  if (value_type == FUNC_ITEM)\n  {\n    /* \n      The second argument of NAME_CONST('name', 'value') must be \n      a simple constant item or a NEG_FUNC/COLLATE_FUNC.\n    */\n    DBUG_ASSERT(((Item_func *) value_item)->functype() == \n                Item_func::NEG_FUNC ||\n                ((Item_func *) value_item)->functype() == \n                Item_func::COLLATE_FUNC);\n    return ((Item_func *) value_item)->key_item()->type();            \n  }\n  return value_type;\n}",
        "output": "0",
        "idx": 3425
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  inline TMP_TABLE_SHARE *tmp_table_share(TABLE *table)\n  {\n    DBUG_ASSERT(table->s->tmp_table);\n    return static_cast<TMP_TABLE_SHARE *>(table->s);\n  }",
        "output": "0",
        "idx": 2443
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "transit_state_singlebyte (struct dfa *d, int s, unsigned char const *p,\n                                  int *next_state)\n{\n  int *t;\n  int works = s;\n\n  status_transit_state rval = TRANSIT_STATE_IN_PROGRESS;\n\n  while (rval == TRANSIT_STATE_IN_PROGRESS)\n    {\n      if ((t = d->trans[works]) != NULL)\n        {\n          works = t[*p];\n          rval = TRANSIT_STATE_DONE;\n          if (works < 0)\n            works = 0;\n        }\n      else if (works < 0)\n        {\n          if (p == buf_end)\n            {\n              /* At the moment, it must not happen.  */\n              abort ();\n            }\n          works = 0;\n        }\n      else if (d->fails[works])\n        {\n          works = d->fails[works][*p];\n          rval = TRANSIT_STATE_DONE;\n        }\n      else\n        {\n          build_state(works, d);\n        }\n    }\n  *next_state = works;\n  return rval;\n}",
        "output": "1",
        "idx": 1436
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "parse_identifier(const char *id)\n{\n    unsigned int parsed = 0;\n\n    assert(id);\n\n    if (!isalpha(id[0]) && (id[0] != '_')) {\n        return -parsed;\n    }\n\n    ++parsed;\n    ++id;\n\n    while (isalnum(id[0]) || (id[0] == '_') || (id[0] == '-') || (id[0] == '.')) {\n        ++parsed;\n        ++id;\n    }\n\n    return parsed;\n}",
        "output": "0",
        "idx": 2526
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sigp_store_status_at_address(CPUState *cs, run_on_cpu_data arg)\n\n{\n\n    S390CPU *cpu = S390_CPU(cs);\n\n    SigpInfo *si = arg.host_ptr;\n\n    uint32_t address = si->param & 0x7ffffe00u;\n\n\n\n    /* cpu has to be stopped */\n\n    if (s390_cpu_get_state(cpu) != CPU_STATE_STOPPED) {\n\n        set_sigp_status(si, SIGP_STAT_INCORRECT_STATE);\n\n        return;\n\n    }\n\n\n\n    cpu_synchronize_state(cs);\n\n\n\n    if (s390_store_status(cpu, address, false)) {\n\n        set_sigp_status(si, SIGP_STAT_INVALID_PARAMETER);\n\n        return;\n\n    }\n\n    si->cc = SIGP_CC_ORDER_CODE_ACCEPTED;\n\n}\n",
        "output": "0",
        "idx": 3268
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* params = GetInput(context, node, kParams);\n  const TfLiteTensor* indices = GetInput(context, node, kIndices);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  switch (indices->type) {\n    case kTfLiteInt32:\n      return EvalGatherNd<int32_t>(context, params, indices, output);\n    case kTfLiteInt64:\n      return EvalGatherNd<int64_t>(context, params, indices, output);\n    default:\n      context->ReportError(\n          context, \"Indices of type '%s' are not supported by gather_nd.\",\n          TfLiteTypeGetName(indices->type));\n      return kTfLiteError;\n  }\n}",
        "output": "1",
        "idx": 461
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int subviewer_decode_frame(AVCodecContext *avctx,\n\n                                  void *data, int *got_sub_ptr, AVPacket *avpkt)\n\n{\n\n    char c;\n\n    AVSubtitle *sub = data;\n\n    const char *ptr = avpkt->data;\n\n    AVBPrint buf;\n\n\n\n    /* To be removed later */\n\n    if (sscanf(ptr, \"%*u:%*u:%*u.%*u,%*u:%*u:%*u.%*u%c\", &c) == 1) {\n\n        av_log(avctx, AV_LOG_ERROR, \"AVPacket is not clean (contains timing \"\n\n               \"information). You need to upgrade your libavformat or \"\n\n               \"sanitize your packet.\\n\");\n\n        return AVERROR_INVALIDDATA;\n\n    }\n\n\n\n    av_bprint_init(&buf, 0, AV_BPRINT_SIZE_UNLIMITED);\n\n    // note: no need to rescale pts & duration since they are in the same\n\n    // timebase as ASS (1/100)\n\n    if (ptr && avpkt->size > 0 && !subviewer_event_to_ass(&buf, ptr))\n\n        ff_ass_add_rect(sub, buf.str, avpkt->pts, avpkt->duration, 0);\n\n    *got_sub_ptr = sub->num_rects > 0;\n\n    av_bprint_finalize(&buf, NULL);\n\n    return avpkt->size;\n\n}\n",
        "output": "1",
        "idx": 956
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vtd_iommu_notify_flag_changed(MemoryRegion *iommu,\n\n                                          IOMMUNotifierFlag old,\n\n                                          IOMMUNotifierFlag new)\n\n{\n\n    VTDAddressSpace *vtd_as = container_of(iommu, VTDAddressSpace, iommu);\n\n\n\n    if (new & IOMMU_NOTIFIER_MAP) {\n\n        error_report(\"Device at bus %s addr %02x.%d requires iommu \"\n\n                     \"notifier which is currently not supported by \"\n\n                     \"intel-iommu emulation\",\n\n                     vtd_as->bus->qbus.name, PCI_SLOT(vtd_as->devfn),\n\n                     PCI_FUNC(vtd_as->devfn));\n\n        exit(1);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5328
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cJSON_ReplaceItemInArray( cJSON *array, int which, cJSON *newitem )\n{\n\tcJSON *c = array->child;\n\twhile ( c && which > 0 ) {\n\t\tc = c->next;\n\t\t--which;\n\t}\n\tif ( ! c )\n\t\treturn;\n\tnewitem->next = c->next;\n\tnewitem->prev = c->prev;\n\tif ( newitem->next )\n\t\tnewitem->next->prev = newitem;\n\tif ( c == array->child )\n\t\tarray->child = newitem;\n\telse\n\t\tnewitem->prev->next = newitem;\n\tc->next = c->prev = 0;\n\tcJSON_Delete( c );\n}",
        "output": "1",
        "idx": 2787
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Http2Stream::Provider::Stream::Stream(Http2Stream* stream, int options)\n    : Http2Stream::Provider(stream, options) {\n  provider_.read_callback = Http2Stream::Provider::Stream::OnRead;\n}",
        "output": "0",
        "idx": 2307
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "qedi_dbg_info(struct qedi_dbg_ctx *qedi, const char *func, u32 line,\n\t      u32 level, const char *fmt, ...)\n{\n\tva_list va;\n\tstruct va_format vaf;\n\tchar nfunc[32];\n\n\tmemset(nfunc, 0, sizeof(nfunc));\n\tmemcpy(nfunc, func, sizeof(nfunc) - 1);\n\n\tva_start(va, fmt);\n\n\tvaf.fmt = fmt;\n\tvaf.va = &va;\n\n\tif (!(qedi_dbg_log & level))\n\t\tgoto ret;\n\n\tif (likely(qedi) && likely(qedi->pdev))\n\t\tpr_info(\"[%s]:[%s:%d]:%d: %pV\", dev_name(&qedi->pdev->dev),\n\t\t\tnfunc, line, qedi->host_no, &vaf);\n\telse\n\t\tpr_info(\"[0000:00:00.0]:[%s:%d]: %pV\", nfunc, line, &vaf);\n\nret:\n\tva_end(va);\n}",
        "output": "1",
        "idx": 2867
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool is_special_wait_psw(CPUState *cs)\n\n{\n\n    /* signal quiesce */\n\n    return cs->kvm_run->psw_addr == 0xfffUL;\n\n}\n",
        "output": "1",
        "idx": 1526
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void thread_pool_init(void)\n\n{\n\n    thread_pool_init_one(&global_pool, NULL);\n\n}\n",
        "output": "0",
        "idx": 4318
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Aml *aml_arg(int pos)\n\n{\n\n    Aml *var;\n\n    uint8_t op = 0x68 /* ARG0 op */ + pos;\n\n\n\n    assert(pos <= 6);\n\n    var = aml_opcode(op);\n\n    return var;\n\n}\n",
        "output": "0",
        "idx": 7
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void timeoutcb(struct ev_loop *loop, ev_timer *w, int revents) {\n  auto conn = static_cast<Connection *>(w->data);\n  auto dconn = static_cast<HttpDownstreamConnection *>(conn->data);\n\n  if (w == &conn->rt && !conn->expired_rt()) {\n    return;\n  }\n\n  if (LOG_ENABLED(INFO)) {\n    DCLOG(INFO, dconn) << \"Time out\";\n  }\n\n  auto downstream = dconn->get_downstream();\n  auto upstream = downstream->get_upstream();\n  auto handler = upstream->get_client_handler();\n  auto &resp = downstream->response();\n\n  // Do this so that dconn is not pooled\n  resp.connection_close = true;\n\n  if (upstream->downstream_error(dconn, Downstream::EVENT_TIMEOUT) != 0) {\n    delete handler;\n  }\n}",
        "output": "0",
        "idx": 775
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int xfrm_byidx_should_resize(struct net *net, int total)\n{\n\tunsigned int hmask = net->xfrm.policy_idx_hmask;\n\n\tif ((hmask + 1) < xfrm_policy_hashmax &&\n\t    total > hmask)\n\t\treturn 1;\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 459
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_addo (void)\n\n{\n\n    T2 = T0;\n\n    T0 += T1;\n\n    if (likely(!((T2 ^ T1 ^ (-1)) & (T2 ^ T0) & (1 << 31)))) {\n\n        xer_ov = 0;\n\n    } else {\n\n        xer_so = 1;\n\n        xer_ov = 1;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5802
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CMSEXPORT cmsSetHeaderManufacturer(cmsHPROFILE hProfile, cmsUInt32Number manufacturer)\n{\n    _cmsICCPROFILE*  Icc = (_cmsICCPROFILE*) hProfile;\n    Icc -> manufacturer = (cmsUInt32Number) manufacturer;\n}",
        "output": "1",
        "idx": 6119
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void RENAME(duplicate)(uint8_t src[], int stride)\n\n{\n\n#if TEMPLATE_PP_MMX\n\n    __asm__ volatile(\n\n        \"movq (%0), %%mm0               \\n\\t\"\n\n        \"add %1, %0                     \\n\\t\"\n\n        \"movq %%mm0, (%0)               \\n\\t\"\n\n        \"movq %%mm0, (%0, %1)           \\n\\t\"\n\n        \"movq %%mm0, (%0, %1, 2)        \\n\\t\"\n\n        : \"+r\" (src)\n\n        : \"r\" ((x86_reg)-stride)\n\n    );\n\n#else\n\n    int i;\n\n    uint8_t *p=src;\n\n    for(i=0; i<3; i++){\n\n        p-= stride;\n\n        memcpy(p, src, 8);\n\n    }\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 4656
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void jv_parser_set_buf(struct jv_parser* p, const char* buf, int length, int is_partial) {\n  assert((p->curr_buf == 0 || p->curr_buf_pos == p->curr_buf_length)\n         && \"previous buffer not exhausted\");\n  while (length > 0 && p->bom_strip_position < sizeof(UTF8_BOM)) {\n    if ((unsigned char)*buf == UTF8_BOM[p->bom_strip_position]) {\n      // matched a BOM character\n      buf++;\n      length--;\n      p->bom_strip_position++;\n    } else {\n      if (p->bom_strip_position == 0) {\n        // no BOM in this document\n        p->bom_strip_position = sizeof(UTF8_BOM);\n      } else {\n        // malformed BOM (prefix present, rest missing)\n        p->bom_strip_position = 0xff;\n      }\n    }\n  }\n  p->curr_buf = buf;\n  p->curr_buf_length = length;\n  p->curr_buf_pos = 0;\n  p->curr_buf_is_partial = is_partial;\n}",
        "output": "0",
        "idx": 230
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(SplObjectStorage, key)\n{\n\tspl_SplObjectStorage *intern = (spl_SplObjectStorage*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\t\n\tif (zend_parse_parameters_none() == FAILURE) {\n\t\treturn;\n\t}\n\t\n\tRETURN_LONG(intern->index);\n} /* }}} */",
        "output": "1",
        "idx": 1872
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void machine_register_compat_props(MachineState *machine)\n\n{\n\n    MachineClass *mc = MACHINE_GET_CLASS(machine);\n\n    int i;\n\n    GlobalProperty *p;\n\n\n\n    if (!mc->compat_props) {\n\n        return;\n\n    }\n\n\n\n    for (i = 0; i < mc->compat_props->len; i++) {\n\n        p = g_array_index(mc->compat_props, GlobalProperty *, i);\n\n\n\n        qdev_prop_register_global(p);\n\n    }\n\n}",
        "output": "1",
        "idx": 5826
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const char *cgm_get_cgroup(void *hdata, const char *subsystem)\n{\n\tstruct cgm_data *d = hdata;\n\n\tif (!d || !d->cgroup_path)\n\t\treturn NULL;\n\treturn d->cgroup_path;\n}",
        "output": "0",
        "idx": 4047
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_avc_nalsize(H264Context *h, const uint8_t *buf,\n\n                           int buf_size, int *buf_index)\n\n{\n\n    int i, nalsize = 0;\n\n\n\n    if (*buf_index >= buf_size - h->nal_length_size)\n\n        return -1;\n\n\n\n    for (i = 0; i < h->nal_length_size; i++)\n\n        nalsize = (nalsize << 8) | buf[(*buf_index)++];\n\n    if (nalsize <= 0 || nalsize > buf_size - *buf_index) {\n\n        av_log(h->avctx, AV_LOG_ERROR,\n\n               \"AVC: nal size %d\\n\", nalsize);\n\n        return -1;\n\n    }\n\n    return nalsize;\n\n}\n",
        "output": "1",
        "idx": 2067
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline TCGv gen_ld8s(TCGv addr, int index)\n\n{\n\n    TCGv tmp = new_tmp();\n\n    tcg_gen_qemu_ld8s(tmp, addr, index);\n\n    return tmp;\n\n}\n",
        "output": "1",
        "idx": 5204
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n\n  if (type == kGenericOptimized) {\n    optimized_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),\n                         GetTensorShape(output), GetTensorData<float>(output));\n  } else {\n    reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),\n                         GetTensorShape(output), GetTensorData<float>(output));\n  }\n\n  return kTfLiteOk;\n}",
        "output": "1",
        "idx": 107
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool is_zero_sectors(BlockDriverState *bs, int64_t start,\n\n                            uint32_t count)\n\n{\n\n    int nr;\n\n    BlockDriverState *file;\n\n    int64_t res;\n\n\n\n    if (start + count > bs->total_sectors) {\n\n        count = bs->total_sectors - start;\n\n    }\n\n\n\n    if (!count) {\n\n        return true;\n\n    }\n\n    res = bdrv_get_block_status_above(bs, NULL, start, count,\n\n                                      &nr, &file);\n\n    return res >= 0 && (res & BDRV_BLOCK_ZERO) && nr == count;\n\n}\n",
        "output": "0",
        "idx": 2481
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CGraph::ScaleMin()\n{\n\tint i = 0;\n\tm_Min = m_Max;\n\tfor(i = 0; i < MAX_VALUES; i++)\n\t{\n\t\tif(m_aValues[i] < m_Min)\n\t\t\tm_Min = m_aValues[i];\n\t}\n}",
        "output": "0",
        "idx": 5155
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "soup_cookie_jar_get_cookies (SoupCookieJar *jar, SoupURI *uri,\n\t\t\t     gboolean for_http)\n{\n\tGSList *cookies;\n\n\tg_return_val_if_fail (SOUP_IS_COOKIE_JAR (jar), NULL);\n\tg_return_val_if_fail (uri != NULL, NULL);\n\n\tcookies = get_cookies (jar, uri, for_http, FALSE);\n\n\tif (cookies) {\n\t\tchar *result = soup_cookies_to_cookie_header (cookies);\n\t\tg_slist_free (cookies);\n\n\t\tif (!*result) {\n\t\t\tg_free (result);\n\t\t\tresult = NULL;\n\t\t}\n\t\treturn result;\n\t} else\n\t\treturn NULL;\n}",
        "output": "0",
        "idx": 3107
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "float ff_amr_set_fixed_gain(float fixed_gain_factor, float fixed_mean_energy,\n\n                            float *prediction_error, float energy_mean,\n\n                            const float *pred_table)\n\n{\n\n    // Equations 66-69:\n\n    // ^g_c = ^gamma_gc * 100.05 (predicted dB + mean dB - dB of fixed vector)\n\n    // Note 10^(0.05 * -10log(average x2)) = 1/sqrt((average x2)).\n\n    float val = fixed_gain_factor *\n\n        ff_exp10(0.05 *\n\n              (avpriv_scalarproduct_float_c(pred_table, prediction_error, 4) +\n\n               energy_mean)) /\n\n        sqrtf(fixed_mean_energy);\n\n\n\n    // update quantified prediction error energy history\n\n    memmove(&prediction_error[0], &prediction_error[1],\n\n            3 * sizeof(prediction_error[0]));\n\n    prediction_error[3] = 20.0 * log10f(fixed_gain_factor);\n\n\n\n    return val;\n\n}\n",
        "output": "1",
        "idx": 1263
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_fd_register(int fd)\n\n{\n\n    WSAEventSelect(fd, qemu_event_handle, FD_READ | FD_ACCEPT | FD_CLOSE |\n\n                   FD_CONNECT | FD_WRITE | FD_OOB);\n\n}\n",
        "output": "0",
        "idx": 4276
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool visit_start_union(Visitor *v, bool data_present, Error **errp)\n\n{\n\n    if (v->start_union) {\n\n        return v->start_union(v, data_present, errp);\n\n    }\n\n    return true;\n\n}\n",
        "output": "1",
        "idx": 2718
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __user *__vhost_get_user_slow(struct vhost_virtqueue *vq,\n\t\t\t\t\t  void __user *addr, unsigned int size,\n\t\t\t\t\t  int type)\n{\n\tint ret;\n\n\tret = translate_desc(vq, (u64)(uintptr_t)addr, size, vq->iotlb_iov,\n\t\t\t     ARRAY_SIZE(vq->iotlb_iov),\n\t\t\t     VHOST_ACCESS_RO);\n\tif (ret < 0) {\n\t\tvq_err(vq, \"IOTLB translation failure: uaddr \"\n\t\t\t\"%p size 0x%llx\\n\", addr,\n\t\t\t(unsigned long long) size);\n\t\treturn NULL;\n\t}\n\n\tif (ret != 1 || vq->iotlb_iov[0].iov_len != size) {\n\t\tvq_err(vq, \"Non atomic userspace memory access: uaddr \"\n\t\t\t\"%p size 0x%llx\\n\", addr,\n\t\t\t(unsigned long long) size);\n\t\treturn NULL;\n\t}\n\n\treturn vq->iotlb_iov[0].iov_base;\n}",
        "output": "0",
        "idx": 1510
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ews_backend_new_calendar (EEwsBackend *backend,\n                          EEwsFolder *folder)\n{\n\t/* No extra configuration to do. */\n\treturn ews_backend_new_child (backend, folder);\n}",
        "output": "0",
        "idx": 5157
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __ext4_expand_extra_isize(struct inode *inode,\n\t\t\t\t     unsigned int new_extra_isize,\n\t\t\t\t     struct ext4_iloc *iloc,\n\t\t\t\t     handle_t *handle, int *no_expand)\n{\n\tstruct ext4_inode *raw_inode;\n\tstruct ext4_xattr_ibody_header *header;\n\tint error;\n\n\traw_inode = ext4_raw_inode(iloc);\n\n\theader = IHDR(inode, raw_inode);\n\n\t/* No extended attributes present */\n\tif (!ext4_test_inode_state(inode, EXT4_STATE_XATTR) ||\n\t    header->h_magic != cpu_to_le32(EXT4_XATTR_MAGIC)) {\n\t\tmemset((void *)raw_inode + EXT4_GOOD_OLD_INODE_SIZE +\n\t\t       EXT4_I(inode)->i_extra_isize, 0,\n\t\t       new_extra_isize - EXT4_I(inode)->i_extra_isize);\n\t\tEXT4_I(inode)->i_extra_isize = new_extra_isize;\n\t\treturn 0;\n\t}\n\n\t/* try to expand with EAs present */\n\terror = ext4_expand_extra_isize_ea(inode, new_extra_isize,\n\t\t\t\t\t   raw_inode, handle);\n\tif (error) {\n\t\t/*\n\t\t * Inode size expansion failed; don't try again\n\t\t */\n\t\t*no_expand = 1;\n\t}\n\n\treturn error;\n}",
        "output": "1",
        "idx": 641
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int FIFOSampleBuffer::isEmpty() const\r\n{\r\n    return (samplesInBuffer == 0) ? 1 : 0;\r\n}\r",
        "output": "0",
        "idx": 4163
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Status BuildFeatureReaders(const OpInputList& ragged_values_list,\n                             const OpInputList& ragged_splits_list,\n                             const OpInputList& sparse_indices_list,\n                             const OpInputList& sparse_values_list,\n                             const OpInputList& dense_list, int64 batch_size,\n                             FeatureReaders* features) {\n    features->reserve(input_order_.size());\n\n    int next_ragged = 0;\n    int next_sparse = 0;\n    int next_dense = 0;\n    for (char c : input_order_) {\n      if (c == 'R') {\n        TF_RETURN_IF_ERROR(BuildRaggedFeatureReader(\n            ragged_values_list[next_ragged], ragged_splits_list[next_ragged],\n            features));\n        next_ragged++;\n      } else if (c == 'S') {\n        TF_RETURN_IF_ERROR(BuildSparseFeatureReader(\n            sparse_indices_list[next_sparse], sparse_values_list[next_sparse],\n            batch_size, features));\n        next_sparse++;\n      } else if (c == 'D') {\n        TF_RETURN_IF_ERROR(\n            BuildDenseFeatureReader(dense_list[next_dense++], features));\n      } else {\n        return errors::InvalidArgument(\"Unexpected input_order value.\");\n      }\n    }\n\n    return Status::OK();\n  }",
        "output": "1",
        "idx": 5127
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(wddx_packet_start)\n{\n\tchar *comment = NULL;\n\tint comment_len = 0;\n\twddx_packet *packet;\n\n\tcomment = NULL;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|s\", &comment, &comment_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tpacket = php_wddx_constructor();\n\t\n\tphp_wddx_packet_start(packet, comment, comment_len);\n\tphp_wddx_add_chunk_static(packet, WDDX_STRUCT_S);\n\n\tZEND_REGISTER_RESOURCE(return_value, packet, le_wddx);\n}",
        "output": "1",
        "idx": 2947
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t __cgroup1_procs_write(struct kernfs_open_file *of,\n\t\t\t\t     char *buf, size_t nbytes, loff_t off,\n\t\t\t\t     bool threadgroup)\n{\n\tstruct cgroup *cgrp;\n\tstruct task_struct *task;\n\tconst struct cred *cred, *tcred;\n\tssize_t ret;\n\tbool locked;\n\n\tcgrp = cgroup_kn_lock_live(of->kn, false);\n\tif (!cgrp)\n\t\treturn -ENODEV;\n\n\ttask = cgroup_procs_write_start(buf, threadgroup, &locked);\n\tret = PTR_ERR_OR_ZERO(task);\n\tif (ret)\n\t\tgoto out_unlock;\n\n\t/*\n\t * Even if we're attaching all tasks in the thread group, we only\n\t * need to check permissions on one of them.\n\t */\n\tcred = current_cred();\n\ttcred = get_task_cred(task);\n\tif (!uid_eq(cred->euid, GLOBAL_ROOT_UID) &&\n\t    !uid_eq(cred->euid, tcred->uid) &&\n\t    !uid_eq(cred->euid, tcred->suid))\n\t\tret = -EACCES;\n\tput_cred(tcred);\n\tif (ret)\n\t\tgoto out_finish;\n\n\tret = cgroup_attach_task(cgrp, task, threadgroup);\n\nout_finish:\n\tcgroup_procs_write_finish(task, locked);\nout_unlock:\n\tcgroup_kn_unlock(of->kn);\n\n\treturn ret ?: nbytes;\n}",
        "output": "1",
        "idx": 5927
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void btd_adapter_register_pin_cb(struct btd_adapter *adapter,\n\t\t\t\t\t\t\tbtd_adapter_pin_cb_t cb)\n{\n\tadapter->pin_callbacks = g_slist_prepend(adapter->pin_callbacks, cb);\n}",
        "output": "0",
        "idx": 3422
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vmxnet3_physical_memory_writev(const struct iovec *iov,\n                               size_t start_iov_off,\n                               hwaddr target_addr,\n                               size_t bytes_to_copy)\n{\n    size_t curr_off = 0;\n    size_t copied = 0;\n\n    while (bytes_to_copy) {\n        if (start_iov_off < (curr_off + iov->iov_len)) {\n            size_t chunk_len =\n                MIN((curr_off + iov->iov_len) - start_iov_off, bytes_to_copy);\n\n            cpu_physical_memory_write(target_addr + copied,\n                                      iov->iov_base + start_iov_off - curr_off,\n                                      chunk_len);\n\n            copied += chunk_len;\n            start_iov_off += chunk_len;\n            curr_off = start_iov_off;\n            bytes_to_copy -= chunk_len;\n        } else {\n            curr_off += iov->iov_len;\n        }\n        iov++;\n    }\n}",
        "output": "0",
        "idx": 3890
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void downmix_2f_1r_to_stereo(float *samples)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < 256; i++) {\n\n        samples[i] += samples[i + 512];\n\n        samples[i + 256] += samples[i + 512];\n\n        samples[i + 512] = 0;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 832
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int udev_monitor_enable_receiving(struct udev_monitor *udev_monitor)\n{\n\tint err;\n\tconst int on = 1;\n\n\tif (udev_monitor->snl.nl_family != 0) {\n\t\terr = bind(udev_monitor->sock,\n\t\t\t   (struct sockaddr *)&udev_monitor->snl, sizeof(struct sockaddr_nl));\n\t\tif (err < 0) {\n\t\t\terr(udev_monitor->udev, \"bind failed: %m\\n\");\n\t\t\treturn err;\n\t\t}\n\t\tdbg(udev_monitor->udev, \"monitor %p listening on netlink\\n\", udev_monitor);\n\t} else if (udev_monitor->sun.sun_family != 0) {\n\t\terr = bind(udev_monitor->sock,\n\t\t\t   (struct sockaddr *)&udev_monitor->sun, udev_monitor->addrlen);\n\t\tif (err < 0) {\n\t\t\terr(udev_monitor->udev, \"bind failed: %m\\n\");\n\t\t\treturn err;\n\t\t}\n\t\t/* enable receiving of the sender credentials */\n\t\tsetsockopt(udev_monitor->sock, SOL_SOCKET, SO_PASSCRED, &on, sizeof(on));\n\t\tdbg(udev_monitor->udev, \"monitor %p listening on socket\\n\", udev_monitor);\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 4100
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xfs_ioc_fsgeometry_v1(\n\txfs_mount_t\t\t*mp,\n\tvoid\t\t\t__user *arg)\n{\n\txfs_fsop_geom_v1_t\tfsgeo;\n\tint\t\t\terror;\n\n\terror = xfs_fs_geometry(mp, (xfs_fsop_geom_t *)&fsgeo, 3);\n\tif (error)\n\t\treturn -error;\n\n\tif (copy_to_user(arg, &fsgeo, sizeof(fsgeo)))\n\t\treturn -XFS_ERROR(EFAULT);\n\treturn 0;\n}",
        "output": "1",
        "idx": 2147
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  ResponseWrapper(const Http::ResponseHeaderMap* headers, const Http::ResponseTrailerMap* trailers,\n                  const StreamInfo::StreamInfo& info)\n      : headers_(headers), trailers_(trailers), info_(info) {}",
        "output": "1",
        "idx": 4187
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool PDFDoc::checkLinearization() {\n  if (linearization == nullptr)\n    return false;\n  if (linearizationState == 1)\n    return true;\n  if (linearizationState == 2)\n    return false;\n  if (!hints) {\n    hints = new Hints(str, linearization, getXRef(), secHdlr);\n  }\n  if (!hints->isOk()) {\n    linearizationState = 2;\n    return false;\n  }\n  for (int page = 1; page <= linearization->getNumPages(); page++) {\n    Ref pageRef;\n\n    pageRef.num = hints->getPageObjectNum(page);\n    if (!pageRef.num) {\n      linearizationState = 2;\n      return false;\n    }\n\n    // check for bogus ref - this can happen in corrupted PDF files\n    if (pageRef.num < 0 || pageRef.num >= xref->getNumObjects()) {\n      linearizationState = 2;\n      return false;\n    }\n\n    pageRef.gen = xref->getEntry(pageRef.num)->gen;\n    Object obj = xref->fetch(pageRef);\n    if (!obj.isDict(\"Page\")) {\n      linearizationState = 2;\n      return false;\n    }\n  }\n  linearizationState = 1;\n  return true;\n}",
        "output": "0",
        "idx": 3953
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ct_get_status (int slot, unsigned int *status)\n{\n  (void)slot;\n  /* The status we returned is wrong but we don't care becuase ctAPI\n     is not anymore required.  */\n  *status = APDU_CARD_USABLE|APDU_CARD_PRESENT|APDU_CARD_ACTIVE;\n  return 0;\n}",
        "output": "0",
        "idx": 941
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "StatusWith<Message> MessageCompressorManager::decompressMessage(const Message& msg) {\n    auto inputHeader = msg.header();\n    ConstDataRangeCursor input(inputHeader.data(), inputHeader.data() + inputHeader.dataLen());\n    CompressionHeader compressionHeader(&input);\n\n    auto compressor = _registry->getCompressor(compressionHeader.compressorId);\n    if (!compressor) {\n        return {ErrorCodes::InternalError,\n                \"Compression algorithm specified in message is not available\"};\n    }\n\n    auto bufferSize = compressionHeader.uncompressedSize + MsgData::MsgDataHeaderSize;\n    auto outputMessageBuffer = SharedBuffer::allocate(bufferSize);\n    MsgData::View outMessage(outputMessageBuffer.get());\n    outMessage.setId(inputHeader.getId());\n    outMessage.setResponseToMsgId(inputHeader.getResponseToMsgId());\n    outMessage.setOperation(compressionHeader.originalOpCode);\n    outMessage.setLen(bufferSize);\n\n    DataRangeCursor output(outMessage.data(), outMessage.data() + outMessage.dataLen());\n\n    auto sws = compressor->decompressData(input, output);\n\n    if (!sws.isOK())\n        return sws.getStatus();\n\n    if (sws.getValue() != static_cast<std::size_t>(compressionHeader.uncompressedSize)) {\n        return {ErrorCodes::BadValue, \"Decompressing message returned less data than expected\"};\n    }\n\n    outMessage.setLen(sws.getValue() + MsgData::MsgDataHeaderSize);\n\n    return {Message(outputMessageBuffer)};\n}",
        "output": "1",
        "idx": 2344
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int crypto_aead_report(struct sk_buff *skb, struct crypto_alg *alg)\n{\n\treturn -ENOSYS;\n}",
        "output": "1",
        "idx": 3411
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void get_socket_name( char* buf, int len )\n{\n    char* dpy = g_strdup(g_getenv(\"DISPLAY\"));\n    if(dpy && *dpy)\n    {\n        char* p = strchr(dpy, ':');\n        for(++p; *p && *p != '.' && *p != '\\n';)\n            ++p;\n        if(*p)\n            *p = '\\0';\n    }\n    g_snprintf( buf, len, \"%s/.menu-cached-%s-%s\", g_get_tmp_dir(),\n                dpy ? dpy : \":0\", g_get_user_name() );\n    g_free(dpy);\n}",
        "output": "1",
        "idx": 4415
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rdpsnd_process_training(STREAM in)\n{\n\tuint16 tick;\n\tuint16 packsize;\n\tSTREAM out;\n\n\tin_uint16_le(in, tick);\n\tin_uint16_le(in, packsize);\n\n\tlogger(Sound, Debug, \"rdpsnd_process_training(), tick=0x%04x\", (unsigned) tick);\n\n\tout = rdpsnd_init_packet(SNDC_TRAINING, 4);\n\tout_uint16_le(out, tick);\n\tout_uint16_le(out, packsize);\n\ts_mark_end(out);\n\trdpsnd_send(out);\n}",
        "output": "1",
        "idx": 2899
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(GlobIterator, count)\n{\n\tspl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\t\n\tif (zend_parse_parameters_none() == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (php_stream_is(intern->u.dir.dirp ,&php_glob_stream_ops)) {\n\t\tRETURN_LONG(php_glob_stream_get_count(intern->u.dir.dirp, NULL));\n\t} else {\n\t\t/* should not happen */\n\t\tphp_error_docref(NULL TSRMLS_CC, E_ERROR, \"GlobIterator lost glob state\");\n\t}\n}",
        "output": "1",
        "idx": 2497
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int seccomp_load_syscall_filter_set(uint32_t default_action, const SyscallFilterSet *set, uint32_t action, bool log_missing) {\n        uint32_t arch;\n        int r;\n\n        assert(set);\n\n        /* The one-stop solution: allocate a seccomp object, add the specified filter to it, and apply it. Once for\n         * each local arch. */\n\n        SECCOMP_FOREACH_LOCAL_ARCH(arch) {\n                _cleanup_(seccomp_releasep) scmp_filter_ctx seccomp = NULL;\n\n                log_debug(\"Operating on architecture: %s\", seccomp_arch_to_string(arch));\n\n                r = seccomp_init_for_arch(&seccomp, arch, default_action);\n                if (r < 0)\n                        return r;\n\n                r = seccomp_add_syscall_filter_set(seccomp, set, action, NULL, log_missing);\n                if (r < 0)\n                        return log_debug_errno(r, \"Failed to add filter set: %m\");\n\n                r = seccomp_load(seccomp);\n                if (IN_SET(r, -EPERM, -EACCES))\n                        return r;\n                if (r < 0)\n                        log_debug_errno(r, \"Failed to install filter set for architecture %s, skipping: %m\", seccomp_arch_to_string(arch));\n        }\n\n        return 0;\n}",
        "output": "0",
        "idx": 1799
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nbd_read(void *opaque)\n\n{\n\n    NBDClient *client = opaque;\n\n\n\n    if (client->recv_coroutine) {\n\n        qemu_coroutine_enter(client->recv_coroutine, NULL);\n\n    } else {\n\n        qemu_coroutine_enter(qemu_coroutine_create(nbd_trip), client);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4920
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xen_pt_cmd_reg_read(XenPCIPassthroughState *s, XenPTReg *cfg_entry,\n\n                               uint16_t *value, uint16_t valid_mask)\n\n{\n\n    XenPTRegInfo *reg = cfg_entry->reg;\n\n    uint16_t valid_emu_mask = 0;\n\n    uint16_t emu_mask = reg->emu_mask;\n\n\n\n    if (s->is_virtfn) {\n\n        emu_mask |= PCI_COMMAND_MEMORY;\n\n    }\n\n\n\n    /* emulate word register */\n\n    valid_emu_mask = emu_mask & valid_mask;\n\n    *value = XEN_PT_MERGE_VALUE(*value, cfg_entry->data, ~valid_emu_mask);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 854
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ast_for_with_stmt(struct compiling *c, const node *n0, bool is_async)\n{\n    const node * const n = is_async ? CHILD(n0, 1) : n0;\n    int i, n_items, end_lineno, end_col_offset;\n    asdl_seq *items, *body;\n\n    REQ(n, with_stmt);\n\n    n_items = (NCH(n) - 2) / 2;\n    items = _Py_asdl_seq_new(n_items, c->c_arena);\n    if (!items)\n        return NULL;\n    for (i = 1; i < NCH(n) - 2; i += 2) {\n        withitem_ty item = ast_for_with_item(c, CHILD(n, i));\n        if (!item)\n            return NULL;\n        asdl_seq_SET(items, (i - 1) / 2, item);\n    }\n\n    body = ast_for_suite(c, CHILD(n, NCH(n) - 1));\n    if (!body)\n        return NULL;\n    get_last_end_pos(body, &end_lineno, &end_col_offset);\n\n    if (is_async)\n        return AsyncWith(items, body, LINENO(n0), n0->n_col_offset,\n                         end_lineno, end_col_offset, c->c_arena);\n    else\n        return With(items, body, LINENO(n), n->n_col_offset,\n                    end_lineno, end_col_offset, c->c_arena);\n}",
        "output": "1",
        "idx": 1285
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void kqemu_set_notdirty(CPUState *env, ram_addr_t ram_addr)\n\n{\n\n    LOG_INT(\"kqemu_set_notdirty: addr=%08lx\\n\", \n\n                (unsigned long)ram_addr);\n\n    /* we only track transitions to dirty state */\n\n    if (phys_ram_dirty[ram_addr >> TARGET_PAGE_BITS] != 0xff)\n\n        return;\n\n    if (nb_ram_pages_to_update >= KQEMU_MAX_RAM_PAGES_TO_UPDATE)\n\n        nb_ram_pages_to_update = KQEMU_RAM_PAGES_UPDATE_ALL;\n\n    else\n\n        ram_pages_to_update[nb_ram_pages_to_update++] = ram_addr;\n\n}\n",
        "output": "0",
        "idx": 2623
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "shape_desc *find_user_shape(const char *name)\n{\n    int i;\n    if (UserShape) {\n\tfor (i = 0; i < N_UserShape; i++) {\n\t    if (streq(UserShape[i]->name, name))\n\t\treturn UserShape[i];\n\t}\n    }\n    return NULL;\n}",
        "output": "0",
        "idx": 1588
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vnc_init_basic_info(SocketAddress *addr,\n\n                                VncBasicInfo *info,\n\n                                Error **errp)\n\n{\n\n    switch (addr->type) {\n\n    case SOCKET_ADDRESS_KIND_INET:\n\n        info->host = g_strdup(addr->u.inet->host);\n\n        info->service = g_strdup(addr->u.inet->port);\n\n        if (addr->u.inet->ipv6) {\n\n            info->family = NETWORK_ADDRESS_FAMILY_IPV6;\n\n        } else {\n\n            info->family = NETWORK_ADDRESS_FAMILY_IPV4;\n\n        }\n\n        break;\n\n\n\n    case SOCKET_ADDRESS_KIND_UNIX:\n\n        info->host = g_strdup(\"\");\n\n        info->service = g_strdup(addr->u.q_unix->path);\n\n        info->family = NETWORK_ADDRESS_FAMILY_UNIX;\n\n        break;\n\n\n\n    default:\n\n        error_setg(errp, \"Unsupported socket kind %d\",\n\n                   addr->type);\n\n        break;\n\n    }\n\n\n\n    return;\n\n}\n",
        "output": "0",
        "idx": 4386
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    const char* rawdata() const {\n        return data;\n    }",
        "output": "0",
        "idx": 3079
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool unconditional(const struct ipt_ip *ip)\n{\n\tstatic const struct ipt_ip uncond;\n\n\treturn memcmp(ip, &uncond, sizeof(uncond)) == 0;\n#undef FWINV\n}",
        "output": "1",
        "idx": 1461
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Dispatcher::OpenCLException::OpenCLException(const std::string s, const cl_int res) :\n\tstd::runtime_error( s + \" (res = \" + toString(res) + \")\"),\n\tm_res(res)\n{\n\n}",
        "output": "0",
        "idx": 5475
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool bpf_map_is_rdonly(const struct bpf_map *map)\n{\n\treturn (map->map_flags & BPF_F_RDONLY_PROG) && map->frozen;\n}",
        "output": "1",
        "idx": 1056
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t pm_qos_resume_latency_us_show(struct device *dev,\n\t\t\t\t\t     struct device_attribute *attr,\n\t\t\t\t\t     char *buf)\n{\n\ts32 value = dev_pm_qos_requested_resume_latency(dev);\n\n\tif (value == 0)\n\t\treturn sprintf(buf, \"n/a\\n\");\n\tif (value == PM_QOS_RESUME_LATENCY_NO_CONSTRAINT)\n\t\tvalue = 0;\n\n\treturn sprintf(buf, \"%d\\n\", value);\n}",
        "output": "1",
        "idx": 344
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unwrap(struct magic_set *ms, const char *fn)\n{\n\tFILE *f;\n\tssize_t len;\n\tchar *line = NULL;\n\tsize_t llen = 0;\n\tint wid = 0, cwid;\n\tint e = 0;\n\n\tif (strcmp(\"-\", fn) == 0) {\n\t\tf = stdin;\n\t\twid = 1;\n\t} else {\n\t\tif ((f = fopen(fn, \"r\")) == NULL) {\n\t\t\t(void)fprintf(stderr, \"%s: Cannot open `%s' (%s).\\n\",\n\t\t\t    progname, fn, strerror(errno));\n\t\t\treturn 1;\n\t\t}\n\n\t\twhile ((len = getline(&line, &llen, f)) > 0) {\n\t\t\tif (line[len - 1] == '\\n')\n\t\t\t\tline[len - 1] = '\\0';\n\t\t\tcwid = file_mbswidth(line);\n\t\t\tif (cwid > wid)\n\t\t\t\twid = cwid;\n\t\t}\n\n\t\trewind(f);\n\t}\n\n\twhile ((len = getline(&line, &llen, f)) > 0) {\n\t\tif (line[len - 1] == '\\n')\n\t\t\tline[len - 1] = '\\0';\n\t\te |= process(ms, line, wid);\n\t\tif(nobuffer)\n\t\t\t(void)fflush(stdout);\n\t}\n\n\tfree(line);\n\t(void)fclose(f);\n\treturn e;\n}",
        "output": "0",
        "idx": 4597
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "sh_single_quote (string)\n     const char *string;\n{\n  register int c;\n  char *result, *r;\n  const char *s;\n\n  result = (char *)xmalloc (3 + (4 * strlen (string)));\n  r = result;\n  *r++ = '\\'';\n\n  for (s = string; s && (c = *s); s++)\n    {\n      *r++ = c;\n\n      if (c == '\\'')\n\t{\n\t  *r++ = '\\\\';\t/* insert escaped single quote */\n\t  *r++ = '\\'';\n\t  *r++ = '\\'';\t/* start new quoted string */\n\t}\n    }\n\n  *r++ = '\\'';\n  *r = '\\0';\n\n  return (result);\n}",
        "output": "0",
        "idx": 5261
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void rgb8tobgr8(const uint8_t *src, uint8_t *dst, long src_size)\n\n{\n\n\tlong i;\n\n\tlong num_pixels = src_size;\n\n\tfor(i=0; i<num_pixels; i++)\n\n\t{\n\n\t    unsigned b,g,r;\n\n\t    register uint8_t rgb;\n\n\t    rgb = src[i];\n\n\t    r = (rgb&0x07);\n\n\t    g = (rgb&0x38)>>3;\n\n\t    b = (rgb&0xC0)>>6;\n\n\t    dst[i] = ((b<<1)&0x07) | ((g&0x07)<<3) | ((r&0x03)<<6);\n\n\t}\n\n}\n",
        "output": "1",
        "idx": 4440
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fib6_start_gc(struct net *net, struct fib6_info *rt)\n{\n\tif (!timer_pending(&net->ipv6.ip6_fib_timer) &&\n\t    (rt->fib6_flags & RTF_EXPIRES))\n\t\tmod_timer(&net->ipv6.ip6_fib_timer,\n\t\t\t  jiffies + net->ipv6.sysctl.ip6_rt_gc_interval);\n}",
        "output": "0",
        "idx": 3464
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    bool parse( char* ptr )\n    {\n        ptr = skipSpaces( ptr );\n        if ( !ptr || !*ptr )\n            return false;\n\n        FileNode root_collection(fs->getFS(), 0, 0);\n\n        if( *ptr == '{' )\n        {\n            FileNode root_node = fs->addNode(root_collection, std::string(), FileNode::MAP);\n            parseMap( ptr, root_node );\n        }\n        else if ( *ptr == '[' )\n        {\n            FileNode root_node = fs->addNode(root_collection, std::string(), FileNode::SEQ);\n            parseSeq( ptr, root_node );\n        }\n        else\n        {\n            CV_PARSE_ERROR_CPP( \"left-brace of top level is missing\" );\n        }\n\n        if( !ptr || !*ptr )\n            CV_PARSE_ERROR_CPP( \"Unexpected End-Of-File\" );\n        return true;\n    }",
        "output": "1",
        "idx": 3636
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pdiag_put_ring(struct packet_ring_buffer *ring, int ver, int nl_type,\n\t\tstruct sk_buff *nlskb)\n{\n\tstruct packet_diag_ring pdr;\n\n\tif (!ring->pg_vec || ((ver > TPACKET_V2) &&\n\t\t\t\t(nl_type == PACKET_DIAG_TX_RING)))\n\t\treturn 0;\n\n\tpdr.pdr_block_size = ring->pg_vec_pages << PAGE_SHIFT;\n\tpdr.pdr_block_nr = ring->pg_vec_len;\n\tpdr.pdr_frame_size = ring->frame_size;\n\tpdr.pdr_frame_nr = ring->frame_max + 1;\n\n\tif (ver > TPACKET_V2) {\n\t\tpdr.pdr_retire_tmo = ring->prb_bdqc.retire_blk_tov;\n\t\tpdr.pdr_sizeof_priv = ring->prb_bdqc.blk_sizeof_priv;\n\t\tpdr.pdr_features = ring->prb_bdqc.feature_req_word;\n\t} else {\n\t\tpdr.pdr_retire_tmo = 0;\n\t\tpdr.pdr_sizeof_priv = 0;\n\t\tpdr.pdr_features = 0;\n\t}\n\n\treturn nla_put(nlskb, nl_type, sizeof(pdr), &pdr);\n}",
        "output": "0",
        "idx": 1673
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QObject *qmp_dispatch(QObject *request)\n\n{\n\n    Error *err = NULL;\n\n    QObject *ret;\n\n    QDict *rsp;\n\n\n\n    ret = do_qmp_dispatch(request, &err);\n\n\n\n    rsp = qdict_new();\n\n    if (err) {\n\n        qdict_put_obj(rsp, \"error\", error_get_qobject(err));\n\n        error_free(err);\n\n    } else if (ret) {\n\n        qdict_put_obj(rsp, \"return\", ret);\n\n    } else {\n\n        QDECREF(rsp);\n\n        return NULL;\n\n    }\n\n\n\n    return QOBJECT(rsp);\n\n}\n",
        "output": "1",
        "idx": 116
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void OPPROTO op_divb_AL_T0(void)\n\n{\n\n    unsigned int num, den, q, r;\n\n\n\n    num = (EAX & 0xffff);\n\n    den = (T0 & 0xff);\n\n    if (den == 0) {\n\n        raise_exception(EXCP00_DIVZ);\n\n    }\n\n    q = (num / den) & 0xff;\n\n    r = (num % den) & 0xff;\n\n    EAX = (EAX & ~0xffff) | (r << 8) | q;\n\n}\n",
        "output": "1",
        "idx": 4936
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtio_panic(const char *string)\n\n{\n\n    sclp_print(string);\n\n    disabled_wait();\n\n    while (1) { }\n\n}\n",
        "output": "1",
        "idx": 3630
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AioContext *aio_context_new(Error **errp)\n\n{\n\n    int ret;\n\n    AioContext *ctx;\n\n\n\n    ctx = (AioContext *) g_source_new(&aio_source_funcs, sizeof(AioContext));\n\n    aio_context_setup(ctx);\n\n\n\n    ret = event_notifier_init(&ctx->notifier, false);\n\n    if (ret < 0) {\n\n        error_setg_errno(errp, -ret, \"Failed to initialize event notifier\");\n\n        goto fail;\n\n    }\n\n    g_source_set_can_recurse(&ctx->source, true);\n\n    aio_set_event_notifier(ctx, &ctx->notifier,\n\n                           false,\n\n                           (EventNotifierHandler *)\n\n                           event_notifier_dummy_cb,\n\n                           event_notifier_poll);\n\n#ifdef CONFIG_LINUX_AIO\n\n    ctx->linux_aio = NULL;\n\n#endif\n\n    ctx->thread_pool = NULL;\n\n    qemu_mutex_init(&ctx->bh_lock);\n\n    qemu_rec_mutex_init(&ctx->lock);\n\n    timerlistgroup_init(&ctx->tlg, aio_timerlist_notify, ctx);\n\n\n\n\n    ctx->poll_max_ns = 0;\n\n\n\n\n\n    return ctx;\n\nfail:\n\n    g_source_destroy(&ctx->source);\n\n    return NULL;\n\n}",
        "output": "1",
        "idx": 3391
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_lineno (var)\n     SHELL_VAR *var;\n{\n  char *p;\n  int ln;\n\n  ln = executing_line_number ();\n  p = itos (ln);\n  FREE (value_cell (var));\n  var_setvalue (var, p);\n  return (var);\n}",
        "output": "0",
        "idx": 92
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct libscols_line *add_line(struct libscols_table *table, struct libmnt_fs *fs,\n\t\t\t\t\tstruct libscols_line *parent)\n{\n\tsize_t i;\n\tstruct libscols_line *line = scols_table_new_line(table, parent);\n\n\tif (!line)\n\t\terr(EXIT_FAILURE, _(\"failed to allocate output line\"));\n\n\tfor (i = 0; i < ncolumns; i++) {\n\t\tif (scols_line_refer_data(line, i, get_data(fs, i)))\n\t\t\terr(EXIT_FAILURE, _(\"failed to add output data\"));\n\t}\n\n\tscols_line_set_userdata(line, fs);\n\treturn line;\n}",
        "output": "0",
        "idx": 1424
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vmx_set_virtual_x2apic_mode(struct kvm_vcpu *vcpu, bool set)\n{\n\tu32 sec_exec_control;\n\n\t/*\n\t * There is not point to enable virtualize x2apic without enable\n\t * apicv\n\t */\n\tif (!cpu_has_vmx_virtualize_x2apic_mode() ||\n\t\t\t\t!vmx_vm_has_apicv(vcpu->kvm))\n\t\treturn;\n\n\tif (!vm_need_tpr_shadow(vcpu->kvm))\n\t\treturn;\n\n\tsec_exec_control = vmcs_read32(SECONDARY_VM_EXEC_CONTROL);\n\n\tif (set) {\n\t\tsec_exec_control &= ~SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES;\n\t\tsec_exec_control |= SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE;\n\t} else {\n\t\tsec_exec_control &= ~SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE;\n\t\tsec_exec_control |= SECONDARY_EXEC_VIRTUALIZE_APIC_ACCESSES;\n\t}\n\tvmcs_write32(SECONDARY_VM_EXEC_CONTROL, sec_exec_control);\n\n\tvmx_set_msr_bitmap(vcpu);\n}",
        "output": "0",
        "idx": 3339
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "CloseUndoneFileDownload(rfbClientPtr cl, rfbTightClientPtr rtcp)\n{\n\tif(cl == NULL)\n\t\treturn;\n\t\n\tif(rtcp->rcft.rcfd.downloadInProgress == TRUE) {\n\t\trtcp->rcft.rcfd.downloadInProgress = FALSE;\n\n\t\tif(rtcp->rcft.rcfd.downloadFD != -1) {\t\t\t\n\t\t\tclose(rtcp->rcft.rcfd.downloadFD);\n\t\t\trtcp->rcft.rcfd.downloadFD = -1;\n\t\t}\n\t\tmemset(rtcp->rcft.rcfd.fName, 0 , PATH_MAX);\n\t}\n}",
        "output": "1",
        "idx": 908
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static __inline__ int cbq_dump_fopt(struct sk_buff *skb, struct cbq_class *cl)\n{\n\tunsigned char\t *b = skb->tail;\n\tstruct tc_cbq_fopt opt;\n\n\tif (cl->split || cl->defmap) {\n\t\topt.split = cl->split ? cl->split->classid : 0;\n\t\topt.defmap = cl->defmap;\n\t\topt.defchange = ~0;\n\t\tRTA_PUT(skb, TCA_CBQ_FOPT, sizeof(opt), &opt);\n\t}\n\treturn skb->len;\n\nrtattr_failure:\n\tskb_trim(skb, b - skb->data);\n\treturn -1;\n}",
        "output": "0",
        "idx": 4172
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlRelaxNGParseImportRef(void *payload, void *data, xmlChar *name) {\n    xmlRelaxNGParserCtxtPtr ctxt = (xmlRelaxNGParserCtxtPtr) data;\n    xmlRelaxNGDefinePtr def = (xmlRelaxNGDefinePtr) payload;\n    int tmp;\n\n    def->dflags |= IS_EXTERNAL_REF;\n\n    tmp = xmlHashAddEntry(ctxt->grammar->refs, name, def);\n    if (tmp < 0) {\n        xmlRelaxNGDefinePtr prev;\n\n        prev = (xmlRelaxNGDefinePtr)\n            xmlHashLookup(ctxt->grammar->refs, def->name);\n        if (prev == NULL) {\n            if (def->name != NULL) {\n                xmlRngPErr(ctxt, NULL, XML_RNGP_REF_CREATE_FAILED,\n                           \"Error refs definitions '%s'\\n\",\n                           def->name, NULL);\n            } else {\n                xmlRngPErr(ctxt, NULL, XML_RNGP_REF_CREATE_FAILED,\n                           \"Error refs definitions\\n\",\n                           NULL, NULL);\n            }\n        } else {\n            def->nextHash = prev->nextHash;\n            prev->nextHash = def;\n        }\n    }\n}",
        "output": "0",
        "idx": 3313
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PJ_DEF(const char*) pj_stun_get_class_name(unsigned msg_type)\n{\n    if (PJ_STUN_IS_REQUEST(msg_type))\n\treturn \"request\";\n    else if (PJ_STUN_IS_SUCCESS_RESPONSE(msg_type))\n\treturn \"success response\";\n    else if (PJ_STUN_IS_ERROR_RESPONSE(msg_type))\n\treturn \"error response\";\n    else if (PJ_STUN_IS_INDICATION(msg_type))\n\treturn \"indication\";\n    else\n\treturn \"???\";\n}",
        "output": "0",
        "idx": 5432
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MONGO_EXPORT void bson_init( bson *b ) {\n    _bson_init_size( b, initialBufferSize );\n}",
        "output": "0",
        "idx": 3807
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int wait_for_bgprint_to_finish(void)\n{\n\tif (!bgprint.active || !bgprint.started)\n\t\treturn 0;\n\n\tmu_wait_semaphore(&bgprint.stop);\n\tbgprint.started = 0;\n\treturn bgprint.status;\n}",
        "output": "0",
        "idx": 746
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "g_file_is_native (GFile *file)\n{\n  GFileIface *iface;\n\n  g_return_val_if_fail (G_IS_FILE (file), FALSE);\n\n  iface = G_FILE_GET_IFACE (file);\n\n  return (* iface->is_native) (file);\n}",
        "output": "0",
        "idx": 5194
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_pka_info (const char *address, unsigned char *fpr)\n{\n  (void)address;\n  (void)fpr;\n  return NULL;\n}",
        "output": "1",
        "idx": 6136
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SecureRandomDataProvider::provideRandomData(unsigned char* data, size_t len)\n{\n#if defined(_WIN32)\n\n    // Optimization: make the WindowsCryptProvider static as long as\n    // it can be done in a thread-safe fashion.\n    WindowsCryptProvider c;\n    if (! CryptGenRandom(c.crypt_prov, len, reinterpret_cast<BYTE*>(data)))\n    {\n        throw std::runtime_error(\"unable to generate secure random data\");\n    }\n\n#elif defined(RANDOM_DEVICE)\n\n    // Optimization: wrap the file open and close in a class so that\n    // the file is closed in a destructor, then make this static to\n    // keep the file handle open.  Only do this if it can be done in a\n    // thread-safe fashion.\n    FILE* f = QUtil::safe_fopen(RANDOM_DEVICE, \"rb\");\n    size_t fr = fread(data, 1, len, f);\n    fclose(f);\n    if (fr != len)\n    {\n        throw std::runtime_error(\n            \"unable to read \" +\n            QUtil::int_to_string(len) +\n            \" bytes from \" + std::string(RANDOM_DEVICE));\n    }\n\n#else\n\n#  error \"Don't know how to generate secure random numbers on this platform.  See random number generation in the top-level README.md\"\n\n#endif\n}",
        "output": "1",
        "idx": 3298
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void decoder_context::compute_framedrop_table()\n{\n  int highestTID = get_highest_TID();\n\n  for (int tid=highestTID ; tid>=0 ; tid--) {\n    int lower  = 100 *  tid   /(highestTID+1);\n    int higher = 100 * (tid+1)/(highestTID+1);\n\n    for (int l=lower; l<=higher; l++) {\n      int ratio = 100 * (l-lower) / (higher-lower);\n\n      // if we would exceed our TID limit, decode the highest TID at full frame-rate\n      if (tid > limit_HighestTid) {\n        tid   = limit_HighestTid;\n        ratio = 100;\n      }\n\n      framedrop_tab[l].tid   = tid;\n      framedrop_tab[l].ratio = ratio;\n    }\n\n    framedrop_tid_index[tid] = higher;\n  }\n\n#if 0\n  for (int i=0;i<=100;i++) {\n    printf(\"%d%%: %d/%d\",i, framedrop_tab[i].tid, framedrop_tab[i].ratio);\n    for (int k=0;k<=highestTID;k++) {\n      if (framedrop_tid_index[k] == i) printf(\" ** TID=%d **\",k);\n    }\n    printf(\"\\n\");\n  }\n#endif\n}",
        "output": "0",
        "idx": 5159
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QPDFObjectHandle::getKeys()\n{\n    assertDictionary();\n    return dynamic_cast<QPDF_Dictionary*>(obj.getPointer())->getKeys();\n}",
        "output": "0",
        "idx": 2633
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline double LevelPixel(const double black_point,\n  const double white_point,const double gamma,const double pixel)\n{\n  double\n    level_pixel,\n    scale;\n\n  scale=PerceptibleReciprocal(white_point-black_point);\n  level_pixel=QuantumRange*gamma_pow(scale*((double) pixel-black_point),\n    1.0/gamma);\n  return(level_pixel);\n}",
        "output": "1",
        "idx": 3506
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __dev_open(struct net_device *dev)\n{\n\tconst struct net_device_ops *ops = dev->netdev_ops;\n\tint ret;\n\n\tASSERT_RTNL();\n\n\tif (!netif_device_present(dev))\n\t\treturn -ENODEV;\n\n\t/* Block netpoll from trying to do any rx path servicing.\n\t * If we don't do this there is a chance ndo_poll_controller\n\t * or ndo_poll may be running while we open the device\n\t */\n\tnetpoll_rx_disable(dev);\n\n\tret = call_netdevice_notifiers(NETDEV_PRE_UP, dev);\n\tret = notifier_to_errno(ret);\n\tif (ret)\n\t\treturn ret;\n\n\tset_bit(__LINK_STATE_START, &dev->state);\n\n\tif (ops->ndo_validate_addr)\n\t\tret = ops->ndo_validate_addr(dev);\n\n\tif (!ret && ops->ndo_open)\n\t\tret = ops->ndo_open(dev);\n\n\tnetpoll_rx_enable(dev);\n\n\tif (ret)\n\t\tclear_bit(__LINK_STATE_START, &dev->state);\n\telse {\n\t\tdev->flags |= IFF_UP;\n\t\tnet_dmaengine_get();\n\t\tdev_set_rx_mode(dev);\n\t\tdev_activate(dev);\n\t\tadd_device_randomness(dev->dev_addr, dev->addr_len);\n\t}\n\n\treturn ret;\n}",
        "output": "1",
        "idx": 5001
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void framebuffer_update_request(VncState *vs, int incremental,\n                                       int x_position, int y_position,\n                                       int w, int h)\n{\n    int i;\n    const size_t width = surface_width(vs->vd->ds) / VNC_DIRTY_PIXELS_PER_BIT;\n    const size_t height = surface_height(vs->vd->ds);\n\n    if (y_position > height) {\n        y_position = height;\n    }\n    if (y_position + h >= height) {\n        h = height - y_position;\n    }\n\n    vs->need_update = 1;\n    if (!incremental) {\n        vs->force_update = 1;\n        for (i = 0; i < h; i++) {\n            bitmap_set(vs->dirty[y_position + i], 0, width);\n            bitmap_clear(vs->dirty[y_position + i], width,\n                         VNC_DIRTY_BITS - width);\n        }\n    }\n}",
        "output": "1",
        "idx": 1022
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void gf_hinter_track_get_payload_name(GF_RTPHinter *tkHinter, char *payloadName)\n{\n\tchar mediaName[30];\n\tgf_rtp_builder_get_payload_name(tkHinter->rtp_p, payloadName, mediaName);\n}",
        "output": "0",
        "idx": 2468
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vhost_scsi_exit(DeviceState *qdev)\n\n{\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(qdev);\n\n    VHostSCSI *s = VHOST_SCSI(qdev);\n\n    VirtIOSCSICommon *vs = VIRTIO_SCSI_COMMON(qdev);\n\n\n\n    migrate_del_blocker(s->migration_blocker);\n\n    error_free(s->migration_blocker);\n\n\n\n    /* This will stop vhost backend. */\n\n    vhost_scsi_set_status(vdev, 0);\n\n\n\n    g_free(s->dev.vqs);\n\n    return virtio_scsi_common_exit(vs);\n\n}\n",
        "output": "1",
        "idx": 4899
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int cpu_get_dump_info(ArchDumpInfo *info)\n\n{\n\n    return -1;\n\n}\n",
        "output": "1",
        "idx": 936
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rtsp_cmd_pause(HTTPContext *c, const char *url, RTSPHeader *h)\n\n{\n\n    HTTPContext *rtp_c;\n\n\n\n    rtp_c = find_rtp_session_with_url(url, h->session_id);\n\n    if (!rtp_c) {\n\n        rtsp_reply_error(c, RTSP_STATUS_SESSION);\n\n        return;\n\n    }\n\n    \n\n    if (rtp_c->state != HTTPSTATE_SEND_DATA &&\n\n        rtp_c->state != HTTPSTATE_WAIT_FEED) {\n\n        rtsp_reply_error(c, RTSP_STATUS_STATE);\n\n        return;\n\n    }\n\n    \n\n    rtp_c->state = HTTPSTATE_READY;\n\n    \n\n    /* now everything is OK, so we can send the connection parameters */\n\n    rtsp_reply_header(c, RTSP_STATUS_OK);\n\n    /* session ID */\n\n    url_fprintf(c->pb, \"Session: %s\\r\\n\", rtp_c->session_id);\n\n    url_fprintf(c->pb, \"\\r\\n\");\n\n}\n",
        "output": "1",
        "idx": 1345
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void helper_wrpstate(CPUSPARCState *env, target_ulong new_state)\n\n{\n\n    cpu_change_pstate(env, new_state & 0xf3f);\n\n\n\n#if !defined(CONFIG_USER_ONLY)\n\n    if (cpu_interrupts_enabled(env)) {\n\n\n        cpu_check_irqs(env);\n\n\n    }\n\n#endif\n\n}",
        "output": "1",
        "idx": 2914
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ActiveStreamDecoderFilter::sendLocalReply(\n    Code code, absl::string_view body,\n    std::function<void(ResponseHeaderMap& headers)> modify_headers,\n    const absl::optional<Grpc::Status::GrpcStatus> grpc_status, absl::string_view details) {\n  parent_.sendLocalReply(code, body, modify_headers, grpc_status, details);\n}",
        "output": "0",
        "idx": 4502
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MONGO_EXPORT int bson_append_binary( bson *b, const char *name, char type, const char *str, int len ) {\n    if ( type == BSON_BIN_BINARY_OLD ) {\n        int subtwolen = len + 4;\n        if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+4+len ) == BSON_ERROR )\n            return BSON_ERROR;\n        bson_append32( b, &subtwolen );\n        bson_append_byte( b, type );\n        bson_append32( b, &len );\n        bson_append( b, str, len );\n    }\n    else {\n        if ( bson_append_estart( b, BSON_BINDATA, name, 4+1+len ) == BSON_ERROR )\n            return BSON_ERROR;\n        bson_append32( b, &len );\n        bson_append_byte( b, type );\n        bson_append( b, str, len );\n    }\n    return BSON_OK;\n}",
        "output": "1",
        "idx": 2604
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void WebContents::ReceivePostMessage(\n    const std::string& channel,\n    blink::TransferableMessage message,\n    content::RenderFrameHost* render_frame_host) {\n  v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n  v8::HandleScope handle_scope(isolate);\n  auto wrapped_ports =\n      MessagePort::EntanglePorts(isolate, std::move(message.ports));\n  v8::Local<v8::Value> message_value =\n      electron::DeserializeV8Value(isolate, message);\n  EmitWithSender(\"-ipc-ports\", render_frame_host,\n                 electron::mojom::ElectronBrowser::InvokeCallback(), false,\n                 channel, message_value, std::move(wrapped_ports));\n}",
        "output": "1",
        "idx": 2541
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "drv_keyok(TERMINAL_CONTROL_BLOCK * TCB, int c, int flag)\n{\n    SCREEN *sp;\n    int code = ERR;\n    int count = 0;\n    char *s;\n\n    AssertTCB();\n    SetSP();\n\n    if (c >= 0) {\n\tunsigned ch = (unsigned) c;\n\tif (flag) {\n\t    while ((s = _nc_expand_try(sp->_key_ok,\n\t\t\t\t       ch, &count, (size_t) 0)) != 0) {\n\t\tif (_nc_remove_key(&(sp->_key_ok), ch)) {\n\t\t    code = _nc_add_to_try(&(sp->_keytry), s, ch);\n\t\t    free(s);\n\t\t    count = 0;\n\t\t    if (code != OK)\n\t\t\tbreak;\n\t\t} else {\n\t\t    free(s);\n\t\t}\n\t    }\n\t} else {\n\t    while ((s = _nc_expand_try(sp->_keytry,\n\t\t\t\t       ch, &count, (size_t) 0)) != 0) {\n\t\tif (_nc_remove_key(&(sp->_keytry), ch)) {\n\t\t    code = _nc_add_to_try(&(sp->_key_ok), s, ch);\n\t\t    free(s);\n\t\t    count = 0;\n\t\t    if (code != OK)\n\t\t\tbreak;\n\t\t} else {\n\t\t    free(s);\n\t\t}\n\t    }\n\t}\n    }\n    return (code);\n}",
        "output": "0",
        "idx": 581
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compat_check_calc_match(struct ipt_entry_match *m,\n\t    const char *name,\n\t    const struct ipt_ip *ip,\n\t    unsigned int hookmask,\n\t    int *size, int *i)\n{\n\tstruct ipt_match *match;\n\n\tmatch = try_then_request_module(xt_find_match(AF_INET, m->u.user.name,\n\t\t\t\t\t\t   m->u.user.revision),\n\t\t\t\t\t\"ipt_%s\", m->u.user.name);\n\tif (IS_ERR(match) || !match) {\n\t\tduprintf(\"compat_check_calc_match: `%s' not found\\n\",\n\t\t\t\tm->u.user.name);\n\t\treturn match ? PTR_ERR(match) : -ENOENT;\n\t}\n\tm->u.kernel.match = match;\n\n\tif (m->u.kernel.match->compat)\n\t\tm->u.kernel.match->compat(m, NULL, size, COMPAT_CALC_SIZE);\n\telse\n\t\txt_compat_match(m, NULL, size, COMPAT_CALC_SIZE);\n\n\t(*i)++;\n\treturn 0;\n}",
        "output": "1",
        "idx": 2886
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static long btrfs_ioctl_balance_ctl(struct btrfs_fs_info *fs_info, int cmd)\n{\n\tif (!capable(CAP_SYS_ADMIN))\n\t\treturn -EPERM;\n\n\tswitch (cmd) {\n\tcase BTRFS_BALANCE_CTL_PAUSE:\n\t\treturn btrfs_pause_balance(fs_info);\n\tcase BTRFS_BALANCE_CTL_CANCEL:\n\t\treturn btrfs_cancel_balance(fs_info);\n\t}\n\n\treturn -EINVAL;\n}",
        "output": "0",
        "idx": 3756
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mailbox_reconstruct_acl(struct mailbox *mailbox, int flags)\n{\n    int make_changes = flags & RECONSTRUCT_MAKE_CHANGES;\n    int r;\n\n    r = mailbox_read_header(mailbox);\n    if (r) return r;\n\n    if (strcmp(mailbox_acl(mailbox), mailbox->h.acl)) {\n        printf(\"%s: update acl from header %s => %s\\n\", mailbox_name(mailbox),\n               mailbox_acl(mailbox), mailbox->h.acl);\n        if (make_changes)\n            printf(\"XXX - this is a noop right now - needs to update mailboxes.db\\n\");\n    }\n\n    return r;\n}",
        "output": "1",
        "idx": 2289
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int _server_handle_c(libgdbr_t *g, int (*cmd_cb) (void*, const char*, char*, size_t), void *core_ptr) {\n\tchar message[64];\n\tif (send_ack (g) < 0) {\n\t\treturn -1;\n\t}\n\tif (g->data_len > 1) {\n\t\t// We don't handle s[addr] packet\n\t\treturn send_msg (g, \"E01\");\n\t}\n\tif (cmd_cb (core_ptr, \"dc\", NULL, 0) < 0) {\n\t\tsend_msg (g, \"E01\");\n\t\treturn -1;\n\t}\n\t// TODO This packet should specify why we stopped. Right now only for trap\n\tsnprintf (message, sizeof (message) - 1, \"T05thread:%x;\", cmd_cb (core_ptr, \"dptr\", NULL, 0));\n\treturn send_msg (g, message);\n}",
        "output": "0",
        "idx": 1482
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xennet_remove(struct xenbus_device *dev)\n{\n\tstruct netfront_info *info = dev_get_drvdata(&dev->dev);\n\n\txennet_bus_close(dev);\n\txennet_disconnect_backend(info);\n\n\tif (info->netdev->reg_state == NETREG_REGISTERED)\n\t\tunregister_netdev(info->netdev);\n\n\tif (info->queues) {\n\t\trtnl_lock();\n\t\txennet_destroy_queues(info);\n\t\trtnl_unlock();\n\t}\n\txennet_free_netdev(info->netdev);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 84
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nGF_Err svhd_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_SphericalVideoInfoBox *ptr = (GF_SphericalVideoInfoBox *)s;\n\tptr->string = gf_malloc(sizeof(char) * ((u32) ptr->size+1));\n\tif (!ptr->string) return GF_OUT_OF_MEM;\n\tgf_bs_read_data(bs, ptr->string, (u32) ptr->size);\n\tptr->string[ptr->size] = 0;\n\treturn GF_OK;",
        "output": "0",
        "idx": 1989
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int jacosub_probe(AVProbeData *p)\n\n{\n\n    const char *ptr     = p->buf;\n\n    const char *ptr_end = p->buf + p->buf_size;\n\n\n\n    if (AV_RB24(ptr) == 0xEFBBBF)\n\n        ptr += 3; /* skip UTF-8 BOM */\n\n\n\n    while (ptr < ptr_end) {\n\n        while (jss_whitespace(*ptr))\n\n            ptr++;\n\n        if (*ptr != '#' && *ptr != '\\n') {\n\n            if (timed_line(ptr))\n\n                return AVPROBE_SCORE_EXTENSION + 1;\n\n            return 0;\n\n        }\n\n        ptr += strcspn(ptr, \"\\n\") + 1;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 31
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const char *cJSON_GetErrorPtr( void )\n{\n\treturn ep;\n}",
        "output": "1",
        "idx": 4738
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool drbg_fips_continuous_test(struct drbg_state *drbg,\n\t\t\t\t      const unsigned char *buf)\n{\n#ifdef CONFIG_CRYPTO_FIPS\n\tint ret = 0;\n\t/* skip test if we test the overall system */\n\tif (drbg->test_data)\n\t\treturn true;\n\t/* only perform test in FIPS mode */\n\tif (0 == fips_enabled)\n\t\treturn true;\n\tif (!drbg->fips_primed) {\n\t\t/* Priming of FIPS test */\n\t\tmemcpy(drbg->prev, buf, drbg_blocklen(drbg));\n\t\tdrbg->fips_primed = true;\n\t\t/* return false due to priming, i.e. another round is needed */\n\t\treturn false;\n\t}\n\tret = memcmp(drbg->prev, buf, drbg_blocklen(drbg));\n\tif (!ret)\n\t\tpanic(\"DRBG continuous self test failed\\n\");\n\tmemcpy(drbg->prev, buf, drbg_blocklen(drbg));\n\t/* the test shall pass when the two compared values are not equal */\n\treturn ret != 0;\n#else\n\treturn true;\n#endif /* CONFIG_CRYPTO_FIPS */\n}",
        "output": "1",
        "idx": 3434
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kempf_restore_buf(const uint8_t *src, int len,\n\n                              uint8_t *dst, int stride,\n\n                              const uint8_t *jpeg_tile, int tile_stride,\n\n                              int width, int height,\n\n                              const uint8_t *pal, int npal, int tidx)\n\n{\n\n    GetBitContext gb;\n\n    int i, j, nb, col;\n\n\n\n    init_get_bits8(&gb, src, len);\n\n\n\n    if (npal <= 2)       nb = 1;\n\n    else if (npal <= 4)  nb = 2;\n\n    else if (npal <= 16) nb = 4;\n\n    else                 nb = 8;\n\n\n\n    for (j = 0; j < height; j++, dst += stride, jpeg_tile += tile_stride) {\n\n        if (get_bits(&gb, 8))\n\n            continue;\n\n        for (i = 0; i < width; i++) {\n\n            col = get_bits(&gb, nb);\n\n            if (col != tidx)\n\n                memcpy(dst + i * 3, pal + col * 3, 3);\n\n            else\n\n                memcpy(dst + i * 3, jpeg_tile + i * 3, 3);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3012
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_image_fill_arrays(uint8_t *dst_data[4], int dst_linesize[4],\n\n                         const uint8_t *src,\n\n                         enum AVPixelFormat pix_fmt, int width, int height, int align)\n\n{\n\n    int ret, i;\n\n\n\n    if ((ret = av_image_check_size(width, height, 0, NULL)) < 0)\n\n        return ret;\n\n\n\n    if ((ret = av_image_fill_linesizes(dst_linesize, pix_fmt, width)) < 0)\n\n        return ret;\n\n\n\n    for (i = 0; i < 4; i++)\n\n        dst_linesize[i] = FFALIGN(dst_linesize[i], align);\n\n\n\n    if ((ret = av_image_fill_pointers(dst_data, pix_fmt, width, NULL, dst_linesize)) < 0)\n\n        return ret;\n\n\n\n    return av_image_fill_pointers(dst_data, pix_fmt, height, (uint8_t *)src, dst_linesize);\n\n}\n",
        "output": "0",
        "idx": 3839
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_P(Security, BuiltinAuthenticationAndAccessAndCryptoPlugin_PermissionsDisableDiscoveryEnableAccessEncrypt_validation_ok_enable_discovery_disable_access_encrypt)\n// *INDENT-ON*\n{\n    PubSubReader<HelloWorldType> reader(TEST_TOPIC_NAME);\n    PubSubWriter<HelloWorldType> writer(TEST_TOPIC_NAME);\n    std::string governance_file(\"governance_disable_discovery_enable_access_encrypt.smime\");\n\n    BuiltinAuthenticationAndAccessAndCryptoPlugin_Permissions_validation_ok_common(reader, writer, governance_file);\n}",
        "output": "0",
        "idx": 1705
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "trash_or_delete_internal (GList                  *files,\n                          GtkWindow              *parent_window,\n                          gboolean                try_trash,\n                          NautilusDeleteCallback  done_callback,\n                          gpointer                done_callback_data)\n{\n    GTask *task;\n    DeleteJob *job;\n\n    /* TODO: special case desktop icon link files ... */\n\n    job = op_job_new (DeleteJob, parent_window);\n    job->files = g_list_copy_deep (files, (GCopyFunc) g_object_ref, NULL);\n    job->try_trash = try_trash;\n    job->user_cancel = FALSE;\n    job->done_callback = done_callback;\n    job->done_callback_data = done_callback_data;\n\n    if (try_trash)\n    {\n        inhibit_power_manager ((CommonJob *) job, _(\"Trashing Files\"));\n    }\n    else\n    {\n        inhibit_power_manager ((CommonJob *) job, _(\"Deleting Files\"));\n    }\n\n    if (!nautilus_file_undo_manager_is_operating () && try_trash)\n    {\n        job->common.undo_info = nautilus_file_undo_info_trash_new (g_list_length (files));\n    }\n\n    task = g_task_new (NULL, NULL, delete_task_done, job);\n    g_task_set_task_data (task, job, NULL);\n    g_task_run_in_thread (task, delete_task_thread_func);\n    g_object_unref (task);\n}",
        "output": "0",
        "idx": 5138
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *visitor_get(TestOutputVisitorData *data)\n\n{\n\n    data->str = string_output_get_string(data->sov);\n\n    g_assert(data->str);\n\n    return data->str;\n\n}\n",
        "output": "0",
        "idx": 2029
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_visitor_out_empty(TestOutputVisitorData *data,\n\n                                   const void *unused)\n\n{\n\n    QObject *arg;\n\n\n\n    arg = qmp_output_get_qobject(data->qov);\n\n    g_assert(qobject_type(arg) == QTYPE_QNULL);\n\n\n\n    qobject_decref(arg);\n\n}",
        "output": "1",
        "idx": 5501
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_limit(VALUE str, VALUE opt)\n{\n    StringValue(str);\n    size_t slen = RSTRING_LEN(str);\n    size_t limit = get_limit(opt);\n    if (slen > limit) {\n\trb_raise(rb_eArgError,\n\t\t \"string length (%\"PRI_SIZE_PREFIX\"u) exceeds the limit %\"PRI_SIZE_PREFIX\"u\", slen, limit);\n    }\n}",
        "output": "1",
        "idx": 1000
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "size_t c_shquote_strncspn(const char *string,\n                          size_t n_string,\n                          const char *reject) {\n        bool buffer[UCHAR_MAX] = {};\n\n        if (strlen(reject) == 1) {\n                const char *p;\n\n                p = memchr(string, reject[0], n_string);\n                if (!p)\n                        return n_string;\n                else\n                        return p - string;\n        }\n\n        for ( ; *reject; ++reject)\n                buffer[(unsigned char)*reject] = true;\n\n        for (size_t i = 0; i < n_string; ++i)\n                if (buffer[(unsigned char)string[i]])\n                        return i;\n\n        return n_string;\n}",
        "output": "1",
        "idx": 694
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Box *def_parent_full_box_new()\n{\n\tISOM_DECL_BOX_ALLOC(GF_Box, 0);\n\treturn (GF_Box *) tmp;\n}",
        "output": "0",
        "idx": 2482
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "prepend_args (char const *options, char *buf, char **argv)\n{\n  char const *o = options;\n  char *b = buf;\n  int n = 0;\n\n  for (;;)\n    {\n      while (c_isspace ((unsigned char) *o))\n        o++;\n      if (!*o)\n        return n;\n      if (argv)\n        argv[n] = b;\n      n++;\n\n      do\n        if ((*b++ = *o++) == '\\\\' && *o)\n          b[-1] = *o++;\n      while (*o && ! c_isspace ((unsigned char) *o));\n\n      *b++ = '\\0';\n    }\n}",
        "output": "1",
        "idx": 5288
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t aio_setup_vectored_rw(int type, struct kiocb *kiocb, bool compat)\n{\n\tssize_t ret;\n\n#ifdef CONFIG_COMPAT\n\tif (compat)\n\t\tret = compat_rw_copy_check_uvector(type,\n\t\t\t\t(struct compat_iovec __user *)kiocb->ki_buf,\n\t\t\t\tkiocb->ki_nbytes, 1, &kiocb->ki_inline_vec,\n\t\t\t\t&kiocb->ki_iovec, 1);\n\telse\n#endif\n\t\tret = rw_copy_check_uvector(type,\n\t\t\t\t(struct iovec __user *)kiocb->ki_buf,\n\t\t\t\tkiocb->ki_nbytes, 1, &kiocb->ki_inline_vec,\n\t\t\t\t&kiocb->ki_iovec, 1);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tkiocb->ki_nr_segs = kiocb->ki_nbytes;\n\tkiocb->ki_cur_seg = 0;\n\t/* ki_nbytes/left now reflect bytes instead of segs */\n\tkiocb->ki_nbytes = ret;\n\tkiocb->ki_left = ret;\n\n\tret = 0;\nout:\n\treturn ret;\n}",
        "output": "1",
        "idx": 3583
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hdev_has_zero_init(BlockDriverState *bs)\n\n{\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 6040
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unref_var_dict(dict_T *dict)\n{\n    // Now the dict needs to be freed if no one else is using it, go back to\n    // normal reference counting.\n    dict->dv_refcount -= DO_NOT_FREE_CNT - 1;\n    dict_unref(dict);\n}",
        "output": "0",
        "idx": 826
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "onigenc_single_byte_code_to_mbclen(OnigCodePoint code ARG_UNUSED, OnigEncoding enc ARG_UNUSED)\n{\n  return 1;\n}",
        "output": "1",
        "idx": 4509
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char *msSDELayerGetSpatialColumn(layerObj *layer)\n{\n#ifdef USE_SDE\n  msSDELayerInfo *sde=NULL;\n   \n  sde = layer->sdelayer;\n  if(!sde) {\n    msSetError(MS_SDEERR, \"SDE layer has not been opened.\", \"msSDELayerGetSpatialColumn()\");\n    return(NULL);\n  }\n\n  return(strdup(sde->column));\n#else\n  msSetError(MS_MISCERR, \"SDE support is not available.\", \"msSDELayerGetSpatialColumn()\");\n  return(NULL);\n#endif\n}",
        "output": "0",
        "idx": 4972
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char **breakline(char *input, int *count)\n\n{\n\n    int c = 0;\n\n    char *p;\n\n    char **rval = calloc(sizeof(char *), 1);\n\n\n\n    while (rval && (p = qemu_strsep(&input, \" \")) != NULL) {\n\n        if (!*p) {\n\n            continue;\n\n        }\n\n        c++;\n\n        rval = realloc(rval, sizeof(*rval) * (c + 1));\n\n        if (!rval) {\n\n            c = 0;\n\n            break;\n\n        }\n\n        rval[c - 1] = p;\n\n        rval[c] = NULL;\n\n    }\n\n    *count = c;\n\n    return rval;\n\n}\n",
        "output": "1",
        "idx": 6125
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void iowarrior_disconnect(struct usb_interface *interface)\n{\n\tstruct iowarrior *dev;\n\tint minor;\n\n\tdev = usb_get_intfdata(interface);\n\tmutex_lock(&iowarrior_open_disc_lock);\n\tusb_set_intfdata(interface, NULL);\n\n\tminor = dev->minor;\n\n\t/* give back our minor */\n\tusb_deregister_dev(interface, &iowarrior_class);\n\n\tmutex_lock(&dev->mutex);\n\n\t/* prevent device read, write and ioctl */\n\tdev->present = 0;\n\n\tmutex_unlock(&dev->mutex);\n\tmutex_unlock(&iowarrior_open_disc_lock);\n\n\tif (dev->opened) {\n\t\t/* There is a process that holds a filedescriptor to the device ,\n\t\t   so we only shutdown read-/write-ops going on.\n\t\t   Deleting the device is postponed until close() was called.\n\t\t */\n\t\tusb_kill_urb(dev->int_in_urb);\n\t\twake_up_interruptible(&dev->read_wait);\n\t\twake_up_interruptible(&dev->write_wait);\n\t} else {\n\t\t/* no process is using the device, cleanup now */\n\t\tiowarrior_delete(dev);\n\t}\n\n\tdev_info(&interface->dev, \"I/O-Warror #%d now disconnected\\n\",\n\t\t minor - IOWARRIOR_MINOR_BASE);\n}",
        "output": "1",
        "idx": 2876
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DEFUN(nextRD, NEXT_RIGHT_DOWN, \"Move right or downward to the next hyperlink\")\n{\n    nextX(1, 1);\n}",
        "output": "0",
        "idx": 4748
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void kvmppc_update_sdr1(target_ulong sdr1)\n\n{\n\n    CPUState *cs;\n\n\n\n    CPU_FOREACH(cs) {\n\n        run_on_cpu(cs, kvmppc_pivot_hpt_cpu, RUN_ON_CPU_TARGET_PTR(sdr1));\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4122
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_qemu_strtol_full_empty(void)\n\n{\n\n    const char *str = \"\";\n\n    long res = 999L;\n\n    int err;\n\n\n\n    err =  qemu_strtol(str, NULL, 0, &res);\n\n\n\n    g_assert_cmpint(err, ==, 0);\n\n    g_assert_cmpint(res, ==, 0);\n\n}\n",
        "output": "1",
        "idx": 2912
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int date_to_ISO8601 (time_t value, char *buf, int length) {\n   struct tm *tm, tmbuf;\n   tm = php_localtime_r(&value, &tmbuf);\n   if (!tm) {\n\t   return 0;\n   }\n#if 0  /* TODO: soap seems to favor this method. xmlrpc the latter. */\n\treturn strftime (buf, length, \"%Y-%m-%dT%H:%M:%SZ\", tm);\n#else\n   return strftime(buf, length, \"%Y%m%dT%H:%M:%S\", tm);\n#endif\n}",
        "output": "1",
        "idx": 4627
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  PbrMetallicRoughness()\n      : baseColorFactor(std::vector<double>{1.0, 1.0, 1.0, 1.0}),\n        metallicFactor(1.0),\n        roughnessFactor(1.0) {}",
        "output": "0",
        "idx": 594
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "size_t olm_pk_encryption_set_recipient_key (\n    OlmPkEncryption *encryption,\n    void const * key, size_t key_length\n) {\n    if (key_length < olm_pk_key_length()) {\n        encryption->last_error =\n            OlmErrorCode::OLM_INPUT_BUFFER_TOO_SMALL;\n        return std::size_t(-1);\n    }\n    olm::decode_base64(\n        (const uint8_t*)key,\n        olm_pk_key_length(),\n        (uint8_t *)encryption->recipient_key.public_key\n    );\n    return 0;\n}",
        "output": "1",
        "idx": 938
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  uint64_t append(const void* data, uint64_t size) {\n    uint64_t copy_size = std::min(size, reservableSize());\n    uint8_t* dest = base_ + reservable_;\n    reservable_ += copy_size;\n    // NOLINTNEXTLINE(clang-analyzer-core.NullDereference)\n    memcpy(dest, data, copy_size);\n    return copy_size;\n  }",
        "output": "1",
        "idx": 5709
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_Unpickler_MemoGet(UnpicklerObject *self, Py_ssize_t idx)\n{\n    if (idx < 0 || idx >= self->memo_size)\n        return NULL;\n\n    return self->memo[idx];\n}",
        "output": "1",
        "idx": 4950
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int daala_packet(AVFormatContext *s, int idx)\n\n{\n\n    int seg, duration = 1;\n\n    struct ogg *ogg = s->priv_data;\n\n    struct ogg_stream *os = ogg->streams + idx;\n\n\n\n    /*\n\n     * first packet handling: here we parse the duration of each packet in the\n\n     * first page and compare the total duration to the page granule to find the\n\n     * encoder delay and set the first timestamp\n\n     */\n\n\n\n    if ((!os->lastpts || os->lastpts == AV_NOPTS_VALUE) && !(os->flags & OGG_FLAG_EOS)) {\n\n        for (seg = os->segp; seg < os->nsegs; seg++)\n\n            if (os->segments[seg] < 255)\n\n                duration++;\n\n\n\n        os->lastpts = os->lastdts = daala_gptopts(s, idx, os->granule, NULL) - duration;\n\n        if(s->streams[idx]->start_time == AV_NOPTS_VALUE) {\n\n            s->streams[idx]->start_time = os->lastpts;\n\n            if (s->streams[idx]->duration)\n\n                s->streams[idx]->duration -= s->streams[idx]->start_time;\n\n        }\n\n    }\n\n\n\n    /* parse packet duration */\n\n    if (os->psize > 0)\n\n        os->pduration = 1;\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5105
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int devid_cmp(void *priv, struct list_head *a, struct list_head *b)\n{\n\tstruct btrfs_device *dev1, *dev2;\n\n\tdev1 = list_entry(a, struct btrfs_device, dev_list);\n\tdev2 = list_entry(b, struct btrfs_device, dev_list);\n\n\tif (dev1->devid < dev2->devid)\n\t\treturn -1;\n\telse if (dev1->devid > dev2->devid)\n\t\treturn 1;\n\treturn 0;\n}",
        "output": "0",
        "idx": 778
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vmdk_is_cid_valid(BlockDriverState *bs)\n\n{\n\n#ifdef CHECK_CID\n\n    BDRVVmdkState *s = bs->opaque;\n\n    BlockDriverState *p_bs = bs->backing_hd;\n\n    uint32_t cur_pcid;\n\n\n\n    if (p_bs) {\n\n        cur_pcid = vmdk_read_cid(p_bs, 0);\n\n        if (s->parent_cid != cur_pcid) {\n\n            /* CID not valid */\n\n            return 0;\n\n        }\n\n    }\n\n#endif\n\n    /* CID valid */\n\n    return 1;\n\n}\n",
        "output": "0",
        "idx": 36
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int MACH0_(get_bits)(struct MACH0_(obj_t) * bin) {\n\tif (bin) {\n\t\tint bits = MACH0_(get_bits_from_hdr)(&bin->hdr);\n\t\tif (bin->hdr.cputype == CPU_TYPE_ARM && bin->entry & 1) {\n\t\t\treturn 16;\n\t\t}\n\t\treturn bits;\n\t}\n\treturn 32;\n}",
        "output": "0",
        "idx": 1822
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint8_t fw_cfg_read(FWCfgState *s)\n\n{\n\n    int arch = !!(s->cur_entry & FW_CFG_ARCH_LOCAL);\n\n    FWCfgEntry *e = (s->cur_entry == FW_CFG_INVALID) ? NULL :\n\n                    &s->entries[arch][s->cur_entry & FW_CFG_ENTRY_MASK];\n\n    uint8_t ret;\n\n\n\n    if (s->cur_entry == FW_CFG_INVALID || !e->data || s->cur_offset >= e->len)\n\n        ret = 0;\n\n    else {\n\n        ret = e->data[s->cur_offset++];\n\n    }\n\n\n\n    trace_fw_cfg_read(s, ret);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 6135
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void assert_file_overwrite(const char *filename)\n\n{\n\n    if (file_overwrite && no_file_overwrite) {\n\n        fprintf(stderr, \"Error, both -y and -n supplied. Exiting.\\n\");\n\n        exit_program(1);\n\n    }\n\n\n\n    if (!file_overwrite &&\n\n        (strchr(filename, ':') == NULL || filename[1] == ':' ||\n\n         av_strstart(filename, \"file:\", NULL))) {\n\n        if (avio_check(filename, 0) == 0) {\n\n            if (stdin_interaction && !no_file_overwrite) {\n\n                fprintf(stderr,\"File '%s' already exists. Overwrite ? [y/N] \", filename);\n\n                fflush(stderr);\n\n                term_exit();\n\n                signal(SIGINT, SIG_DFL);\n\n                if (!read_yesno()) {\n\n                    av_log(NULL, AV_LOG_FATAL, \"Not overwriting - exiting\\n\");\n\n                    exit_program(1);\n\n                }\n\n                term_init();\n\n            }\n\n            else {\n\n                av_log(NULL, AV_LOG_FATAL, \"File '%s' already exists. Exiting.\\n\", filename);\n\n                exit_program(1);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 311
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "local int decode(struct state *s, struct huffman *h)\n{\n    int len;            /* current number of bits in code */\n    int code;           /* len bits being decoded */\n    int first;          /* first code of length len */\n    int count;          /* number of codes of length len */\n    int index;          /* index of first code of length len in symbol table */\n    int bitbuf;         /* bits from stream */\n    int left;           /* bits left in next or left to process */\n\t boost::int16_t *next;        /* next number of codes */\n\n    bitbuf = s->bitbuf;\n    left = s->bitcnt;\n    code = first = index = 0;\n    len = 1;\n    next = h->count + 1;\n    while (1) {\n        while (left--) {\n            code |= bitbuf & 1;\n            bitbuf >>= 1;\n            count = *next++;\n            if (code < first + count) { /* if length len, return symbol */\n                s->bitbuf = bitbuf;\n                s->bitcnt = (s->bitcnt - len) & 7;\n                return h->symbol[index + (code - first)];\n            }\n            index += count;             /* else update for next length */\n            first += count;\n            first <<= 1;\n            code <<= 1;\n            len++;\n        }\n        left = (MAXBITS+1) - len;\n        if (left == 0) break;\n        if (s->incnt == s->inlen) longjmp(s->env, 1);   /* out of input */\n        bitbuf = s->in[s->incnt++];\n        if (left > 8) left = 8;\n    }\n    return -9;                          /* ran out of codes */\n}",
        "output": "1",
        "idx": 707
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int addraw_l(struct nlmsghdr *n, int maxlen, const void *data, int len)\n{\n\tif (NLMSG_ALIGN(n->nlmsg_len) + NLMSG_ALIGN(len) > maxlen) {\n\t\tfprintf(stderr,\n\t\t\t\"addraw_l ERROR: message exceeded bound of %d\\n\",\n\t\t\tmaxlen);\n\t\treturn -1;\n\t}\n\n\tmemcpy(NLMSG_TAIL(n), data, len);\n\tmemset((void *) NLMSG_TAIL(n) + len, 0, NLMSG_ALIGN(len) - len);\n\tn->nlmsg_len = NLMSG_ALIGN(n->nlmsg_len) + NLMSG_ALIGN(len);\n\treturn 0;\n}",
        "output": "0",
        "idx": 411
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "z2restore(i_ctx_t *i_ctx_p)\n{\n    os_ptr op = osp;\n    check_type(*op, t_save);\n\n    while (gs_gstate_saved(gs_gstate_saved(igs))) {\n        if (restore_page_device(igs, gs_gstate_saved(igs)))\n            return push_callout(i_ctx_p, \"%restore1pagedevice\");\n        gs_grestore(igs);\n    }\n    if (restore_page_device(igs, gs_gstate_saved(igs)))\n        return push_callout(i_ctx_p, \"%restorepagedevice\");\n    return zrestore(i_ctx_p);\n}",
        "output": "1",
        "idx": 3563
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Value ExpressionMap::serialize(bool explain) const {\n    return Value(DOC(\"$map\" << DOC(\"input\" << _input->serialize(explain) << \"as\" << _varName << \"in\"\n                                           << _each->serialize(explain))));\n}",
        "output": "0",
        "idx": 320
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int addr6_resolve(struct sockaddr *src_sock,\n\t\t\t const struct sockaddr *dst_sock,\n\t\t\t struct rdma_dev_addr *addr,\n\t\t\t struct dst_entry **pdst)\n{\n\tstruct sockaddr_in6 *src_in = (struct sockaddr_in6 *)src_sock;\n\tconst struct sockaddr_in6 *dst_in =\n\t\t\t\t(const struct sockaddr_in6 *)dst_sock;\n\tstruct flowi6 fl6;\n\tstruct dst_entry *dst;\n\tint ret;\n\n\tmemset(&fl6, 0, sizeof fl6);\n\tfl6.daddr = dst_in->sin6_addr;\n\tfl6.saddr = src_in->sin6_addr;\n\tfl6.flowi6_oif = addr->bound_dev_if;\n\n\tret = ipv6_stub->ipv6_dst_lookup(addr->net, NULL, &dst, &fl6);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tif (ipv6_addr_any(&src_in->sin6_addr))\n\t\tsrc_in->sin6_addr = fl6.saddr;\n\n\taddr->hoplimit = ip6_dst_hoplimit(dst);\n\n\t*pdst = dst;\n\treturn 0;\n}",
        "output": "1",
        "idx": 3271
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qemu_tcg_init_vcpu(void *_env)\n\n{\n\n    CPUState *env = _env;\n\n    /* share a single thread for all cpus with TCG */\n\n    if (!tcg_cpu_thread) {\n\n        env->thread = qemu_mallocz(sizeof(QemuThread));\n\n        env->halt_cond = qemu_mallocz(sizeof(QemuCond));\n\n        qemu_cond_init(env->halt_cond);\n\n        qemu_thread_create(env->thread, qemu_tcg_cpu_thread_fn, env);\n\n        while (env->created == 0)\n\n            qemu_cond_timedwait(&qemu_cpu_cond, &qemu_global_mutex, 100);\n\n        tcg_cpu_thread = env->thread;\n\n        tcg_halt_cond = env->halt_cond;\n\n    } else {\n\n        env->thread = tcg_cpu_thread;\n\n        env->halt_cond = tcg_halt_cond;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1271
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sd_1d97_float(float *p, int i0, int i1)\n\n{\n\n    int i;\n\n\n\n    if (i1 <= i0 + 1) {\n\n        if (i0 == 1)\n\n            p[1] *= F_LFTG_X;\n\n        else\n\n            p[0] *= F_LFTG_K;\n\n        return;\n\n    }\n\n\n\n    extend97_float(p, i0, i1);\n\n    i0++; i1++;\n\n\n\n    for (i = i0/2 - 2; i < i1/2 + 1; i++)\n\n        p[2*i+1] -= 1.586134 * (p[2*i] + p[2*i+2]);\n\n    for (i = i0/2 - 1; i < i1/2 + 1; i++)\n\n        p[2*i] -= 0.052980 * (p[2*i-1] + p[2*i+1]);\n\n    for (i = i0/2 - 1; i < i1/2; i++)\n\n        p[2*i+1] += 0.882911 * (p[2*i] + p[2*i+2]);\n\n    for (i = i0/2; i < i1/2; i++)\n\n        p[2*i] += 0.443506 * (p[2*i-1] + p[2*i+1]);\n\n}\n",
        "output": "1",
        "idx": 1356
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void free_vfsmnt(struct mount *mnt)\n{\n\tkfree_const(mnt->mnt_devname);\n#ifdef CONFIG_SMP\n\tfree_percpu(mnt->mnt_pcp);\n#endif\n\tkmem_cache_free(mnt_cache, mnt);\n}",
        "output": "0",
        "idx": 3460
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "expand_dynamic_string_token (struct link_map *l, const char *s)\n{\n  /* We make two runs over the string.  First we determine how large the\n     resulting string is and then we copy it over.  Since this is now\n     frequently executed operation we are looking here not for performance\n     but rather for code size.  */\n  size_t cnt;\n  size_t total;\n  char *result;\n\n  /* Determine the nubmer of DST elements.  */\n  cnt = DL_DST_COUNT (s, 1);\n\n  /* If we do not have to replace anything simply copy the string.  */\n  if (cnt == 0)\n    return local_strdup (s);\n\n  /* Determine the length of the substituted string.  */\n  total = DL_DST_REQUIRED (l, s, strlen (s), cnt);\n\n  /* Allocate the necessary memory.  */\n  result = (char *) malloc (total + 1);\n  if (result == NULL)\n    return NULL;\n\n  return DL_DST_SUBSTITUTE (l, s, result, 1);\n}",
        "output": "1",
        "idx": 474
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ar6000_bitrate_rx(void *devt, s32 rateKbps)\n{\n    struct ar6_softc *ar = (struct ar6_softc *)devt;\n\n    ar->arBitRate = rateKbps;\n    wake_up(&arEvent);\n}",
        "output": "0",
        "idx": 164
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ipaddr_chain *new_ipaddr_chain(apr_pool_t *p,\n                                      server_rec *s, server_addr_rec *sar)\n{\n    ipaddr_chain *new;\n\n    new = apr_palloc(p, sizeof(*new));\n    new->names = NULL;\n    new->initialnames = NULL;\n    new->server = s;\n    new->sar = sar;\n    new->next = NULL;\n    return new;\n}",
        "output": "0",
        "idx": 1341
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(OptimizePipeline, MixedMatchPushedDown) {\n    auto unpack = fromjson(\n        \"{$_internalUnpackBucket: { exclude: [], timeField: 'time', metaField: 'myMeta', \"\n        \"bucketMaxSpanSeconds: 3600}}\");\n    auto pipeline = Pipeline::parse(\n        makeVector(unpack, fromjson(\"{$match: {myMeta: {$gte: 0, $lte: 5}, a: {$lte: 4}}}\")),\n        getExpCtx());\n    ASSERT_EQ(2u, pipeline->getSources().size());\n\n    pipeline->optimizePipeline();\n\n    // To get the optimized $match from the pipeline, we have to serialize with explain.\n    auto stages = pipeline->writeExplainOps(ExplainOptions::Verbosity::kQueryPlanner);\n    ASSERT_EQ(3u, stages.size());\n\n    // We should push down the $match on the metaField and the predicates on the control field.\n    // The created $match stages should be added before $_internalUnpackBucket and merged.\n    ASSERT_BSONOBJ_EQ(fromjson(\"{$match: {$and: [{'control.min.a': {$_internalExprLte: 4}}, {meta: \"\n                               \"{$gte: 0}}, {meta: {$lte: 5}}]}}\"),\n                      stages[0].getDocument().toBson());\n    ASSERT_BSONOBJ_EQ(unpack, stages[1].getDocument().toBson());\n    ASSERT_BSONOBJ_EQ(fromjson(\"{$match: {a: {$lte: 4}}}\"), stages[2].getDocument().toBson());\n}",
        "output": "1",
        "idx": 3818
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int allocate_buffers(ALACContext *alac)\n\n{\n\n    int ch;\n\n    int buf_size = alac->max_samples_per_frame * sizeof(int32_t);\n\n\n\n    for (ch = 0; ch < FFMIN(alac->channels, 2); ch++) {\n\n        FF_ALLOC_OR_GOTO(alac->avctx, alac->predict_error_buffer[ch],\n\n                         buf_size, buf_alloc_fail);\n\n\n\n        alac->direct_output = alac->sample_size > 16 && av_sample_fmt_is_planar(alac->avctx->sample_fmt);\n\n        if (!alac->direct_output) {\n\n            FF_ALLOC_OR_GOTO(alac->avctx, alac->output_samples_buffer[ch],\n\n                             buf_size, buf_alloc_fail);\n\n        }\n\n\n\n        FF_ALLOC_OR_GOTO(alac->avctx, alac->extra_bits_buffer[ch],\n\n                         buf_size, buf_alloc_fail);\n\n    }\n\n    return 0;\n\nbuf_alloc_fail:\n\n    alac_decode_close(alac->avctx);\n\n    return AVERROR(ENOMEM);\n\n}\n",
        "output": "1",
        "idx": 2001
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "may_record_change(\n    linenr_T\tlnum,\n    colnr_T\tcol,\n    linenr_T\tlnume,\n    long\txtra)\n{\n    dict_T\t*dict;\n\n    if (curbuf->b_listener == NULL)\n\treturn;\n\n    // If the new change is going to change the line numbers in already listed\n    // changes, then flush.\n    check_recorded_changes(curbuf, lnum, lnume, xtra);\n\n    if (curbuf->b_recorded_changes == NULL)\n    {\n\tcurbuf->b_recorded_changes = list_alloc();\n\tif (curbuf->b_recorded_changes == NULL)  // out of memory\n\t    return;\n\t++curbuf->b_recorded_changes->lv_refcount;\n\tcurbuf->b_recorded_changes->lv_lock = VAR_FIXED;\n    }\n\n    dict = dict_alloc();\n    if (dict == NULL)\n\treturn;\n    dict_add_number(dict, \"lnum\", (varnumber_T)lnum);\n    dict_add_number(dict, \"end\", (varnumber_T)lnume);\n    dict_add_number(dict, \"added\", (varnumber_T)xtra);\n    dict_add_number(dict, \"col\", (varnumber_T)col + 1);\n\n    list_append_dict(curbuf->b_recorded_changes, dict);\n}",
        "output": "0",
        "idx": 867
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int attr_char(char c) \n{\n    switch (c) {\n        case '!':\n        case '#':\n        case '$':\n        case '&':\n        case '+':\n        case '-':\n        case '.':\n        case '^':\n        case '_':\n        case '`':\n        case '|':\n        case '~':\n            return 1;\n        default:\n            return apr_isalnum(c);\n    }\n}",
        "output": "0",
        "idx": 17
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void bt_hci_lmp_acl_data(struct bt_hci_s *hci, uint16_t handle,\n\n                const uint8_t *data, int start, int len)\n\n{\n\n    struct hci_acl_hdr *pkt = (void *) hci->acl_buf;\n\n\n\n    /* TODO: packet flags */\n\n    /* TODO: avoid memcpy'ing */\n\n\n\n    if (len + HCI_ACL_HDR_SIZE > sizeof(hci->acl_buf)) {\n\n        fprintf(stderr, \"%s: can't take ACL packets %i bytes long\\n\",\n\n                        __FUNCTION__, len);\n\n        return;\n\n    }\n\n    memcpy(hci->acl_buf + HCI_ACL_HDR_SIZE, data, len);\n\n\n\n    pkt->handle = cpu_to_le16(\n\n                    acl_handle_pack(handle, start ? ACL_START : ACL_CONT));\n\n    pkt->dlen = cpu_to_le16(len);\n\n    hci->info.acl_recv(hci->info.opaque,\n\n                    hci->acl_buf, len + HCI_ACL_HDR_SIZE);\n\n}\n",
        "output": "0",
        "idx": 5729
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int create_ppc_opcodes (CPUPPCState *env, const ppc_def_t *def)\n\n{\n\n    opcode_t *opc, *start, *end;\n\n\n\n    fill_new_table(env->opcodes, 0x40);\n\n    if (&opc_start < &opc_end) {\n\n        start = &opc_start;\n\n        end = &opc_end;\n\n    } else {\n\n        start = &opc_end;\n\n        end = &opc_start;\n\n    }\n\n    for (opc = start + 1; opc != end; opc++) {\n\n        if ((opc->handler.type & def->insns_flags) != 0) {\n\n            if (register_insn(env->opcodes, opc) < 0) {\n\n                printf(\"*** ERROR initializing PowerPC instruction \"\n\n                       \"0x%02x 0x%02x 0x%02x\\n\", opc->opc1, opc->opc2,\n\n                       opc->opc3);\n\n                return -1;\n\n            }\n\n        }\n\n    }\n\n    fix_opcode_tables(env->opcodes);\n\n    fflush(stdout);\n\n    fflush(stderr);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 6143
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ogg_free(AVFormatContext *s)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < s->nb_streams; i++) {\n\n        AVStream *st = s->streams[i];\n\n        OGGStreamContext *oggstream = st->priv_data;\n\n\n\n        if (st->codecpar->codec_id == AV_CODEC_ID_FLAC ||\n\n            st->codecpar->codec_id == AV_CODEC_ID_SPEEX ||\n\n            st->codecpar->codec_id == AV_CODEC_ID_OPUS ||\n\n            st->codecpar->codec_id == AV_CODEC_ID_VP8) {\n\n            av_freep(&oggstream->header[0]);\n\n        }\n\n        av_freep(&oggstream->header[1]);\n\n        av_freep(&st->priv_data);\n\n    }\n\n}",
        "output": "1",
        "idx": 1617
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QString RemoteFsDevice::settingsFileName() const\n{\n    if (audioFolder.isEmpty()) {\n        setAudioFolder();\n    }\n    return audioFolder+constCantataSettingsFile;\n}",
        "output": "0",
        "idx": 838
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "num_stmts(const node *n)\n{\n    int i, l;\n    node *ch;\n\n    switch (TYPE(n)) {\n        case single_input:\n            if (TYPE(CHILD(n, 0)) == NEWLINE)\n                return 0;\n            else\n                return num_stmts(CHILD(n, 0));\n        case file_input:\n            l = 0;\n            for (i = 0; i < NCH(n); i++) {\n                ch = CHILD(n, i);\n                if (TYPE(ch) == stmt)\n                    l += num_stmts(ch);\n            }\n            return l;\n        case stmt:\n            return num_stmts(CHILD(n, 0));\n        case compound_stmt:\n            return 1;\n        case simple_stmt:\n            return NCH(n) / 2; /* Divide by 2 to remove count of semi-colons */\n        case suite:\n            if (NCH(n) == 1)\n                return num_stmts(CHILD(n, 0));\n            else {\n                l = 0;\n                for (i = 2; i < (NCH(n) - 1); i++)\n                    l += num_stmts(CHILD(n, i));\n                return l;\n            }\n        default: {\n            char buf[128];\n\n            sprintf(buf, \"Non-statement found: %d %d\",\n                    TYPE(n), NCH(n));\n            Py_FatalError(buf);\n        }\n    }\n    Py_UNREACHABLE();\n}",
        "output": "1",
        "idx": 3622
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_P(RBACIntegrationTest, PathWithQueryAndFragment) {\n  config_helper_.addFilter(RBAC_CONFIG_WITH_PATH_EXACT_MATCH);\n  initialize();\n\n  codec_client_ = makeHttpConnection(lookupPort(\"http\"));\n\n  const std::vector<std::string> paths{\"/allow\", \"/allow?p1=v1&p2=v2\", \"/allow?p1=v1#seg\"};\n\n  for (const auto& path : paths) {\n    auto response = codec_client_->makeRequestWithBody(\n        Http::TestRequestHeaderMapImpl{\n            {\":method\", \"POST\"},\n            {\":path\", path},\n            {\":scheme\", \"http\"},\n            {\":authority\", \"host\"},\n            {\"x-forwarded-for\", \"10.0.0.1\"},\n        },\n        1024);\n    waitForNextUpstreamRequest();\n    upstream_request_->encodeHeaders(Http::TestResponseHeaderMapImpl{{\":status\", \"200\"}}, true);\n\n    response->waitForEndStream();\n    ASSERT_TRUE(response->complete());\n    EXPECT_EQ(\"200\", response->headers().getStatusValue());\n  }\n}",
        "output": "0",
        "idx": 1579
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gerbv_gdk_draw_circle(GdkPixmap *pixmap, GdkGC *gc, \n\t\t  gint filled, gint x, gint y, gint dia)\n{\n    static const gint full_circle = 23360;\n    gint real_x = x - dia / 2;\n    gint real_y = y - dia / 2;\n    \n    gdk_draw_arc(pixmap, gc, filled, real_x, real_y, dia, dia, 0, full_circle);\n    \n    return;\n} /* gerbv_gdk_draw_circle */",
        "output": "0",
        "idx": 4108
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fw_cfg_realize(DeviceState *dev, Error **errp)\n\n{\n\n    FWCfgState *s = FW_CFG(dev);\n\n    SysBusDevice *sbd = SYS_BUS_DEVICE(dev);\n\n\n\n    if (s->ctl_iobase + 1 == s->data_iobase) {\n\n        sysbus_add_io(sbd, s->ctl_iobase, &s->comb_iomem);\n\n    } else {\n\n        if (s->ctl_iobase) {\n\n            sysbus_add_io(sbd, s->ctl_iobase, &s->ctl_iomem);\n\n        }\n\n        if (s->data_iobase) {\n\n            sysbus_add_io(sbd, s->data_iobase, &s->data_iomem);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3194
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  bool has_int_value() const\n  {\n    return state == SHORT_DATA_VALUE &&\n           value.type_handler()->cmp_type() == INT_RESULT;\n  }",
        "output": "0",
        "idx": 5760
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sctp_setsockopt_auth_key(struct sock *sk,\n\t\t\t\t    char __user *optval,\n\t\t\t\t    int optlen)\n{\n\tstruct sctp_authkey *authkey;\n\tstruct sctp_association *asoc;\n\tint ret;\n\n\tif (!sctp_auth_enable)\n\t\treturn -EACCES;\n\n\tif (optlen <= sizeof(struct sctp_authkey))\n\t\treturn -EINVAL;\n\n\tauthkey = kmalloc(optlen, GFP_KERNEL);\n\tif (!authkey)\n\t\treturn -ENOMEM;\n\n\tif (copy_from_user(authkey, optval, optlen)) {\n\t\tret = -EFAULT;\n\t\tgoto out;\n\t}\n\n\tasoc = sctp_id2assoc(sk, authkey->sca_assoc_id);\n\tif (!asoc && authkey->sca_assoc_id && sctp_style(sk, UDP)) {\n\t\tret = -EINVAL;\n\t\tgoto out;\n\t}\n\n\tret = sctp_auth_set_key(sctp_sk(sk)->ep, asoc, authkey);\nout:\n\tkfree(authkey);\n\treturn ret;\n}",
        "output": "1",
        "idx": 5556
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int emulate_grp1a(struct x86_emulate_ctxt *ctxt,\n\t\t\t\tstruct x86_emulate_ops *ops)\n{\n\tstruct decode_cache *c = &ctxt->decode;\n\tint rc;\n\n\trc = emulate_pop(ctxt, ops, &c->dst.val, c->dst.bytes);\n\tif (rc != 0)\n\t\treturn rc;\n\treturn 0;\n}",
        "output": "0",
        "idx": 2285
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_pci_exit(PCIDevice *pci_dev)\n\n{\n\n    VirtIOPCIProxy *proxy = VIRTIO_PCI(pci_dev);\n\n    virtio_pci_stop_ioeventfd(proxy);\n\n    memory_region_destroy(&proxy->bar);\n\n    msix_uninit_exclusive_bar(pci_dev);\n\n}\n",
        "output": "1",
        "idx": 3303
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qmp_input_start_struct(Visitor *v, const char *name, void **obj,\n\n                                   size_t size, Error **errp)\n\n{\n\n    QmpInputVisitor *qiv = to_qiv(v);\n\n    QObject *qobj = qmp_input_get_object(qiv, name, true);\n\n    Error *err = NULL;\n\n\n\n\n\n\n    if (!qobj || qobject_type(qobj) != QTYPE_QDICT) {\n\n        error_setg(errp, QERR_INVALID_PARAMETER_TYPE, name ? name : \"null\",\n\n                   \"QDict\");\n\n        return;\n\n\n\n\n    qmp_input_push(qiv, qobj, &err);\n\n    if (err) {\n\n        error_propagate(errp, err);\n\n        return;\n\n\n\n\n\n        *obj = g_malloc0(size);\n\n",
        "output": "1",
        "idx": 2237
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pl041_device_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    SysBusDeviceClass *k = SYS_BUS_DEVICE_CLASS(klass);\n\n\n\n    k->init = pl041_init;\n\n    set_bit(DEVICE_CATEGORY_SOUND, dc->categories);\n\n    dc->no_user = 1;\n\n    dc->reset = pl041_device_reset;\n\n    dc->vmsd = &vmstate_pl041;\n\n    dc->props = pl041_device_properties;\n\n}\n",
        "output": "1",
        "idx": 4835
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int aspeed_lpc_ctrl_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tstruct aspeed_lpc_ctrl *lpc_ctrl = file_aspeed_lpc_ctrl(file);\n\tunsigned long vsize = vma->vm_end - vma->vm_start;\n\tpgprot_t prot = vma->vm_page_prot;\n\n\tif (vma->vm_pgoff + vsize > lpc_ctrl->mem_base + lpc_ctrl->mem_size)\n\t\treturn -EINVAL;\n\n\t/* ast2400/2500 AHB accesses are not cache coherent */\n\tprot = pgprot_noncached(prot);\n\n\tif (remap_pfn_range(vma, vma->vm_start,\n\t\t(lpc_ctrl->mem_base >> PAGE_SHIFT) + vma->vm_pgoff,\n\t\tvsize, prot))\n\t\treturn -EAGAIN;\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 1576
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlDictCreateSub(xmlDictPtr sub) {\n    xmlDictPtr dict = xmlDictCreate();\n\n    if ((dict != NULL) && (sub != NULL)) {\n#ifdef DICT_DEBUG_PATTERNS\n        fprintf(stderr, \"R\");\n#endif\n        dict->subdict = sub;\n\txmlDictReference(dict->subdict);\n    }\n    return(dict);\n}",
        "output": "1",
        "idx": 712
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(HttpConnectionManagerConfigTest, ServerOverwrite) {\n  const std::string yaml_string = R\"EOF(\n  stat_prefix: ingress_http\n  server_header_transformation: OVERWRITE\n  route_config:\n    name: local_route\n  http_filters:\n  - name: envoy.filters.http.router\n  )EOF\";\n\n  EXPECT_CALL(context_.runtime_loader_.snapshot_, featureEnabled(_, An<uint64_t>()))\n      .WillOnce(Invoke(&context_.runtime_loader_.snapshot_,\n                       &Runtime::MockSnapshot::featureEnabledDefault));\n  HttpConnectionManagerConfig config(parseHttpConnectionManagerFromYaml(yaml_string), context_,\n                                     date_provider_, route_config_provider_manager_,\n                                     scoped_routes_config_provider_manager_, http_tracer_manager_,\n                                     filter_config_provider_manager_);\n  EXPECT_EQ(HttpConnectionManagerConfig::HttpConnectionManagerProto::OVERWRITE,\n            config.serverHeaderTransformation());\n}",
        "output": "1",
        "idx": 5322
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int hci_conn_check_link_mode(struct hci_conn *conn)\n{\n\tBT_DBG(\"hcon %p\", conn);\n\n\t/* In Secure Connections Only mode, it is required that Secure\n\t * Connections is used and the link is encrypted with AES-CCM\n\t * using a P-256 authenticated combination key.\n\t */\n\tif (hci_dev_test_flag(conn->hdev, HCI_SC_ONLY)) {\n\t\tif (!hci_conn_sc_enabled(conn) ||\n\t\t    !test_bit(HCI_CONN_AES_CCM, &conn->flags) ||\n\t\t    conn->key_type != HCI_LK_AUTH_COMBINATION_P256)\n\t\t\treturn 0;\n\t}\n\n\tif (hci_conn_ssp_enabled(conn) &&\n\t    !test_bit(HCI_CONN_ENCRYPT, &conn->flags))\n\t\treturn 0;\n\n\t/* The minimum encryption key size needs to be enforced by the\n\t * host stack before establishing any L2CAP connections. The\n\t * specification in theory allows a minimum of 1, but to align\n\t * BR/EDR and LE transports, a minimum of 7 is chosen.\n\t */\n\tif (conn->enc_key_size < HCI_MIN_ENC_KEY_SIZE)\n\t\treturn 0;\n\n\treturn 1;\n}",
        "output": "1",
        "idx": 5181
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(DirectoryIterator, rewind)\n{\n\tspl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC);\n\t\n\tif (zend_parse_parameters_none() == FAILURE) {\n\t\treturn;\n\t}\n\n\tintern->u.dir.index = 0;\n\tif (intern->u.dir.dirp) {\n\t\tphp_stream_rewinddir(intern->u.dir.dirp);\n\t}\n\tspl_filesystem_dir_read(intern TSRMLS_CC);\n}",
        "output": "1",
        "idx": 83
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    ~Mounter() { }",
        "output": "1",
        "idx": 3382
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void user_destroy(struct key *key)\n{\n\tstruct user_key_payload *upayload = key->payload.data[0];\n\n\tkfree(upayload);\n}",
        "output": "0",
        "idx": 624
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "new_type_comment(const char *s, struct compiling *c)\n{\n    PyObject *res = PyUnicode_DecodeUTF8(s, strlen(s), NULL);\n    if (res == NULL)\n        return NULL;\n    if (PyArena_AddPyObject(c->c_arena, res) < 0) {\n        Py_DECREF(res);\n        return NULL;\n    }\n    return res;\n}",
        "output": "0",
        "idx": 1581
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t HELPER(get_cp_reg)(CPUARMState *env, void *rip)\n\n{\n\n    const ARMCPRegInfo *ri = rip;\n\n\n\n    return ri->readfn(env, ri);\n\n}\n",
        "output": "1",
        "idx": 3180
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void task_tick_numa(struct rq *rq, struct task_struct *curr)\n{\n\tstruct callback_head *work = &curr->numa_work;\n\tu64 period, now;\n\n\t/*\n\t * We don't care about NUMA placement if we don't have memory.\n\t */\n\tif (!curr->mm || (curr->flags & PF_EXITING) || work->next != work)\n\t\treturn;\n\n\t/*\n\t * Using runtime rather than walltime has the dual advantage that\n\t * we (mostly) drive the selection from busy threads and that the\n\t * task needs to have done some actual work before we bother with\n\t * NUMA placement.\n\t */\n\tnow = curr->se.sum_exec_runtime;\n\tperiod = (u64)curr->numa_scan_period * NSEC_PER_MSEC;\n\n\tif (now > curr->node_stamp + period) {\n\t\tif (!curr->node_stamp)\n\t\t\tcurr->numa_scan_period = task_scan_start(curr);\n\t\tcurr->node_stamp += period;\n\n\t\tif (!time_before(jiffies, curr->mm->numa_next_scan)) {\n\t\t\tinit_task_work(work, task_numa_work); /* TODO: move this into sched_fork() */\n\t\t\ttask_work_add(curr, work, true);\n\t\t}\n\t}\n}",
        "output": "0",
        "idx": 5015
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const opaque* ServerHello::get_random() const\n{\n    return random_;\n}",
        "output": "0",
        "idx": 1802
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PCIBus *pci_find_bus(PCIBus *bus, int bus_num)\n\n{\n\n    PCIBus *sec;\n\n\n\n    if (!bus)\n\n        return NULL;\n\n\n\n    if (pci_bus_num(bus) == bus_num) {\n\n        return bus;\n\n    }\n\n\n\n    /* try child bus */\n\n    QLIST_FOREACH(sec, &bus->child, sibling) {\n\n\n\n        if (!bus->parent_dev /* pci host bridge */\n\n            || (pci_bus_num(sec) <= bus_num &&\n\n                bus->parent_dev->config[PCI_SUBORDINATE_BUS])) {\n\n            return pci_find_bus(sec, bus_num);\n\n        }\n\n    }\n\n\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 3814
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int blah (int32_t i)\n\n{\n\n    if (i > 0x43c07fff)\n\n        return 32767;\n\n    else if (i < 0x43bf8000)\n\n        return -32768;\n\n    else\n\n        return i - 0x43c00000;\n\n}\n",
        "output": "0",
        "idx": 2488
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int p54u_load_firmware(struct ieee80211_hw *dev,\n\t\t\t      struct usb_interface *intf)\n{\n\tstruct usb_device *udev = interface_to_usbdev(intf);\n\tstruct p54u_priv *priv = dev->priv;\n\tstruct device *device = &udev->dev;\n\tint err, i;\n\n\tBUILD_BUG_ON(ARRAY_SIZE(p54u_fwlist) != __NUM_P54U_HWTYPES);\n\n\tinit_completion(&priv->fw_wait_load);\n\ti = p54_find_type(priv);\n\tif (i < 0)\n\t\treturn i;\n\n\tdev_info(&priv->udev->dev, \"Loading firmware file %s\\n\",\n\t       p54u_fwlist[i].fw);\n\n\tusb_get_dev(udev);\n\terr = request_firmware_nowait(THIS_MODULE, 1, p54u_fwlist[i].fw,\n\t\t\t\t      device, GFP_KERNEL, priv,\n\t\t\t\t      p54u_load_firmware_cb);\n\tif (err) {\n\t\tdev_err(&priv->udev->dev, \"(p54usb) cannot load firmware %s \"\n\t\t\t\t\t  \"(%d)!\\n\", p54u_fwlist[i].fw, err);\n\t\tusb_put_dev(udev);\n\t}\n\n\treturn err;\n}",
        "output": "1",
        "idx": 2404
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sdp_probe(AVProbeData *p1)\n\n{\n\n    const char *p = p1->buf, *p_end = p1->buf + p1->buf_size;\n\n\n\n    /* we look for a line beginning \"c=IN IP4\" */\n\n    while (p < p_end && *p != '\\0') {\n\n        if (p + sizeof(\"c=IN IP4\") - 1 < p_end && av_strstart(p, \"c=IN IP4\", NULL))\n\n            return AVPROBE_SCORE_MAX / 2;\n\n\n\n        while(p < p_end - 1 && *p != '\\n') p++;\n\n        if (++p >= p_end)\n\n            break;\n\n        if (*p == '\\r')\n\n            p++;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3698
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool LEX::stmt_create_stored_function_finalize_standalone(const sp_name *end_name)\n{\n  if (sphead->check_standalone_routine_end_name(end_name))\n    return true;\n  stmt_create_routine_finalize();\n  return false;\n}",
        "output": "0",
        "idx": 5734
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct strbufinfo setTempString(void)\n{\n\tstruct strbufinfo current;\n\tcurrent.size=strsize;\n\tcurrent.maxsize=strmaxsize;\n\tcurrent.str=dcstr;\n\tcurrent.ptr=dcptr;\n\tdcinit();\n\treturn current;\n}",
        "output": "0",
        "idx": 5968
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t mipsnet_receive(NetClientState *nc, const uint8_t *buf, size_t size)\n\n{\n\n    MIPSnetState *s = qemu_get_nic_opaque(nc);\n\n\n\n    trace_mipsnet_receive(size);\n\n    if (!mipsnet_can_receive(nc))\n\n\n\n\n\n\n\n    s->busy = 1;\n\n\n\n    /* Just accept everything. */\n\n\n\n    /* Write packet data. */\n\n    memcpy(s->rx_buffer, buf, size);\n\n\n\n    s->rx_count = size;\n\n    s->rx_read = 0;\n\n\n\n    /* Now we can signal we have received something. */\n\n    s->intctl |= MIPSNET_INTCTL_RXDONE;\n\n    mipsnet_update_irq(s);\n\n\n\n    return size;\n",
        "output": "1",
        "idx": 2361
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nbd_co_readv(BlockDriverState *bs, int64_t sector_num,\n\n                        int nb_sectors, QEMUIOVector *qiov)\n\n{\n\n    BDRVNBDState *s = bs->opaque;\n\n\n\n    return nbd_client_session_co_readv(&s->client, sector_num,\n\n                                       nb_sectors, qiov);\n\n}\n",
        "output": "0",
        "idx": 5521
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_qemu_strtoull_max(void)\n\n{\n\n    char *str = g_strdup_printf(\"%llu\", ULLONG_MAX);\n\n    char f = 'X';\n\n    const char *endptr = &f;\n\n    uint64_t res = 999;\n\n    int err;\n\n\n\n    err = qemu_strtoull(str, &endptr, 0, &res);\n\n\n\n    g_assert_cmpint(err, ==, 0);\n\n    g_assert_cmpint(res, ==, ULLONG_MAX);\n\n    g_assert(endptr == str + strlen(str));\n\n    g_free(str);\n\n}\n",
        "output": "0",
        "idx": 2807
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_co_rwlock_unlock(CoRwlock *lock)\n\n{\n\n    assert(qemu_in_coroutine());\n\n    if (lock->writer) {\n\n        lock->writer = false;\n\n        while (!qemu_co_queue_empty(&lock->queue)) {\n\n            /*\n\n             * Wakeup every body. This will include some\n\n             * writers too.\n\n             */\n\n            qemu_co_queue_next(&lock->queue);\n\n        }\n\n    } else {\n\n        lock->reader--;\n\n        assert(lock->reader >= 0);\n\n        /* Wakeup only one waiting writer */\n\n        if (!lock->reader) {\n\n            qemu_co_queue_next(&lock->queue);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 226
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int scale_vector(int16_t *dst, const int16_t *vector, int length)\n\n{\n\n    int bits, max = 0;\n\n    int i;\n\n\n\n    for (i = 0; i < length; i++)\n\n        max |= FFABS(vector[i]);\n\n\n\n    bits  = normalize_bits(max, 15);\n\n\n\n    if (bits == 15)\n\n        for (i = 0; i < length; i++)\n\n            dst[i] = vector[i] * 0x7fff >> 3;\n\n    else\n\n        for (i = 0; i < length; i++)\n\n            dst[i] = vector[i] << bits >> 3;\n\n\n\n    return bits - 3;\n\n}\n",
        "output": "1",
        "idx": 1842
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int dx2_decode_slice_410(GetBitContext *gb, AVFrame *frame,\n\n                                int line, int left,\n\n                                uint8_t lru[3][8])\n\n{\n\n    int x, y, i, j;\n\n    int width   = frame->width;\n\n\n\n    int ystride = frame->linesize[0];\n\n    int ustride = frame->linesize[1];\n\n    int vstride = frame->linesize[2];\n\n\n\n    uint8_t *Y  = frame->data[0] + ystride * line;\n\n    uint8_t *U  = frame->data[1] + (ustride >> 2) * line;\n\n    uint8_t *V  = frame->data[2] + (vstride >> 2) * line;\n\n\n\n    for (y = 0; y < left - 3 && get_bits_left(gb) > 16; y += 4) {\n\n        for (x = 0; x < width; x += 4) {\n\n            for (j = 0; j < 4; j++)\n\n                for (i = 0; i < 4; i++)\n\n                    Y[x + i + j * ystride] = decode_sym(gb, lru[0]);\n\n            U[x >> 2] = decode_sym(gb, lru[1]) ^ 0x80;\n\n            V[x >> 2] = decode_sym(gb, lru[2]) ^ 0x80;\n\n        }\n\n\n\n        Y += ystride << 2;\n\n        U += ustride;\n\n        V += vstride;\n\n    }\n\n\n\n    return y;\n\n}\n",
        "output": "1",
        "idx": 661
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vmci_transport_send_negotiate2(struct sock *sk, size_t size,\n\t\t\t\t\t  u16 version)\n{\n\treturn vmci_transport_send_control_pkt(\n\t\t\t\t\tsk,\n\t\t\t\t\tVMCI_TRANSPORT_PACKET_TYPE_NEGOTIATE2,\n\t\t\t\t\tsize, 0, NULL, version,\n\t\t\t\t\tVMCI_INVALID_HANDLE);\n}",
        "output": "0",
        "idx": 2299
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vm_completion(ReadLineState *rs, const char *str)\n\n{\n\n    size_t len;\n\n    BlockDriverState *bs;\n\n    BdrvNextIterator *it = NULL;\n\n\n\n    len = strlen(str);\n\n    readline_set_completion_index(rs, len);\n\n\n\n    while ((it = bdrv_next(it, &bs))) {\n\n        SnapshotInfoList *snapshots, *snapshot;\n\n        AioContext *ctx = bdrv_get_aio_context(bs);\n\n        bool ok = false;\n\n\n\n        aio_context_acquire(ctx);\n\n        if (bdrv_can_snapshot(bs)) {\n\n            ok = bdrv_query_snapshot_info_list(bs, &snapshots, NULL) == 0;\n\n        }\n\n        aio_context_release(ctx);\n\n        if (!ok) {\n\n            continue;\n\n        }\n\n\n\n        snapshot = snapshots;\n\n        while (snapshot) {\n\n            char *completion = snapshot->value->name;\n\n            if (!strncmp(str, completion, len)) {\n\n                readline_add_completion(rs, completion);\n\n            }\n\n            completion = snapshot->value->id;\n\n            if (!strncmp(str, completion, len)) {\n\n                readline_add_completion(rs, completion);\n\n            }\n\n            snapshot = snapshot->next;\n\n        }\n\n        qapi_free_SnapshotInfoList(snapshots);\n\n    }\n\n\n\n}\n",
        "output": "1",
        "idx": 2810
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void debugmem_list_delete(MEMHDR *p)\n{\n     if (p->mh_next)\n     p->mh_next->mh_prev = p->mh_prev;\n     if (p->mh_prev)\n     p->mh_prev->mh_next = p->mh_next;\n     else memlist = p->mh_next;\n#ifdef MEM_LIST_DEBUG\n     if (stderr)\n     Mem_Display(stderr);\n#endif\n}",
        "output": "0",
        "idx": 5883
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool imap_is_valid_tag(const char *tag)\n{\n\tfor (; *tag != '\\0'; tag++) {\n\t\tswitch (*tag) {\n\t\tcase '+':\n\t\t/* atom-specials: */\n\t\tcase '(':\n\t\tcase ')':\n\t\tcase '{':\n\t\tcase '/':\n\t\tcase ' ':\n\t\t/* list-wildcards: */\n\t\tcase '%':\n\t\tcase '*':\n\t\t/* quoted-specials: */\n\t\tcase '\"':\n\t\tcase '\\\\':\n\t\t\treturn FALSE;\n\t\tdefault:\n\t\t\tif (*tag < ' ') /* CTL */\n\t\t\t\treturn FALSE;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn TRUE;\n}",
        "output": "0",
        "idx": 173
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_iovec_destroy(QEMUIOVector *qiov)\n\n{\n\n    assert(qiov->nalloc != -1);\n\n\n\n\n    g_free(qiov->iov);\n\n\n\n}",
        "output": "1",
        "idx": 4907
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "send_environment_variable (const char             *key,\n                           const char             *value,\n                           GdmSessionConversation *conversation)\n{\n        gdm_dbus_worker_call_set_environment_variable (conversation->worker_proxy,\n                                                       key, value,\n                                                       NULL, NULL, NULL);\n}",
        "output": "1",
        "idx": 5041
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void youngcollection (lua_State *L, global_State *g) {\n  GCObject **psurvival;  /* to point to first non-dead survival object */\n  lua_assert(g->gcstate == GCSpropagate);\n  markold(g, g->survival, g->reallyold);\n  markold(g, g->finobj, g->finobjrold);\n  atomic(L);\n\n  /* sweep nursery and get a pointer to its last live element */\n  psurvival = sweepgen(L, g, &g->allgc, g->survival);\n  /* sweep 'survival' and 'old' */\n  sweepgen(L, g, psurvival, g->reallyold);\n  g->reallyold = g->old;\n  g->old = *psurvival;  /* 'survival' survivals are old now */\n  g->survival = g->allgc;  /* all news are survivals */\n\n  /* repeat for 'finobj' lists */\n  psurvival = sweepgen(L, g, &g->finobj, g->finobjsur);\n  /* sweep 'survival' and 'old' */\n  sweepgen(L, g, psurvival, g->finobjrold);\n  g->finobjrold = g->finobjold;\n  g->finobjold = *psurvival;  /* 'survival' survivals are old now */\n  g->finobjsur = g->finobj;  /* all news are survivals */\n\n  sweepgen(L, g, &g->tobefnz, NULL);\n\n  finishgencycle(L, g);\n}",
        "output": "1",
        "idx": 5448
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vmstate_subsection_save(QEMUFile *f, const VMStateDescription *vmsd,\n\n                                    void *opaque)\n\n{\n\n    const VMStateSubsection *sub = vmsd->subsections;\n\n\n\n    while (sub && sub->needed) {\n\n        if (sub->needed(opaque)) {\n\n            const VMStateDescription *vmsd = sub->vmsd;\n\n            uint8_t len;\n\n\n\n            qemu_put_byte(f, QEMU_VM_SUBSECTION);\n\n            len = strlen(vmsd->name);\n\n            qemu_put_byte(f, len);\n\n            qemu_put_buffer(f, (uint8_t *)vmsd->name, len);\n\n            qemu_put_be32(f, vmsd->version_id);\n\n            assert(!vmsd->subsections);\n\n            vmstate_save_state(f, vmsd, opaque);\n\n        }\n\n        sub++;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4359
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void psi_poll_work(struct psi_group *group)\n{\n\tu32 changed_states;\n\tu64 now;\n\n\tmutex_lock(&group->trigger_lock);\n\n\tnow = sched_clock();\n\n\tcollect_percpu_times(group, PSI_POLL, &changed_states);\n\n\tif (changed_states & group->poll_states) {\n\t\t/* Initialize trigger windows when entering polling mode */\n\t\tif (now > group->polling_until)\n\t\t\tinit_triggers(group, now);\n\n\t\t/*\n\t\t * Keep the monitor active for at least the duration of the\n\t\t * minimum tracking window as long as monitor states are\n\t\t * changing.\n\t\t */\n\t\tgroup->polling_until = now +\n\t\t\tgroup->poll_min_period * UPDATES_PER_WINDOW;\n\t}\n\n\tif (now > group->polling_until) {\n\t\tgroup->polling_next_update = ULLONG_MAX;\n\t\tgoto out;\n\t}\n\n\tif (now >= group->polling_next_update)\n\t\tgroup->polling_next_update = update_triggers(group, now);\n\n\tpsi_schedule_poll_work(group,\n\t\tnsecs_to_jiffies(group->polling_next_update - now) + 1);\n\nout:\n\tmutex_unlock(&group->trigger_lock);\n}",
        "output": "0",
        "idx": 4799
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void spl_filesystem_info_set_filename(spl_filesystem_object *intern, char *path, int len, int use_copy TSRMLS_DC) /* {{{ */\n{\n\tchar *p1, *p2;\n\t\n\tif (intern->file_name) {\n\t\tefree(intern->file_name);\n\t}\n\n\tintern->file_name = use_copy ? estrndup(path, len) : path;\n\tintern->file_name_len = len;\n\n\twhile(IS_SLASH_AT(intern->file_name, intern->file_name_len-1) && intern->file_name_len > 1) {\n\t\tintern->file_name[intern->file_name_len-1] = 0;\n\t\tintern->file_name_len--;\n\t}\n\n\tp1 = strrchr(intern->file_name, '/');\n#if defined(PHP_WIN32) || defined(NETWARE)\n\tp2 = strrchr(intern->file_name, '\\\\');\n#else\n\tp2 = 0;\n#endif\n\tif (p1 || p2) {\n\t\tintern->_path_len = (p1 > p2 ? p1 : p2) - intern->file_name;\n\t} else {\n\t\tintern->_path_len = 0;\n\t}\n\t\n\tif (intern->_path) {\n\t\tefree(intern->_path);\n\t}\n\tintern->_path = estrndup(path, intern->_path_len);\n} /* }}} */",
        "output": "1",
        "idx": 2928
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compileFile (const char *fileName)\n{\n/*Compile a table file */\n  FileInfo nested;\n  fileCount++;\n  nested.fileName = fileName;\n  nested.encoding = noEncoding;\n  nested.status = 0;\n  nested.lineNumber = 0;\n  if ((nested.in = findTable (fileName)))\n    {\n      while (getALine (&nested))\n\tcompileRule (&nested);\n      fclose (nested.in);\n    }\n  else\n    {\n      if (fileCount > 1)\n\tlou_logPrint (\"Cannot open table '%s'\", nested.fileName);\n      errorCount++;\n      return 0;\n    }\n  return 1;\n}",
        "output": "1",
        "idx": 3350
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int read_filesystem_tables_4()\n{\n\tlong long directory_table_end, table_start;\n\n\tif(read_xattrs_from_disk(fd, &sBlk.s, no_xattrs, &table_start) == 0)\n\t\treturn FALSE;\n\n\tif(read_uids_guids(&table_start) == FALSE)\n\t\treturn FALSE;\n\n\tif(parse_exports_table(&table_start) == FALSE)\n\t\treturn FALSE;\n\n\tif(read_fragment_table(&directory_table_end) == FALSE)\n\t\treturn FALSE;\n\n\tif(read_inode_table(sBlk.s.inode_table_start,\n\t\t\t\tsBlk.s.directory_table_start) == FALSE)\n\t\treturn FALSE;\n\n\tif(read_directory_table(sBlk.s.directory_table_start,\n\t\t\t\tdirectory_table_end) == FALSE)\n\t\treturn FALSE;\n\n\tif(no_xattrs)\n\t\tsBlk.s.xattr_id_table_start = SQUASHFS_INVALID_BLK;\n\n\treturn TRUE;\n}",
        "output": "1",
        "idx": 5440
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void memory_region_transaction_commit(void)\n{\n    AddressSpace *as;\n    assert(memory_region_transaction_depth);\n    --memory_region_transaction_depth;\n    if (!memory_region_transaction_depth) {\n        if (memory_region_update_pending) {\n            MEMORY_LISTENER_CALL_GLOBAL(begin, Forward);\n            QTAILQ_FOREACH(as, &address_spaces, address_spaces_link) {\n                address_space_update_topology(as);\n            }\n            MEMORY_LISTENER_CALL_GLOBAL(commit, Forward);\n        } else if (ioeventfd_update_pending) {\n            QTAILQ_FOREACH(as, &address_spaces, address_spaces_link) {\n                address_space_update_ioeventfds(as);\n            }\n        }\n        memory_region_clear_pending();\n   }\n}",
        "output": "1",
        "idx": 1504
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "eval_next_non_blank(char_u *arg, evalarg_T *evalarg, int *getnext)\n{\n    char_u *p = skipwhite(arg);\n\n    *getnext = FALSE;\n    if (in_vim9script()\n\t    && evalarg != NULL\n\t    && (evalarg->eval_cookie != NULL || evalarg->eval_cctx != NULL\n\t\t\t\t\t\t\t\t   || *p == NL)\n\t    && (*p == NUL || *p == NL\n\t\t\t     || (vim9_comment_start(p) && VIM_ISWHITE(p[-1]))))\n    {\n\tchar_u *next;\n\n\tif (*p == NL)\n\t    next = newline_skip_comments(p);\n\telse if (evalarg->eval_cookie != NULL)\n\t    next = getline_peek_skip_comments(evalarg);\n\telse\n\t    next = peek_next_line_from_context(evalarg->eval_cctx);\n\n\tif (next != NULL)\n\t{\n\t    *getnext = TRUE;\n\t    return skipwhite(next);\n\t}\n    }\n    return p;\n}",
        "output": "1",
        "idx": 930
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "print_help(gs_main_instance * minst)\n{\n    int i, have_rom_device = 0;\n\n    print_revision(minst);\n    print_usage(minst);\n    print_emulators(minst);\n    print_devices(minst);\n    print_paths(minst);\n    /* Check if we have the %rom device */\n    for (i = 0; i < gx_io_device_table_count; i++) {\n        const gx_io_device *iodev = gx_io_device_table[i];\n        const char *dname = iodev->dname;\n\n        if (dname && strlen(dname) == 5 && !memcmp(\"%rom%\", dname, 5)) {\n            have_rom_device = 1;\n            break;\n        }\n    }\n    if (have_rom_device) {\n        outprintf(minst->heap, \"Initialization files are compiled into the executable.\\n\");\n    }\n    print_help_trailer(minst);\n}",
        "output": "0",
        "idx": 5497
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "NBDExport *nbd_export_new(BlockDriverState *bs, off_t dev_offset,\n\n                          off_t size, uint32_t nbdflags,\n\n                          void (*close)(NBDExport *))\n\n{\n\n    NBDExport *exp = g_malloc0(sizeof(NBDExport));\n\n    exp->refcount = 1;\n\n    QTAILQ_INIT(&exp->clients);\n\n    exp->bs = bs;\n\n    exp->dev_offset = dev_offset;\n\n    exp->nbdflags = nbdflags;\n\n    exp->size = size == -1 ? bdrv_getlength(bs) : size;\n\n    exp->close = close;\n\n    exp->ctx = bdrv_get_aio_context(bs);\n\n    bdrv_ref(bs);\n\n    bdrv_add_aio_context_notifier(bs, bs_aio_attached, bs_aio_detach, exp);\n\n\n\n\n\n\n\n    return exp;\n\n}",
        "output": "1",
        "idx": 3361
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void gen_op_fcmps(int fccno, TCGv_i32 r_rs1, TCGv_i32 r_rs2)\n\n{\n\n    switch (fccno) {\n\n    case 0:\n\n        gen_helper_fcmps(cpu_env, r_rs1, r_rs2);\n\n        break;\n\n    case 1:\n\n        gen_helper_fcmps_fcc1(cpu_env, r_rs1, r_rs2);\n\n        break;\n\n    case 2:\n\n        gen_helper_fcmps_fcc2(cpu_env, r_rs1, r_rs2);\n\n        break;\n\n    case 3:\n\n        gen_helper_fcmps_fcc3(cpu_env, r_rs1, r_rs2);\n\n        break;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1295
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kalman_smoothen(WMAVoiceContext *s, int pitch,\n\n                           const float *in, float *out, int size)\n\n{\n\n    int n;\n\n    float optimal_gain = 0, dot;\n\n    const float *ptr = &in[-FFMAX(s->min_pitch_val, pitch - 3)],\n\n                *end = &in[-FFMIN(s->max_pitch_val, pitch + 3)],\n\n                *best_hist_ptr;\n\n\n\n    /* find best fitting point in history */\n\n    do {\n\n        dot = ff_scalarproduct_float_c(in, ptr, size);\n\n        if (dot > optimal_gain) {\n\n            optimal_gain  = dot;\n\n            best_hist_ptr = ptr;\n\n        }\n\n    } while (--ptr >= end);\n\n\n\n    if (optimal_gain <= 0)\n\n        return -1;\n\n    dot = ff_scalarproduct_float_c(best_hist_ptr, best_hist_ptr, size);\n\n    if (dot <= 0) // would be 1.0\n\n        return -1;\n\n\n\n    if (optimal_gain <= dot) {\n\n        dot = dot / (dot + 0.6 * optimal_gain); // 0.625-1.000\n\n    } else\n\n        dot = 0.625;\n\n\n\n    /* actual smoothing */\n\n    for (n = 0; n < size; n++)\n\n        out[n] = best_hist_ptr[n] + dot * (in[n] - best_hist_ptr[n]);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1020
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "predefined_fiddle_handle(void *handle)\n{\n    VALUE obj = rb_fiddle_handle_s_allocate(rb_cHandle);\n    struct dl_handle *fiddle_handle = DATA_PTR(obj);\n\n    fiddle_handle->ptr = handle;\n    fiddle_handle->open = 1;\n    OBJ_FREEZE(obj);\n    return obj;\n}",
        "output": "0",
        "idx": 5655
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_global_option(const char *str)\n\n{\n\n    char driver[64], property[64];\n\n    QemuOpts *opts;\n\n    int rc, offset;\n\n\n\n    rc = sscanf(str, \"%63[^.].%63[^=]%n\", driver, property, &offset);\n\n    if (rc < 2 || str[offset] != '=') {\n\n        error_report(\"can't parse: \\\"%s\\\"\", str);\n\n        return -1;\n\n    }\n\n\n\n    opts = qemu_opts_create(&qemu_global_opts, NULL, 0);\n\n    qemu_opt_set(opts, \"driver\", driver);\n\n    qemu_opt_set(opts, \"property\", property);\n\n    qemu_opt_set(opts, \"value\", str+offset+1);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4171
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zzip_mem_disk_entry_to_data(ZZIP_MEM_DISK* dir, ZZIP_DISK_ENTRY* entry) {\n    return zzip_disk_entry_to_data(dir->disk, entry); }",
        "output": "1",
        "idx": 700
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qdev_prop_set_globals(DeviceState *dev)\n\n{\n\n    ObjectClass *class = object_get_class(OBJECT(dev));\n\n\n\n    do {\n\n        qdev_prop_set_globals_for_type(dev, object_class_get_name(class));\n\n        class = object_class_get_parent(class);\n\n    } while (class);\n\n}\n",
        "output": "1",
        "idx": 5731
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void RENAME(bgr24ToUV_half)(uint8_t *dstU, uint8_t *dstV, const uint8_t *src1, const uint8_t *src2, int width, uint32_t *unused)\n\n{\n\n    int i;\n\n    for (i=0; i<width; i++) {\n\n        int b= src1[6*i + 0] + src1[6*i + 3];\n\n        int g= src1[6*i + 1] + src1[6*i + 4];\n\n        int r= src1[6*i + 2] + src1[6*i + 5];\n\n\n\n        dstU[i]= (RU*r + GU*g + BU*b + (257<<RGB2YUV_SHIFT))>>(RGB2YUV_SHIFT+1);\n\n        dstV[i]= (RV*r + GV*g + BV*b + (257<<RGB2YUV_SHIFT))>>(RGB2YUV_SHIFT+1);\n\n    }\n\n    assert(src1 == src2);\n\n}\n",
        "output": "1",
        "idx": 2110
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int coroutine_fn bdrv_co_do_readv(BlockDriverState *bs,\n    int64_t sector_num, int nb_sectors, QEMUIOVector *qiov,\n    BdrvRequestFlags flags)\n{\n    if (nb_sectors < 0 || nb_sectors > (UINT_MAX >> BDRV_SECTOR_BITS)) {\n        return -EINVAL;\n    }\n\n    return bdrv_co_do_preadv(bs, sector_num << BDRV_SECTOR_BITS,\n                             nb_sectors << BDRV_SECTOR_BITS, qiov, flags);\n}",
        "output": "0",
        "idx": 4077
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int cap_limit_ptraced_target(void) { return 1; }",
        "output": "0",
        "idx": 2971
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void altivec_unavailable_exception(struct pt_regs *regs)\n{\n#if !defined(CONFIG_ALTIVEC)\n\tif (user_mode(regs)) {\n\t\t/* A user program has executed an altivec instruction,\n\t\t   but this kernel doesn't support altivec. */\n\t\t_exception(SIGILL, regs, ILL_ILLOPC, regs->nip);\n\t\treturn;\n\t}\n#endif\n\tprintk(KERN_EMERG \"Unrecoverable VMX/Altivec Unavailable Exception \"\n\t\t\t\"%lx at %lx\\n\", regs->trap, regs->nip);\n\tdie(\"Unrecoverable VMX/Altivec Unavailable Exception\", regs, SIGABRT);\n}",
        "output": "1",
        "idx": 3592
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static zend_bool php_auto_globals_create_files(const char *name, uint name_len TSRMLS_DC)\n{\n\tzval *vars;\n\n\tif (PG(http_globals)[TRACK_VARS_FILES]) {\n\t\tvars = PG(http_globals)[TRACK_VARS_FILES];\n\t} else {\n\t\tALLOC_ZVAL(vars);\n\t\tarray_init(vars);\n\t\tINIT_PZVAL(vars);\n\t\tPG(http_globals)[TRACK_VARS_FILES] = vars;\n\t}\n\n\tzend_hash_update(&EG(symbol_table), name, name_len + 1, &vars, sizeof(zval *), NULL);\n\tZ_ADDREF_P(vars);\n\t\n\treturn 0; /* don't rearm */\n}",
        "output": "1",
        "idx": 5852
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int wanxl_open(struct net_device *dev)\n{\n\tport_t *port = dev_to_port(dev);\n\tu8 __iomem *dbr = port->card->plx + PLX_DOORBELL_TO_CARD;\n\tunsigned long timeout;\n\tint i;\n\n\tif (get_status(port)->open) {\n\t\tnetdev_err(dev, \"port already open\\n\");\n\t\treturn -EIO;\n\t}\n\tif ((i = hdlc_open(dev)) != 0)\n\t\treturn i;\n\n\tport->tx_in = port->tx_out = 0;\n\tfor (i = 0; i < TX_BUFFERS; i++)\n\t\tget_status(port)->tx_descs[i].stat = PACKET_EMPTY;\n\t/* signal the card */\n\twritel(1 << (DOORBELL_TO_CARD_OPEN_0 + port->node), dbr);\n\n\ttimeout = jiffies + HZ;\n\tdo {\n\t\tif (get_status(port)->open) {\n\t\t\tnetif_start_queue(dev);\n\t\t\treturn 0;\n\t\t}\n\t} while (time_after(timeout, jiffies));\n\n\tnetdev_err(dev, \"unable to open port\\n\");\n\t/* ask the card to close the port, should it be still alive */\n\twritel(1 << (DOORBELL_TO_CARD_CLOSE_0 + port->node), dbr);\n\treturn -EFAULT;\n}",
        "output": "0",
        "idx": 5318
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int is_userinfo_valid(const char *str, size_t len)\n{\n\tchar *valid = \"-._~!$&'()*+,;=:\";\n\tchar *p = str;\n\twhile (p - str < len) {\n\t\tif (isalpha(*p) || isdigit(*p) || strchr(valid, *p)) {\n\t\t\tp++;\n\t\t} else if (*p == '%' && p - str <= len - 3 && isdigit(*(p+1)) && isxdigit(*(p+2))) {\n\t\t\tp += 3;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}",
        "output": "1",
        "idx": 2379
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus ResizeOutputTensors(TfLiteContext* context, TfLiteNode* node,\n                                 const TfLiteTensor* axis,\n                                 const TfLiteTensor* input, int num_splits) {\n  int axis_value = GetTensorData<int>(axis)[0];\n  if (axis_value < 0) {\n    axis_value += NumDimensions(input);\n  }\n\n  TF_LITE_ENSURE(context, axis_value >= 0);\n  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));\n\n  const int input_size = SizeOfDimension(input, axis_value);\n  TF_LITE_ENSURE_MSG(context, input_size % num_splits == 0,\n                     \"Not an even split\");\n  const int slice_size = input_size / num_splits;\n\n  for (int i = 0; i < NumOutputs(node); ++i) {\n    TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input->dims);\n    output_dims->data[axis_value] = slice_size;\n    TfLiteTensor* output = GetOutput(context, node, i);\n    TF_LITE_ENSURE_STATUS(context->ResizeTensor(context, output, output_dims));\n  }\n\n  return kTfLiteOk;\n}",
        "output": "1",
        "idx": 4092
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ssl3_init_finished_mac(SSL *s)\n\t{\n\tif (s->s3->handshake_buffer) BIO_free(s->s3->handshake_buffer);\n\tif (s->s3->handshake_dgst) ssl3_free_digest_list(s);\n    s->s3->handshake_buffer=BIO_new(BIO_s_mem());\t\n\t(void)BIO_set_close(s->s3->handshake_buffer,BIO_CLOSE);\n\t}",
        "output": "0",
        "idx": 4977
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,\n                                   unsigned int flags)\n{\n    CMS_ContentInfo *cms;\n    if (!md)\n        md = EVP_sha1();\n    cms = cms_DigestedData_create(md);\n    if (!cms)\n        return NULL;\n\n    if (!(flags & CMS_DETACHED)) {\n        flags &= ~CMS_STREAM;\n        CMS_set_detached(cms, 0);\n    }\n\n    if ((flags & CMS_STREAM) || CMS_final(cms, in, NULL, flags))\n        return cms;\n\n    CMS_ContentInfo_free(cms);\n    return NULL;\n}",
        "output": "0",
        "idx": 4620
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_system_suspend_request(void)\n\n{\n\n    if (is_suspended) {\n\n        return;\n\n    }\n\n    suspend_requested = 1;\n\n    cpu_stop_current();\n\n    qemu_notify_event();\n\n}\n",
        "output": "0",
        "idx": 3097
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int udbg_rtascon_getc(void)\n{\n\tint c;\n\n\twhile ((c = udbg_rtascon_getc_poll()) == -1)\n\t\t;\n\n\treturn c;\n}",
        "output": "0",
        "idx": 102
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "decompress_none(tvbuff_t *tvb, packet_info *pinfo _U_, int offset, guint32 length _U_, tvbuff_t **decompressed_tvb, int *decompressed_offset)\n{\n    *decompressed_tvb = tvb;\n    *decompressed_offset = offset;\n    return 1;\n}",
        "output": "1",
        "idx": 3188
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": " */\nPHPAPI char *php_info_html_esc(char *string TSRMLS_DC)\n{\n\tsize_t new_len;\n\treturn php_escape_html_entities((unsigned char *) string, strlen(string), &new_len, 0, ENT_QUOTES, NULL TSRMLS_CC);",
        "output": "0",
        "idx": 1047
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ofputil_pull_ofp11_group_mod(struct ofpbuf *msg, enum ofp_version ofp_version,\n                             struct ofputil_group_mod *gm)\n{\n    const struct ofp11_group_mod *ogm;\n    enum ofperr error;\n\n    ogm = ofpbuf_pull(msg, sizeof *ogm);\n    gm->command = ntohs(ogm->command);\n    gm->type = ogm->type;\n    gm->group_id = ntohl(ogm->group_id);\n    gm->command_bucket_id = OFPG15_BUCKET_ALL;\n\n    error = ofputil_pull_ofp11_buckets(msg, msg->size, ofp_version,\n                                       &gm->buckets);\n\n    /* OF1.3.5+ prescribes an error when an OFPGC_DELETE includes buckets. */\n    if (!error\n        && ofp_version >= OFP13_VERSION\n        && gm->command == OFPGC11_DELETE\n        && !ovs_list_is_empty(&gm->buckets)) {\n        error = OFPERR_OFPGMFC_INVALID_GROUP;\n    }\n\n    return error;\n}",
        "output": "1",
        "idx": 2818
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cin_iselse(\n    char_u  *p)\n{\n    if (*p == '}')\t    // accept \"} else\"\n\tp = cin_skipcomment(p + 1);\n    return (STRNCMP(p, \"else\", 4) == 0 && !vim_isIDc(p[4]));\n}",
        "output": "0",
        "idx": 3943
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unsigned long convert_rip_to_linear(struct task_struct *child, struct pt_regs *regs)\n{\n\tunsigned long addr, seg;\n\n\taddr = regs->rip;\n\tseg = regs->cs & 0xffff;\n\n\t/*\n\t * We'll assume that the code segments in the GDT\n\t * are all zero-based. That is largely true: the\n\t * TLS segments are used for data, and the PNPBIOS\n\t * and APM bios ones we just ignore here.\n\t */\n\tif (seg & LDT_SEGMENT) {\n\t\tu32 *desc;\n\t\tunsigned long base;\n\n\t\tdown(&child->mm->context.sem);\n\t\tdesc = child->mm->context.ldt + (seg & ~7);\n\t\tbase = (desc[0] >> 16) | ((desc[1] & 0xff) << 16) | (desc[1] & 0xff000000);\n\n\t\t/* 16-bit code segment? */\n\t\tif (!((desc[1] >> 22) & 1))\n\t\t\taddr &= 0xffff;\n\t\taddr += base;\n\t\tup(&child->mm->context.sem);\n\t}\n\treturn addr;\n}",
        "output": "1",
        "idx": 951
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nvoid STDCALL mysql_close(MYSQL *mysql)\n{\n  DBUG_ENTER(\"mysql_close\");\n  if (mysql)\t\t\t\t\t/* Some simple safety */\n  {\n    /* If connection is still up, send a QUIT message */\n    if (mysql->net.vio != 0)\n    {\n      free_old_query(mysql);\n      mysql->status=MYSQL_STATUS_READY; /* Force command */\n      mysql->reconnect=0;\n      simple_command(mysql,COM_QUIT,(uchar*) 0,0,1);\n      end_server(mysql);\t\t\t/* Sets mysql->net.vio= 0 */\n    }\n    mysql_close_free_options(mysql);\n    mysql_close_free(mysql);\n    mysql_detach_stmt_list(&mysql->stmts, \"mysql_close\");\n#ifndef MYSQL_SERVER\n    if (mysql->thd)\n      (*mysql->methods->free_embedded_thd)(mysql);\n#endif\n    if (mysql->extension)\n      mysql_extension_free(mysql->extension);\n    mysql->extension= NULL;\n    if (mysql->free_me)\n      my_free(mysql);\n  }\n  DBUG_VOID_RETURN;",
        "output": "0",
        "idx": 681
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t HELPER(neon_acgt_f32)(uint32_t a, uint32_t b)\n\n{\n\n    float32 f0 = float32_abs(make_float32(a));\n\n    float32 f1 = float32_abs(make_float32(b));\n\n    if (float32_compare_quiet(f0, f1, NFS) == float_relation_greater) {\n\n        return ~0;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5548
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void jas_icccurv_destroy(jas_iccattrval_t *attrval)\n{\n\tjas_icccurv_t *curv = &attrval->data.curv;\n\tif (curv->ents)\n\t\tjas_free(curv->ents);\n}",
        "output": "1",
        "idx": 3856
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sd_erase(SDState *sd)\n\n{\n\n    int i, start, end;\n\n    if (!sd->erase_start || !sd->erase_end) {\n\n        sd->card_status |= ERASE_SEQ_ERROR;\n\n        return;\n\n    }\n\n\n\n    start = sd->erase_start >>\n\n            (HWBLOCK_SHIFT + SECTOR_SHIFT + WPGROUP_SHIFT);\n\n    end = sd->erase_end >>\n\n            (HWBLOCK_SHIFT + SECTOR_SHIFT + WPGROUP_SHIFT);\n\n    sd->erase_start = 0;\n\n    sd->erase_end = 0;\n\n    sd->csd[14] |= 0x40;\n\n\n\n    for (i = start; i <= end; i ++)\n\n        if (sd->wp_groups[i])\n\n            sd->card_status |= WP_ERASE_SKIP;\n\n}\n",
        "output": "0",
        "idx": 1409
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vhost_vsock_common_class_init(ObjectClass *klass, void *data)\n{\n    DeviceClass *dc = DEVICE_CLASS(klass);\n    VirtioDeviceClass *vdc = VIRTIO_DEVICE_CLASS(klass);\n\n    device_class_set_props(dc, vhost_vsock_common_properties);\n    set_bit(DEVICE_CATEGORY_MISC, dc->categories);\n    vdc->guest_notifier_mask = vhost_vsock_common_guest_notifier_mask;\n    vdc->guest_notifier_pending = vhost_vsock_common_guest_notifier_pending;\n}",
        "output": "0",
        "idx": 6195
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned int *generic_get_timeouts(struct net *net)\n{\n\treturn &(generic_pernet(net)->timeout);\n}",
        "output": "0",
        "idx": 5945
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void io_wait_on_hash(struct io_wqe *wqe, unsigned int hash)\n{\n\tstruct io_wq *wq = wqe->wq;\n\n\tspin_lock_irq(&wq->hash->wait.lock);\n\tif (list_empty(&wqe->wait.entry)) {\n\t\t__add_wait_queue(&wq->hash->wait, &wqe->wait);\n\t\tif (!test_bit(hash, &wq->hash->map)) {\n\t\t\t__set_current_state(TASK_RUNNING);\n\t\t\tlist_del_init(&wqe->wait.entry);\n\t\t}\n\t}\n\tspin_unlock_irq(&wq->hash->wait.lock);\n}",
        "output": "0",
        "idx": 3443
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "av_cold void ff_synth_filter_init(SynthFilterContext *c)\n\n{\n\n    c->synth_filter_float = synth_filter_float;\n\n\n\n    if (ARCH_ARM) ff_synth_filter_init_arm(c);\n\n    if (ARCH_X86) ff_synth_filter_init_x86(c);\n\n}\n",
        "output": "0",
        "idx": 6193
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    const CImg<T>& operator()(const unsigned int pos) const {\n      return const_cast<CImgList<T>*>(this)->operator()(pos);\n    }",
        "output": "0",
        "idx": 3918
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rb_head_page_replace(struct buffer_page *old,\n\t\t\t\tstruct buffer_page *new)\n{\n\tunsigned long *ptr = (unsigned long *)&old->list.prev->next;\n\tunsigned long val;\n\tunsigned long ret;\n\n\tval = *ptr & ~RB_FLAG_MASK;\n\tval |= RB_PAGE_HEAD;\n\n\tret = cmpxchg(ptr, val, (unsigned long)&new->list);\n\n\treturn ret == val;\n}",
        "output": "0",
        "idx": 2300
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    template<typename to>\n    float* _object3dtoCImg3d(const CImg<to>& opacities, float *ptrd) const {\n      const to *ptro = opacities._data;\n      cimg_foroff(opacities,o) *(ptrd++) = (float)*(ptro++);\n      return ptrd;",
        "output": "0",
        "idx": 2896
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "irc_server_msgq_add_buffer (struct t_irc_server *server, const char *buffer)\n{\n    char *pos_cr, *pos_lf;\n\n    while (buffer[0])\n    {\n        pos_cr = strchr (buffer, '\\r');\n        pos_lf = strchr (buffer, '\\n');\n\n        if (!pos_cr && !pos_lf)\n        {\n            /* no CR/LF found => add to unterminated and return */\n            irc_server_msgq_add_unterminated (server, buffer);\n            return;\n        }\n\n        if (pos_cr && ((!pos_lf) || (pos_lf > pos_cr)))\n        {\n            /* found '\\r' first => ignore this char */\n            pos_cr[0] = '\\0';\n            irc_server_msgq_add_unterminated (server, buffer);\n            buffer = pos_cr + 1;\n        }\n        else\n        {\n            /* found: '\\n' first => terminate message */\n            pos_lf[0] = '\\0';\n            irc_server_msgq_add_msg (server, buffer);\n            buffer = pos_lf + 1;\n        }\n    }\n}",
        "output": "0",
        "idx": 1636
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mrb_proc_s_new(mrb_state *mrb, mrb_value proc_class)\n{\n  mrb_value blk;\n  mrb_value proc;\n  struct RProc *p;\n\n  /* Calling Proc.new without a block is not implemented yet */\n  mrb_get_args(mrb, \"&!\", &blk);\n  p = MRB_OBJ_ALLOC(mrb, MRB_TT_PROC, mrb_class_ptr(proc_class));\n  mrb_proc_copy(mrb, p, mrb_proc_ptr(blk));\n  proc = mrb_obj_value(p);\n  mrb_funcall_with_block(mrb, proc, MRB_SYM(initialize), 0, NULL, proc);\n  if (!MRB_PROC_STRICT_P(p) &&\n      mrb->c->ci > mrb->c->cibase && MRB_PROC_ENV(p) == mrb->c->ci[-1].u.env) {\n    p->flags |= MRB_PROC_ORPHAN;\n  }\n  return proc;\n}",
        "output": "0",
        "idx": 2706
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_tco2_status_bits(void)\n\n{\n\n    TestData d;\n\n    uint16_t ticks = 8;\n\n    uint16_t val;\n\n    int ret;\n\n\n\n    d.args = \"-watchdog-action none\";\n\n    test_init(&d);\n\n\n\n    stop_tco(&d);\n\n    clear_tco_status(&d);\n\n    reset_on_second_timeout(true);\n\n    set_tco_timeout(&d, ticks);\n\n    load_tco(&d);\n\n    start_tco(&d);\n\n    clock_step(ticks * TCO_TICK_NSEC * 2);\n\n\n\n    val = qpci_io_readw(d.dev, d.tco_io_base + TCO2_STS);\n\n    ret = val & (TCO_SECOND_TO_STS | TCO_BOOT_STS) ? 1 : 0;\n\n    g_assert(ret == 1);\n\n    qpci_io_writew(d.dev, d.tco_io_base + TCO2_STS, val);\n\n    g_assert_cmpint(qpci_io_readw(d.dev, d.tco_io_base + TCO2_STS), ==, 0);\n\n    qtest_end();\n\n}\n",
        "output": "0",
        "idx": 1753
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "smtp_proceed_noop(struct smtp_session *s, const char *args)\n{\n\tsmtp_reply(s, \"250 %s Ok\",\n\t    esc_code(ESC_STATUS_OK, ESC_OTHER_STATUS));\n}",
        "output": "0",
        "idx": 6071
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_iommu_unmap_memslots(struct kvm *kvm)\n{\n\tint idx;\n\tstruct kvm_memslots *slots;\n\tstruct kvm_memory_slot *memslot;\n\n\tidx = srcu_read_lock(&kvm->srcu);\n\tslots = kvm_memslots(kvm);\n\n\tkvm_for_each_memslot(memslot, slots)\n\t\tkvm_iommu_put_pages(kvm, memslot->base_gfn, memslot->npages);\n\n\tsrcu_read_unlock(&kvm->srcu, idx);\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 249
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t m5208_sys_read(void *opaque, target_phys_addr_t addr,\n\n                               unsigned size)\n\n{\n\n    switch (addr) {\n\n    case 0x110: /* SDCS0 */\n\n        {\n\n            int n;\n\n            for (n = 0; n < 32; n++) {\n\n                if (ram_size < (2u << n))\n\n                    break;\n\n            }\n\n            return (n - 1)  | 0x40000000;\n\n        }\n\n    case 0x114: /* SDCS1 */\n\n        return 0;\n\n\n\n    default:\n\n        hw_error(\"m5208_sys_read: Bad offset 0x%x\\n\", (int)addr);\n\n        return 0;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 6200
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ZEXPORT inflateInit2_(strm, windowBits, version, stream_size)\nz_streamp strm;\nint windowBits;\nconst char *version;\nint stream_size;\n{\n    int ret;\n    struct inflate_state FAR *state;\n\n    if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||\n        stream_size != (int)(sizeof(z_stream)))\n        return Z_VERSION_ERROR;\n    if (strm == Z_NULL) return Z_STREAM_ERROR;\n    strm->msg = Z_NULL;                 /* in case we return an error */\n    if (strm->zalloc == (alloc_func)0) {\n#ifdef Z_SOLO\n        return Z_STREAM_ERROR;\n#else\n        strm->zalloc = zcalloc;\n        strm->opaque = (voidpf)0;\n#endif\n    }\n    if (strm->zfree == (free_func)0)\n#ifdef Z_SOLO\n        return Z_STREAM_ERROR;\n#else\n        strm->zfree = zcfree;\n#endif\n    state = (struct inflate_state FAR *)\n            ZALLOC(strm, 1, sizeof(struct inflate_state));\n    if (state == Z_NULL) return Z_MEM_ERROR;\n    Tracev((stderr, \"inflate: allocated\\n\"));\n    strm->state = (struct internal_state FAR *)state;\n    state->window = Z_NULL;\n    ret = inflateReset2(strm, windowBits);\n    if (ret != Z_OK) {\n        ZFREE(strm, state);\n        strm->state = Z_NULL;\n    }\n    return ret;\n}",
        "output": "0",
        "idx": 2136
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CL_StopVideo_f( void )\n{\n  CL_CloseAVI( );\n}",
        "output": "0",
        "idx": 4033
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dmg_close(BlockDriverState *bs)\n\n{\n\n    BDRVDMGState *s = bs->opaque;\n\n    close(s->fd);\n\n    if(s->n_chunks>0) {\n\n\tfree(s->types);\n\n\tfree(s->offsets);\n\n\tfree(s->lengths);\n\n\tfree(s->sectors);\n\n\tfree(s->sectorcounts);\n\n    }\n\n    free(s->compressed_chunk);\n\n    free(s->uncompressed_chunk);\n\n    inflateEnd(&s->zstream);\n\n}\n",
        "output": "0",
        "idx": 2735
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void svm_get_idt(struct kvm_vcpu *vcpu, struct desc_ptr *dt)\n{\n\tstruct vcpu_svm *svm = to_svm(vcpu);\n\n\tdt->size = svm->vmcb->save.idtr.limit;\n\tdt->address = svm->vmcb->save.idtr.base;\n}",
        "output": "0",
        "idx": 310
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "std::unique_ptr<HttpResponse> HttpConnection::receiveResponse()\n{\n  if (outstandingHttpRequests_.empty()) {\n    throw DL_ABORT_EX(EX_NO_HTTP_REQUEST_ENTRY_FOUND);\n  }\n  if (socketRecvBuffer_->bufferEmpty()) {\n    if (socketRecvBuffer_->recv() == 0 && !socket_->wantRead() &&\n        !socket_->wantWrite()) {\n      throw DL_RETRY_EX(EX_GOT_EOF);\n    }\n  }\n\n  const auto& proc = outstandingHttpRequests_.front()->getHttpHeaderProcessor();\n  if (proc->parse(socketRecvBuffer_->getBuffer(),\n                  socketRecvBuffer_->getBufferLength())) {\n    A2_LOG_INFO(\n        fmt(MSG_RECEIVE_RESPONSE, cuid_, proc->getHeaderString().c_str()));\n    auto result = proc->getResult();\n    if (result->getStatusCode() / 100 == 1) {\n      socketRecvBuffer_->drain(proc->getLastBytesProcessed());\n      outstandingHttpRequests_.front()->resetHttpHeaderProcessor();\n      return nullptr;\n    }\n\n    auto httpResponse = make_unique<HttpResponse>();\n    httpResponse->setCuid(cuid_);\n    httpResponse->setHttpHeader(std::move(result));\n    httpResponse->setHttpRequest(\n        outstandingHttpRequests_.front()->popHttpRequest());\n    socketRecvBuffer_->drain(proc->getLastBytesProcessed());\n    outstandingHttpRequests_.pop_front();\n    return httpResponse;\n  }\n\n  socketRecvBuffer_->drain(proc->getLastBytesProcessed());\n  return nullptr;\n}",
        "output": "1",
        "idx": 851
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int s390_virtio_blk_init(VirtIOS390Device *s390_dev)\n\n{\n\n    VirtIOBlkS390 *dev = VIRTIO_BLK_S390(s390_dev);\n\n    DeviceState *vdev = DEVICE(&dev->vdev);\n\n    virtio_blk_set_conf(vdev, &(dev->blk));\n\n    qdev_set_parent_bus(vdev, BUS(&s390_dev->bus));\n\n    if (qdev_init(vdev) < 0) {\n\n        return -1;\n\n    }\n\n    return s390_virtio_device_init(s390_dev, VIRTIO_DEVICE(vdev));\n\n}\n",
        "output": "1",
        "idx": 5471
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  bool stmt_create_routine_start(const DDL_options_st &options)\n  {\n    create_info.set(options);\n    return main_select_push() || check_create_options(options);\n  }",
        "output": "0",
        "idx": 5989
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "add_one_chunk(png_bytep list, unsigned int count, png_const_bytep add, int keep)\n{\n   unsigned int i;\n\n   /* Utility function: update the 'keep' state of a chunk if it is already in\n    * the list, otherwise add it to the list.\n    */\n   for (i=0; i<count; ++i, list += 5)\n   {\n      if (memcmp(list, add, 4) == 0)\n      {\n         list[4] = (png_byte)keep;\n\n         return count;\n      }\n   }\n\n   if (keep != PNG_HANDLE_CHUNK_AS_DEFAULT)\n   {\n      ++count;\n      memcpy(list, add, 4);\n      list[4] = (png_byte)keep;\n   }\n\n   return count;\n}",
        "output": "0",
        "idx": 3036
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int dxtory_decode_v1_444(AVCodecContext *avctx, AVFrame *pic,\n\n                                const uint8_t *src, int src_size)\n\n{\n\n    int h, w;\n\n    uint8_t *Y, *U, *V;\n\n    int ret;\n\n\n\n    if (src_size < avctx->width * avctx->height * 3) {\n\n        av_log(avctx, AV_LOG_ERROR, \"packet too small\\n\");\n\n        return AVERROR_INVALIDDATA;\n\n    }\n\n\n\n    avctx->pix_fmt = AV_PIX_FMT_YUV444P;\n\n    if ((ret = ff_get_buffer(avctx, pic, 0)) < 0)\n\n        return ret;\n\n\n\n    Y = pic->data[0];\n\n    U = pic->data[1];\n\n    V = pic->data[2];\n\n    for (h = 0; h < avctx->height; h++) {\n\n        for (w = 0; w < avctx->width; w++) {\n\n            Y[w] = *src++;\n\n            U[w] = *src++ ^ 0x80;\n\n            V[w] = *src++ ^ 0x80;\n\n        }\n\n        Y += pic->linesize[0];\n\n        U += pic->linesize[1];\n\n        V += pic->linesize[2];\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 6107
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "EncodeTimezone(char *str, int tz, int style)\n{\n\tint\t\t\thour,\n\t\t\t\tmin,\n\t\t\t\tsec;\n\n\tsec = abs(tz);\n\tmin = sec / SECS_PER_MINUTE;\n\tsec -= min * SECS_PER_MINUTE;\n\thour = min / MINS_PER_HOUR;\n\tmin -= hour * MINS_PER_HOUR;\n\n\tstr += strlen(str);\n\t/* TZ is negated compared to sign we wish to display ... */\n\t*str++ = (tz <= 0 ? '+' : '-');\n\n\tif (sec != 0)\n\t\tsprintf(str, \"%02d:%02d:%02d\", hour, min, sec);\n\telse if (min != 0 || style == USE_XSD_DATES)\n\t\tsprintf(str, \"%02d:%02d\", hour, min);\n\telse\n\t\tsprintf(str, \"%02d\", hour);\n}",
        "output": "0",
        "idx": 679
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int onenand_load_main(OneNANDState *s, int sec, int secn,\n\n                void *dest)\n\n{\n\n    if (s->blk_cur) {\n\n        return blk_read(s->blk_cur, sec, dest, secn) < 0;\n\n    } else if (sec + secn > s->secs_cur) {\n\n        return 1;\n\n    }\n\n\n\n    memcpy(dest, s->current + (sec << 9), secn << 9);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 198
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fsmMkfile(rpmfi fi, const char *dest, rpmfiles files,\n\t\t     rpmpsm psm, int nodigest, int *setmeta,\n\t\t     int * firsthardlink)\n{\n    int rc = 0;\n    int numHardlinks = rpmfiFNlink(fi);\n\n    if (numHardlinks > 1) {\n\t/* Create first hardlinked file empty */\n\tif (*firsthardlink < 0) {\n\t    *firsthardlink = rpmfiFX(fi);\n\t    rc = expandRegular(fi, dest, psm, nodigest, 1);\n\t} else {\n\t    /* Create hard links for others */\n\t    char *fn = rpmfilesFN(files, *firsthardlink);\n\t    rc = link(fn, dest);\n\t    if (rc < 0) {\n\t\trc = RPMERR_LINK_FAILED;\n\t    }\n\t    free(fn);\n\t}\n    }\n    /* Write normal files or fill the last hardlinked (already\n       existing) file with content */\n    if (numHardlinks<=1) {\n\tif (!rc)\n\t    rc = expandRegular(fi, dest, psm, nodigest, 0);\n    } else if (rpmfiArchiveHasContent(fi)) {\n\tif (!rc)\n\t    rc = expandRegular(fi, dest, psm, nodigest, 0);\n\t*firsthardlink = -1;\n    } else {\n\t*setmeta = 0;\n    }\n\n    return rc;\n}",
        "output": "1",
        "idx": 2261
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "stream_init(stream_t *stream, get_func get, void *data)\n{\n    stream->get = get;\n    stream->data = data;\n    stream->buffer[0] = '\\0';\n    stream->buffer_pos = 0;\n\n    stream->state = STREAM_STATE_OK;\n    stream->line = 1;\n    stream->column = 0;\n    stream->position = 0;\n}",
        "output": "0",
        "idx": 5518
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)\n{\n\tconst struct sched_class *class;\n\n\tif (p->sched_class == rq->curr->sched_class) {\n\t\trq->curr->sched_class->check_preempt_curr(rq, p, flags);\n\t} else {\n\t\tfor_each_class(class) {\n\t\t\tif (class == rq->curr->sched_class)\n\t\t\t\tbreak;\n\t\t\tif (class == p->sched_class) {\n\t\t\t\tresched_task(rq->curr);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * A queue event has occurred, and we're going to schedule.  In\n\t * this case, we can save a useless back to back clock update.\n\t */\n\tif (test_tsk_need_resched(rq->curr))\n\t\trq->skip_clock_update = 1;\n}",
        "output": "1",
        "idx": 1283
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int StreamBase::WriteBuffer(const FunctionCallbackInfo<Value>& args) {\n  CHECK(args[0]->IsObject());\n\n  Environment* env = Environment::GetCurrent(args);\n\n  if (!args[1]->IsUint8Array()) {\n    node::THROW_ERR_INVALID_ARG_TYPE(env, \"Second argument must be a buffer\");\n    return 0;\n  }\n\n  Local<Object> req_wrap_obj = args[0].As<Object>();\n  uv_buf_t buf;\n  buf.base = Buffer::Data(args[1]);\n  buf.len = Buffer::Length(args[1]);\n\n  uv_stream_t* send_handle = nullptr;\n\n  if (args[2]->IsObject() && IsIPCPipe()) {\n    Local<Object> send_handle_obj = args[2].As<Object>();\n\n    HandleWrap* wrap;\n    ASSIGN_OR_RETURN_UNWRAP(&wrap, send_handle_obj, UV_EINVAL);\n    send_handle = reinterpret_cast<uv_stream_t*>(wrap->GetHandle());\n    // Reference LibuvStreamWrap instance to prevent it from being garbage\n    // collected before `AfterWrite` is called.\n    req_wrap_obj->Set(env->context(),\n                      env->handle_string(),\n                      send_handle_obj).Check();\n  }\n\n  StreamWriteResult res = Write(&buf, 1, send_handle, req_wrap_obj);\n  SetWriteResult(res);\n\n  return res.err;\n}",
        "output": "0",
        "idx": 5597
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(snmp_get_valueretrieval)\n{\n\tif (zend_parse_parameters_none() == FAILURE) {\n\t\tRETURN_FALSE;\n\t}\n\n\tRETURN_LONG(SNMP_G(valueretrieval));\n}",
        "output": "0",
        "idx": 1057
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void from_str(const std::string& str) {\n    size_t pos = str.find('$');\n    if (pos != std::string::npos) {\n      tenant = str.substr(0, pos);\n      id = str.substr(pos + 1);\n    } else {\n      tenant.clear();\n      id = str;\n    }\n  }",
        "output": "0",
        "idx": 51
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GIT_INLINE(bool) verify_dotgit_ntfs(git_repository *repo, const char *path, size_t len)\n{\n\tgit_buf *reserved = git_repository__reserved_names_win32;\n\tsize_t reserved_len = git_repository__reserved_names_win32_len;\n\tsize_t start = 0, i;\n\n\tif (repo)\n\t\tgit_repository__reserved_names(&reserved, &reserved_len, repo, true);\n\n\tfor (i = 0; i < reserved_len; i++) {\n\t\tgit_buf *r = &reserved[i];\n\n\t\tif (len >= r->size &&\n\t\t\tstrncasecmp(path, r->ptr, r->size) == 0) {\n\t\t\tstart = r->size;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!start)\n\t\treturn true;\n\n\t/* Reject paths like \".git\\\" */\n\tif (path[start] == '\\\\')\n\t\treturn false;\n\n\t/* Reject paths like '.git ' or '.git.' */\n\tfor (i = start; i < len; i++) {\n\t\tif (path[i] != ' ' && path[i] != '.')\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}",
        "output": "1",
        "idx": 4610
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void adb_mouse_reset(DeviceState *dev)\n\n{\n\n    ADBDevice *d = ADB_DEVICE(dev);\n\n    MouseState *s = ADB_MOUSE(dev);\n\n\n\n    d->handler = 2;\n\n    d->devaddr = ADB_DEVID_MOUSE;\n\n    s->last_buttons_state = s->buttons_state = 0;\n\n    s->dx = s->dy = s->dz = 0;\n\n}\n",
        "output": "1",
        "idx": 5932
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int fuse_open_common(struct inode *inode, struct file *file, bool isdir)\n{\n\tstruct fuse_conn *fc = get_fuse_conn(inode);\n\tint err;\n\n\t/* VFS checks this, but only _after_ ->open() */\n\tif (file->f_flags & O_DIRECT)\n\t\treturn -EINVAL;\n\n\terr = generic_file_open(inode, file);\n\tif (err)\n\t\treturn err;\n\n\terr = fuse_do_open(fc, get_node_id(inode), file, isdir);\n\tif (err)\n\t\treturn err;\n\n\tfuse_finish_open(inode, file);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 1084
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool SNC_io_parser<EW>::\nread_volume(Volume_handle ch) {\n\n  bool OK = true;\n  int index;\n  char cc;\n\n  in >> index;\n  OK = OK && test_string(\"{\");\n\n  in >> cc;\n  while(isdigit(cc)) {\n    in.putback(cc);\n    in >> index;\n    ch->shell_entry_objects().push_back(make_object(SFace_of[index]));\n    in >> cc;\n  }\n  in >> ch->mark();\n\n  return OK;\n}",
        "output": "1",
        "idx": 2349
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *ask_new_shell(char *question, char *oldshell)\n{\n\tint len;\n\tchar *ans = NULL;\n#ifdef HAVE_LIBREADLINE\n\trl_attempted_completion_function = shell_name_completion;\n#else\n\tsize_t dummy = 0;\n#endif\n\tif (!oldshell)\n\t\toldshell = \"\";\n\tprintf(\"%s [%s]:\", question, oldshell);\n#ifdef HAVE_LIBREADLINE\n\tif ((ans = readline(\" \")) == NULL)\n#else\n\tputchar(' ');\n\tif (getline(&ans, &dummy, stdin) < 0)\n#endif\n\t\treturn NULL;\n\t/* remove the newline at the end of ans. */\n\tltrim_whitespace((unsigned char *) ans);\n\tlen = rtrim_whitespace((unsigned char *) ans);\n\tif (len == 0)\n\t\treturn NULL;\n\treturn ans;\n}",
        "output": "1",
        "idx": 5352
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qcrypto_pbkdf2(QCryptoHashAlgorithm hash G_GNUC_UNUSED,\n\n                   const uint8_t *key G_GNUC_UNUSED,\n\n                   size_t nkey G_GNUC_UNUSED,\n\n                   const uint8_t *salt G_GNUC_UNUSED,\n\n                   size_t nsalt G_GNUC_UNUSED,\n\n                   unsigned int iterations G_GNUC_UNUSED,\n\n                   uint8_t *out G_GNUC_UNUSED,\n\n                   size_t nout G_GNUC_UNUSED,\n\n                   Error **errp)\n\n{\n\n    error_setg_errno(errp, ENOSYS,\n\n                     \"No crypto library supporting PBKDF in this build\");\n\n    return -1;\n\n}\n",
        "output": "0",
        "idx": 1730
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int key_notify_policy_flush(const struct km_event *c)\n{\n\tstruct sk_buff *skb_out;\n\tstruct sadb_msg *hdr;\n\n\tskb_out = alloc_skb(sizeof(struct sadb_msg) + 16, GFP_ATOMIC);\n\tif (!skb_out)\n\t\treturn -ENOBUFS;\n\thdr = (struct sadb_msg *) skb_put(skb_out, sizeof(struct sadb_msg));\n\thdr->sadb_msg_type = SADB_X_SPDFLUSH;\n\thdr->sadb_msg_seq = c->seq;\n\thdr->sadb_msg_pid = c->portid;\n\thdr->sadb_msg_version = PF_KEY_V2;\n\thdr->sadb_msg_errno = (uint8_t) 0;\n\thdr->sadb_msg_len = (sizeof(struct sadb_msg) / sizeof(uint64_t));\n\tpfkey_broadcast(skb_out, GFP_ATOMIC, BROADCAST_ALL, NULL, c->net);\n\treturn 0;\n\n}",
        "output": "1",
        "idx": 6206
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int udf_add_aext(struct inode *inode, struct extent_position *epos,\n\t\t struct kernel_lb_addr *eloc, uint32_t elen, int inc)\n{\n\tint adsize;\n\tstruct super_block *sb = inode->i_sb;\n\n\tif (UDF_I(inode)->i_alloc_type == ICBTAG_FLAG_AD_SHORT)\n\t\tadsize = sizeof(struct short_ad);\n\telse if (UDF_I(inode)->i_alloc_type == ICBTAG_FLAG_AD_LONG)\n\t\tadsize = sizeof(struct long_ad);\n\telse\n\t\treturn -EIO;\n\n\tif (epos->offset + (2 * adsize) > sb->s_blocksize) {\n\t\tint err;\n\t\tudf_pblk_t new_block;\n\n\t\tnew_block = udf_new_block(sb, NULL,\n\t\t\t\t\t  epos->block.partitionReferenceNum,\n\t\t\t\t\t  epos->block.logicalBlockNum, &err);\n\t\tif (!new_block)\n\t\t\treturn -ENOSPC;\n\n\t\terr = udf_setup_indirect_aext(inode, new_block, epos);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\treturn __udf_add_aext(inode, epos, eloc, elen, inc);\n}",
        "output": "0",
        "idx": 1685
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QEMUPutMouseEntry *qemu_add_mouse_event_handler(QEMUPutMouseEvent *func,\n\n                                                void *opaque, int absolute,\n\n                                                const char *name)\n\n{\n\n    QEMUPutMouseEntry *s;\n\n\n\n    s = g_malloc0(sizeof(QEMUPutMouseEntry));\n\n\n\n    s->qemu_put_mouse_event = func;\n\n    s->qemu_put_mouse_event_opaque = opaque;\n\n    s->qemu_put_mouse_event_absolute = absolute;\n\n\n\n    s->h.name = name;\n\n    s->h.mask = INPUT_EVENT_MASK_BTN |\n\n        (absolute ? INPUT_EVENT_MASK_ABS : INPUT_EVENT_MASK_REL);\n\n    s->h.event = legacy_mouse_event;\n\n    s->h.sync = legacy_mouse_sync;\n\n    s->s = qemu_input_handler_register((DeviceState *)s,\n\n                                       &s->h);\n\n\n\n    return s;\n\n}\n",
        "output": "1",
        "idx": 3111
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cgsleep_us_r(cgtimer_t *ts_start, int64_t us)\n{\n\tstruct timespec ts_diff;\n\n\tus_to_timespec(&ts_diff, us);\n\tcgsleep_spec(&ts_diff, ts_start);\n}",
        "output": "0",
        "idx": 3608
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t bonito_spciconf_readb(void *opaque, target_phys_addr_t addr)\n\n{\n\n    PCIBonitoState *s = opaque;\n\n    uint32_t pciaddr;\n\n    uint16_t status;\n\n\n\n    DPRINTF(\"bonito_spciconf_readb \"TARGET_FMT_plx\"  \\n\", addr);\n\n    pciaddr = bonito_sbridge_pciaddr(s, addr);\n\n\n\n    if (pciaddr == 0xffffffff) {\n\n        return 0xff;\n\n    }\n\n\n\n    /* set the pci address in s->config_reg */\n\n    s->pcihost->config_reg = (pciaddr) | (1u << 31);\n\n\n\n    /* clear PCI_STATUS_REC_MASTER_ABORT and PCI_STATUS_REC_TARGET_ABORT */\n\n    status = pci_get_word(s->dev.config + PCI_STATUS);\n\n    status &= ~(PCI_STATUS_REC_MASTER_ABORT | PCI_STATUS_REC_TARGET_ABORT);\n\n    pci_set_word(s->dev.config + PCI_STATUS, status);\n\n\n\n    return pci_data_read(s->pcihost->bus, s->pcihost->config_reg, 1);\n\n}\n",
        "output": "0",
        "idx": 1850
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool balloon_stats_supported(const VirtIOBalloon *s)\n\n{\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(s);\n\n    return vdev->guest_features & (1 << VIRTIO_BALLOON_F_STATS_VQ);\n\n}\n",
        "output": "0",
        "idx": 2461
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ACSequentialScan::Flush(bool)\n{\n#if ACCUSOFT_CODE\n  int i;\n  \n  m_Coder.Flush();\n\n  for(i = 0;i < m_ucCount;i++) {\n    m_lDC[i]    = 0;\n    m_lDiff[i]  = 0;\n  }\n  for(i = 0;i < 4;i++) {\n    m_Context[i].Init();\n  }\n  \n  m_Coder.OpenForWrite(m_Coder.ByteStreamOf(),m_Coder.ChecksumOf());\n#endif\n}",
        "output": "0",
        "idx": 5451
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void setupHCWithUnhealthyThreshold(int value) {\n    auto config = createGrpcHealthCheckConfig();\n    config.mutable_unhealthy_threshold()->set_value(value);\n    allocHealthChecker(config);\n    addCompletionCallback();\n  }",
        "output": "0",
        "idx": 2329
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void thread_pool_submit(ThreadPool *pool, ThreadPoolFunc *func, void *arg)\n\n{\n\n    thread_pool_submit_aio(pool, func, arg, NULL, NULL);\n\n}\n",
        "output": "0",
        "idx": 5577
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void strstore(char **str, const char *newstr)\n{\n  if(*str)\n    free(*str);\n  *str = strdup(newstr);\n}",
        "output": "0",
        "idx": 2392
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "regional_create_custom(size_t size)\n{\n\tstruct regional* r = (struct regional*)malloc(size);\n\tlog_assert(sizeof(struct regional) <= size);\n\tif(!r) return NULL;\n\tr->first_size = size;\n\tregional_init(r);\n\treturn r;\n}",
        "output": "1",
        "idx": 3347
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void raw_close(BlockDriverState *bs)\n\n{\n\n}\n",
        "output": "0",
        "idx": 1572
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static enum print_line_t print_hex_fmt(struct trace_iterator *iter)\n{\n\tstruct trace_array *tr = iter->tr;\n\tstruct trace_seq *s = &iter->seq;\n\tunsigned char newline = '\\n';\n\tstruct trace_entry *entry;\n\tstruct trace_event *event;\n\n\tentry = iter->ent;\n\n\tif (tr->trace_flags & TRACE_ITER_CONTEXT_INFO) {\n\t\tSEQ_PUT_HEX_FIELD(s, entry->pid);\n\t\tSEQ_PUT_HEX_FIELD(s, iter->cpu);\n\t\tSEQ_PUT_HEX_FIELD(s, iter->ts);\n\t\tif (trace_seq_has_overflowed(s))\n\t\t\treturn TRACE_TYPE_PARTIAL_LINE;\n\t}\n\n\tevent = ftrace_find_event(entry->type);\n\tif (event) {\n\t\tenum print_line_t ret = event->funcs->hex(iter, 0, event);\n\t\tif (ret != TRACE_TYPE_HANDLED)\n\t\t\treturn ret;\n\t}\n\n\tSEQ_PUT_FIELD(s, newline);\n\n\treturn trace_handle_return(s);\n}",
        "output": "0",
        "idx": 2474
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mem_cgroup_swappiness_write(struct cgroup *cgrp, struct cftype *cft,\n\t\t\t\t       u64 val)\n{\n\tstruct mem_cgroup *memcg = mem_cgroup_from_cont(cgrp);\n\tstruct mem_cgroup *parent;\n\n\tif (val > 100)\n\t\treturn -EINVAL;\n\n\tif (cgrp->parent == NULL)\n\t\treturn -EINVAL;\n\n\tparent = mem_cgroup_from_cont(cgrp->parent);\n\n\tcgroup_lock();\n\n\t/* If under hierarchy, only empty-root can set this value */\n\tif ((parent->use_hierarchy) ||\n\t    (memcg->use_hierarchy && !list_empty(&cgrp->children))) {\n\t\tcgroup_unlock();\n\t\treturn -EINVAL;\n\t}\n\n\tmemcg->swappiness = val;\n\n\tcgroup_unlock();\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 2941
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __exit pf_exit(void)\n{\n\tstruct pf_unit *pf;\n\tint unit;\n\tunregister_blkdev(major, name);\n\tfor (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {\n\t\tif (pf->present)\n\t\t\tdel_gendisk(pf->disk);\n\n\t\tblk_cleanup_queue(pf->disk->queue);\n\t\tblk_mq_free_tag_set(&pf->tag_set);\n\t\tput_disk(pf->disk);\n\n\t\tif (pf->present)\n\t\t\tpi_release(pf->pi);\n\t}\n}",
        "output": "1",
        "idx": 1390
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int tcp_get_msgfd(CharDriverState *chr)\n\n{\n\n    TCPCharDriver *s = chr->opaque;\n\n\n\n    return s->msgfd;\n\n}\n",
        "output": "1",
        "idx": 281
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void shm_destroy(struct ipc_namespace *ns, struct shmid_kernel *shp)\n{\n\tns->shm_tot -= (shp->shm_segsz + PAGE_SIZE - 1) >> PAGE_SHIFT;\n\tshm_rmid(ns, shp);\n\tshm_unlock(shp);\n\tif (!is_file_hugepages(shp->shm_file))\n\t\tshmem_lock(shp->shm_file, 0, shp->mlock_user);\n\telse if (shp->mlock_user)\n\t\tuser_shm_unlock(file_inode(shp->shm_file)->i_size,\n\t\t\t\t\t\tshp->mlock_user);\n\tfput (shp->shm_file);\n\tipc_rcu_putref(shp, shm_rcu_free);\n}",
        "output": "1",
        "idx": 5229
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void filter_samples(AVFilterLink *inlink, AVFilterBufferRef *samplesref)\n\n{\n\n    AVFilterContext *ctx = inlink->dst;\n\n    int i;\n\n\n\n    for (i = 0; i < ctx->nb_outputs; i++)\n\n        ff_filter_samples(inlink->dst->outputs[i],\n\n                          avfilter_ref_buffer(samplesref, ~AV_PERM_WRITE));\n\n\n}",
        "output": "1",
        "idx": 3378
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)\n{\n    const unsigned char *q;\n    X509 *ret;\n    /* Save start position */\n    q = *pp;\n    ret = d2i_X509(a, pp, length);\n    /* If certificate unreadable then forget it */\n    if (!ret)\n        return NULL;\n    /* update length */\n    length -= *pp - q;\n    if (!length)\n        return ret;\n    if (!d2i_X509_CERT_AUX(&ret->aux, pp, length))\n        goto err;\n    return ret;\n err:\n    X509_free(ret);\n    return NULL;\n}",
        "output": "1",
        "idx": 3859
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int64_t xbzrle_cache_resize(int64_t new_size)\n\n{\n\n    if (new_size < TARGET_PAGE_SIZE) {\n\n        return -1;\n\n    }\n\n\n\n    if (XBZRLE.cache != NULL) {\n\n        return cache_resize(XBZRLE.cache, new_size / TARGET_PAGE_SIZE) *\n\n            TARGET_PAGE_SIZE;\n\n    }\n\n    return pow2floor(new_size);\n\n}\n",
        "output": "1",
        "idx": 2737
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "e1000_can_receive(NetClientState *nc)\n\n{\n\n    E1000State *s = qemu_get_nic_opaque(nc);\n\n\n\n    return (s->mac_reg[RCTL] & E1000_RCTL_EN) && e1000_has_rxbufs(s, 1);\n\n}\n",
        "output": "1",
        "idx": 5139
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int sqlite3ExprIsVector(Expr *pExpr){\n  return sqlite3ExprVectorSize(pExpr)>1;\n}",
        "output": "0",
        "idx": 5667
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_init_thread_copy(AVCodecContext *avctx)\n\n{\n\n    H264Context *h = avctx->priv_data;\n\n\n\n    if (!avctx->internal->is_copy)\n\n        return 0;\n\n    memset(h->sps_buffers, 0, sizeof(h->sps_buffers));\n\n    memset(h->pps_buffers, 0, sizeof(h->pps_buffers));\n\n\n\n\n    h->rbsp_buffer[0]      = NULL;\n\n    h->rbsp_buffer[1]      = NULL;\n\n    h->rbsp_buffer_size[0] = 0;\n\n    h->rbsp_buffer_size[1] = 0;\n\n    h->context_initialized = 0;\n\n\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 3842
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int matroska_deliver_packet(MatroskaDemuxContext *matroska,\n\n                                   AVPacket *pkt)\n\n{\n\n    if (matroska->num_packets > 0) {\n\n        memcpy(pkt, matroska->packets[0], sizeof(AVPacket));\n\n        av_free(matroska->packets[0]);\n\n        if (matroska->num_packets > 1) {\n\n            memmove(&matroska->packets[0], &matroska->packets[1],\n\n                    (matroska->num_packets - 1) * sizeof(AVPacket *));\n\n            matroska->packets =\n\n                av_realloc(matroska->packets, (matroska->num_packets - 1) *\n\n                           sizeof(AVPacket *));\n\n        } else {\n\n            av_freep(&matroska->packets);\n\n        }\n\n        matroska->num_packets--;\n\n        return 0;\n\n    }\n\n\n\n    return -1;\n\n}\n",
        "output": "1",
        "idx": 3403
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "      static double mp_self_add(_cimg_math_parser& mp) {\n        return _mp_arg(1)+=_mp_arg(2);\n      }",
        "output": "0",
        "idx": 3589
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "flatpak_load_override_keyfile (const char *app_id, gboolean user, GError **error)\n{\n  g_autofree char *metadata_contents = NULL;\n  gsize metadata_size;\n  g_autoptr(GKeyFile) metakey = g_key_file_new ();\n  g_autoptr(FlatpakDir) dir = NULL;\n\n  dir = user ? flatpak_dir_get_user () : flatpak_dir_get_system_default ();\n\n  metadata_contents = flatpak_dir_load_override (dir, app_id, &metadata_size, error);\n  if (metadata_contents == NULL)\n    return NULL;\n\n  if (!g_key_file_load_from_data (metakey,\n                                  metadata_contents,\n                                  metadata_size,\n                                  0, error))\n    return NULL;\n\n  return g_steal_pointer (&metakey);\n}",
        "output": "0",
        "idx": 1931
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mesh_is_udp(struct mesh_reply const* r) {\n\treturn r->query_reply.c->type == comm_udp;\n}",
        "output": "0",
        "idx": 482
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static js_Ast *arrayliteral(js_State *J)\n{\n\tjs_Ast *head, *tail;\n\tif (J->lookahead == ']')\n\t\treturn NULL;\n\thead = tail = LIST(arrayelement(J));\n\twhile (jsP_accept(J, ',')) {\n\t\tif (J->lookahead != ']')\n\t\t\ttail = tail->b = LIST(arrayelement(J));\n\t}\n\treturn jsP_list(head);\n}",
        "output": "0",
        "idx": 3951
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t driver_override_store(struct device *_dev,\n\t\t\t\t     struct device_attribute *attr,\n\t\t\t\t     const char *buf, size_t count)\n{\n\tstruct amba_device *dev = to_amba_device(_dev);\n\tchar *driver_override, *old = dev->driver_override, *cp;\n\n\t/* We need to keep extra room for a newline */\n\tif (count >= (PAGE_SIZE - 1))\n\t\treturn -EINVAL;\n\n\tdriver_override = kstrndup(buf, count, GFP_KERNEL);\n\tif (!driver_override)\n\t\treturn -ENOMEM;\n\n\tcp = strchr(driver_override, '\\n');\n\tif (cp)\n\t\t*cp = '\\0';\n\n\tif (strlen(driver_override)) {\n\t\tdev->driver_override = driver_override;\n\t} else {\n\t       kfree(driver_override);\n\t       dev->driver_override = NULL;\n\t}\n\n\tkfree(old);\n\n\treturn count;\n}",
        "output": "1",
        "idx": 3088
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vfio_bar_quirk_teardown(VFIOPCIDevice *vdev, int nr)\n\n{\n\n    VFIOBAR *bar = &vdev->bars[nr];\n\n\n\n    while (!QLIST_EMPTY(&bar->quirks)) {\n\n        VFIOQuirk *quirk = QLIST_FIRST(&bar->quirks);\n\n        memory_region_del_subregion(&bar->region.mem, &quirk->mem);\n\n        object_unparent(OBJECT(&quirk->mem));\n\n        QLIST_REMOVE(quirk, next);\n\n        g_free(quirk);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2715
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "UniqueChars normalize_header_name(JSContext *cx, MutableHandleValue name_val, size_t *name_len,\n                                  const char *fun_name) {\n  RootedString name_str(cx, JS::ToString(cx, name_val));\n  if (!name_str)\n    return nullptr;\n\n  size_t len;\n  UniqueChars name = encode(cx, name_str, &len);\n  if (!name)\n    return nullptr;\n\n  if (len == 0) {\n    JS_ReportErrorASCII(cx, \"%s: Header name can't be empty\", fun_name);\n    return nullptr;\n  }\n\n  bool changed = false;\n\n  char *name_chars = name.get();\n  for (size_t i = 0; i < len; i++) {\n    unsigned char ch = name_chars[i];\n    if (ch > 127 || !VALID_NAME_CHARS[ch]) {\n      JS_ReportErrorUTF8(cx, \"%s: Invalid header name '%s'\", fun_name, name_chars);\n      return nullptr;\n    }\n\n    if (ch >= 'A' && ch <= 'Z') {\n      name_chars[i] = ch - 'A' + 'a';\n      changed = true;\n    }\n  }\n\n  if (changed) {\n    name_str = JS_NewStringCopyN(cx, name_chars, len);\n    if (!name_str)\n      return nullptr;\n  }\n\n  name_val.setString(name_str);\n  *name_len = len;\n  return name;\n}",
        "output": "0",
        "idx": 4491
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_visitor_in_intList(TestInputVisitorData *data,\n\n                                    const void *unused)\n\n{\n\n    int64_t value[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20};\n\n    int16List *res = NULL, *tmp;\n\n    Error *err = NULL;\n\n    Visitor *v;\n\n    int i = 0;\n\n\n\n    v = visitor_input_test_init(data, \"1,2,0,2-4,20,5-9,1-8\");\n\n\n\n    visit_type_int16List(v, NULL, &res, &error_abort);\n\n    tmp = res;\n\n    while (i < sizeof(value) / sizeof(value[0])) {\n\n        g_assert(tmp);\n\n        g_assert_cmpint(tmp->value, ==, value[i++]);\n\n        tmp = tmp->next;\n\n    }\n\n    g_assert(!tmp);\n\n\n\n    tmp = res;\n\n    while (tmp) {\n\n        res = res->next;\n\n        g_free(tmp);\n\n        tmp = res;\n\n    }\n\n\n\n    visitor_input_teardown(data, unused);\n\n\n\n    v = visitor_input_test_init(data, \"not an int list\");\n\n\n\n    visit_type_int16List(v, NULL, &res, &err);\n\n    /* FIXME fix the visitor, then error_free_or_abort(&err) here */\n\n}\n",
        "output": "1",
        "idx": 2440
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int stdio_pclose(void *opaque)\n\n{\n\n    QEMUFileStdio *s = opaque;\n\n    int ret;\n\n    ret = pclose(s->stdio_file);\n\n    if (ret == -1) {\n\n        ret = -errno;\n\n    } else if (!WIFEXITED(ret) || WEXITSTATUS(ret) != 0) {\n\n        /* close succeeded, but non-zero exit code: */\n\n        ret = -EIO; /* fake errno value */\n\n    }\n\n    g_free(s);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 4186
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unsigned paravirt_patch_call(void *insnbuf,\n\t\t\t     const void *target, u16 tgt_clobbers,\n\t\t\t     unsigned long addr, u16 site_clobbers,\n\t\t\t     unsigned len)\n{\n\tstruct branch *b = insnbuf;\n\tunsigned long delta = (unsigned long)target - (addr+5);\n\n\tif (tgt_clobbers & ~site_clobbers)\n\t\treturn len;\t/* target would clobber too much for this site */\n\tif (len < 5)\n\t\treturn len;\t/* call too long for patch site */\n\n\tb->opcode = 0xe8; /* call */\n\tb->delta = delta;\n\tBUILD_BUG_ON(sizeof(*b) != 5);\n\n\treturn 5;\n}",
        "output": "1",
        "idx": 2119
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "extract_header_length(uint16_t fc)\n{\n\tint len = 0;\n\n\tswitch ((fc >> 10) & 0x3) {\n\tcase 0x00:\n\t\tif (fc & (1 << 6)) /* intra-PAN with none dest addr */\n\t\t\treturn -1;\n\t\tbreak;\n\tcase 0x01:\n\t\treturn -1;\n\tcase 0x02:\n\t\tlen += 4;\n\t\tbreak;\n\tcase 0x03:\n\t\tlen += 10;\n\t\tbreak;\n\t}\n\n\tswitch ((fc >> 14) & 0x3) {\n\tcase 0x00:\n\t\tbreak;\n\tcase 0x01:\n\t\treturn -1;\n\tcase 0x02:\n\t\tlen += 4;\n\t\tbreak;\n\tcase 0x03:\n\t\tlen += 10;\n\t\tbreak;\n\t}\n\n\tif (fc & (1 << 6)) {\n\t\tif (len < 2)\n\t\t\treturn -1;\n\t\tlen -= 2;\n\t}\n\n\treturn len;\n}",
        "output": "1",
        "idx": 5908
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void audio_init (PCIBus *pci_bus)\n\n{\n\n    struct soundhw *c;\n\n    int audio_enabled = 0;\n\n\n\n    for (c = soundhw; !audio_enabled && c->name; ++c) {\n\n        audio_enabled = c->enabled;\n\n    }\n\n\n\n    if (audio_enabled) {\n\n        AudioState *s;\n\n\n\n        s = AUD_init ();\n\n        if (s) {\n\n            for (c = soundhw; c->name; ++c) {\n\n                if (c->enabled)\n\n                    c->init.init_pci (pci_bus, s);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4604
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void Compute(OpKernelContext* ctx) override {\n    const Tensor& handle = ctx->input(0);\n    const string& name = handle.scalar<tstring>()();\n    OP_REQUIRES_OK(ctx, ctx->session_state()->DeleteTensor(name));\n  }",
        "output": "1",
        "idx": 5287
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int selinux_quotactl(int cmds, int type, int id, struct super_block *sb)\n{\n\tconst struct cred *cred = current_cred();\n\tint rc = 0;\n\n\tif (!sb)\n\t\treturn 0;\n\n\tswitch (cmds) {\n\tcase Q_SYNC:\n\tcase Q_QUOTAON:\n\tcase Q_QUOTAOFF:\n\tcase Q_SETINFO:\n\tcase Q_SETQUOTA:\n\t\trc = superblock_has_perm(cred, sb, FILESYSTEM__QUOTAMOD, NULL);\n\t\tbreak;\n\tcase Q_GETFMT:\n\tcase Q_GETINFO:\n\tcase Q_GETQUOTA:\n\t\trc = superblock_has_perm(cred, sb, FILESYSTEM__QUOTAGET, NULL);\n\t\tbreak;\n\tdefault:\n\t\trc = 0;  /* let the kernel handle invalid cmds */\n\t\tbreak;\n\t}\n\treturn rc;\n}",
        "output": "0",
        "idx": 5161
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void br_multicast_start_querier(struct net_bridge *br)\n{\n\tstruct net_bridge_port *port;\n\n\tbr_multicast_open(br);\n\n\tlist_for_each_entry(port, &br->port_list, list) {\n\t\tif (port->state == BR_STATE_DISABLED ||\n\t\t    port->state == BR_STATE_BLOCKING)\n\t\t\tcontinue;\n\n\t\t__br_multicast_enable_port(port);\n\t}\n}",
        "output": "0",
        "idx": 5058
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nf_ct_frag6_evictor(void)\n{\n\tlocal_bh_disable();\n\tinet_frag_evictor(&nf_init_frags, &nf_frags);\n\tlocal_bh_enable();\n}",
        "output": "0",
        "idx": 765
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int compute_send_delay(HTTPContext *c)\n\n{\n\n    int datarate = 8 * get_longterm_datarate(&c->datarate, c->data_count); \n\n\n\n    if (datarate > c->stream->bandwidth * 2000) {\n\n        return 1000;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 245
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void destroy_super(struct super_block *s)\n{\n\tint i;\n\tlist_lru_destroy(&s->s_dentry_lru);\n\tlist_lru_destroy(&s->s_inode_lru);\n#ifdef CONFIG_SMP\n\tfree_percpu(s->s_files);\n#endif\n\tfor (i = 0; i < SB_FREEZE_LEVELS; i++)\n\t\tpercpu_counter_destroy(&s->s_writers.counter[i]);\n\tsecurity_sb_free(s);\n\tWARN_ON(!list_empty(&s->s_mounts));\n\tkfree(s->s_subtype);\n\tkfree(s->s_options);\n\tkfree_rcu(s, rcu);\n}",
        "output": "1",
        "idx": 2978
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void net_dmaengine_put(void)\n{\n}",
        "output": "1",
        "idx": 2684
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "snmp_reset_var_types(netsnmp_variable_list * vbl, u_char new_type)\n{\n    while (vbl) {\n        snmp_set_var_typed_value(vbl, new_type, NULL, 0);\n        vbl = vbl->next_variable;\n    }\n}",
        "output": "0",
        "idx": 3517
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "synthesize_aaaa(const uint8_t prefix_addr[], size_t prefix_addr_len,\n\tint prefix_net, const uint8_t a[], size_t a_len, uint8_t aaaa[],\n\tsize_t aaaa_len)\n{\n    size_t i;\n    int pos;\n    log_assert(prefix_addr_len == 16 && a_len == 4 && aaaa_len == 16);\n    log_assert(prefix_net == 32 || prefix_net == 40 || prefix_net == 48 ||\n        prefix_net == 56 || prefix_net == 64 || prefix_net == 96);\n    (void)prefix_addr_len; (void)a_len; (void)aaaa_len;\n    memcpy(aaaa, prefix_addr, 16);\n    for(i = 0, pos = prefix_net / 8; i < a_len; i++, pos++) {\n        if(pos == 8)\n            aaaa[pos++] = 0;\n        aaaa[pos] = a[i];\n    }\n}",
        "output": "0",
        "idx": 4975
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GC_API GC_ATTR_MALLOC void * GC_CALL GC_debug_gcj_malloc(size_t lb,\n                void * ptr_to_struct_containing_descr, GC_EXTRA_PARAMS)\n{\n    void * result;\n    DCL_LOCK_STATE;\n\n    /* We're careful to avoid extra calls, which could          */\n    /* confuse the backtrace.                                   */\n    LOCK();\n    maybe_finalize();\n    result = GC_generic_malloc_inner(lb + DEBUG_BYTES, GC_gcj_debug_kind);\n    if (result == 0) {\n        GC_oom_func oom_fn = GC_oom_fn;\n        UNLOCK();\n        GC_err_printf(\"GC_debug_gcj_malloc(%lu, %p) returning NULL (%s:%d)\\n\",\n                (unsigned long)lb, ptr_to_struct_containing_descr, s, i);\n        return((*oom_fn)(lb));\n    }\n    *((void **)((ptr_t)result + sizeof(oh))) = ptr_to_struct_containing_descr;\n    UNLOCK();\n    if (!GC_debugging_started) {\n        GC_start_debugging();\n    }\n    ADD_CALL_CHAIN(result, ra);\n    return (GC_store_debug_info(result, (word)lb, s, i));\n}",
        "output": "1",
        "idx": 5416
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ssh_scp_response(ssh_scp scp, char **response){\n\tunsigned char code;\n\tint r;\n\tchar msg[128];\n\tif(scp==NULL)\n\t    return SSH_ERROR;\n\tr=ssh_channel_read(scp->channel,&code,1,0);\n\tif(r == SSH_ERROR)\n\t\treturn SSH_ERROR;\n\tif(code == 0)\n\t\treturn 0;\n\tif(code > 2){\n\t\tssh_set_error(scp->session,SSH_FATAL, \"SCP: invalid status code %ud received\", code);\n\t\tscp->state=SSH_SCP_ERROR;\n\t\treturn SSH_ERROR;\n\t}\n\tr=ssh_scp_read_string(scp,msg,sizeof(msg));\n\tif(r==SSH_ERROR)\n\t\treturn r;\n\t/* Warning */\n\tif(code == 1){\n\t\tssh_set_error(scp->session,SSH_REQUEST_DENIED, \"SCP: Warning: status code 1 received: %s\", msg);\n\t\tSSH_LOG(SSH_LOG_RARE,\"SCP: Warning: status code 1 received: %s\", msg);\n\t\tif(response)\n\t\t\t*response=strdup(msg);\n\t\treturn 1;\n\t}\n\tif(code == 2){\n\t\tssh_set_error(scp->session,SSH_FATAL, \"SCP: Error: status code 2 received: %s\", msg);\n\t\tif(response)\n\t\t\t*response=strdup(msg);\n\t\treturn 2;\n\t}\n\t/* Not reached */\n\treturn SSH_ERROR;\n}",
        "output": "1",
        "idx": 4228
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int qxl_init_secondary(PCIDevice *dev)\n\n{\n\n    static int device_id = 1;\n\n    PCIQXLDevice *qxl = DO_UPCAST(PCIQXLDevice, pci, dev);\n\n\n\n    qxl->id = device_id++;\n\n    qxl_init_ramsize(qxl, 16);\n\n    memory_region_init_ram(&qxl->vga.vram, \"qxl.vgavram\", qxl->vga.vram_size);\n\n    vmstate_register_ram(&qxl->vga.vram, &qxl->pci.qdev);\n\n    qxl->vga.vram_ptr = memory_region_get_ram_ptr(&qxl->vga.vram);\n\n\n\n    return qxl_init_common(qxl);\n\n}\n",
        "output": "1",
        "idx": 4159
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "R_API ut64 r_bin_java_get_main(RBinJavaObj *bin) {\n\tif (bin->main_code_attr) {\n\t\treturn bin->main_code_attr->info.code_attr.code_offset + bin->loadaddr;\n\t}\n\treturn 0;\n}",
        "output": "0",
        "idx": 638
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void openpic_load_IRQ_queue(QEMUFile* f, IRQQueue *q)\n\n{\n\n    unsigned int i;\n\n\n\n    for (i = 0; i < BF_WIDTH(MAX_IRQ); i++)\n\n        qemu_get_be32s(f, &q->queue[i]);\n\n\n\n    qemu_get_sbe32s(f, &q->next);\n\n    qemu_get_sbe32s(f, &q->priority);\n\n}\n",
        "output": "0",
        "idx": 1243
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void etm_event_read(struct perf_event *event) {}",
        "output": "0",
        "idx": 2066
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void setDoNotValidateRouteConfig(\n    envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm) {\n  auto* route_config = hcm.mutable_route_config();\n  route_config->mutable_validate_clusters()->set_value(false);\n};",
        "output": "0",
        "idx": 4730
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void vncws_tls_handshake_peek(void *opaque)\n\n{\n\n    VncState *vs = opaque;\n\n    long ret;\n\n\n\n    if (!vs->ws_tls.session) {\n\n        char peek[4];\n\n        ret = qemu_recv(vs->csock, peek, sizeof(peek), MSG_PEEK);\n\n        if (ret && (strncmp(peek, \"\\x16\", 1) == 0\n\n                    || strncmp(peek, \"\\x80\", 1) == 0)) {\n\n            VNC_DEBUG(\"TLS Websocket connection recognized\");\n\n            vnc_tls_client_setup(vs, 1);\n\n            vncws_start_tls_handshake(vs);\n\n        } else {\n\n            vncws_handshake_read(vs);\n\n        }\n\n    } else {\n\n        qemu_set_fd_handler2(vs->csock, NULL, vncws_handshake_read, NULL, vs);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1935
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void blk_mq_rq_timed_out(struct request *req, bool reserved)\n{\n\tstruct blk_mq_ops *ops = req->q->mq_ops;\n\tenum blk_eh_timer_return ret = BLK_EH_RESET_TIMER;\n\n\t/*\n\t * We know that complete is set at this point. If STARTED isn't set\n\t * anymore, then the request isn't active and the \"timeout\" should\n\t * just be ignored. This can happen due to the bitflag ordering.\n\t * Timeout first checks if STARTED is set, and if it is, assumes\n\t * the request is active. But if we race with completion, then\n\t * we both flags will get cleared. So check here again, and ignore\n\t * a timeout event with a request that isn't active.\n\t */\n\tif (!test_bit(REQ_ATOM_STARTED, &req->atomic_flags))\n\t\treturn;\n\n\tif (ops->timeout)\n\t\tret = ops->timeout(req, reserved);\n\n\tswitch (ret) {\n\tcase BLK_EH_HANDLED:\n\t\t__blk_mq_complete_request(req);\n\t\tbreak;\n\tcase BLK_EH_RESET_TIMER:\n\t\tblk_add_timer(req);\n\t\tblk_clear_rq_complete(req);\n\t\tbreak;\n\tcase BLK_EH_NOT_HANDLED:\n\t\tbreak;\n\tdefault:\n\t\tprintk(KERN_ERR \"block: bad eh return: %d\\n\", ret);\n\t\tbreak;\n\t}\n}",
        "output": "0",
        "idx": 4031
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int32_t DecimalQuantity::getLowerDisplayMagnitude() const {\n    // If this assertion fails, you need to call roundToInfinity() or some other rounding method.\n    // See the comment in the header file explaining the \"isApproximate\" field.\n    U_ASSERT(!isApproximate);\n\n    int32_t magnitude = scale;\n    int32_t result = (rReqPos < magnitude) ? rReqPos : (rOptPos > magnitude) ? rOptPos : magnitude;\n    return result;\n}",
        "output": "0",
        "idx": 3270
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ntlm_print_message_fields(NTLM_MESSAGE_FIELDS* fields, const char* name)\n{\n\tWLog_DBG(TAG, \"%s (Len: %\"PRIu16\" MaxLen: %\"PRIu16\" BufferOffset: %\"PRIu32\")\",\n\t         name, fields->Len, fields->MaxLen, fields->BufferOffset);\n\n\tif (fields->Len > 0)\n\t\twinpr_HexDump(TAG, WLOG_DEBUG, fields->Buffer, fields->Len);\n}",
        "output": "1",
        "idx": 3939
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "R_API int r_sys_cmd_str_full(const char *cmd, const char *input, char **output, int *len, char **sterr) {\n\treturn r_sys_cmd_str_full_w32 (cmd, input, output, len, sterr);\n}",
        "output": "1",
        "idx": 1747
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ff_lseg_merge(struct pnfs_layout_segment *new,\n\t\tstruct pnfs_layout_segment *old)\n{\n\tu64 new_end, old_end;\n\n\tif (test_bit(NFS_LSEG_LAYOUTRETURN, &old->pls_flags))\n\t\treturn false;\n\tif (new->pls_range.iomode != old->pls_range.iomode)\n\t\treturn false;\n\told_end = pnfs_calc_offset_end(old->pls_range.offset,\n\t\t\told->pls_range.length);\n\tif (old_end < new->pls_range.offset)\n\t\treturn false;\n\tnew_end = pnfs_calc_offset_end(new->pls_range.offset,\n\t\t\tnew->pls_range.length);\n\tif (new_end < old->pls_range.offset)\n\t\treturn false;\n\tif (!ff_lseg_match_mirrors(new, old))\n\t\treturn false;\n\n\t/* Mergeable: copy info from 'old' to 'new' */\n\tif (new_end < old_end)\n\t\tnew_end = old_end;\n\tif (new->pls_range.offset < old->pls_range.offset)\n\t\tnew->pls_range.offset = old->pls_range.offset;\n\tnew->pls_range.length = pnfs_calc_offset_length(new->pls_range.offset,\n\t\t\tnew_end);\n\tif (test_bit(NFS_LSEG_ROC, &old->pls_flags))\n\t\tset_bit(NFS_LSEG_ROC, &new->pls_flags);\n\treturn true;\n}",
        "output": "0",
        "idx": 2478
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "NIAddSpell(IspellDict *Conf, const char *word, const char *flag)\n{\n\tif (Conf->nspell >= Conf->mspell)\n\t{\n\t\tif (Conf->mspell)\n\t\t{\n\t\t\tConf->mspell *= 2;\n\t\t\tConf->Spell = (SPELL **) repalloc(Conf->Spell, Conf->mspell * sizeof(SPELL *));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tConf->mspell = 1024 * 20;\n\t\t\tConf->Spell = (SPELL **) tmpalloc(Conf->mspell * sizeof(SPELL *));\n\t\t}\n\t}\n\tConf->Spell[Conf->nspell] = (SPELL *) tmpalloc(SPELLHDRSZ + strlen(word) + 1);\n\tstrcpy(Conf->Spell[Conf->nspell]->word, word);\n\tstrncpy(Conf->Spell[Conf->nspell]->p.flag, flag, MAXFLAGLEN);\n\tConf->nspell++;\n}",
        "output": "1",
        "idx": 188
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_POWER_abso (void)\n\n{\n\n    if (T0 == INT32_MIN) {\n\n        T0 = INT32_MAX;\n\n        xer_ov = 1;\n\n        xer_so = 1;\n\n    } else {\n\n        T0 = -T0;\n\n        xer_ov = 0;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3552
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_info_trace(Monitor *mon)\n\n{\n\n    st_print_trace((FILE *)mon, &monitor_fprintf);\n\n}\n",
        "output": "1",
        "idx": 843
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mlx5_tx_wseg_init(struct mlx5_txq_data *restrict txq,\n\t\t  struct mlx5_txq_local *restrict loc __rte_unused,\n\t\t  struct mlx5_wqe *restrict wqe,\n\t\t  unsigned int wci,\n\t\t  unsigned int olx __rte_unused)\n{\n\tstruct mlx5_wqe_qseg *qs;\n\n\tqs = RTE_PTR_ADD(wqe, MLX5_WSEG_SIZE);\n\tqs->max_index = rte_cpu_to_be_32(wci);\n\tqs->qpn_cqn = rte_cpu_to_be_32(txq->sh->txpp.clock_queue.cq->id);\n\tqs->reserved0 = RTE_BE32(0);\n\tqs->reserved1 = RTE_BE32(0);\n}",
        "output": "0",
        "idx": 3292
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "COMPS_Object* comps_objrtree_get(COMPS_ObjRTree * rt, const char * key) {\n    return comps_object_incref(__comps_objrtree_get(rt, key));\n}",
        "output": "0",
        "idx": 1859
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char **mysql_sys_var_str(THD* thd, int offset)\n{\n  return (char **) intern_sys_var_ptr(thd, offset, true);\n}",
        "output": "0",
        "idx": 3393
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CURLcode read_data(struct connectdata *conn,\n                          curl_socket_t fd,\n                          struct krb5buffer *buf)\n{\n  int len;\n  CURLcode result;\n\n  result = socket_read(fd, &len, sizeof(len));\n  if(result)\n    return result;\n\n  if(len) {\n    /* only realloc if there was a length */\n    len = ntohl(len);\n    buf->data = Curl_saferealloc(buf->data, len);\n  }\n  if(!len || !buf->data)\n    return CURLE_OUT_OF_MEMORY;\n\n  result = socket_read(fd, buf->data, len);\n  if(result)\n    return result;\n  buf->size = conn->mech->decode(conn->app_data, buf->data, len,\n                                 conn->data_prot, conn);\n  buf->index = 0;\n  return CURLE_OK;\n}",
        "output": "1",
        "idx": 1106
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int early_data_count_ok(SSL *s, size_t length, size_t overhead, int *al)\n{\n    uint32_t max_early_data = s->max_early_data;\n\n    /*\n     * We go with the lowest out of the max early data set in the session\n     * and the configured max_early_data.\n     */\n    if (s->hit && s->session->ext.max_early_data < s->max_early_data)\n        max_early_data = s->session->ext.max_early_data;\n\n    if (max_early_data == 0) {\n        *al = SSL_AD_UNEXPECTED_MESSAGE;\n        SSLerr(SSL_F_EARLY_DATA_COUNT_OK, SSL_R_TOO_MUCH_EARLY_DATA);\n        return 0;\n    }\n\n    /* If we are dealing with ciphertext we need to allow for the overhead */\n    max_early_data += overhead;\n\n    s->early_data_count += length;\n    if (s->early_data_count > max_early_data) {\n        *al = SSL_AD_UNEXPECTED_MESSAGE;\n        SSLerr(SSL_F_EARLY_DATA_COUNT_OK, SSL_R_TOO_MUCH_EARLY_DATA);\n        return 0;\n    }\n\n    return 1;\n}",
        "output": "0",
        "idx": 1509
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cmsUInt32Number CMSEXPORT cmsNamedColorCount(const cmsNAMEDCOLORLIST* NamedColorList)\n{\n     if (NamedColorList == NULL) return 0;\n     return NamedColorList ->nColors;\n}",
        "output": "0",
        "idx": 571
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ip_options_get_from_user(struct net *net, struct ip_options **optp,\n\t\t\t     unsigned char __user *data, int optlen)\n{\n\tstruct ip_options *opt = ip_options_get_alloc(optlen);\n\n\tif (!opt)\n\t\treturn -ENOMEM;\n\tif (optlen && copy_from_user(opt->__data, data, optlen)) {\n\t\tkfree(opt);\n\t\treturn -EFAULT;\n\t}\n\treturn ip_options_get_finish(net, optp, opt, optlen);\n}",
        "output": "1",
        "idx": 2677
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tap_set_sndbuf(TAPState *s, const char *sndbuf_str, Monitor *mon)\n\n{\n\n    if (sndbuf_str) {\n\n        config_error(mon, \"No '-net tap,sndbuf=<nbytes>' support available\\n\");\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2014
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "datetime_s_httpdate(int argc, VALUE *argv, VALUE klass)\n{\n    VALUE str, sg;\n\n    rb_scan_args(argc, argv, \"02\", &str, &sg);\n\n    switch (argc) {\n      case 0:\n\tstr = rb_str_new2(\"Mon, 01 Jan -4712 00:00:00 GMT\");\n      case 1:\n\tsg = INT2FIX(DEFAULT_SG);\n    }\n\n    {\n\tVALUE hash = date_s__httpdate(klass, str);\n\treturn dt_new_by_frags(klass, hash, sg);\n    }\n}",
        "output": "1",
        "idx": 5435
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int X509_get_signature_nid(const X509 *x)\n{\n\treturn OBJ_obj2nid(x->sig_alg->algorithm);\n}",
        "output": "0",
        "idx": 1059
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int tcp_socket_outgoing_spec(const char *address_and_port)\n\n{\n\n    return inet_connect(address_and_port, true, NULL);\n\n}\n",
        "output": "0",
        "idx": 5517
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ENCODE_JSON(SByte) {\n    char buf[5];\n    UA_UInt16 digits = itoaSigned(*src, buf);\n    if(ctx->pos + digits > ctx->end)\n        return UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED;\n    if(!ctx->calcOnly)\n        memcpy(ctx->pos, buf, digits);\n    ctx->pos += digits;\n    return UA_STATUSCODE_GOOD;\n}",
        "output": "0",
        "idx": 3061
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void string_output_visitor_cleanup(StringOutputVisitor *sov)\n\n{\n\n    if (sov->string) {\n\n        g_string_free(sov->string, true);\n\n    }\n\n\n\n    g_list_foreach(sov->ranges, free_range, NULL);\n\n    g_list_free(sov->ranges);\n\n    g_free(sov);\n\n}\n",
        "output": "0",
        "idx": 5341
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "aes128_encrypt_ecb(const unsigned char *key, int keysize,\n\t\tconst unsigned char *input, size_t length, unsigned char *output)\n{\n\tunsigned char iv[EVP_MAX_IV_LENGTH] = { 0 };\n\treturn openssl_enc(EVP_aes_128_ecb(), key, iv, input, length, output);\n}",
        "output": "0",
        "idx": 2919
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ext4_read_block_bitmap(struct super_block *sb, ext4_group_t block_group)\n{\n\tstruct buffer_head *bh;\n\tint err;\n\n\tbh = ext4_read_block_bitmap_nowait(sb, block_group);\n\tif (IS_ERR(bh))\n\t\treturn bh;\n\terr = ext4_wait_block_bitmap(sb, block_group, bh);\n\tif (err) {\n\t\tput_bh(bh);\n\t\treturn ERR_PTR(err);\n\t}\n\treturn bh;\n}",
        "output": "0",
        "idx": 4823
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMI_RH_ENDORSEMENT_Unmarshal(TPMI_RH_ENDORSEMENT *target, BYTE **buffer, INT32 *size, BOOL allowNull)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n\n    if (rc == TPM_RC_SUCCESS) {\n\trc = TPM_HANDLE_Unmarshal(target, buffer, size);  \n    }\n    if (rc == TPM_RC_SUCCESS) {\n\tswitch (*target) {\n\t  case TPM_RH_ENDORSEMENT:\n\t    break;\n\t  case TPM_RH_NULL:\n\t    if (allowNull) {\n\t\tbreak;\n\t    }\n\t  default:\n\t    rc = TPM_RC_VALUE;\n\t}\n    }\n    return rc;\n}",
        "output": "1",
        "idx": 4325
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int rpc_type_of_NPNVariable(int variable)\n{\n  int type;\n  switch (variable) {\n  case NPNVjavascriptEnabledBool:\n  case NPNVasdEnabledBool:\n  case NPNVisOfflineBool:\n  case NPNVSupportsXEmbedBool:\n  case NPNVSupportsWindowless:\n\ttype = RPC_TYPE_BOOLEAN;\n\tbreak;\n  case NPNVToolkit:\n  case NPNVnetscapeWindow:\n\ttype = RPC_TYPE_UINT32;\n\tbreak;\n  case NPNVWindowNPObject:\n  case NPNVPluginElementNPObject:\n\ttype = RPC_TYPE_NP_OBJECT;\n\tbreak;\n  default:\n\ttype = RPC_ERROR_GENERIC;\n\tbreak;\n  }\n  return type;\n}",
        "output": "1",
        "idx": 4759
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void op_mtc0_ebase (void)\n\n{\n\n    /* vectored interrupts not implemented */\n\n    /* Multi-CPU not implemented */\n\n    env->CP0_EBase = (int32_t)0x80000000 | (T0 & 0x3FFFF000);\n\n    RETURN();\n\n}\n",
        "output": "0",
        "idx": 570
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void WebContents::Invoke(\n    bool internal,\n    const std::string& channel,\n    blink::CloneableMessage arguments,\n    electron::mojom::ElectronBrowser::InvokeCallback callback,\n    content::RenderFrameHost* render_frame_host) {\n  TRACE_EVENT1(\"electron\", \"WebContents::Invoke\", \"channel\", channel);\n  // webContents.emit('-ipc-invoke', new Event(), internal, channel, arguments);\n  EmitWithSender(\"-ipc-invoke\", render_frame_host, std::move(callback),\n                 internal, channel, std::move(arguments));\n}",
        "output": "1",
        "idx": 1034
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vfio_msi_enable(struct vfio_pci_device *vdev, int nvec, bool msix)\n{\n\tstruct pci_dev *pdev = vdev->pdev;\n\tunsigned int flag = msix ? PCI_IRQ_MSIX : PCI_IRQ_MSI;\n\tint ret;\n\n\tif (!is_irq_none(vdev))\n\t\treturn -EINVAL;\n\n\tvdev->ctx = kzalloc(nvec * sizeof(struct vfio_pci_irq_ctx), GFP_KERNEL);\n\tif (!vdev->ctx)\n\t\treturn -ENOMEM;\n\n\t/* return the number of supported vectors if we can't get all: */\n\tret = pci_alloc_irq_vectors(pdev, 1, nvec, flag);\n\tif (ret < nvec) {\n\t\tif (ret > 0)\n\t\t\tpci_free_irq_vectors(pdev);\n\t\tkfree(vdev->ctx);\n\t\treturn ret;\n\t}\n\n\tvdev->num_ctx = nvec;\n\tvdev->irq_type = msix ? VFIO_PCI_MSIX_IRQ_INDEX :\n\t\t\t\tVFIO_PCI_MSI_IRQ_INDEX;\n\n\tif (!msix) {\n\t\t/*\n\t\t * Compute the virtual hardware field for max msi vectors -\n\t\t * it is the log base 2 of the number of vectors.\n\t\t */\n\t\tvdev->msi_qmax = fls(nvec * 2 - 1) - 1;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 1905
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ztype0_adjust_FDepVector(gs_font_type0 * pfont)\n{\n    gs_memory_t *mem = pfont->memory;\n    /* HACK: We know the font was allocated by the interpreter. */\n    gs_ref_memory_t *imem = (gs_ref_memory_t *)mem;\n    gs_font **pdep = pfont->data.FDepVector;\n    ref newdep;\n    uint fdep_size = pfont->data.fdep_size;\n    ref *prdep;\n    uint i;\n    int code = gs_alloc_ref_array(imem, &newdep, a_readonly, fdep_size,\n                                  \"ztype0_adjust_matrix\");\n\n    if (code < 0)\n        return code;\n    for (prdep = newdep.value.refs, i = 0; i < fdep_size; i++, prdep++) {\n        const ref *pdict = pfont_dict(pdep[i]);\n\n        ref_assign(prdep, pdict);\n        r_set_attrs(prdep, imemory_new_mask(imem));\n    }\n    /*\n     * The FDepVector is an existing key in the parent's dictionary,\n     * so it's safe to pass NULL as the dstack pointer to dict_put_string.\n     */\n    return dict_put_string(pfont_dict(pfont), \"FDepVector\", &newdep, NULL);\n}",
        "output": "0",
        "idx": 2850
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int evtchn_fifo_percpu_deinit(unsigned int cpu)\n{\n\t__evtchn_fifo_handle_events(cpu, true);\n\treturn 0;\n}",
        "output": "1",
        "idx": 764
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void imap_mbox_select(struct Mailbox *m)\n{\n  struct ImapAccountData *adata = imap_adata_get(m);\n  struct ImapMboxData *mdata = imap_mdata_get(m);\n  if (!adata || !mdata)\n    return;\n\n  const char *condstore = NULL;\n#ifdef USE_HCACHE\n  if ((adata->capabilities & IMAP_CAP_CONDSTORE) && C_ImapCondstore)\n    condstore = \" (CONDSTORE)\";\n  else\n#endif\n    condstore = \"\";\n\n  char buf[PATH_MAX];\n  snprintf(buf, sizeof(buf), \"%s %s%s\", m->readonly ? \"EXAMINE\" : \"SELECT\",\n           mdata->munge_name, condstore);\n\n  adata->state = IMAP_SELECTED;\n\n  imap_cmd_start(adata, buf);\n}",
        "output": "0",
        "idx": 4064
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline unsigned int ScaleQuantumToLong(const Quantum quantum)\n{\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  return((unsigned int) quantum);\n#else\n  if (quantum <= 0.0)\n    return(0);\n  if ((quantum) >= 4294967295.0)\n    return(4294967295);\n  return((unsigned int) (quantum+0.5));\n#endif\n}",
        "output": "1",
        "idx": 495
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xen_host_pci_sysfs_path(const XenHostPCIDevice *d,\n\n                                   const char *name, char *buf, ssize_t size)\n\n{\n\n    int rc;\n\n\n\n    rc = snprintf(buf, size, \"/sys/bus/pci/devices/%04x:%02x:%02x.%d/%s\",\n\n                  d->domain, d->bus, d->dev, d->func, name);\n\n\n\n    if (rc >= size || rc < 0) {\n\n        /* The output is truncated, or some other error was encountered */\n\n        return -ENODEV;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2533
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static double setup_compress_thresh(double threshold)\n\n{\n\n    if ((threshold > DBL_EPSILON) && (threshold < (1.0 - DBL_EPSILON))) {\n\n        double current_threshold = threshold;\n\n        double step_size = 1.0;\n\n\n\n        while (step_size > DBL_EPSILON) {\n\n            while ((current_threshold + step_size > current_threshold) &&\n\n                   (bound(current_threshold + step_size, 1.0) <= threshold)) {\n\n                current_threshold += step_size;\n\n            }\n\n\n\n            step_size /= 2.0;\n\n        }\n\n\n\n        return current_threshold;\n\n    } else {\n\n        return threshold;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3362
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ip6_find_1stfragopt(struct sk_buff *skb, u8 **nexthdr)\n{\n\tu16 offset = sizeof(struct ipv6hdr);\n\tunsigned int packet_len = skb_tail_pointer(skb) -\n\t\tskb_network_header(skb);\n\tint found_rhdr = 0;\n\t*nexthdr = &ipv6_hdr(skb)->nexthdr;\n\n\twhile (offset <= packet_len) {\n\t\tstruct ipv6_opt_hdr *exthdr;\n\n\t\tswitch (**nexthdr) {\n\n\t\tcase NEXTHDR_HOP:\n\t\t\tbreak;\n\t\tcase NEXTHDR_ROUTING:\n\t\t\tfound_rhdr = 1;\n\t\t\tbreak;\n\t\tcase NEXTHDR_DEST:\n#if IS_ENABLED(CONFIG_IPV6_MIP6)\n\t\t\tif (ipv6_find_tlv(skb, offset, IPV6_TLV_HAO) >= 0)\n\t\t\t\tbreak;\n#endif\n\t\t\tif (found_rhdr)\n\t\t\t\treturn offset;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn offset;\n\t\t}\n\n\t\tif (offset + sizeof(struct ipv6_opt_hdr) > packet_len)\n\t\t\treturn -EINVAL;\n\n\t\texthdr = (struct ipv6_opt_hdr *)(skb_network_header(skb) +\n\t\t\t\t\t\t offset);\n\t\toffset += ipv6_optlen(exthdr);\n\t\t*nexthdr = &exthdr->nexthdr;\n\t}\n\n\treturn -EINVAL;\n}",
        "output": "1",
        "idx": 5796
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int pep_write(struct sock *sk, struct sk_buff *skb)\n{\n\tstruct sk_buff *rskb, *fs;\n\tint flen = 0;\n\n\tif (pep_sk(sk)->aligned)\n\t\treturn pipe_skb_send(sk, skb);\n\n\trskb = alloc_skb(MAX_PNPIPE_HEADER, GFP_ATOMIC);\n\tif (!rskb) {\n\t\tkfree_skb(skb);\n\t\treturn -ENOMEM;\n\t}\n\tskb_shinfo(rskb)->frag_list = skb;\n\trskb->len += skb->len;\n\trskb->data_len += rskb->len;\n\trskb->truesize += rskb->len;\n\n\t/* Avoid nested fragments */\n\tskb_walk_frags(skb, fs)\n\t\tflen += fs->len;\n\tskb->next = skb_shinfo(skb)->frag_list;\n\tskb_frag_list_init(skb);\n\tskb->len -= flen;\n\tskb->data_len -= flen;\n\tskb->truesize -= flen;\n\n\tskb_reserve(rskb, MAX_PHONET_HEADER + 3);\n\treturn pipe_skb_send(sk, rskb);\n}",
        "output": "0",
        "idx": 1728
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void av_opencl_buffer_release(cl_mem *cl_buf)\n\n{\n\n    cl_int status = 0;\n\n    if (!cl_buf)\n\n        return;\n\n    status = clReleaseMemObject(*cl_buf);\n\n    if (status != CL_SUCCESS) {\n\n        av_log(&openclutils, AV_LOG_ERROR, \"Could not release OpenCL buffer: %s\\n\", opencl_errstr(status));\n\n    }\n\n    memset(cl_buf, 0, sizeof(*cl_buf));\n\n}\n",
        "output": "0",
        "idx": 3432
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "HttpStateData::truncateVirginBody()\n{\n    assert(flags.headers_parsed);\n\n    HttpReply *vrep = virginReply();\n    int64_t clen = -1;\n    if (!vrep->expectingBody(request->method, clen) || clen < 0)\n        return; // no body or a body of unknown size, including chunked\n\n    if (payloadSeen - payloadTruncated <= clen)\n        return; // we did not read too much or already took care of the extras\n\n    if (const int64_t extras = payloadSeen - payloadTruncated - clen) {\n        // server sent more that the advertised content length\n        debugs(11, 5, \"payloadSeen=\" << payloadSeen <<\n               \" clen=\" << clen << '/' << vrep->content_length <<\n               \" trucated=\" << payloadTruncated << '+' << extras);\n\n        inBuf.chop(0, inBuf.length() - extras);\n        payloadTruncated += extras;\n    }\n}",
        "output": "0",
        "idx": 1469
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int getSingletonPos(const char* str)\n{\n\tint result =-1;\n\tint i=0;\n\tint len = 0;\n\t\n\tif( str && ((len=strlen(str))>0) ){\n\t\tfor( i=0; i<len ; i++){\n\t\t\tif( isIDSeparator(*(str+i)) ){\n\t\t\t\tif( i==1){\n\t\t\t\t\t/* string is of the form x-avy or a-prv1 */\n\t\t\t\t\tresult =0;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t/* delimiter found; check for singleton */\n\t\t\t\t\tif( isIDSeparator(*(str+i+2)) ){\n\t\t\t\t\t\t/* a singleton; so send the position of separator before singleton */\n\t\t\t\t\t\tresult = i+1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}/* end of for */\n\t\t\n\t}\n\treturn result;\n}",
        "output": "1",
        "idx": 527
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static UINT video_data_on_new_channel_connection(IWTSListenerCallback* pListenerCallback,\n                                                 IWTSVirtualChannel* pChannel, BYTE* Data,\n                                                 BOOL* pbAccept,\n                                                 IWTSVirtualChannelCallback** ppCallback)\n{\n\tVIDEO_CHANNEL_CALLBACK* callback;\n\tVIDEO_LISTENER_CALLBACK* listener_callback = (VIDEO_LISTENER_CALLBACK*)pListenerCallback;\n\n\tWINPR_UNUSED(Data);\n\tWINPR_UNUSED(pbAccept);\n\n\tcallback = (VIDEO_CHANNEL_CALLBACK*)calloc(1, sizeof(VIDEO_CHANNEL_CALLBACK));\n\tif (!callback)\n\t{\n\t\tWLog_ERR(TAG, \"calloc failed!\");\n\t\treturn CHANNEL_RC_NO_MEMORY;\n\t}\n\n\tcallback->iface.OnDataReceived = video_data_on_data_received;\n\tcallback->iface.OnClose = video_data_on_close;\n\tcallback->plugin = listener_callback->plugin;\n\tcallback->channel_mgr = listener_callback->channel_mgr;\n\tcallback->channel = pChannel;\n\tlistener_callback->channel_callback = callback;\n\n\t*ppCallback = (IWTSVirtualChannelCallback*)callback;\n\n\treturn CHANNEL_RC_OK;\n}",
        "output": "0",
        "idx": 911
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void validateUrl(absl::string_view raw_url, absl::string_view expected_scheme,\n                 absl::string_view expected_host_port, absl::string_view expected_path,\n                 uint16_t expected_port) {\n  Utility::Url url;\n  ASSERT_TRUE(url.initialize(raw_url, /*is_connect=*/false)) << \"Failed to initialize \" << raw_url;\n  EXPECT_EQ(url.scheme(), expected_scheme);\n  EXPECT_EQ(url.hostAndPort(), expected_host_port);\n  EXPECT_EQ(url.pathAndQueryParams(), expected_path);\n  EXPECT_EQ(url.port(), expected_port);\n}",
        "output": "1",
        "idx": 5881
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void esp_command_complete(SCSIBus *bus, int reason, uint32_t tag,\n\n                                 uint32_t arg)\n\n{\n\n    ESPState *s = DO_UPCAST(ESPState, busdev.qdev, bus->qbus.parent);\n\n\n\n    if (reason == SCSI_REASON_DONE) {\n\n        DPRINTF(\"SCSI Command complete\\n\");\n\n        if (s->ti_size != 0)\n\n            DPRINTF(\"SCSI command completed unexpectedly\\n\");\n\n        s->ti_size = 0;\n\n        s->dma_left = 0;\n\n        s->async_len = 0;\n\n        if (arg)\n\n            DPRINTF(\"Command failed\\n\");\n\n        s->sense = arg;\n\n        s->rregs[ESP_RSTAT] = STAT_ST;\n\n        esp_dma_done(s);\n\n        s->current_dev = NULL;\n\n    } else {\n\n        DPRINTF(\"transfer %d/%d\\n\", s->dma_left, s->ti_size);\n\n        s->async_len = arg;\n\n        s->async_buf = s->current_dev->info->get_buf(s->current_dev, 0);\n\n        if (s->dma_left) {\n\n            esp_do_dma(s);\n\n        } else if (s->dma_counter != 0 && s->ti_size <= 0) {\n\n            /* If this was the last part of a DMA transfer then the\n\n               completion interrupt is deferred to here.  */\n\n            esp_dma_done(s);\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5372
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static BlockDriverAIOCB *bdrv_aio_rw_vector(BlockDriverState *bs,\n\n                                            int64_t sector_num,\n\n                                            QEMUIOVector *iov,\n\n                                            int nb_sectors,\n\n                                            BlockDriverCompletionFunc *cb,\n\n                                            void *opaque,\n\n                                            int is_write)\n\n\n\n{\n\n    VectorTranslationState *s = qemu_mallocz(sizeof(*s));\n\n    BlockDriverAIOCB *aiocb = qemu_aio_get(bs, cb, opaque);\n\n\n\n    s->this_aiocb = aiocb;\n\n    s->iov = iov;\n\n    s->bounce = qemu_memalign(512, nb_sectors * 512);\n\n    s->is_write = is_write;\n\n    if (is_write) {\n\n        qemu_iovec_to_buffer(s->iov, s->bounce);\n\n        s->aiocb = bdrv_aio_write(bs, sector_num, s->bounce, nb_sectors,\n\n                                  bdrv_aio_rw_vector_cb, s);\n\n    } else {\n\n        s->aiocb = bdrv_aio_read(bs, sector_num, s->bounce, nb_sectors,\n\n                                 bdrv_aio_rw_vector_cb, s);\n\n    }\n\n    return aiocb;\n\n}\n",
        "output": "0",
        "idx": 2638
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool adding_first_cpu(void)\n\n{\n\n    CPUState *cpu;\n\n    size_t count = 0;\n\n    CPU_FOREACH(cpu) {\n\n        count++;\n\n        if (count > 1) {\n\n            return false;\n\n        }\n\n    }\n\n    return true;\n\n}\n",
        "output": "1",
        "idx": 3601
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_hash_speed(const void *opaque)\n\n{\n\n    size_t chunk_size = (size_t)opaque;\n\n    uint8_t *in = NULL, *out = NULL;\n\n    size_t out_len = 0;\n\n    double total = 0.0;\n\n    struct iovec iov;\n\n    int ret;\n\n\n\n    in = g_new0(uint8_t, chunk_size);\n\n    memset(in, g_test_rand_int(), chunk_size);\n\n\n\n    iov.iov_base = (char *)in;\n\n    iov.iov_len = chunk_size;\n\n\n\n    g_test_timer_start();\n\n    do {\n\n        ret = qcrypto_hash_bytesv(QCRYPTO_HASH_ALG_SHA256,\n\n                                  &iov, 1, &out, &out_len,\n\n                                  NULL);\n\n        g_assert(ret == 0);\n\n\n\n        total += chunk_size;\n\n    } while (g_test_timer_elapsed() < 5.0);\n\n\n\n    total /= 1024 * 1024; /* to MB */\n\n    g_print(\"sha256: \");\n\n    g_print(\"Testing chunk_size %ld bytes \", chunk_size);\n\n    g_print(\"done: %.2f MB in %.2f secs: \", total, g_test_timer_last());\n\n    g_print(\"%.2f MB/sec\\n\", total / g_test_timer_last());\n\n\n\n    g_free(out);\n\n    g_free(in);\n\n}\n",
        "output": "1",
        "idx": 3284
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void MongoStatusInfo::fromStatus(JSContext* cx, Status status, JS::MutableHandleValue value) {\n    auto scope = getScope(cx);\n\n    JS::RootedValue undef(cx);\n    undef.setUndefined();\n\n    JS::AutoValueArray<1> args(cx);\n    ValueReader(cx, args[0]).fromStringData(status.reason());\n    JS::RootedObject error(cx);\n    scope->getProto<ErrorInfo>().newInstance(args, &error);\n\n    JS::RootedObject thisv(cx);\n    scope->getProto<MongoStatusInfo>().newObjectWithProto(&thisv, error);\n    ObjectWrapper thisvObj(cx, thisv);\n    thisvObj.defineProperty(InternedString::code,\n                            JSPROP_ENUMERATE,\n                            smUtils::wrapConstrainedMethod<Functions::code, false, MongoStatusInfo>,\n                            nullptr);\n\n    thisvObj.defineProperty(\n        InternedString::reason,\n        JSPROP_ENUMERATE,\n        smUtils::wrapConstrainedMethod<Functions::reason, false, MongoStatusInfo>,\n        nullptr);\n\n    // We intentionally omit JSPROP_ENUMERATE to match how Error.prototype.stack is a non-enumerable\n    // property.\n    thisvObj.defineProperty(\n        InternedString::stack,\n        0,\n        smUtils::wrapConstrainedMethod<Functions::stack, false, MongoStatusInfo>,\n        nullptr);\n\n    JS_SetPrivate(thisv, scope->trackedNew<Status>(std::move(status)));\n\n    value.setObjectOrNull(thisv);\n}",
        "output": "1",
        "idx": 4113
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qerror_abort(const QError *qerr, const char *fmt, ...)\n\n{\n\n    va_list ap;\n\n\n\n    fprintf(stderr, \"qerror: bad call in function '%s':\\n\", qerr->func);\n\n    fprintf(stderr, \"qerror: -> \");\n\n\n\n    va_start(ap, fmt);\n\n    vfprintf(stderr, fmt, ap);\n\n    va_end(ap);\n\n\n\n    fprintf(stderr, \"\\nqerror: call at %s:%d\\n\", qerr->file, qerr->linenr);\n\n    abort();\n\n}\n",
        "output": "0",
        "idx": 598
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "msg_get_seq (struct msg *msg)\n{\n  assert (msg);\n  return ntohl (msg->hdr.msgseq);\n}",
        "output": "0",
        "idx": 2845
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "setup_secureChannel(void) {\n    TestingPolicy(&dummyPolicy, dummyCertificate, &fCalled, &keySizes);\n    UA_SecureChannel_init(&testChannel, &UA_ConnectionConfig_default);\n    UA_SecureChannel_setSecurityPolicy(&testChannel, &dummyPolicy, &dummyCertificate);\n\n    testingConnection = createDummyConnection(65535, &sentData);\n    UA_Connection_attachSecureChannel(&testingConnection, &testChannel);\n    testChannel.connection = &testingConnection;\n\n    testChannel.state = UA_SECURECHANNELSTATE_OPEN;\n}",
        "output": "1",
        "idx": 1906
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int split_field_half_ref_list(Picture *dest, int dest_len,\n\n                                     Picture *src,  int src_len,  int parity){\n\n    int same_parity   = 1;\n\n    int same_i        = 0;\n\n    int opp_i         = 0;\n\n    int out_i;\n\n    int field_output;\n\n\n\n    for (out_i = 0; out_i < dest_len; out_i += field_output) {\n\n        if (same_parity && same_i < src_len) {\n\n            field_output = split_field_copy(dest + out_i, src + same_i,\n\n                                            parity, 1);\n\n            same_parity = !field_output;\n\n            same_i++;\n\n\n\n        } else if (opp_i < src_len) {\n\n            field_output = split_field_copy(dest + out_i, src + opp_i,\n\n                                            PICT_FRAME - parity, 0);\n\n            same_parity = field_output;\n\n            opp_i++;\n\n\n\n        } else {\n\n            break;\n\n        }\n\n    }\n\n\n\n    return out_i;\n\n}\n",
        "output": "0",
        "idx": 3413
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nvic_sysreg_write(void *opaque, target_phys_addr_t addr,\n\n                              uint64_t value, unsigned size)\n\n{\n\n    uint32_t offset = addr;\n\n    if (size == 4) {\n\n        nvic_writel(opaque, offset, value);\n\n        return;\n\n    }\n\n    hw_error(\"NVIC: Bad write of size %d at offset 0x%x\\n\", size, offset);\n\n}\n",
        "output": "0",
        "idx": 5593
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sdl_grab_start(void)\n\n{\n\n    if (guest_cursor) {\n\n        SDL_SetCursor(guest_sprite);\n\n        SDL_WarpMouse(guest_x, guest_y);\n\n    } else\n\n        sdl_hide_cursor();\n\n\n\n    if (SDL_WM_GrabInput(SDL_GRAB_ON) == SDL_GRAB_ON) {\n\n        gui_grab = 1;\n\n        sdl_update_caption();\n\n    } else\n\n        sdl_show_cursor();\n\n}\n",
        "output": "0",
        "idx": 1835
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static file_t* _cast_file(const oe_fd_t* desc)\n{\n    file_t* ret = NULL;\n    file_t* file = (file_t*)desc;\n\n    if (file == NULL || file->magic != FILE_MAGIC)\n        OE_RAISE_ERRNO(OE_EINVAL);\n\n    ret = file;\n\ndone:\n    return ret;\n}",
        "output": "0",
        "idx": 901
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "inline bool IsCharOfType(unsigned char c, SharedCharTypes type) {\n  return !!(kSharedCharTypeTable[c] & type);\n}",
        "output": "0",
        "idx": 2360
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ikev1_sig_print(netdissect_options *ndo, u_char tpay _U_,\n\t\tconst struct isakmp_gen *ext, u_int item_len _U_,\n\t\tconst u_char *ep _U_, uint32_t phase _U_, uint32_t doi _U_,\n\t\tuint32_t proto _U_, int depth _U_)\n{\n\tstruct isakmp_gen e;\n\n\tND_PRINT((ndo,\"%s:\", NPSTR(ISAKMP_NPTYPE_SIG)));\n\n\tND_TCHECK(*ext);\n\tUNALIGNED_MEMCPY(&e, ext, sizeof(e));\n\tND_PRINT((ndo,\" len=%d\", ntohs(e.len) - 4));\n\tif (2 < ndo->ndo_vflag && 4 < ntohs(e.len)) {\n\t\tND_PRINT((ndo,\" \"));\n\t\tif (!rawprint(ndo, (const uint8_t *)(ext + 1), ntohs(e.len) - 4))\n\t\t\tgoto trunc;\n\t}\n\treturn (const u_char *)ext + ntohs(e.len);\ntrunc:\n\tND_PRINT((ndo,\" [|%s]\", NPSTR(ISAKMP_NPTYPE_SIG)));\n\treturn NULL;\n}",
        "output": "1",
        "idx": 1159
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline u32 ___skb_get_hash(const struct sk_buff *skb,\n\t\t\t\t  struct flow_keys *keys, u32 keyval)\n{\n\tskb_flow_dissect_flow_keys(skb, keys,\n\t\t\t\t   FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL);\n\n\treturn __flow_hash_from_keys(keys, keyval);\n}",
        "output": "1",
        "idx": 2930
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "shorten_utf8_string (const char *base, int reduce_by_num_bytes)\n{\n\tint len;\n\tchar *ret;\n\tconst char *p;\n\t\n\tlen = strlen (base);\n\tlen -= reduce_by_num_bytes;\n\t\n\tif (len <= 0) {\n\t\treturn NULL;\n\t}\n\n\tret = g_new (char, len + 1);\n\n\tp = base;\n\twhile (len) {\n\t\tchar *next;\n\t\tnext = g_utf8_next_char (p);\n\t\tif (next - p > len || *next == '\\0') {\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tlen -= next - p;\n\t\tp = next;\n\t}\n\t\n\tif (p - base == 0) {\n\t\tg_free (ret);\n\t\treturn NULL;\n\t} else {\n\t\tmemcpy (ret, base, p - base);\n\t\tret[p - base] = '\\0';\n\t\treturn ret;\n\t}\n}",
        "output": "0",
        "idx": 769
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool asn1_write_GeneralString(struct asn1_data *data, const char *s)\n{\n\tasn1_push_tag(data, ASN1_GENERAL_STRING);\n\tasn1_write_LDAPString(data, s);\n\tasn1_pop_tag(data);\n\treturn !data->has_error;\n}",
        "output": "1",
        "idx": 1754
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static PHP_FUNCTION(libxml_disable_entity_loader)\n{\n\tzend_bool disable = 1;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|b\", &disable) == FAILURE) {\n\t\treturn;\n\t}\n\n\tRETURN_BOOL(php_libxml_disable_entity_loader(disable TSRMLS_CC));\n}",
        "output": "0",
        "idx": 5541
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static PHP_FUNCTION(preg_grep)\n{\n\tchar\t\t\t\t*regex;\t\t\t/* Regular expression */\n\tint\t\t\t\t \t regex_len;\n\tzval\t\t\t\t*input;\t\t\t/* Input array */\n\tlong\t\t\t\t flags = 0;\t\t/* Match control flags */\n\tpcre_cache_entry\t*pce;\t\t\t/* Compiled regular expression */\n\n\t/* Get arguments and do error checking */\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sa|l\", &regex, &regex_len,\n\t\t\t\t\t\t\t  &input, &flags) == FAILURE) {\n\t\treturn;\n\t}\n\t\n\t/* Compile regex or get it from cache. */\n\tif ((pce = pcre_get_compiled_regex_cache(regex, regex_len TSRMLS_CC)) == NULL) {\n\t\tRETURN_FALSE;\n\t}\n\t\n\tphp_pcre_grep_impl(pce, input, return_value, flags TSRMLS_CC);\n}",
        "output": "1",
        "idx": 654
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_busid_cmd(ESPState *s, uint8_t *buf, uint8_t busid)\n\n{\n\n    int32_t datalen;\n\n    int lun;\n\n\n\n    DPRINTF(\"do_busid_cmd: busid 0x%x\\n\", busid);\n\n    lun = busid & 7;\n\n    datalen = s->current_dev->info->send_command(s->current_dev, 0, buf, lun);\n\n    s->ti_size = datalen;\n\n    if (datalen != 0) {\n\n        s->rregs[ESP_RSTAT] = STAT_TC;\n\n        s->dma_left = 0;\n\n        s->dma_counter = 0;\n\n        if (datalen > 0) {\n\n            s->rregs[ESP_RSTAT] |= STAT_DI;\n\n            s->current_dev->info->read_data(s->current_dev, 0);\n\n        } else {\n\n            s->rregs[ESP_RSTAT] |= STAT_DO;\n\n            s->current_dev->info->write_data(s->current_dev, 0);\n\n        }\n\n    }\n\n    s->rregs[ESP_RINTR] = INTR_BS | INTR_FC;\n\n    s->rregs[ESP_RSEQ] = SEQ_CD;\n\n    esp_raise_irq(s);\n\n}\n",
        "output": "1",
        "idx": 5528
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int jazz_led_init(SysBusDevice *dev)\n\n{\n\n    LedState *s = FROM_SYSBUS(LedState, dev);\n\n\n\n    memory_region_init_io(&s->iomem, &led_ops, s, \"led\", 1);\n\n    sysbus_init_mmio(dev, &s->iomem);\n\n\n\n    s->con = graphic_console_init(jazz_led_update_display,\n\n                                  jazz_led_invalidate_display,\n\n                                  NULL,\n\n                                  jazz_led_text_update, s);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3749
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t icp_pic_read(void *opaque, target_phys_addr_t offset,\n\n                             unsigned size)\n\n{\n\n    icp_pic_state *s = (icp_pic_state *)opaque;\n\n\n\n    switch (offset >> 2) {\n\n    case 0: /* IRQ_STATUS */\n\n        return s->level & s->irq_enabled;\n\n    case 1: /* IRQ_RAWSTAT */\n\n        return s->level;\n\n    case 2: /* IRQ_ENABLESET */\n\n        return s->irq_enabled;\n\n    case 4: /* INT_SOFTSET */\n\n        return s->level & 1;\n\n    case 8: /* FRQ_STATUS */\n\n        return s->level & s->fiq_enabled;\n\n    case 9: /* FRQ_RAWSTAT */\n\n        return s->level;\n\n    case 10: /* FRQ_ENABLESET */\n\n        return s->fiq_enabled;\n\n    case 3: /* IRQ_ENABLECLR */\n\n    case 5: /* INT_SOFTCLR */\n\n    case 11: /* FRQ_ENABLECLR */\n\n    default:\n\n        printf (\"icp_pic_read: Bad register offset 0x%x\\n\", (int)offset);\n\n        return 0;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5310
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tm_unavailable(struct pt_regs *regs)\n{\n\tpr_emerg(\"Unrecoverable TM Unavailable Exception \"\n\t\t\t\"%lx at %lx\\n\", regs->trap, regs->nip);\n\tdie(\"Unrecoverable TM Unavailable Exception\", regs, SIGABRT);\n}",
        "output": "1",
        "idx": 1124
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get16 (const byte *buffer)\n{\n  ulong a;\n  a =  *buffer << 8;\n  a |= buffer[1];\n  return a;\n}",
        "output": "1",
        "idx": 3550
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void local_mapped_file_attr(int dirfd, const char *name,\n\n                                   struct stat *stbuf)\n\n{\n\n    FILE *fp;\n\n    char buf[ATTR_MAX];\n\n    int map_dirfd;\n\n\n\n    map_dirfd = openat(dirfd, VIRTFS_META_DIR,\n\n                       O_RDONLY | O_DIRECTORY | O_NOFOLLOW);\n\n    if (map_dirfd == -1) {\n\n        return;\n\n    }\n\n\n\n    fp = local_fopenat(map_dirfd, name, \"r\");\n\n    close_preserve_errno(map_dirfd);\n\n    if (!fp) {\n\n        return;\n\n    }\n\n    memset(buf, 0, ATTR_MAX);\n\n    while (fgets(buf, ATTR_MAX, fp)) {\n\n        if (!strncmp(buf, \"virtfs.uid\", 10)) {\n\n            stbuf->st_uid = atoi(buf+11);\n\n        } else if (!strncmp(buf, \"virtfs.gid\", 10)) {\n\n            stbuf->st_gid = atoi(buf+11);\n\n        } else if (!strncmp(buf, \"virtfs.mode\", 11)) {\n\n            stbuf->st_mode = atoi(buf+12);\n\n        } else if (!strncmp(buf, \"virtfs.rdev\", 11)) {\n\n            stbuf->st_rdev = atoi(buf+12);\n\n        }\n\n        memset(buf, 0, ATTR_MAX);\n\n    }\n\n    fclose(fp);\n\n}\n",
        "output": "1",
        "idx": 3367
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "peer_interface_vty (struct vty *vty, const char *ip_str, const char *str)\n{\n  int ret;\n  struct peer *peer;\n\n  peer = peer_lookup_vty (vty, ip_str);\n  if (! peer)\n    return CMD_WARNING;\n\n  if (str)\n    ret = peer_interface_set (peer, str);\n  else\n    ret = peer_interface_unset (peer);\n\n  return CMD_SUCCESS;\n}",
        "output": "0",
        "idx": 3559
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int msvideo1_decode_frame(AVCodecContext *avctx,\n\n                                void *data, int *got_frame,\n\n                                AVPacket *avpkt)\n\n{\n\n    const uint8_t *buf = avpkt->data;\n\n    int buf_size = avpkt->size;\n\n    Msvideo1Context *s = avctx->priv_data;\n\n    int ret;\n\n\n\n    s->buf = buf;\n\n    s->size = buf_size;\n\n\n\n    if ((ret = ff_reget_buffer(avctx, s->frame)) < 0)\n\n        return ret;\n\n\n\n    if (s->mode_8bit) {\n\n        const uint8_t *pal = av_packet_get_side_data(avpkt, AV_PKT_DATA_PALETTE, NULL);\n\n\n\n        if (pal) {\n\n            memcpy(s->pal, pal, AVPALETTE_SIZE);\n\n            s->frame->palette_has_changed = 1;\n\n        }\n\n    }\n\n\n\n    if (s->mode_8bit)\n\n        msvideo1_decode_8bit(s);\n\n    else\n\n        msvideo1_decode_16bit(s);\n\n\n\n    if ((ret = av_frame_ref(data, s->frame)) < 0)\n\n        return ret;\n\n\n\n    *got_frame      = 1;\n\n\n\n    /* report that the buffer was completely consumed */\n\n    return buf_size;\n\n}\n",
        "output": "0",
        "idx": 4060
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void stl_phys(target_phys_addr_t addr, uint32_t val)\n\n{\n\n    stl_phys_internal(addr, val, DEVICE_NATIVE_ENDIAN);\n\n}\n",
        "output": "0",
        "idx": 499
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void add_pixels_clamped_c(const int16_t *block, uint8_t *av_restrict pixels,\n\n                                 ptrdiff_t line_size)\n\n{\n\n    int i;\n\n\n\n    /* read the pixels */\n\n    for (i = 0; i < 8; i++) {\n\n        pixels[0] = av_clip_uint8(pixels[0] + block[0]);\n\n        pixels[1] = av_clip_uint8(pixels[1] + block[1]);\n\n        pixels[2] = av_clip_uint8(pixels[2] + block[2]);\n\n        pixels[3] = av_clip_uint8(pixels[3] + block[3]);\n\n        pixels[4] = av_clip_uint8(pixels[4] + block[4]);\n\n        pixels[5] = av_clip_uint8(pixels[5] + block[5]);\n\n        pixels[6] = av_clip_uint8(pixels[6] + block[6]);\n\n        pixels[7] = av_clip_uint8(pixels[7] + block[7]);\n\n        pixels   += line_size;\n\n        block    += 8;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1930
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pcan_usb_pro_set_ts(struct peak_usb_device *dev, u16 onoff)\n{\n\tstruct pcan_usb_pro_msg um;\n\n\tpcan_msg_init_empty(&um, dev->cmd_buf, PCAN_USB_MAX_CMD_LEN);\n\tpcan_msg_add_rec(&um, PCAN_USBPRO_SETTS, onoff);\n\n\treturn pcan_usb_pro_send_cmd(dev, &um);\n}",
        "output": "0",
        "idx": 6131
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fill_note(struct memelfnote *note, const char *name, int type,\n\n                      unsigned int sz, void *data)\n\n{\n\n    unsigned int namesz;\n\n\n\n    namesz = strlen(name) + 1;\n\n    note->name = name;\n\n    note->namesz = namesz;\n\n    note->namesz_rounded = roundup(namesz, sizeof (int32_t));\n\n    note->type = type;\n\n    note->datasz = roundup(sz, sizeof (int32_t));;\n\n    note->data = data;\n\n\n\n    /*\n\n     * We calculate rounded up note size here as specified by\n\n     * ELF document.\n\n     */\n\n    note->notesz = sizeof (struct elf_note) +\n\n        note->namesz_rounded + note->datasz;\n\n}\n",
        "output": "0",
        "idx": 2158
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline uint32_t _ring_fwd_done(pmixp_coll_ring_ctx_t *coll_ctx)\n{\n\treturn !(coll_ctx->coll->peers_cnt - coll_ctx->forward_cnt - 1);\n}",
        "output": "0",
        "idx": 2037
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int io_recvmsg(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t      struct io_kiocb **nxt, bool force_nonblock)\n{\n#if defined(CONFIG_NET)\n\treturn io_send_recvmsg(req, sqe, nxt, force_nonblock,\n\t\t\t\t__sys_recvmsg_sock);\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}",
        "output": "0",
        "idx": 4237
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void libopenjpeg_copy_to_packed16(AVFrame *picture, opj_image_t *image) {\n\n    uint16_t *img_ptr;\n\n    int index, x, y, c;\n\n    int adjust[4];\n\n    for (x = 0; x < image->numcomps; x++)\n\n        adjust[x] = FFMAX(FFMIN(av_pix_fmt_desc_get(picture->format)->comp[x].depth_minus1 + 1 - image->comps[x].prec, 8), 0);\n\n\n\n    for (y = 0; y < picture->height; y++) {\n\n        index = y*picture->width;\n\n        img_ptr = (uint16_t*) (picture->data[0] + y*picture->linesize[0]);\n\n        for (x = 0; x < picture->width; x++, index++) {\n\n            for (c = 0; c < image->numcomps; c++) {\n\n                *img_ptr++ = 0x8000 * image->comps[c].sgnd + (image->comps[c].data[index] << adjust[c]);\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3196
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "time_to_time_t(VALUE time)\n{\n    return (time_t)NUM2TIMET(rb_Integer(time));\n}",
        "output": "0",
        "idx": 4178
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const char *kallsyms_symbol_name(struct mod_kallsyms *kallsyms, unsigned int symnum)\n{\n\treturn kallsyms->strtab + kallsyms->symtab[symnum].st_name;\n}",
        "output": "0",
        "idx": 3384
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(xsl_xsltprocessor_get_parameter)\n{\n\tzval *id;\n\tint name_len = 0, namespace_len = 0;\n\tchar *name, *namespace;\n\tzval **value;\n\txsl_object *intern;\n\n\tDOM_GET_THIS(id);\n\t\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss\", &namespace, &namespace_len, &name, &name_len) == FAILURE) {\n\t\tRETURN_FALSE;\n\t}\n\tintern = (xsl_object *)zend_object_store_get_object(id TSRMLS_CC);\n\tif ( zend_hash_find(intern->parameter, name, name_len + 1,  (void**) &value) == SUCCESS) {\n\t\tconvert_to_string_ex(value);\n\t\tRETVAL_STRING(Z_STRVAL_PP(value),1);\n\t} else {\n\t\tRETURN_FALSE;\n\t}\n}",
        "output": "1",
        "idx": 5199
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int normalize_bits(int num, int width)\n\n{\n\n    int i = 0;\n\n    int bits = (width) ? 31 : 15;\n\n    int limit = 1 << (bits - 1);\n\n\n\n    if (num) {\n\n        if (num == -1)\n\n            return bits;\n\n        if (num < 0)\n\n            num = ~num;\n\n        for (i = 0; num < limit; i++)\n\n            num <<= 1;\n\n    }\n\n    return i;\n\n}\n",
        "output": "0",
        "idx": 5129
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "opts_check_struct(Visitor *v, Error **errp)\n\n{\n\n    OptsVisitor *ov = to_ov(v);\n\n    GHashTableIter iter;\n\n    GQueue *any;\n\n\n\n    if (ov->depth > 0) {\n\n        return;\n\n    }\n\n\n\n    /* we should have processed all (distinct) QemuOpt instances */\n\n    g_hash_table_iter_init(&iter, ov->unprocessed_opts);\n\n    if (g_hash_table_iter_next(&iter, NULL, (void **)&any)) {\n\n        const QemuOpt *first;\n\n\n\n        first = g_queue_peek_head(any);\n\n        error_setg(errp, QERR_INVALID_PARAMETER, first->name);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4821
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nu32 parse_dump_ts(char *arg_val, u32 opt)\n{\n\tdump_timestamps = 1;\n\tif (arg_val) {\n\t\tif (isdigit(arg_val[0])) {\n\t\t\tprogram_number = parse_u32(arg_val, \"Program\");\n\t\t} else {\n\t\t\treturn 3;\n\t\t}\n\t}\n\treturn 0;",
        "output": "0",
        "idx": 2322
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    BSONTool::BSONTool( const char * name, DBAccess access , bool objcheck )\n        : Tool( name , access , \"\" , \"\" , false ) , _objcheck( objcheck ) {\n\n        add_options()\n        (\"objcheck\" , \"validate object before inserting\" )\n        (\"filter\" , po::value<string>() , \"filter to apply before inserting\" )\n        ;\n    }",
        "output": "1",
        "idx": 3757
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_opt_set_bool(QemuOpts *opts, const char *name, bool val)\n\n{\n\n    QemuOpt *opt;\n\n    const QemuOptDesc *desc = opts->list->desc;\n\n    int i;\n\n\n\n    for (i = 0; desc[i].name != NULL; i++) {\n\n        if (strcmp(desc[i].name, name) == 0) {\n\n            break;\n\n        }\n\n    }\n\n    if (desc[i].name == NULL) {\n\n        if (i == 0) {\n\n            /* empty list -> allow any */;\n\n        } else {\n\n            qerror_report(QERR_INVALID_PARAMETER, name);\n\n            return -1;\n\n        }\n\n    }\n\n\n\n    opt = g_malloc0(sizeof(*opt));\n\n    opt->name = g_strdup(name);\n\n    opt->opts = opts;\n\n    QTAILQ_INSERT_TAIL(&opts->head, opt, next);\n\n    if (desc[i].name != NULL) {\n\n        opt->desc = desc+i;\n\n    }\n\n    opt->value.boolean = !!val;\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4333
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static const char *token_get_value(QObject *obj)\n\n{\n\n    return qdict_get_str(qobject_to_qdict(obj), \"token\");\n\n}\n",
        "output": "0",
        "idx": 5591
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void handle_user_command(Monitor *mon, const char *cmdline)\n\n{\n\n    QDict *qdict;\n\n    const mon_cmd_t *cmd;\n\n\n\n    qdict = qdict_new();\n\n\n\n    cmd = monitor_parse_command(mon, cmdline, 0, mon->cmd_table, qdict);\n\n    if (!cmd)\n\n        goto out;\n\n\n\n    if (handler_is_async(cmd)) {\n\n        user_async_cmd_handler(mon, cmd, qdict);\n\n    } else if (handler_is_qobject(cmd)) {\n\n        QObject *data = NULL;\n\n\n\n        /* XXX: ignores the error code */\n\n        cmd->mhandler.cmd_new(mon, qdict, &data);\n\n        assert(!monitor_has_error(mon));\n\n        if (data) {\n\n            cmd->user_print(mon, data);\n\n            qobject_decref(data);\n\n        }\n\n    } else {\n\n        cmd->mhandler.cmd(mon, qdict);\n\n    }\n\n\n\nout:\n\n    QDECREF(qdict);\n\n}\n",
        "output": "1",
        "idx": 3278
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virt_class_init(ObjectClass *oc, void *data)\n\n{\n\n    MachineClass *mc = MACHINE_CLASS(oc);\n\n\n\n    mc->desc = \"ARM Virtual Machine\",\n\n    mc->init = machvirt_init;\n\n    mc->max_cpus = 8;\n\n    mc->has_dynamic_sysbus = true;\n\n    mc->block_default_type = IF_VIRTIO;\n\n    mc->no_cdrom = 1;\n\n}\n",
        "output": "0",
        "idx": 2018
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline enum fbq_type fbq_classify_group(struct sg_lb_stats *sgs)\n{\n\treturn all;\n}",
        "output": "0",
        "idx": 148
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static HotplugHandler *spapr_get_hotpug_handler(MachineState *machine,\n\n                                             DeviceState *dev)\n\n{\n\n    if (object_dynamic_cast(OBJECT(dev), TYPE_PC_DIMM) ||\n\n        object_dynamic_cast(OBJECT(dev), TYPE_SPAPR_CPU_CORE)) {\n\n        return HOTPLUG_HANDLER(machine);\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 2830
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void CoverCheck(HBoundsCheck* new_check,\n                  int32_t new_offset) {\n    ASSERT(new_check->index()->representation().IsInteger32());\n    bool keep_new_check = false;\n\n    if (new_offset > upper_offset_) {\n      upper_offset_ = new_offset;\n      if (HasSingleCheck()) {\n        keep_new_check = true;\n        upper_check_ = new_check;\n      } else {\n        BuildOffsetAdd(upper_check_,\n                       &added_upper_index_,\n                       &added_upper_offset_,\n                       Key()->IndexBase(),\n                       new_check->index()->representation(),\n                       new_offset);\n        upper_check_->SetOperandAt(0, added_upper_index_);\n      }\n    } else if (new_offset < lower_offset_) {\n      lower_offset_ = new_offset;\n      if (HasSingleCheck()) {\n        keep_new_check = true;\n        lower_check_ = new_check;\n      } else {\n        BuildOffsetAdd(lower_check_,\n                       &added_lower_index_,\n                       &added_lower_offset_,\n                       Key()->IndexBase(),\n                       new_check->index()->representation(),\n                       new_offset);\n        lower_check_->SetOperandAt(0, added_lower_index_);\n      }\n    } else {\n      ASSERT(false);\n    }\n\n    if (!keep_new_check) {\n      new_check->DeleteAndReplaceWith(NULL);\n    }\n  }",
        "output": "1",
        "idx": 3045
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "func_endswith (struct _ESExp *f,\n               gint argc,\n               struct _ESExpResult **argv,\n               gpointer data)\n{\n\tEBookBackendLDAPSExpData *ldap_data = data;\n\tESExpResult *r;\n\n\tif (argc == 2\n\t    && argv[0]->type == ESEXP_RES_STRING\n\t    && argv[1]->type == ESEXP_RES_STRING) {\n\t\tgchar *propname = argv[0]->value.string;\n\t\tgchar *str = rfc2254_escape (argv[1]->value.string);\n\t\tconst gchar *ldap_attr = query_prop_to_ldap (propname, ldap_data->bl->priv->evolutionPersonSupported, ldap_data->bl->priv->calEntrySupported);\n\n\t\tif (ldap_attr)\n\t\t\tldap_data->list = g_list_prepend (\n\t\t\t\tldap_data->list,\n\t\t\t\tg_strdup_printf (\n\t\t\t\t\t\"(%s=*%s)\",\n\t\t\t\t\tldap_attr, str));\n\t\tg_free (str);\n\t}\n\n\tr = e_sexp_result_new (f, ESEXP_RES_BOOL);\n\tr->value.boolean = FALSE;\n\n\treturn r;\n}",
        "output": "0",
        "idx": 5546
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int LibuvStreamWrap::DoWrite(WriteWrap* req_wrap,\n                             uv_buf_t* bufs,\n                             size_t count,\n                             uv_stream_t* send_handle) {\n  LibuvWriteWrap* w = static_cast<LibuvWriteWrap*>(req_wrap);\n  int r;\n  if (send_handle == nullptr) {\n    r = w->Dispatch(uv_write, stream(), bufs, count, AfterUvWrite);\n  } else {\n    r = w->Dispatch(uv_write2,\n                    stream(),\n                    bufs,\n                    count,\n                    send_handle,\n                    AfterUvWrite);\n  }\n\n  if (!r) {\n    size_t bytes = 0;\n    for (size_t i = 0; i < count; i++)\n      bytes += bufs[i].len;\n    if (stream()->type == UV_TCP) {\n      NODE_COUNT_NET_BYTES_SENT(bytes);\n    } else if (stream()->type == UV_NAMED_PIPE) {\n      NODE_COUNT_PIPE_BYTES_SENT(bytes);\n    }\n  }\n\n  return r;\n}",
        "output": "1",
        "idx": 1854
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool pcie_has_upstream_port(PCIDevice *dev)\n\n{\n\n    PCIDevice *parent_dev = pci_bridge_get_device(dev->bus);\n\n\n\n    /* Device associated with an upstream port.\n\n     * As there are several types of these, it's easier to check the\n\n     * parent device: upstream ports are always connected to\n\n     * root or downstream ports.\n\n     */\n\n    return parent_dev &&\n\n        pci_is_express(parent_dev) &&\n\n        parent_dev->exp.exp_cap &&\n\n        (pcie_cap_get_type(parent_dev) == PCI_EXP_TYPE_ROOT_PORT ||\n\n         pcie_cap_get_type(parent_dev) == PCI_EXP_TYPE_DOWNSTREAM);\n\n}\n",
        "output": "0",
        "idx": 5332
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int crc_write_header(struct AVFormatContext *s)\n\n{\n\n    CRCState *crc = s->priv_data;\n\n\n\n    /* init CRC */\n\n    crc->crcval = adler32(0, NULL, 0);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 323
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int snd_rawmidi_input_params(struct snd_rawmidi_substream *substream,\n\t\t\t     struct snd_rawmidi_params * params)\n{\n\tchar *newbuf;\n\tstruct snd_rawmidi_runtime *runtime = substream->runtime;\n\n\tsnd_rawmidi_drain_input(substream);\n\tif (params->buffer_size < 32 || params->buffer_size > 1024L * 1024L) {\n\t\treturn -EINVAL;\n\t}\n\tif (params->avail_min < 1 || params->avail_min > params->buffer_size) {\n\t\treturn -EINVAL;\n\t}\n\tif (params->buffer_size != runtime->buffer_size) {\n\t\tnewbuf = krealloc(runtime->buffer, params->buffer_size,\n\t\t\t\t  GFP_KERNEL);\n\t\tif (!newbuf)\n\t\t\treturn -ENOMEM;\n\t\truntime->buffer = newbuf;\n\t\truntime->buffer_size = params->buffer_size;\n\t}\n\truntime->avail_min = params->avail_min;\n\treturn 0;\n}",
        "output": "1",
        "idx": 3639
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vfio_disable_msix(VFIODevice *vdev)\n{\n    msix_unset_vector_notifiers(&vdev->pdev);\n    if (vdev->nr_vectors) {\n        vfio_disable_irqindex(vdev, VFIO_PCI_MSIX_IRQ_INDEX);\n    vfio_disable_msi_common(vdev);\n    DPRINTF(\"%s(%04x:%02x:%02x.%x)\\n\", __func__, vdev->host.domain,\n            vdev->host.bus, vdev->host.slot, vdev->host.function);",
        "output": "1",
        "idx": 4574
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ex_put(exarg_T *eap)\n{\n    // \":0put\" works like \":1put!\".\n    if (eap->line2 == 0)\n    {\n\teap->line2 = 1;\n\teap->forceit = TRUE;\n    }\n    curwin->w_cursor.lnum = eap->line2;\n    do_put(eap->regname, NULL, eap->forceit ? BACKWARD : FORWARD, 1L,\n\t\t\t\t\t\t       PUT_LINE|PUT_CURSLINE);\n}",
        "output": "1",
        "idx": 2625
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rprobe(AVFormatContext *s, uint8_t *enc_header, const uint8_t *r_val)\n\n{\n\n    OMAContext *oc = s->priv_data;\n\n    unsigned int pos;\n\n    struct AVDES av_des;\n\n\n\n    if (!enc_header || !r_val)\n\n        return -1;\n\n\n\n    /* m_val */\n\n    av_des_init(&av_des, r_val, 192, 1);\n\n    av_des_crypt(&av_des, oc->m_val, &enc_header[48], 1, NULL, 1);\n\n\n\n    /* s_val */\n\n    av_des_init(&av_des, oc->m_val, 64, 0);\n\n    av_des_crypt(&av_des, oc->s_val, NULL, 1, NULL, 0);\n\n\n\n    /* sm_val */\n\n    pos = OMA_ENC_HEADER_SIZE + oc->k_size + oc->e_size;\n\n    av_des_init(&av_des, oc->s_val, 64, 0);\n\n    av_des_mac(&av_des, oc->sm_val, &enc_header[pos], (oc->i_size >> 3));\n\n\n\n    pos += oc->i_size;\n\n\n\n    return memcmp(&enc_header[pos], oc->sm_val, 8) ? -1 : 0;\n\n}\n",
        "output": "1",
        "idx": 5884
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_metadata_size(const uint8_t *buf, int buf_size)\n\n{\n\n    int metadata_last, metadata_size;\n\n    const uint8_t *buf_end = buf + buf_size;\n\n\n\n    buf += 4;\n\n    do {\n\n        ff_flac_parse_block_header(buf, &metadata_last, NULL, &metadata_size);\n\n        buf += 4;\n\n        if (buf + metadata_size > buf_end) {\n\n            /* need more data in order to read the complete header */\n\n            return 0;\n\n        }\n\n        buf += metadata_size;\n\n    } while (!metadata_last);\n\n\n\n    return buf_size - (buf_end - buf);\n\n}\n",
        "output": "1",
        "idx": 2377
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int check_shm_size(IVShmemState *s, int fd) {\n\n    /* check that the guest isn't going to try and map more memory than the\n\n     * the object has allocated return -1 to indicate error */\n\n\n\n    struct stat buf;\n\n\n\n    fstat(fd, &buf);\n\n\n\n    if (s->ivshmem_size > buf.st_size) {\n\n        fprintf(stderr,\n\n                \"IVSHMEM ERROR: Requested memory size greater\"\n\n                \" than shared object size (%\" PRIu64 \" > %\" PRIu64\")\\n\",\n\n                s->ivshmem_size, (uint64_t)buf.st_size);\n\n        return -1;\n\n    } else {\n\n        return 0;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2384
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  virtual bool exists2in_processor(void *arg) { return 0; }",
        "output": "0",
        "idx": 4192
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void MD5::update(unsigned char *input,\n\t\t unsigned int inputLen)\n{\n    unsigned int i, index, partLen;\n\n    // Compute number of bytes mod 64\n    index = static_cast<unsigned int>((count[0] >> 3) & 0x3f);\n\n    // Update number of bits\n    if ((count[0] += (static_cast<UINT4>(inputLen) << 3)) <\n        (static_cast<UINT4>(inputLen) << 3))\n\tcount[1]++;\n    count[1] += (static_cast<UINT4>(inputLen) >> 29);\n\n    partLen = 64 - index;\n\n    // Transform as many times as possible.\n\n    if (inputLen >= partLen) {\n\tmemcpy(&buffer[index], input, partLen);\n\ttransform(state, buffer);\n\n\tfor (i = partLen; i + 63 < inputLen; i += 64)\n\t    transform(state, &input[i]);\n\n\tindex = 0;\n    }\n    else\n\ti = 0;\n\n    // Buffer remaining input\n    memcpy(&buffer[index], &input[i], inputLen-i);\n}",
        "output": "1",
        "idx": 1068
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void openpic_set_irq(void *opaque, int n_IRQ, int level)\n\n{\n\n    OpenPICState *opp = opaque;\n\n    IRQSource *src;\n\n\n\n    if (n_IRQ >= MAX_IRQ) {\n\n        fprintf(stderr, \"%s: IRQ %d out of range\\n\", __func__, n_IRQ);\n\n        abort();\n\n    }\n\n\n\n    src = &opp->src[n_IRQ];\n\n    DPRINTF(\"openpic: set irq %d = %d ivpr=0x%08x\\n\",\n\n            n_IRQ, level, src->ivpr);\n\n    if (src->level) {\n\n        /* level-sensitive irq */\n\n        src->pending = level;\n\n        if (!level) {\n\n            src->ivpr &= ~IVPR_ACTIVITY_MASK;\n\n        }\n\n    } else {\n\n        /* edge-sensitive irq */\n\n        if (level) {\n\n            src->pending = 1;\n\n        }\n\n    }\n\n    openpic_update_irq(opp, n_IRQ);\n\n}\n",
        "output": "0",
        "idx": 1181
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ofputil_put_async_config__(const struct ofputil_async_cfg *ac,\n                           struct ofpbuf *buf, bool tlv,\n                           enum ofp_version version, uint32_t oams)\n{\n    if (!tlv) {\n        struct nx_async_config *msg = ofpbuf_put_zeros(buf, sizeof *msg);\n        encode_legacy_async_masks(ac, OAM_PACKET_IN, version,\n                                  msg->packet_in_mask);\n        encode_legacy_async_masks(ac, OAM_PORT_STATUS, version,\n                                  msg->port_status_mask);\n        encode_legacy_async_masks(ac, OAM_FLOW_REMOVED, version,\n                                  msg->flow_removed_mask);\n    } else {\n        FOR_EACH_ASYNC_PROP (ap) {\n            if (oams & (1u << ap->oam)) {\n                size_t ofs = buf->size;\n                ofpprop_put_be32(buf, ap->prop_type,\n                                 encode_async_mask(ac, ap, version));\n\n                /* For experimenter properties, we need to use type 0xfffe for\n                 * master and 0xffff for slaves. */\n                if (ofpprop_is_experimenter(ap->prop_type)) {\n                    struct ofp_prop_experimenter *ope\n                        = ofpbuf_at_assert(buf, ofs, sizeof *ope);\n                    ope->type = ap->master ? htons(0xffff) : htons(0xfffe);\n                }\n            }\n        }\n    }\n}",
        "output": "0",
        "idx": 909
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int resize_peers(IVShmemState *s, int new_min_size)\n\n{\n\n\n\n    int j, old_size;\n\n\n\n    /* limit number of max peers */\n\n    if (new_min_size <= 0 || new_min_size > IVSHMEM_MAX_PEERS) {\n\n        return -1;\n\n    }\n\n    if (new_min_size <= s->nb_peers) {\n\n        return 0;\n\n    }\n\n\n\n    old_size = s->nb_peers;\n\n    s->nb_peers = new_min_size;\n\n\n\n    IVSHMEM_DPRINTF(\"bumping storage to %d peers\\n\", s->nb_peers);\n\n\n\n    s->peers = g_realloc(s->peers, s->nb_peers * sizeof(Peer));\n\n\n\n    for (j = old_size; j < s->nb_peers; j++) {\n\n        s->peers[j].eventfds = g_new0(EventNotifier, s->vectors);\n\n        s->peers[j].nb_eventfds = 0;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2521
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static RList* sections(RBinFile* bf) {\n\tRList* ret = NULL;\n\tRBinSection* sect = NULL;\n\tpsxexe_header psxheader = {0};\n\tut64 sz = 0;\n\n\tif (!(ret = r_list_new ())) {\n\t\treturn NULL;\n\t}\n\n\tif (!(sect = R_NEW0 (RBinSection))) {\n\t\tr_list_free (ret);\n\t\treturn NULL;\n\t}\n\n\tif (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) < sizeof (psxexe_header)) {\n\t\teprintf (\"Truncated Header\\n\");\n\t\tfree (sect);\n\t\tr_list_free (ret);\n\t\treturn NULL;\n\t}\n\n\tsz = r_buf_size (bf->buf);\n\n\tsect->name = strdup (\"TEXT\");\n\tsect->paddr = PSXEXE_TEXTSECTION_OFFSET;\n\tsect->size = sz - PSXEXE_TEXTSECTION_OFFSET;\n\tsect->vaddr = psxheader.t_addr;\n\tsect->vsize = psxheader.t_size;\n\tsect->perm = R_PERM_RX;\n\tsect->add = true;\n\tsect->has_strings = true;\n\n\tr_list_append (ret, sect);\n\treturn ret;\n}",
        "output": "1",
        "idx": 3219
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cdrom_change_cb(void *opaque, int reason)\n\n{\n\n    IDEState *s = opaque;\n\n    uint64_t nb_sectors;\n\n\n\n    if (!(reason & CHANGE_MEDIA)) {\n\n        return;\n\n    }\n\n\n\n    bdrv_get_geometry(s->bs, &nb_sectors);\n\n    s->nb_sectors = nb_sectors;\n\n\n\n    s->sense_key = SENSE_UNIT_ATTENTION;\n\n    s->asc = ASC_MEDIUM_MAY_HAVE_CHANGED;\n\n    s->cdrom_changed = 1;\n\n    s->events.new_media = true;\n\n    ide_set_irq(s->bus);\n\n}\n",
        "output": "1",
        "idx": 5622
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct dst_entry *inet6_csk_route_req(const struct sock *sk,\n\t\t\t\t      struct flowi6 *fl6,\n\t\t\t\t      const struct request_sock *req,\n\t\t\t\t      u8 proto)\n{\n\tstruct inet_request_sock *ireq = inet_rsk(req);\n\tconst struct ipv6_pinfo *np = inet6_sk(sk);\n\tstruct in6_addr *final_p, final;\n\tstruct dst_entry *dst;\n\n\tmemset(fl6, 0, sizeof(*fl6));\n\tfl6->flowi6_proto = proto;\n\tfl6->daddr = ireq->ir_v6_rmt_addr;\n\tfinal_p = fl6_update_dst(fl6, np->opt, &final);\n\tfl6->saddr = ireq->ir_v6_loc_addr;\n\tfl6->flowi6_oif = ireq->ir_iif;\n\tfl6->flowi6_mark = ireq->ir_mark;\n\tfl6->fl6_dport = ireq->ir_rmt_port;\n\tfl6->fl6_sport = htons(ireq->ir_num);\n\tsecurity_req_classify_flow(req, flowi6_to_flowi(fl6));\n\n\tdst = ip6_dst_lookup_flow(sk, fl6, final_p);\n\tif (IS_ERR(dst))\n\t\treturn NULL;\n\n\treturn dst;\n}",
        "output": "1",
        "idx": 525
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void h264_v_loop_filter_chroma_c(uint8_t *pix, int stride, int alpha, int beta, int8_t *tc0)\n\n{\n\n    h264_loop_filter_chroma_c(pix, stride, 1, alpha, beta, tc0);\n\n}\n",
        "output": "0",
        "idx": 4496
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init init_root_keyring(void)\n{\n\treturn install_user_keyrings();\n}",
        "output": "0",
        "idx": 6073
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void init_multbl2(uint8_t tbl[1024], const int c[4],\n\n                         const uint8_t *log8, const uint8_t *alog8,\n\n                         const uint8_t *sbox)\n\n{\n\n    int i, j;\n\n\n\n    for (i = 0; i < 1024; i++) {\n\n        int x = sbox[i >> 2];\n\n        if (x)\n\n            tbl[i] = alog8[log8[x] + log8[c[i & 3]]];\n\n    }\n\n#if !CONFIG_SMALL\n\n    for (j = 256; j < 1024; j++)\n\n        for (i = 0; i < 4; i++)\n\n            tbl[4*j + i] = tbl[4*j + ((i - 1) & 3) - 1024];\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 4878
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mxf_free_metadataset(MXFMetadataSet **ctx, int freectx)\n\n{\n\n    MXFIndexTableSegment *seg;\n\n    switch ((*ctx)->type) {\n\n    case Descriptor:\n\n        av_freep(&((MXFDescriptor *)*ctx)->extradata);\n\n        break;\n\n    case MultipleDescriptor:\n\n        av_freep(&((MXFDescriptor *)*ctx)->sub_descriptors_refs);\n\n        break;\n\n    case Sequence:\n\n        av_freep(&((MXFSequence *)*ctx)->structural_components_refs);\n\n        break;\n\n    case EssenceGroup:\n\n        av_freep(&((MXFEssenceGroup *)*ctx)->structural_components_refs);\n\n        break;\n\n    case SourcePackage:\n\n    case MaterialPackage:\n\n        av_freep(&((MXFPackage *)*ctx)->tracks_refs);\n\n        av_freep(&((MXFPackage *)*ctx)->name);\n\n\n        break;\n\n    case TaggedValue:\n\n        av_freep(&((MXFTaggedValue *)*ctx)->name);\n\n        av_freep(&((MXFTaggedValue *)*ctx)->value);\n\n        break;\n\n    case IndexTableSegment:\n\n        seg = (MXFIndexTableSegment *)*ctx;\n\n        av_freep(&seg->temporal_offset_entries);\n\n        av_freep(&seg->flag_entries);\n\n        av_freep(&seg->stream_offset_entries);\n\n    default:\n\n        break;\n\n    }\n\n    if (freectx)\n\n    av_freep(ctx);\n\n}",
        "output": "1",
        "idx": 786
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init cpia2_init(void)\n{\n\tLOG(\"%s v%s\\n\",\n\t    ABOUT, CPIA_VERSION);\n\tcheck_parameters();\n\tcpia2_usb_init();\n\treturn 0;\n}",
        "output": "1",
        "idx": 2985
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static SSL_METHOD *ssl23_get_server_method(int ver)\n\t{\n#ifndef OPENSSL_NO_SSL2\n\tif (ver == SSL2_VERSION)\n\t\treturn(SSLv2_server_method());\n#endif\n\tif (ver == SSL3_VERSION)\n\t\treturn(SSLv3_server_method());\n\telse if (ver == TLS1_VERSION)\n\t\treturn(TLSv1_server_method());\n\telse\n\t\treturn(NULL);\n\t}",
        "output": "1",
        "idx": 343
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rb_str_start_with(argc, argv, str)\n    int argc;\n    VALUE *argv;\n    VALUE str;\n{\n    int i;\n    long pos;\n    VALUE pat;\n\n    for (i=0; i<argc; i++) {\n\tVALUE prefix = rb_check_string_type(argv[i]);\n\tif (NIL_P(prefix)) continue;\n\tif (RSTRING(str)->len < RSTRING(prefix)->len) continue;\n        pat = get_arg_pat(prefix);\n        if (rb_reg_search(pat, str, 0, 1) >= 0)\n\t    return Qtrue;\n    }\n    return Qfalse;\n}",
        "output": "0",
        "idx": 4653
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool acpi_get_mcfg(AcpiMcfgInfo *mcfg)\n\n{\n\n    Object *pci_host;\n\n    QObject *o;\n\n\n\n    pci_host = acpi_get_i386_pci_host();\n\n    g_assert(pci_host);\n\n\n\n    o = object_property_get_qobject(pci_host, PCIE_HOST_MCFG_BASE, NULL);\n\n    if (!o) {\n\n        return false;\n\n    }\n\n    mcfg->mcfg_base = qnum_get_int(qobject_to_qnum(o));\n\n    qobject_decref(o);\n\n\n\n    o = object_property_get_qobject(pci_host, PCIE_HOST_MCFG_SIZE, NULL);\n\n    assert(o);\n\n    mcfg->mcfg_size = qnum_get_int(qobject_to_qnum(o));\n\n    qobject_decref(o);\n\n    return true;\n\n}\n",
        "output": "1",
        "idx": 5698
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline AIOReq *alloc_aio_req(BDRVSheepdogState *s, SheepdogAIOCB *acb,\n\n                                    uint64_t oid, unsigned int data_len,\n\n                                    uint64_t offset, uint8_t flags,\n\n                                    uint64_t base_oid, unsigned int iov_offset)\n\n{\n\n    AIOReq *aio_req;\n\n\n\n    aio_req = g_malloc(sizeof(*aio_req));\n\n    aio_req->aiocb = acb;\n\n    aio_req->iov_offset = iov_offset;\n\n    aio_req->oid = oid;\n\n    aio_req->base_oid = base_oid;\n\n    aio_req->offset = offset;\n\n    aio_req->data_len = data_len;\n\n    aio_req->flags = flags;\n\n    aio_req->id = s->aioreq_seq_num++;\n\n\n\n    acb->nr_pending++;\n\n    return aio_req;\n\n}\n",
        "output": "1",
        "idx": 195
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void helper_iret_real(int shift)\n\n{\n\n    uint32_t sp, new_cs, new_eip, new_eflags, new_esp;\n\n    uint8_t *ssp;\n\n    int eflags_mask;\n\n    \n\n    sp = env->regs[R_ESP] & 0xffff;\n\n    ssp = env->segs[R_SS].base + sp;\n\n    if (shift == 1) {\n\n        /* 32 bits */\n\n        new_eflags = ldl(ssp + 8);\n\n        new_cs = ldl(ssp + 4) & 0xffff;\n\n        new_eip = ldl(ssp) & 0xffff;\n\n    } else {\n\n        /* 16 bits */\n\n        new_eflags = lduw(ssp + 4);\n\n        new_cs = lduw(ssp + 2);\n\n        new_eip = lduw(ssp);\n\n    }\n\n    new_esp = sp + (6 << shift);\n\n    env->regs[R_ESP] = (env->regs[R_ESP] & 0xffff0000) | \n\n        (new_esp & 0xffff);\n\n    load_seg_vm(R_CS, new_cs);\n\n    env->eip = new_eip;\n\n    eflags_mask = FL_UPDATE_CPL0_MASK;\n\n    if (shift == 0)\n\n        eflags_mask &= 0xffff;\n\n    load_eflags(new_eflags, eflags_mask);\n\n}\n",
        "output": "0",
        "idx": 5120
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void vmalloc_sync_all(void)\n{\n\tunsigned long address;\n\n\tif (SHARED_KERNEL_PMD)\n\t\treturn;\n\n\tfor (address = VMALLOC_START & PMD_MASK;\n\t     address >= TASK_SIZE && address < FIXADDR_TOP;\n\t     address += PMD_SIZE) {\n\t\tstruct page *page;\n\n\t\tspin_lock(&pgd_lock);\n\t\tlist_for_each_entry(page, &pgd_list, lru) {\n\t\t\tspinlock_t *pgt_lock;\n\t\t\tpmd_t *ret;\n\n\t\t\t/* the pgt_lock only for Xen */\n\t\t\tpgt_lock = &pgd_page_get_mm(page)->page_table_lock;\n\n\t\t\tspin_lock(pgt_lock);\n\t\t\tret = vmalloc_sync_one(page_address(page), address);\n\t\t\tspin_unlock(pgt_lock);\n\n\t\t\tif (!ret)\n\t\t\t\tbreak;\n\t\t}\n\t\tspin_unlock(&pgd_lock);\n\t}\n}",
        "output": "0",
        "idx": 4756
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void __fuse_dentry_settime(struct dentry *entry, u64 time)\n{\n\tentry->d_fsdata = (void *) time;\n}",
        "output": "0",
        "idx": 3916
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void free_schro_frame(SchroFrame *frame, void *priv)\n\n{\n\n    AVFrame *p_pic = priv;\n\n    av_frame_free(&p_pic);\n\n}\n",
        "output": "1",
        "idx": 293
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool consume_encoded_name_new(RBuffer *b, ut64 bound, ut32 *len_out, char **str_out) {\n\tut32 len;\n\tchar *orig = NULL;\n\tif (!consume_str_new (b, bound, &len, &orig)) {\n\t\treturn false;\n\t}\n\n\t// room for even every character getting encoded\n\tsize_t maxsize = (len * 4) + 2;\n\tchar *sout = malloc (maxsize);\n\tif (!sout) {\n\t\tfree (orig);\n\t\treturn false;\n\t}\n\n\tsize_t i, oi = 0;\n\tfor (i = 0; i < len && oi + 4 < maxsize; i++) {\n\t\tif (WASM_IS_OK (orig, i, len)) {\n\t\t\tsout[oi++] = orig[i];\n\t\t} else {\n\t\t\toi += snprintf (sout + oi, maxsize - oi, \"_%02x_\", orig[i]);\n\t\t}\n\t}\n\tsout[oi++] = '\\0';\n\tfree (orig);\n\n\tchar *tmp = realloc (sout, oi);\n\tif (!tmp) {\n\t\tfree (sout);\n\t\tfree (tmp);\n\t\treturn false;\n\t}\n\t*str_out = tmp;\n\tif (len_out) {\n\t\t*len_out = len;\n\t}\n\treturn true;\n}",
        "output": "1",
        "idx": 4193
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void read_storage_element0_info(SCLPDevice *sclp, SCCB *sccb)\n\n{\n\n    int i, assigned;\n\n    int subincrement_id = SCLP_STARTING_SUBINCREMENT_ID;\n\n    ReadStorageElementInfo *storage_info = (ReadStorageElementInfo *) sccb;\n\n    sclpMemoryHotplugDev *mhd = get_sclp_memory_hotplug_dev();\n\n\n\n    assert(mhd);\n\n\n\n    if ((ram_size >> mhd->increment_size) >= 0x10000) {\n\n        sccb->h.response_code = cpu_to_be16(SCLP_RC_SCCB_BOUNDARY_VIOLATION);\n\n        return;\n\n    }\n\n\n\n    /* Return information regarding core memory */\n\n    storage_info->max_id = cpu_to_be16(mhd->standby_mem_size ? 1 : 0);\n\n    assigned = ram_size >> mhd->increment_size;\n\n    storage_info->assigned = cpu_to_be16(assigned);\n\n\n\n    for (i = 0; i < assigned; i++) {\n\n        storage_info->entries[i] = cpu_to_be32(subincrement_id);\n\n        subincrement_id += SCLP_INCREMENT_UNIT;\n\n    }\n\n    sccb->h.response_code = cpu_to_be16(SCLP_RC_NORMAL_READ_COMPLETION);\n\n}\n",
        "output": "0",
        "idx": 5020
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_owner_password_V4(std::string& user_password,\n                        std::string const& owner_password,\n                        QPDF::EncryptionData const& data)\n{\n    // Algorithm 3.7 from the PDF 1.7 Reference Manual\n\n    unsigned char key[OU_key_bytes_V4];\n    compute_O_rc4_key(user_password, owner_password, data, key);\n    unsigned char O_data[key_bytes];\n    memcpy(O_data, QUtil::unsigned_char_pointer(data.getO()), key_bytes);\n    iterate_rc4(O_data, key_bytes, key, data.getLengthBytes(),\n                (data.getR() >= 3) ? 20 : 1, true);\n    std::string new_user_password =\n        std::string(reinterpret_cast<char*>(O_data), key_bytes);\n    bool result = false;\n    if (check_user_password(new_user_password, data))\n    {\n        result = true;\n        user_password = new_user_password;\n    }\n    return result;\n}",
        "output": "1",
        "idx": 4771
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void print_splits(IRC_SERVER_REC *server, const char *channel)\n{\n\tTEMP_SPLIT_REC temp;\n\tGSList *servers;\n\n\tprinting_splits = TRUE;\n\n\tservers = g_slist_copy(server->split_servers);\n\twhile (servers != NULL) {\n\t\tNETSPLIT_SERVER_REC *sserver = servers->data;\n\n\t\t/* get all the splitted servers that have the same\n\t\t   source server */\n                temp.servers = get_source_servers(sserver->server, &servers);\n                temp.server_rec = server;\n\t\ttemp.channels = NULL;\n\n\t\tg_hash_table_foreach(server->splits,\n\t\t\t\t     (GHFunc) get_server_splits, &temp);\n\t\tprint_server_splits(server, &temp, channel);\n\n\t\tg_slist_foreach(temp.channels,\n\t\t\t\t(GFunc) temp_split_chan_free, NULL);\n\t\tg_slist_free(temp.servers);\n\t\tg_slist_free(temp.channels);\n\t}\n\n\tprinting_splits = FALSE;\n}",
        "output": "1",
        "idx": 5006
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rc4_hmac_md5_get_ctx_params(void *vctx, OSSL_PARAM params[])\n{\n    PROV_RC4_HMAC_MD5_CTX *ctx = (PROV_RC4_HMAC_MD5_CTX *)vctx;\n    OSSL_PARAM *p;\n\n    p = OSSL_PARAM_locate(params, OSSL_CIPHER_PARAM_KEYLEN);\n    if (p != NULL && !OSSL_PARAM_set_size_t(p, ctx->base.keylen)) {\n        ERR_raise(ERR_LIB_PROV, PROV_R_FAILED_TO_SET_PARAMETER);\n        return 0;\n    }\n\n    p = OSSL_PARAM_locate(params, OSSL_CIPHER_PARAM_IVLEN);\n    if (p != NULL && !OSSL_PARAM_set_size_t(p, ctx->base.ivlen)) {\n        ERR_raise(ERR_LIB_PROV, PROV_R_FAILED_TO_SET_PARAMETER);\n        return 0;\n    }\n    p = OSSL_PARAM_locate(params, OSSL_CIPHER_PARAM_AEAD_TLS1_AAD_PAD);\n    if (p != NULL && !OSSL_PARAM_set_size_t(p, ctx->tls_aad_pad_sz)) {\n        ERR_raise(ERR_LIB_PROV, PROV_R_FAILED_TO_SET_PARAMETER);\n        return 0;\n    }\n    return 1;\n}",
        "output": "0",
        "idx": 487
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pin_to_kill(struct inotify_handle *ih, struct inotify_watch *watch)\n{\n\tstruct super_block *sb = watch->inode->i_sb;\n\ts32 wd = watch->wd;\n\n\tspin_lock(&sb_lock);\n\tif (sb->s_count >= S_BIAS) {\n\t\tatomic_inc(&sb->s_active);\n\t\tspin_unlock(&sb_lock);\n\t\tget_inotify_watch(watch);\n\t\tmutex_unlock(&ih->mutex);\n\t\treturn 1;\t/* the best outcome */\n\t}\n\tsb->s_count++;\n\tspin_unlock(&sb_lock);\n\tmutex_unlock(&ih->mutex); /* can't grab ->s_umount under it */\n\tdown_read(&sb->s_umount);\n\tif (likely(!sb->s_root)) {\n\t\t/* fs is already shut down; the watch is dead */\n\t\tdrop_super(sb);\n\t\treturn 0;\n\t}\n\t/* raced with the final deactivate_super() */\n\tmutex_lock(&ih->mutex);\n\tif (idr_find(&ih->idr, wd) != watch || watch->inode->i_sb != sb) {\n\t\t/* the watch is dead */\n\t\tmutex_unlock(&ih->mutex);\n\t\tdrop_super(sb);\n\t\treturn 0;\n\t}\n\t/* still alive or freed and reused with the same sb and wd; kill */\n\tget_inotify_watch(watch);\n\tmutex_unlock(&ih->mutex);\n\treturn 2;\n}",
        "output": "0",
        "idx": 1155
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "av_cold void ff_vp9dsp_init(VP9DSPContext *dsp)\n\n{\n\n    vp9dsp_intrapred_init(dsp);\n\n    vp9dsp_itxfm_init(dsp);\n\n    vp9dsp_loopfilter_init(dsp);\n\n    vp9dsp_mc_init(dsp);\n\n\n\n\n\n    if (ARCH_X86)\n\n        ff_vp9dsp_init_x86(dsp);\n\n}",
        "output": "1",
        "idx": 4278
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vu_queue_flush(VuDev *dev, VuVirtq *vq, unsigned int count)\n\n{\n\n    uint16_t old, new;\n\n\n\n    if (unlikely(dev->broken)) {\n\n        return;\n\n    }\n\n\n\n    /* Make sure buffer is written before we update index. */\n\n    smp_wmb();\n\n\n\n    old = vq->used_idx;\n\n    new = old + count;\n\n    vring_used_idx_set(dev, vq, new);\n\n    vq->inuse -= count;\n\n    if (unlikely((int16_t)(new - vq->signalled_used) < (uint16_t)(new - old))) {\n\n        vq->signalled_used_valid = false;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2581
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t available_instances_show(struct mdev_type *mtype,\n\t\t\t\t\tstruct mdev_type_attribute *attr,\n\t\t\t\t\tchar *buf)\n{\n\tconst struct mbochs_type *type =\n\t\t&mbochs_types[mtype_get_type_group_id(mtype)];\n\tint count = (max_mbytes - mbochs_used_mbytes) / type->mbytes;\n\n\treturn sprintf(buf, \"%d\\n\", count);\n}",
        "output": "1",
        "idx": 2647
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "virSecuritySELinuxSetImageLabelRelative(virSecurityManager *mgr,\n                                        virDomainDef *def,\n                                        virStorageSource *src,\n                                        virStorageSource *parent,\n                                        virSecurityDomainImageLabelFlags flags)\n{\n    virStorageSource *n;\n\n    for (n = src; virStorageSourceIsBacking(n); n = n->backingStore) {\n        const bool isChainTop = flags & VIR_SECURITY_DOMAIN_IMAGE_PARENT_CHAIN_TOP;\n\n        if (virSecuritySELinuxSetImageLabelInternal(mgr, def, n, parent, isChainTop) < 0)\n            return -1;\n\n        if (!(flags & VIR_SECURITY_DOMAIN_IMAGE_LABEL_BACKING_CHAIN))\n            break;\n\n        flags &= ~VIR_SECURITY_DOMAIN_IMAGE_PARENT_CHAIN_TOP;\n    }\n\n    return 0;\n}",
        "output": "0",
        "idx": 6188
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rstrip_spaces_buf(AVBPrint *buf)\n\n{\n\n    while (buf->len > 0 && buf->str[buf->len - 1] == ' ')\n\n        buf->str[--buf->len] = 0;\n\n}\n",
        "output": "1",
        "idx": 4045
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_v4l2_create32(struct v4l2_create_buffers *kp, struct v4l2_create_buffers32 __user *up)\n{\n\tif (!access_ok(VERIFY_READ, up, sizeof(*up)) ||\n\t    copy_from_user(kp, up, offsetof(struct v4l2_create_buffers32, format)))\n\t\treturn -EFAULT;\n\treturn __get_v4l2_format32(&kp->format, &up->format);\n}",
        "output": "1",
        "idx": 1691
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  bool is_booting() const {\n    return state == STATE_BOOTING;\n  }",
        "output": "0",
        "idx": 4383
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int64_t mpegps_read_dts(AVFormatContext *s, int stream_index,\n\n                               int64_t *ppos, int64_t pos_limit)\n\n{\n\n    int len, startcode;\n\n    int64_t pos, pts, dts;\n\n\n\n    pos = *ppos;\n\n#ifdef DEBUG_SEEK\n\n    printf(\"read_dts: pos=0x%\"PRIx64\" next=%d -> \", pos, find_next);\n\n#endif\n\n    url_fseek(s->pb, pos, SEEK_SET);\n\n    for(;;) {\n\n        len = mpegps_read_pes_header(s, &pos, &startcode, &pts, &dts);\n\n        if (len < 0) {\n\n#ifdef DEBUG_SEEK\n\n            printf(\"none (ret=%d)\\n\", len);\n\n#endif\n\n            return AV_NOPTS_VALUE;\n\n        }\n\n        if (startcode == s->streams[stream_index]->id &&\n\n            dts != AV_NOPTS_VALUE) {\n\n            break;\n\n        }\n\n        url_fskip(s->pb, len);\n\n    }\n\n#ifdef DEBUG_SEEK\n\n    printf(\"pos=0x%\"PRIx64\" dts=0x%\"PRIx64\" %0.3f\\n\", pos, dts, dts / 90000.0);\n\n#endif\n\n    *ppos = pos;\n\n    return dts;\n\n}\n",
        "output": "0",
        "idx": 1717
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlRelaxNGDocumentPop(xmlRelaxNGParserCtxtPtr ctxt)\n{\n    xmlRelaxNGDocumentPtr ret;\n\n    if (ctxt->docNr <= 0)\n        return (NULL);\n    ctxt->docNr--;\n    if (ctxt->docNr > 0)\n        ctxt->doc = ctxt->docTab[ctxt->docNr - 1];\n    else\n        ctxt->doc = NULL;\n    ret = ctxt->docTab[ctxt->docNr];\n    ctxt->docTab[ctxt->docNr] = NULL;\n    return (ret);\n}",
        "output": "0",
        "idx": 5012
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned int selinux_ipv6_forward(unsigned int hooknum,\n\t\t\t\t\t struct sk_buff *skb,\n\t\t\t\t\t const struct net_device *in,\n\t\t\t\t\t const struct net_device *out,\n\t\t\t\t\t int (*okfn)(struct sk_buff *))\n{\n\treturn selinux_ip_forward(skb, in->ifindex, PF_INET6);\n}",
        "output": "0",
        "idx": 3176
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t pxa2xx_pm_read(void *opaque, target_phys_addr_t addr)\n\n{\n\n    struct pxa2xx_state_s *s = (struct pxa2xx_state_s *) opaque;\n\n    if (addr > s->pm_base + PCMD31) {\n\n        /* Special case: PWRI2C registers appear in the same range.  */\n\n        return pxa2xx_i2c_read(s->i2c[1], addr);\n\n    }\n\n    addr -= s->pm_base;\n\n\n\n    switch (addr) {\n\n    case PMCR ... PCMD31:\n\n        if (addr & 3)\n\n            goto fail;\n\n\n\n        return s->pm_regs[addr >> 2];\n\n    default:\n\n    fail:\n\n        printf(\"%s: Bad register \" REG_FMT \"\\n\", __FUNCTION__, addr);\n\n        break;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 117
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void StreamTcpPacketSetState(Packet *p, TcpSession *ssn,\n                                           uint8_t state)\n{\n    if (state == ssn->state || PKT_IS_PSEUDOPKT(p))\n        return;\n\n    ssn->state = state;\n\n    /* update the flow state */\n    switch(ssn->state) {\n        case TCP_ESTABLISHED:\n        case TCP_FIN_WAIT1:\n        case TCP_FIN_WAIT2:\n        case TCP_CLOSING:\n        case TCP_CLOSE_WAIT:\n            FlowUpdateState(p->flow, FLOW_STATE_ESTABLISHED);\n            break;\n        case TCP_LAST_ACK:\n        case TCP_TIME_WAIT:\n        case TCP_CLOSED:\n            FlowUpdateState(p->flow, FLOW_STATE_CLOSED);\n            break;\n    }\n}",
        "output": "1",
        "idx": 5135
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_uint64_equal(QEMUFile *f, void *pv, size_t size)\n\n{\n\n    uint64_t *v = pv;\n\n    uint64_t v2;\n\n    qemu_get_be64s(f, &v2);\n\n\n\n    if (*v == v2) {\n\n        return 0;\n\n    }\n\n    return -EINVAL;\n\n}\n",
        "output": "1",
        "idx": 3586
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vgacon_flush_scrollback(struct vc_data *c)\n{\n}",
        "output": "1",
        "idx": 1776
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Status renameTargetCollectionToTmp(OperationContext* opCtx,\n                                   const NamespaceString& sourceNs,\n                                   const UUID& sourceUUID,\n                                   Database* const targetDB,\n                                   const NamespaceString& targetNs,\n                                   const UUID& targetUUID) {\n    repl::UnreplicatedWritesBlock uwb(opCtx);\n\n    auto tmpNameResult = targetDB->makeUniqueCollectionNamespace(opCtx, \"tmp%%%%%.rename\");\n    if (!tmpNameResult.isOK()) {\n        return tmpNameResult.getStatus().withContext(\n            str::stream() << \"Cannot generate a temporary collection name for the target \"\n                          << targetNs\n                          << \" (\"\n                          << targetUUID\n                          << \") so that the source\"\n                          << sourceNs\n                          << \" (\"\n                          << sourceUUID\n                          << \") could be renamed to \"\n                          << targetNs);\n    }\n    const auto& tmpName = tmpNameResult.getValue();\n    const bool stayTemp = true;\n    return writeConflictRetry(opCtx, \"renameCollection\", targetNs.ns(), [&] {\n        WriteUnitOfWork wunit(opCtx);\n        auto status = targetDB->renameCollection(opCtx, targetNs.ns(), tmpName.ns(), stayTemp);\n        if (!status.isOK())\n            return status;\n\n        wunit.commit();\n\n        log() << \"Successfully renamed the target \" << targetNs << \" (\" << targetUUID << \") to \"\n              << tmpName << \" so that the source \" << sourceNs << \" (\" << sourceUUID\n              << \") could be renamed to \" << targetNs;\n\n        return Status::OK();\n    });\n}",
        "output": "0",
        "idx": 5477
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vhost_user_set_vring_addr(struct vhost_dev *dev,\n\n                                     struct vhost_vring_addr *addr)\n\n{\n\n    VhostUserMsg msg = {\n\n        .request = VHOST_USER_SET_VRING_ADDR,\n\n        .flags = VHOST_USER_VERSION,\n\n        .payload.addr = *addr,\n\n        .size = sizeof(msg.payload.addr),\n\n    };\n\n\n\n    vhost_user_write(dev, &msg, NULL, 0);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3924
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void helper_divq_EAX_T0(void)\n\n{\n\n    uint64_t r0, r1;\n\n    if (T0 == 0) {\n\n        raise_exception(EXCP00_DIVZ);\n\n    }\n\n    r0 = EAX;\n\n    r1 = EDX;\n\n    div64(&r0, &r1, T0);\n\n    EAX = r0;\n\n    EDX = r1;\n\n}\n",
        "output": "1",
        "idx": 6013
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void io_mem_init(void)\n\n{\n\n    cpu_register_io_memory(IO_MEM_ROM >> IO_MEM_SHIFT, error_mem_read, unassigned_mem_write, NULL);\n\n    cpu_register_io_memory(IO_MEM_UNASSIGNED >> IO_MEM_SHIFT, unassigned_mem_read, unassigned_mem_write, NULL);\n\n    cpu_register_io_memory(IO_MEM_NOTDIRTY >> IO_MEM_SHIFT, error_mem_read, notdirty_mem_write, NULL);\n\n    io_mem_nb = 5;\n\n\n\n\n\n\n\n    /* alloc dirty bits array */\n\n    phys_ram_dirty = qemu_vmalloc(phys_ram_size >> TARGET_PAGE_BITS);\n\n    memset(phys_ram_dirty, 0xff, phys_ram_size >> TARGET_PAGE_BITS);\n\n}",
        "output": "1",
        "idx": 5668
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int Server::getUserID(const QString &name) {\n\tif (qhUserIDCache.contains(name))\n\t\treturn qhUserIDCache.value(name);\n\tint id = -2;\n\temit nameToIdSig(id, name);\n\tif (id != -2) {\n\t\tqhUserIDCache.insert(name, id);\n\t\tqhUserNameCache.insert(id, name);\n\t\treturn id;\n\t}\n\tTransactionHolder th;\n\n\tQSqlQuery &query = *th.qsqQuery;\n\tSQLPREP(\"SELECT `user_id` FROM `%1users` WHERE `server_id` = ? AND `name` like ?\");\n\tquery.addBindValue(iServerNum);\n\tquery.addBindValue(name);\n\tSQLEXEC();\n\tif (query.next()) {\n\t\tid = query.value(0).toInt();\n\t\tqhUserIDCache.insert(name, id);\n\t\tqhUserNameCache.insert(id, name);\n\t}\n\treturn id;\n}",
        "output": "1",
        "idx": 5629
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dissect_spoolss_uint16uni(tvbuff_t *tvb, int offset, packet_info *pinfo _U_,\n\t\t\t  proto_tree *tree, guint8 *drep _U_, char **data,\n\t\t\t  int hf_name)\n{\n\tgint len, remaining;\n\tchar *text;\n\n\tif (offset % 2)\n\t\toffset += 2 - (offset % 2);\n\n\t/* Get remaining data in buffer as a string */\n\n\tremaining = tvb_captured_length_remaining(tvb, offset);\n\tif (remaining <= 0) {\n\t\tif (data)\n\t\t\t*data = g_strdup(\"\");\n\t\treturn offset;\n\t}\n\n\ttext = tvb_get_string_enc(NULL, tvb, offset, remaining, ENC_UTF_16|ENC_LITTLE_ENDIAN);\n\tlen = (int)strlen(text);\n\n\tproto_tree_add_string(tree, hf_name, tvb, offset, len * 2, text);\n\n\tif (data)\n\t\t*data = text;\n\telse\n\t\tg_free(text);\n\n\treturn offset + (len + 1) * 2;\n}",
        "output": "1",
        "idx": 4630
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_interleaved_write_frame(AVFormatContext *s, AVPacket *pkt)\n{\n    int ret, flush = 0;\n    if (pkt) {\n        AVStream *st = s->streams[pkt->stream_index];\n        //FIXME/XXX/HACK drop zero sized packets\n        if (st->codec->codec_type == AVMEDIA_TYPE_AUDIO && pkt->size == 0)\n            return 0;\n        av_dlog(s, \"av_interleaved_write_frame size:%d dts:%\" PRId64 \" pts:%\" PRId64 \"\\n\",\n                pkt->size, pkt->dts, pkt->pts);\n        if ((ret = compute_pkt_fields2(s, st, pkt)) < 0 && !(s->oformat->flags & AVFMT_NOTIMESTAMPS))\n        if (pkt->dts == AV_NOPTS_VALUE && !(s->oformat->flags & AVFMT_NOTIMESTAMPS))\n            return AVERROR(EINVAL);\n    } else {\n        av_dlog(s, \"av_interleaved_write_frame FLUSH\\n\");\n        flush = 1;\n    }\n    for (;; ) {\n        AVPacket opkt;\n        int ret = interleave_packet(s, &opkt, pkt, flush);\n        if (ret <= 0) //FIXME cleanup needed for ret<0 ?\n        ret = write_packet(s, &opkt);\n        if (ret >= 0)\n            s->streams[opkt.stream_index]->nb_frames++;\n        av_free_packet(&opkt);\n        pkt = NULL;\n    }\n}",
        "output": "1",
        "idx": 768
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ssl2_put_cipher_by_char(const SSL_CIPHER *c, unsigned char *p)\n{\n    long l;\n\n    if (p != NULL) {\n        l = c->id;\n        if ((l & 0xff000000) != 0x02000000 && l != SSL3_CK_FALLBACK_SCSV)\n            return (0);\n        p[0] = ((unsigned char)(l >> 16L)) & 0xFF;\n        p[1] = ((unsigned char)(l >> 8L)) & 0xFF;\n        p[2] = ((unsigned char)(l)) & 0xFF;\n    }\n    return (3);\n}",
        "output": "0",
        "idx": 1317
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tricore_cpu_initfn(Object *obj)\n\n{\n\n    CPUState *cs = CPU(obj);\n\n    TriCoreCPU *cpu = TRICORE_CPU(obj);\n\n    CPUTriCoreState *env = &cpu->env;\n\n\n\n    cs->env_ptr = env;\n\n    cpu_exec_init(cs, &error_abort);\n\n\n\n    if (tcg_enabled()) {\n\n        tricore_tcg_init();\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2785
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cleanup_environment()\n{\nif (!keep_environment || *keep_environment == '\\0')\n  clearenv();\nelse if (Ustrcmp(keep_environment, \"*\") != 0)\n  {\n  uschar **p;\n  if (environ) for (p = USS environ; *p; /* see below */)\n    {\n    uschar *name = string_copyn(*p, US Ustrchr(*p, '=') - *p);\n\n    if (OK != match_isinlist(name, CUSS &keep_environment,\n        0, NULL, NULL, MCL_NOEXPAND, FALSE, NULL))\n      if (unsetenv(CS name) < 0) return FALSE;\n      else /* nothing */;\n    else\n      p++;\n\n    store_reset(name);\n    }\n  }\nif (add_environment)\n  {\n    uschar *p;\n    int sep = 0;\n    const uschar* envlist = add_environment;\n    while ((p = string_nextinlist(&envlist, &sep, NULL, 0)))\n        putenv(CS p);\n  }\n\n  return TRUE;\n}",
        "output": "1",
        "idx": 5793
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int qio_channel_socket_listen_worker(QIOTask *task,\n\n                                            Error **errp,\n\n                                            gpointer opaque)\n\n{\n\n    QIOChannelSocket *ioc = QIO_CHANNEL_SOCKET(qio_task_get_source(task));\n\n    SocketAddress *addr = opaque;\n\n    int ret;\n\n\n\n    ret = qio_channel_socket_listen_sync(ioc,\n\n                                         addr,\n\n                                         errp);\n\n\n\n    object_unref(OBJECT(ioc));\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 4953
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int checkSettingSecurity(lua_State* L, const std::string &name)\n{\n\tif (ScriptApiSecurity::isSecure(L) && name.compare(0, 7, \"secure.\") == 0)\n\t\tthrow LuaError(\"Attempt to set secure setting.\");\n\n\tbool is_mainmenu = false;\n#ifndef SERVER\n\tis_mainmenu = ModApiBase::getGuiEngine(L) != nullptr;\n#endif\n\tif (!is_mainmenu && (name == \"mg_name\" || name == \"mg_flags\")) {\n\t\terrorstream << \"Tried to set global setting \" << name << \", ignoring. \"\n\t\t\t\"minetest.set_mapgen_setting() should be used instead.\" << std::endl;\n\t\tinfostream << script_get_backtrace(L) << std::endl;\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 1177
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ConnectionManagerImpl::checkForDeferredClose() {\n  if (drain_state_ == DrainState::Closing && streams_.empty() && !codec_->wantsToWrite()) {\n    doConnectionClose(Network::ConnectionCloseType::FlushWriteAndDelay, absl::nullopt,\n                      StreamInfo::ResponseCodeDetails::get().DownstreamLocalDisconnect);\n  }\n}",
        "output": "0",
        "idx": 2651
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void opt_frame_pad_top(const char *arg)\n\n{\n\n    frame_padtop = atoi(arg);\n\n    if (frame_padtop < 0) {\n\n        fprintf(stderr, \"Incorrect top pad size\\n\");\n\n        av_exit(1);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2290
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int seek_to_sector(BlockDriverState *bs, int64_t sector_num)\n\n{\n\n    BDRVParallelsState *s = bs->opaque;\n\n    uint32_t index, offset, position;\n\n\n\n    index = sector_num / s->tracks;\n\n    offset = sector_num % s->tracks;\n\n\n\n    // not allocated\n\n    if ((index > s->catalog_size) || (s->catalog_bitmap[index] == 0))\n\n\treturn -1;\n\n\n\n    position = (s->catalog_bitmap[index] + offset) * 512;\n\n\n\n//    fprintf(stderr, \"sector: %llx index=%x offset=%x pointer=%x position=%x\\n\",\n\n//\tsector_num, index, offset, s->catalog_bitmap[index], position);\n\n\n\n    if (lseek(s->fd, position, SEEK_SET) != position)\n\n\treturn -1;\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5061
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ut64 MACH0_(get_baddr)(struct MACH0_(obj_t)* bin) {\n\tint i;\n\n\tif (bin->hdr.filetype != MH_EXECUTE && bin->hdr.filetype != MH_DYLINKER)\n\t\treturn 0;\n\n\tfor (i = 0; i < bin->nsegs; ++i)\n\t\tif (bin->segs[i].fileoff == 0 && bin->segs[i].filesize != 0)\n\t\t\treturn bin->segs[i].vmaddr;\n\treturn 0;\n}",
        "output": "1",
        "idx": 1269
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct vhost_net *vhost_net_init(VLANClientState *backend, int devfd,\n\n                                 bool force)\n\n{\n\n\n    return NULL;\n\n}",
        "output": "1",
        "idx": 3197
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nbd_close(BlockDriverState *bs)\n{\n    nbd_teardown_connection(bs);\n}",
        "output": "1",
        "idx": 362
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DeviceState *i2c_create_slave(i2c_bus *bus, const char *name, uint8_t addr)\n\n{\n\n    DeviceState *dev;\n\n\n\n    dev = qdev_create(&bus->qbus, name);\n\n    qdev_prop_set_uint8(dev, \"address\", addr);\n\n    qdev_init(dev);\n\n    return dev;\n\n}\n",
        "output": "1",
        "idx": 4722
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mov_write_ms_tag(AVIOContext *pb, MOVTrack *track)\n\n{\n\n    int64_t pos = avio_tell(pb);\n\n    avio_wb32(pb, 0);\n\n    avio_wl32(pb, track->tag); // store it byteswapped\n\n    track->enc->codec_tag = av_bswap16(track->tag >> 16);\n\n    ff_put_wav_header(pb, track->enc, 0);\n\n    return update_size(pb, pos);\n\n}\n",
        "output": "0",
        "idx": 1232
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "      DSA_Verification_Operation(const DSA_PublicKey& dsa,\n                                 const std::string& emsa) :\n         PK_Ops::Verification_with_EMSA(emsa),\n         m_group(dsa.get_group()),\n         m_y(dsa.get_y()),\n         m_mod_q(dsa.group_q())\n         {}",
        "output": "1",
        "idx": 4069
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void handle_mrs(DisasContext *s, uint32_t insn, unsigned int op0,\n\n                       unsigned int op1, unsigned int op2,\n\n                       unsigned int crn, unsigned int crm, unsigned int rt)\n\n{\n\n    unsupported_encoding(s, insn);\n\n}\n",
        "output": "0",
        "idx": 5958
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void terminate_event_chain(int flags)\n{\n    if (g_expert_mode)\n        return;\n\n    hide_next_step_button();\n    if ((flags & TERMINATE_WITH_RERUN))\n        return;\n\n    free(g_event_selected);\n    g_event_selected = NULL;\n\n    g_list_free_full(g_auto_event_list, free);\n    g_auto_event_list = NULL;\n}",
        "output": "0",
        "idx": 2072
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int my_redel(const char *org_name, const char *tmp_name,\n             time_t backup_time_stamp, myf MyFlags)\n{\n  int error=1;\n  DBUG_ENTER(\"my_redel\");\n  DBUG_PRINT(\"my\",(\"org_name: '%s' tmp_name: '%s'  MyFlags: %d\",\n\t\t   org_name,tmp_name,MyFlags));\n\n  if (my_copystat(org_name,tmp_name,MyFlags) < 0)\n    goto end;\n  if (MyFlags & MY_REDEL_MAKE_BACKUP)\n  {\n    char name_buff[FN_REFLEN + MY_BACKUP_NAME_EXTRA_LENGTH];    \n    my_create_backup_name(name_buff, org_name, backup_time_stamp);\n    if (my_rename(org_name, name_buff, MyFlags))\n      goto end;\n  }\n  else if (my_delete(org_name, MyFlags))\n      goto end;\n  if (my_rename(tmp_name,org_name,MyFlags))\n    goto end;\n\n  error=0;\nend:\n  DBUG_RETURN(error);\n} /* my_redel */",
        "output": "1",
        "idx": 4720
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int is_arm_mapping_symbol(const char *str)\n{\n\tif (str[0] == '.' && str[1] == 'L')\n\t\treturn true;\n\treturn str[0] == '$' && strchr(\"axtd\", str[1])\n\t       && (str[2] == '\\0' || str[2] == '.');\n}",
        "output": "0",
        "idx": 5329
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "qf_stack_empty(qf_info_T *qi)\n{\n    return qi == NULL || qi->qf_listcount <= 0;\n}",
        "output": "0",
        "idx": 2028
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int post_msg(struct pptp_conn_t *conn, void *buf, int size)\n{\n\tint n;\n\tif (conn->out_size) {\n\t\tlog_error(\"pptp: buffer is not empty\\n\");\n\t\treturn -1;\n\t}\n\nagain:\n\tn=write(conn->hnd.fd, buf, size);\n\tif (n < 0) {\n\t\tif (errno == EINTR)\n\t\t\tgoto again;\n\t\telse if (errno == EAGAIN)\n\t\t\tn = 0;\n\t\telse {\n\t\t\tif (errno != EPIPE) {\n\t\t\t\tif (conf_verbose)\n\t\t\t\t\tlog_ppp_info2(\"pptp: write: %s\\n\", strerror(errno));\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( n<size ) {\n\t\tmemcpy(conn->out_buf, (uint8_t *)buf + n, size - n);\n\t\ttriton_md_enable_handler(&conn->hnd, MD_MODE_WRITE);\n\t}\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 3421
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "clear_diffin(diffin_T *din)\n{\n    if (din->din_fname == NULL)\n    {\n\tvim_free(din->din_mmfile.ptr);\n\tdin->din_mmfile.ptr = NULL;\n    }\n    else\n\tmch_remove(din->din_fname);\n}",
        "output": "0",
        "idx": 5885
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int ra144_decode_init(AVCodecContext * avctx)\n{\n    RA144Context *ractx = avctx->priv_data;\n    ractx->avctx = avctx;\n    ractx->lpc_coef[0] = ractx->lpc_tables[0];\n    ractx->lpc_coef[1] = ractx->lpc_tables[1];\n    avctx->channels       = 1;\n    avctx->channel_layout = AV_CH_LAYOUT_MONO;\n    avctx->sample_fmt     = AV_SAMPLE_FMT_S16;\n    return 0;\n}",
        "output": "1",
        "idx": 5820
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init lp_setup (char *str)\n{\n\tstatic int parport_ptr;\n\tint x;\n\n\tif (get_option(&str, &x)) {\n\t\tif (x == 0) {\n\t\t\t/* disable driver on \"lp=\" or \"lp=0\" */\n\t\t\tparport_nr[0] = LP_PARPORT_OFF;\n\t\t} else {\n\t\t\tprintk(KERN_WARNING \"warning: 'lp=0x%x' is deprecated, ignored\\n\", x);\n\t\t\treturn 0;\n\t\t}\n\t} else if (!strncmp(str, \"parport\", 7)) {\n\t\tint n = simple_strtoul(str+7, NULL, 10);\n\t\tif (parport_ptr < LP_NO)\n\t\t\tparport_nr[parport_ptr++] = n;\n\t\telse\n\t\t\tprintk(KERN_INFO \"lp: too many ports, %s ignored.\\n\",\n\t\t\t       str);\n\t} else if (!strcmp(str, \"auto\")) {\n\t\tparport_nr[0] = LP_PARPORT_AUTO;\n\t} else if (!strcmp(str, \"none\")) {\n\t\tparport_nr[parport_ptr++] = LP_PARPORT_NONE;\n\t} else if (!strcmp(str, \"reset\")) {\n\t\treset = 1;\n\t}\n\treturn 1;\n}",
        "output": "1",
        "idx": 520
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void svm_write_tsc_multiplier(struct kvm_vcpu *vcpu, u64 multiplier)\n{\n\t__svm_write_tsc_multiplier(multiplier);\n}",
        "output": "0",
        "idx": 3801
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int vfs_lstat_smb_fname(struct connection_struct *conn, const char *fname,\n\t\t\tSMB_STRUCT_STAT *psbuf)\n{\n\tstruct smb_filename *smb_fname = NULL;\n\tNTSTATUS status;\n\tint ret;\n\n\tstatus = create_synthetic_smb_fname_split(talloc_tos(), fname, NULL,\n\t\t\t\t\t\t  &smb_fname);\n\tif (!NT_STATUS_IS_OK(status)) {\n\t\terrno = map_errno_from_nt_status(status);\n\t\treturn -1;\n\t}\n\n\tret = SMB_VFS_LSTAT(conn, smb_fname);\n\tif (ret != -1) {\n\t\t*psbuf = smb_fname->st;\n\t}\n\n\tTALLOC_FREE(smb_fname);\n\treturn ret;\n}",
        "output": "0",
        "idx": 3662
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void aio_notify(AioContext *ctx)\n\n{\n\n    /* Write e.g. bh->scheduled before reading ctx->notify_me.  Pairs\n\n     * with atomic_or in aio_ctx_prepare or atomic_add in aio_poll.\n\n     */\n\n    smp_mb();\n\n    if (ctx->notify_me) {\n\n        event_notifier_set(&ctx->notifier);\n\n        atomic_mb_set(&ctx->notified, true);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2609
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DeepTiledInputFile::DeepTiledInputFile (InputPartData* part) :\n    _data (new Data (part->numThreads))\n{\n    _data->_deleteStream=false;\n    multiPartInitialize(part);\n}",
        "output": "1",
        "idx": 5979
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ieee80211_csa_finish(struct ieee80211_vif *vif)\n{\n\tstruct ieee80211_sub_if_data *sdata = vif_to_sdata(vif);\n\n\tieee80211_queue_work(&sdata->local->hw,\n\t\t\t     &sdata->csa_finalize_work);\n}",
        "output": "0",
        "idx": 573
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool general_log_write(THD *thd, enum enum_server_command command,\n                       const char *query, uint query_length)\n{\n  /* Write the message to the log if we want to log this king of commands */\n  if (logger.log_command(thd, command))\n    return logger.general_log_write(thd, command, query, query_length);\n\n  return FALSE;\n}",
        "output": "0",
        "idx": 5258
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int gen_set_psr_im(DisasContext *s, uint32_t mask, int spsr, uint32_t val)\n\n{\n\n    TCGv tmp;\n\n    tmp = new_tmp();\n\n    tcg_gen_movi_i32(tmp, val);\n\n    return gen_set_psr(s, mask, spsr, tmp);\n\n}\n",
        "output": "1",
        "idx": 3021
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static QemuOpt *qemu_opt_find(QemuOpts *opts, const char *name)\n\n{\n\n    QemuOpt *opt;\n\n\n\n    TAILQ_FOREACH(opt, &opts->head, next) {\n\n        if (strcmp(opt->name, name) != 0)\n\n            continue;\n\n        return opt;\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 4422
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ffv1_clear_slice_state(FFV1Context *f, FFV1Context *fs)\n\n{\n\n    int i, j;\n\n\n\n    for (i = 0; i < f->plane_count; i++) {\n\n        PlaneContext *p = &fs->plane[i];\n\n\n\n        p->interlace_bit_state[0] = 128;\n\n        p->interlace_bit_state[1] = 128;\n\n\n\n        if (fs->ac) {\n\n            if (f->initial_states[p->quant_table_index]) {\n\n                memcpy(p->state, f->initial_states[p->quant_table_index],\n\n                       CONTEXT_SIZE * p->context_count);\n\n            } else\n\n                memset(p->state, 128, CONTEXT_SIZE * p->context_count);\n\n        } else {\n\n            for (j = 0; j < p->context_count; j++) {\n\n                p->vlc_state[j].drift     = 0;\n\n                p->vlc_state[j].error_sum = 4;    //FFMAX((RANGE + 32)/64, 2);\n\n                p->vlc_state[j].bias      = 0;\n\n                p->vlc_state[j].count     = 1;\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 333
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "vmxnet3_dump_tx_descr(struct Vmxnet3_TxDesc *descr)\n\n{\n\n    VMW_PKPRN(\"TX DESCR: \"\n\n              \"addr %\" PRIx64 \", len: %d, gen: %d, rsvd: %d, \"\n\n              \"dtype: %d, ext1: %d, msscof: %d, hlen: %d, om: %d, \"\n\n              \"eop: %d, cq: %d, ext2: %d, ti: %d, tci: %d\",\n\n              le64_to_cpu(descr->addr), descr->len, descr->gen, descr->rsvd,\n\n              descr->dtype, descr->ext1, descr->msscof, descr->hlen, descr->om,\n\n              descr->eop, descr->cq, descr->ext2, descr->ti, descr->tci);\n\n}\n",
        "output": "1",
        "idx": 1569
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(linkinfo)\n{\n\tchar *link;\n\tsize_t link_len;\n\tzend_stat_t sb;\n\tint ret;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"p\", &link, &link_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tret = VCWD_STAT(link, &sb);\n\tif (ret == -1) {\n\t\tphp_error_docref(NULL, E_WARNING, \"%s\", strerror(errno));\n\t\tRETURN_LONG(Z_L(-1));\n\t}\n\n\tRETURN_LONG((zend_long) sb.st_dev);\n}",
        "output": "1",
        "idx": 656
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ivshmem_check_memdev_is_busy(Object *obj, const char *name,\n\n                                         Object *val, Error **errp)\n\n{\n\n    MemoryRegion *mr;\n\n\n\n    mr = host_memory_backend_get_memory(MEMORY_BACKEND(val), &error_abort);\n\n    if (memory_region_is_mapped(mr)) {\n\n        char *path = object_get_canonical_path_component(val);\n\n        error_setg(errp, \"can't use already busy memdev: %s\", path);\n\n        g_free(path);\n\n    } else {\n\n        qdev_prop_allow_set_link_before_realize(obj, name, val, errp);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5213
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int snmp_helper(void *context, size_t hdrlen, unsigned char tag,\n\t\tconst void *data, size_t datalen)\n{\n\tstruct snmp_ctx *ctx = (struct snmp_ctx *)context;\n\t__be32 *pdata = (__be32 *)data;\n\n\tif (*pdata == ctx->from) {\n\t\tpr_debug(\"%s: %pI4 to %pI4\\n\", __func__,\n\t\t\t (void *)&ctx->from, (void *)&ctx->to);\n\n\t\tif (*ctx->check)\n\t\t\tfast_csum(ctx, (unsigned char *)data - ctx->begin);\n\t\t*pdata = ctx->to;\n\t}\n\n\treturn 1;\n}",
        "output": "1",
        "idx": 4152
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "NOEXPORT int verify_callback(int preverify_ok, X509_STORE_CTX *callback_ctx) {\n        /* our verify callback function */\n    SSL *ssl;\n    CLI *c;\n\n    /* retrieve application specific data */\n    ssl=X509_STORE_CTX_get_ex_data(callback_ctx,\n        SSL_get_ex_data_X509_STORE_CTX_idx());\n    c=SSL_get_ex_data(ssl, index_ssl_cli);\n\n    if(!c->opt->option.verify_chain && !c->opt->option.verify_peer) {\n        s_log(LOG_INFO, \"Certificate verification disabled\");\n        return 1; /* accept */\n    }\n    if(verify_checks(c, preverify_ok, callback_ctx)) {\n        SSL_SESSION *sess=SSL_get1_session(c->ssl);\n        if(sess) {\n            int ok=SSL_SESSION_set_ex_data(sess, index_session_authenticated,\n                (void *)(-1));\n            SSL_SESSION_free(sess);\n            if(!ok) {\n                sslerror(\"SSL_SESSION_set_ex_data\");\n                return 0; /* reject */\n            }\n        }\n        return 1; /* accept */\n    }\n    if(c->opt->option.client || c->opt->protocol)\n        return 0; /* reject */\n    if(c->opt->redirect_addr.names)\n        return 1; /* accept */\n    return 0; /* reject */\n}",
        "output": "1",
        "idx": 4876
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void handle_s_without_atn(ESPState *s)\n{\n    int32_t cmdlen;\n\n    if (s->dma && !s->dma_enabled) {\n        s->dma_cb = handle_s_without_atn;\n        return;\n    }\n    s->pdma_cb = s_without_satn_pdma_cb;\n    cmdlen = get_cmd(s, ESP_CMDFIFO_SZ);\n    if (cmdlen > 0) {\n        s->cmdfifo_cdb_offset = 0;\n        do_busid_cmd(s, 0);\n    } else if (cmdlen == 0) {\n        s->do_cmd = 1;\n        /* Target present, but no cmd yet - switch to command phase */\n        s->rregs[ESP_RSEQ] = SEQ_CD;\n        s->rregs[ESP_RSTAT] = STAT_CD;\n    }\n}",
        "output": "1",
        "idx": 6129
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void  opj_j2k_write_float_to_float64(const void * p_src_data,\n        void * p_dest_data, OPJ_UINT32 p_nb_elem)\n{\n    OPJ_BYTE * l_dest_data = (OPJ_BYTE *) p_dest_data;\n    OPJ_FLOAT32 * l_src_data = (OPJ_FLOAT32 *) p_src_data;\n    OPJ_UINT32 i;\n    OPJ_FLOAT64 l_temp;\n\n    for (i = 0; i < p_nb_elem; ++i) {\n        l_temp = (OPJ_FLOAT64) * (l_src_data++);\n\n        opj_write_double(l_dest_data, l_temp);\n\n        l_dest_data += sizeof(OPJ_FLOAT64);\n    }\n}",
        "output": "0",
        "idx": 3032
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_init_thread_copy(AVCodecContext *avctx)\n\n{\n\n    H264Context *h = avctx->priv_data;\n\n    int ret;\n\n\n\n    if (!avctx->internal->is_copy)\n\n        return 0;\n\n    memset(h->sps_buffers, 0, sizeof(h->sps_buffers));\n\n    memset(h->pps_buffers, 0, sizeof(h->pps_buffers));\n\n\n\n    ret = h264_init_context(avctx, h);\n\n    if (ret < 0)\n\n        return ret;\n\n\n\n    h->context_initialized = 0;\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2076
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct tree_entry *new_tree_entry(void)\n{\n\tstruct tree_entry *e;\n\n\tif (!avail_tree_entry) {\n\t\tunsigned int n = tree_entry_alloc;\n\t\ttotal_allocd += n * sizeof(struct tree_entry);\n\t\tavail_tree_entry = e = xmalloc(n * sizeof(struct tree_entry));\n\t\twhile (n-- > 1) {\n\t\t\t*((void**)e) = e + 1;\n\t\t\te++;\n\t\t}\n\t\t*((void**)e) = NULL;\n\t}\n\n\te = avail_tree_entry;\n\tavail_tree_entry = *((void**)e);\n\treturn e;\n}",
        "output": "0",
        "idx": 5575
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_restricted(void)\n{\n    if (restricted)\n    {\n\temsg(_(\"E145: Shell commands not allowed in rvim\"));\n\treturn TRUE;\n    }\n    return FALSE;\n}",
        "output": "1",
        "idx": 3170
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void phys_page_set_level(PhysPageEntry *lp, target_phys_addr_t *index,\n\n                                target_phys_addr_t *nb, uint16_t leaf,\n\n                                int level)\n\n{\n\n    PhysPageEntry *p;\n\n    int i;\n\n    target_phys_addr_t step = (target_phys_addr_t)1 << (level * L2_BITS);\n\n\n\n    if (!lp->is_leaf && lp->ptr == PHYS_MAP_NODE_NIL) {\n\n        lp->ptr = phys_map_node_alloc();\n\n        p = phys_map_nodes[lp->ptr];\n\n        if (level == 0) {\n\n            for (i = 0; i < L2_SIZE; i++) {\n\n                p[i].is_leaf = 1;\n\n                p[i].ptr = phys_section_unassigned;\n\n            }\n\n        }\n\n    } else {\n\n        p = phys_map_nodes[lp->ptr];\n\n    }\n\n    lp = &p[(*index >> (level * L2_BITS)) & (L2_SIZE - 1)];\n\n\n\n    while (*nb && lp < &p[L2_SIZE]) {\n\n        if ((*index & (step - 1)) == 0 && *nb >= step) {\n\n            lp->is_leaf = true;\n\n            lp->ptr = leaf;\n\n            *index += step;\n\n            *nb -= step;\n\n        } else {\n\n            phys_page_set_level(lp, index, nb, leaf, level - 1);\n\n        }\n\n        ++lp;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4215
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    void Image::clearMetadata()\n    {\n        clearExifData();\n        clearIptcData();\n        clearXmpPacket();\n        clearXmpData();\n        clearComment();\n        clearIccProfile();\n    }",
        "output": "0",
        "idx": 767
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_save_vmstate(BlockDriverState *bs, const uint8_t *buf,\n\n                      int64_t pos, int size)\n\n{\n\n    QEMUIOVector qiov;\n\n    struct iovec iov = {\n\n        .iov_base   = (void *) buf,\n\n        .iov_len    = size,\n\n    };\n\n\n\n    qemu_iovec_init_external(&qiov, &iov, 1);\n\n    return bdrv_writev_vmstate(bs, &qiov, pos);\n\n}\n",
        "output": "0",
        "idx": 814
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mark_core_ids(struct mdesc_handle *hp, u64 mp,\n\t\t\t  int core_id)\n{\n\tfind_back_node_value(hp, mp, \"cpu\", __mark_core_id, core_id, 10);\n}",
        "output": "0",
        "idx": 1917
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SwsVector *sws_allocVec(int length)\n\n{\n\n    SwsVector *vec = av_malloc(sizeof(SwsVector));\n\n    if (!vec)\n\n        return NULL;\n\n    vec->length = length;\n\n    vec->coeff  = av_malloc(sizeof(double) * length);\n\n    if (!vec->coeff)\n\n        av_freep(&vec);\n\n    return vec;\n\n}\n",
        "output": "0",
        "idx": 2519
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int finish_send (lua_State *L, int status, lua_KContext ctx) {\n    if (lua_toboolean(L, -2))\n        return 0;\n    else\n        return lua_error(L); /* uses idx 6 */\n}",
        "output": "0",
        "idx": 4201
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int dummy_ipv6_recv_error(struct sock *sk, struct msghdr *msg, int len)\n{\n\treturn -EAFNOSUPPORT;\n}",
        "output": "1",
        "idx": 2020
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int kvmppc_fixup_cpu(PowerPCCPU *cpu)\n\n{\n\n    CPUState *cs = CPU(cpu);\n\n    int smt;\n\n\n\n    /* Adjust cpu index for SMT */\n\n    smt = kvmppc_smt_threads();\n\n    cs->cpu_index = (cs->cpu_index / smp_threads) * smt\n\n        + (cs->cpu_index % smp_threads);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4714
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tun_net_init(struct net_device *dev)\n{\n\tstruct tun_struct *tun = netdev_priv(dev);\n\n\tswitch (tun->flags & TUN_TYPE_MASK) {\n\tcase TUN_TUN_DEV:\n\t\tdev->netdev_ops = &tun_netdev_ops;\n\n\t\t/* Point-to-Point TUN Device */\n\t\tdev->hard_header_len = 0;\n\t\tdev->addr_len = 0;\n\t\tdev->mtu = 1500;\n\n\t\t/* Zero header length */\n\t\tdev->type = ARPHRD_NONE;\n\t\tdev->flags = IFF_POINTOPOINT | IFF_NOARP | IFF_MULTICAST;\n\t\tdev->tx_queue_len = TUN_READQ_SIZE;  /* We prefer our own queue length */\n\t\tbreak;\n\n\tcase TUN_TAP_DEV:\n\t\tdev->netdev_ops = &tap_netdev_ops;\n\t\t/* Ethernet TAP Device */\n\t\tether_setup(dev);\n\n\t\trandom_ether_addr(dev->dev_addr);\n\n\t\tdev->tx_queue_len = TUN_READQ_SIZE;  /* We prefer our own queue length */\n\t\tbreak;\n\t}\n}",
        "output": "1",
        "idx": 3694
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nstatic void __skb_complete_tx_timestamp(struct sk_buff *skb,\n\t\t\t\t\tstruct sock *sk,\n\t\t\t\t\tint tstype)\n{\n\tstruct sock_exterr_skb *serr;\n\tint err;\n\n\tserr = SKB_EXT_ERR(skb);\n\tmemset(serr, 0, sizeof(*serr));\n\tserr->ee.ee_errno = ENOMSG;\n\tserr->ee.ee_origin = SO_EE_ORIGIN_TIMESTAMPING;\n\tserr->ee.ee_info = tstype;\n\tif (sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID) {\n\t\tserr->ee.ee_data = skb_shinfo(skb)->tskey;\n\t\tif (sk->sk_protocol == IPPROTO_TCP &&\n\t\t    sk->sk_type == SOCK_STREAM)\n\t\t\tserr->ee.ee_data -= sk->sk_tskey;\n\t}\n\n\terr = sock_queue_err_skb(sk, skb);\n\n\tif (err)\n\t\tkfree_skb(skb);",
        "output": "1",
        "idx": 4682
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void phys_section_destroy(MemoryRegion *mr)\n{\n    bool have_sub_page = mr->subpage;\n\n    if (have_sub_page) {\n        subpage_t *subpage = container_of(mr, subpage_t, iomem);\n        // object_unref(OBJECT(&subpage->iomem));\n        g_free(subpage);\n    }\n}",
        "output": "0",
        "idx": 145
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cr8_write_interception(struct vcpu_svm *svm)\n{\n\tstruct kvm_run *kvm_run = svm->vcpu.run;\n\n\tu8 cr8_prev = kvm_get_cr8(&svm->vcpu);\n\t/* instruction emulation calls kvm_set_cr8() */\n\temulate_instruction(&svm->vcpu, 0, 0, 0);\n\tif (irqchip_in_kernel(svm->vcpu.kvm)) {\n\t\tsvm->vmcb->control.intercept_cr_write &= ~INTERCEPT_CR8_MASK;\n\t\treturn 1;\n\t}\n\tif (cr8_prev <= kvm_get_cr8(&svm->vcpu))\n\t\treturn 1;\n\tkvm_run->exit_reason = KVM_EXIT_SET_TPR;\n\treturn 0;\n}",
        "output": "0",
        "idx": 5050
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_notify_resume(struct pt_regs *regs, unsigned long orig_i0, unsigned long thread_info_flags)\n{\n\tif (thread_info_flags & _TIF_SIGPENDING)\n\t\tdo_signal(regs, orig_i0);\n\tif (thread_info_flags & _TIF_NOTIFY_RESUME) {\n\t\tclear_thread_flag(TIF_NOTIFY_RESUME);\n\t\ttracehook_notify_resume(regs);\n\t}\n}",
        "output": "1",
        "idx": 6192
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int do_netdev_del(Monitor *mon, const QDict *qdict, QObject **ret_data)\n\n{\n\n    const char *id = qdict_get_str(qdict, \"id\");\n\n    VLANClientState *vc;\n\n\n\n    vc = qemu_find_netdev(id);\n\n    if (!vc || vc->info->type == NET_CLIENT_TYPE_NIC) {\n\n        qerror_report(QERR_DEVICE_NOT_FOUND, id);\n\n        return -1;\n\n    }\n\n    if (vc->peer) {\n\n        qerror_report(QERR_DEVICE_IN_USE, id);\n\n        return -1;\n\n    }\n\n    qemu_del_vlan_client(vc);\n\n    qemu_opts_del(qemu_opts_find(&qemu_netdev_opts, id));\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 146
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gicv3_cpuif_el_change_hook(ARMCPU *cpu, void *opaque)\n\n{\n\n    /* Do nothing for now. */\n\n}\n",
        "output": "0",
        "idx": 3660
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlSchemaNewValidCtxt(xmlSchemaPtr schema)\n{\n    xmlSchemaValidCtxtPtr ret;\n\n    ret = (xmlSchemaValidCtxtPtr) xmlMalloc(sizeof(xmlSchemaValidCtxt));\n    if (ret == NULL) {\n        xmlSchemaVErrMemory(NULL, \"allocating validation context\", NULL);\n        return (NULL);\n    }\n    memset(ret, 0, sizeof(xmlSchemaValidCtxt));\n    ret->type = XML_SCHEMA_CTXT_VALIDATOR;\n    ret->dict = xmlDictCreate();\n    ret->nodeQNames = xmlSchemaItemListCreate();\n    ret->schema = schema;\n    return (ret);\n}",
        "output": "0",
        "idx": 1251
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void *data_plane_thread(void *opaque)\n\n{\n\n    VirtIOBlockDataPlane *s = opaque;\n\n\n\n    do {\n\n        event_poll(&s->event_poll);\n\n    } while (s->started || s->num_reqs > 0);\n\n    return NULL;\n\n}\n",
        "output": "1",
        "idx": 3252
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void spapr_reset_htab(sPAPRMachineState *spapr)\n\n{\n\n    long shift;\n\n    int index;\n\n\n\n    shift = kvmppc_reset_htab(spapr->htab_shift);\n\n    if (shift < 0) {\n\n        error_setg(&error_abort, \"Failed to reset HTAB\");\n\n    } else if (shift > 0) {\n\n        if (shift != spapr->htab_shift) {\n\n            error_setg(&error_abort, \"Requested HTAB allocation failed during reset\");\n\n        }\n\n\n\n        /* Tell readers to update their file descriptor */\n\n        if (spapr->htab_fd >= 0) {\n\n            spapr->htab_fd_stale = true;\n\n        }\n\n    } else {\n\n        memset(spapr->htab, 0, HTAB_SIZE(spapr));\n\n\n\n        for (index = 0; index < HTAB_SIZE(spapr) / HASH_PTE_SIZE_64; index++) {\n\n            DIRTY_HPTE(HPTE(spapr->htab, index));\n\n        }\n\n    }\n\n\n\n    /* Update the RMA size if necessary */\n\n    if (spapr->vrma_adjust) {\n\n        spapr->rma_size = kvmppc_rma_size(spapr_node0_size(),\n\n                                          spapr->htab_shift);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1934
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_rfmci(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n#else\n\n    if (unlikely(ctx->pr)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n        return;\n\n    }\n\n    /* Restore CPU state */\n\n    gen_helper_rfmci(cpu_env);\n\n    gen_sync_exception(ctx);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 1075
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_jwt_rs_token(void)\n{\n\tconst char *error;\n\n\tif (skip_dcrypt)\n\t\treturn;\n\n\ttest_begin(\"JWT RSA token\");\n\t/* write public key to file */\n\toauth2_validation_key_cache_evict(key_cache, \"default\");\n\tsave_key(\"RS256\", rsa_public_key);\n\n\tbuffer_t *tokenbuf = create_jwt_token(\"RS256\");\n\n\t/* sign token */\n\tbuffer_t *sig = t_buffer_create(64);\n\tstruct dcrypt_private_key *key;\n\tif (!dcrypt_key_load_private(&key, rsa_private_key, NULL, NULL,\n\t\t\t\t     &error) ||\n\t    !dcrypt_sign(key, \"sha256\", DCRYPT_SIGNATURE_FORMAT_DSS,\n\t\t\t tokenbuf->data, tokenbuf->used, sig,\n\t\t\t DCRYPT_PADDING_RSA_PKCS1, &error)) {\n\t\ti_error(\"dcrypt signing failed: %s\", error);\n\t\tlib_exit(1);\n\t}\n\tdcrypt_key_unref_private(&key);\n\n\t/* convert to base64 */\n\tbuffer_append(tokenbuf, \".\", 1);\n\tbase64url_encode(BASE64_ENCODE_FLAG_NO_PADDING, SIZE_MAX,\n\t\t\t sig->data, sig->used, tokenbuf);\n\n\ttest_jwt_token(str_c(tokenbuf));\n\n\ttest_end();\n}",
        "output": "0",
        "idx": 3459
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void clear_soft_dirty(struct vm_area_struct *vma,\n\t\tunsigned long addr, pte_t *pte)\n{\n}",
        "output": "0",
        "idx": 3322
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int grackle_pci_host_init(PCIDevice *d)\n\n{\n\n    pci_config_set_vendor_id(d->config, PCI_VENDOR_ID_MOTOROLA);\n\n    pci_config_set_device_id(d->config, PCI_DEVICE_ID_MOTOROLA_MPC106);\n\n    d->config[0x08] = 0x00; // revision\n\n    d->config[0x09] = 0x01;\n\n    pci_config_set_class(d->config, PCI_CLASS_BRIDGE_HOST);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1252
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "isdn_net_addphone(isdn_net_ioctl_phone * phone)\n{\n\tisdn_net_dev *p = isdn_net_findif(phone->name);\n\tisdn_net_phone *n;\n\n\tif (p) {\n\t\tif (!(n = kmalloc(sizeof(isdn_net_phone), GFP_KERNEL)))\n\t\t\treturn -ENOMEM;\n\t\tstrcpy(n->num, phone->phone);\n\t\tn->next = p->local->phone[phone->outgoing & 1];\n\t\tp->local->phone[phone->outgoing & 1] = n;\n\t\treturn 0;\n\t}\n\treturn -ENODEV;\n}",
        "output": "1",
        "idx": 436
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline unsigned int ScaleQuantumToLong(const Quantum quantum)\n{\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  return((unsigned int) (16843009UL*quantum));\n#else\n  if (quantum <= 0.0)\n    return(0UL);\n  if ((16843009.0*quantum) >= 4294967295.0)\n    return(4294967295UL);\n  return((unsigned int) (16843009.0*quantum+0.5));\n#endif\n}",
        "output": "1",
        "idx": 3076
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "findoprnd(ITEM *ptr, int32 *pos)\n{\n#ifdef BS_DEBUG\n\telog(DEBUG3, (ptr[*pos].type == OPR) ?\n\t\t \"%d  %c\" : \"%d  %d\", *pos, ptr[*pos].val);\n#endif\n\tif (ptr[*pos].type == VAL)\n\t{\n\t\tptr[*pos].left = 0;\n\t\t(*pos)--;\n\t}\n\telse if (ptr[*pos].val == (int32) '!')\n\t{\n\t\tptr[*pos].left = -1;\n\t\t(*pos)--;\n\t\tfindoprnd(ptr, pos);\n\t}\n\telse\n\t{\n\t\tITEM\t   *curitem = &ptr[*pos];\n\t\tint32\t\ttmp = *pos;\n\n\t\t(*pos)--;\n\t\tfindoprnd(ptr, pos);\n\t\tcuritem->left = *pos - tmp;\n\t\tfindoprnd(ptr, pos);\n\t}\n}",
        "output": "1",
        "idx": 3539
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void avc_h_loop_filter_chroma422_mbaff_msa(uint8_t *src,\n\n                                                  int32_t stride,\n\n                                                  int32_t alpha_in,\n\n                                                  int32_t beta_in,\n\n                                                  int8_t *tc0)\n\n{\n\n    int32_t col, tc_val;\n\n    int16_t out0, out1;\n\n    v16u8 alpha, beta, res;\n\n\n\n    alpha = (v16u8) __msa_fill_b(alpha_in);\n\n    beta = (v16u8) __msa_fill_b(beta_in);\n\n\n\n    for (col = 0; col < 4; col++) {\n\n        tc_val = (tc0[col] - 1) + 1;\n\n\n\n        if (tc_val <= 0) {\n\n            src += 4 * stride;\n\n            continue;\n\n        }\n\n\n\n        AVC_LPF_H_2BYTE_CHROMA_422(src, stride, tc_val, alpha, beta, res);\n\n\n\n        out0 = __msa_copy_s_h((v8i16) res, 0);\n\n        out1 = __msa_copy_s_h((v8i16) res, 1);\n\n\n\n        STORE_HWORD((src - 1), out0);\n\n        src += stride;\n\n        STORE_HWORD((src - 1), out1);\n\n        src += stride;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3769
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static KVMMSIRoute *kvm_lookup_msi_route(KVMState *s, MSIMessage msg)\n\n{\n\n    unsigned int hash = kvm_hash_msi(msg.data);\n\n    KVMMSIRoute *route;\n\n\n\n    QTAILQ_FOREACH(route, &s->msi_hashtab[hash], entry) {\n\n        if (route->kroute.u.msi.address_lo == (uint32_t)msg.address &&\n\n            route->kroute.u.msi.address_hi == (msg.address >> 32) &&\n\n            route->kroute.u.msi.data == msg.data) {\n\n            return route;\n\n        }\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 1563
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "lua_call_throttle::~lua_call_throttle()\n{\n    if (!--lua->mixed_call_depth)\n        lua_map.erase(lua->state());\n}",
        "output": "0",
        "idx": 2555
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t _hostsock_recv(\n    oe_fd_t* sock_,\n    void* buf,\n    size_t count,\n    int flags)\n{\n    ssize_t ret = -1;\n    sock_t* sock = _cast_sock(sock_);\n\n    oe_errno = 0;\n\n    if (!sock || (count && !buf))\n        OE_RAISE_ERRNO(OE_EINVAL);\n\n    if (buf)\n    {\n        if (oe_memset_s(buf, count, 0, count) != OE_OK)\n            OE_RAISE_ERRNO(OE_EINVAL);\n    }\n\n    if (oe_syscall_recv_ocall(&ret, sock->host_fd, buf, count, flags) != OE_OK)\n        OE_RAISE_ERRNO(OE_EINVAL);\n\ndone:\n    return ret;\n}",
        "output": "1",
        "idx": 3642
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bgp_capability_as4 (struct peer *peer, struct capability_header *hdr)\n{\n  as_t as4 = stream_getl (BGP_INPUT(peer));\n  \n  if (BGP_DEBUG (as4, AS4))\n    zlog_debug (\"%s [AS4] about to set cap PEER_CAP_AS4_RCV, got as4 %u\",\n                peer->host, as4);\n  SET_FLAG (peer->cap, PEER_CAP_AS4_RCV);\n  \n  return as4;\n}",
        "output": "1",
        "idx": 5923
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_physical_memory_reset_dirty(ram_addr_t start, ram_addr_t end,\n\n                                     int dirty_flags)\n\n{\n\n    CPUState *env;\n\n    unsigned long length, start1;\n\n    int i;\n\n\n\n    start &= TARGET_PAGE_MASK;\n\n    end = TARGET_PAGE_ALIGN(end);\n\n\n\n    length = end - start;\n\n    if (length == 0)\n\n        return;\n\n    cpu_physical_memory_mask_dirty_range(start, length, dirty_flags);\n\n\n\n    /* we modify the TLB cache so that the dirty bit will be set again\n\n       when accessing the range */\n\n    start1 = (unsigned long)qemu_safe_ram_ptr(start);\n\n    /* Chek that we don't span multiple blocks - this breaks the\n\n       address comparisons below.  */\n\n    if ((unsigned long)qemu_safe_ram_ptr(end - 1) - start1\n\n            != (end - 1) - start) {\n\n        abort();\n\n    }\n\n\n\n    for(env = first_cpu; env != NULL; env = env->next_cpu) {\n\n        int mmu_idx;\n\n        for (mmu_idx = 0; mmu_idx < NB_MMU_MODES; mmu_idx++) {\n\n            for(i = 0; i < CPU_TLB_SIZE; i++)\n\n                tlb_reset_dirty_range(&env->tlb_table[mmu_idx][i],\n\n                                      start1, length);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3992
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t qio_channel_command_readv(QIOChannel *ioc,\n\n                                         const struct iovec *iov,\n\n                                         size_t niov,\n\n                                         int **fds,\n\n                                         size_t *nfds,\n\n                                         Error **errp)\n\n{\n\n    QIOChannelCommand *cioc = QIO_CHANNEL_COMMAND(ioc);\n\n    ssize_t ret;\n\n\n\n retry:\n\n    ret = readv(cioc->readfd, iov, niov);\n\n    if (ret < 0) {\n\n        if (errno == EAGAIN ||\n\n            errno == EWOULDBLOCK) {\n\n            return QIO_CHANNEL_ERR_BLOCK;\n\n        }\n\n        if (errno == EINTR) {\n\n            goto retry;\n\n        }\n\n\n\n        error_setg_errno(errp, errno,\n\n                         \"Unable to read from command\");\n\n        return -1;\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 9
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "srs_get_secret(srs_t *srs, int idx)\n{\n\tif (idx < srs->numsecrets)\n\t\treturn srs->secrets[idx];\n\treturn NULL;\n}",
        "output": "0",
        "idx": 2887
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ff_lzw_decode_init(LZWState *p, int csize, uint8_t *buf, int buf_size, int mode)\n\n{\n\n    struct LZWState *s = (struct LZWState *)p;\n\n\n\n    if(csize < 1 || csize > LZW_MAXBITS)\n\n        return -1;\n\n    /* read buffer */\n\n    s->eob_reached = 0;\n\n    s->pbuf = buf;\n\n    s->ebuf = s->pbuf + buf_size;\n\n    s->bbuf = 0;\n\n    s->bbits = 0;\n\n    s->bs = 0;\n\n\n\n    /* decoder */\n\n    s->codesize = csize;\n\n    s->cursize = s->codesize + 1;\n\n    s->curmask = mask[s->cursize];\n\n    s->top_slot = 1 << s->cursize;\n\n    s->clear_code = 1 << s->codesize;\n\n    s->end_code = s->clear_code + 1;\n\n    s->slot = s->newcodes = s->clear_code + 2;\n\n    s->oc = s->fc = 0;\n\n    s->sp = s->stack;\n\n\n\n    s->mode = mode;\n\n    switch(s->mode){\n\n    case FF_LZW_GIF:\n\n        s->extra_slot= 0;\n\n        break;\n\n    case FF_LZW_TIFF:\n\n        s->extra_slot= 1;\n\n        break;\n\n    default:\n\n        return -1;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 898
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void count_usage(uint8_t *src, int width,\n\n                        int height, uint32_t *counts)\n\n{\n\n    int i, j;\n\n\n\n    for (j = 0; j < height; j++) {\n\n        for (i = 0; i < width; i++) {\n\n            counts[src[i]]++;\n\n        }\n\n        src += width;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3607
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mxf_read_content_storage(MXFContext *mxf, ByteIOContext *pb, int tag)\n\n{\n\n    switch (tag) {\n\n    case 0x1901:\n\n        mxf->packages_count = get_be32(pb);\n\n        if (mxf->packages_count >= UINT_MAX / sizeof(UID))\n\n            return -1;\n\n        mxf->packages_refs = av_malloc(mxf->packages_count * sizeof(UID));\n\n        if (!mxf->packages_refs)\n\n            return -1;\n\n        url_fskip(pb, 4); /* useless size of objects, always 16 according to specs */\n\n        get_buffer(pb, (uint8_t *)mxf->packages_refs, mxf->packages_count * sizeof(UID));\n\n        break;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4642
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "allocsymkey(\n\tsymkey **\tbucket,\n\tkeyid_t\t\tid,\n\tu_short\t\tflags,\n\tu_short\t\ttype,\n\tu_long\t\tlifetime,\n\tu_short\t\tsecretsize,\n\tu_char *\tsecret\n\t)\n{\n\tsymkey *\tsk;\n\n\tif (authnumfreekeys < 1)\n\t\tauth_moremem(-1);\n\tUNLINK_HEAD_SLIST(sk, authfreekeys, llink.f);\n\tDEBUG_ENSURE(sk != NULL);\n\tsk->keyid = id;\n\tsk->flags = flags;\n\tsk->type = type;\n\tsk->secretsize = secretsize;\n\tsk->secret = secret;\n\tsk->lifetime = lifetime;\n\tLINK_SLIST(*bucket, sk, hlink);\n\tLINK_TAIL_DLIST(key_listhead, sk, llink);\n\tauthnumfreekeys--;\n\tauthnumkeys++;\n}",
        "output": "1",
        "idx": 992
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err url_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_DataEntryURLBox *ptr = (GF_DataEntryURLBox *)s;\n\n\tif (ptr->size) {\n\t\tptr->location = (char*)gf_malloc((u32) ptr->size);\n\t\tif (! ptr->location) return GF_OUT_OF_MEM;\n\t\tgf_bs_read_data(bs, ptr->location, (u32)ptr->size);\n\t}\n\treturn GF_OK;\n}",
        "output": "1",
        "idx": 4859
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  bool ms_verify_authorizer(Connection *con, int peer_type, int protocol,\n                            bufferlist& authorizer, bufferlist& authorizer_reply,\n                            bool& isvalid, CryptoKey& session_key) override {\n    isvalid = true;\n    return true;\n  }",
        "output": "1",
        "idx": 5905
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(ConnectionManagerUtilityTest, UseRemoteAddressWhenLocalHostRemoteAddress) {\n  connection_.stream_info_.downstream_address_provider_->setRemoteAddress(\n      std::make_shared<Network::Address::Ipv4Instance>(\"127.0.0.1\"));\n  Network::Address::Ipv4Instance local_address(\"10.3.2.1\");\n  ON_CALL(config_, useRemoteAddress()).WillByDefault(Return(true));\n  ON_CALL(config_, localAddress()).WillByDefault(ReturnRef(local_address));\n  TestRequestHeaderMapImpl headers;\n\n  EXPECT_EQ((MutateRequestRet{\"127.0.0.1:0\", true, Tracing::Reason::NotTraceable}),\n            callMutateRequestHeaders(headers, Protocol::Http2));\n  EXPECT_EQ(local_address.ip()->addressAsString(), headers.get_(Headers::get().ForwardedFor));\n}",
        "output": "0",
        "idx": 5481
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static TCGv neon_load_scratch(int scratch)\n\n{\n\n    TCGv tmp = new_tmp();\n\n    tcg_gen_ld_i32(tmp, cpu_env, offsetof(CPUARMState, vfp.scratch[scratch]));\n\n    return tmp;\n\n}\n",
        "output": "1",
        "idx": 5776
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "allow_user_function (GDBusAuthObserver *observer,\n                     GIOStream         *stream,\n                     GCredentials      *credentials,\n                     GdmSession        *self)\n{\n        uid_t client_uid;\n        GPid  pid_of_client;\n\n        client_uid = g_credentials_get_unix_user (credentials, NULL);\n        if (client_uid == self->priv->allowed_user) {\n                return TRUE;\n        }\n\n        g_debug (\"GdmSession: User not allowed\");\n\n        pid_of_client = g_credentials_get_unix_pid (credentials, NULL);\n        g_signal_emit (G_OBJECT (self),\n                       signals [CLIENT_REJECTED],\n                       0,\n                       credentials,\n                       (guint)\n                       pid_of_client);\n\n\n        return FALSE;\n}",
        "output": "0",
        "idx": 5666
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "yuv2planeX_16_c_template(const int16_t *filter, int filterSize,\n\n                         const int32_t **src, uint16_t *dest, int dstW,\n\n                         int big_endian, int output_bits)\n\n{\n\n    int i;\n\n    int shift = 15;\n\n    av_assert0(output_bits == 16);\n\n\n\n    for (i = 0; i < dstW; i++) {\n\n        int val = 1 << (shift - 1);\n\n        int j;\n\n\n\n        /* range of val is [0,0x7FFFFFFF], so 31 bits, but with lanczos/spline\n\n         * filters (or anything with negative coeffs, the range can be slightly\n\n         * wider in both directions. To account for this overflow, we subtract\n\n         * a constant so it always fits in the signed range (assuming a\n\n         * reasonable filterSize), and re-add that at the end. */\n\n        val -= 0x40000000;\n\n        for (j = 0; j < filterSize; j++)\n\n            val += src[j][i] * filter[j];\n\n\n\n        output_pixel(&dest[i], val, 0x8000, int);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5861
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "R_API st64 r_buf_append_string(RBuffer *b, const char *str) {\n\tr_return_val_if_fail (b && str && !b->readonly, false);\n\treturn r_buf_append_bytes (b, (const ut8 *)str, strlen (str));\n}",
        "output": "0",
        "idx": 5178
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool CModule::LoadRegistry() {\n    // CString sPrefix = (m_pUser) ? m_pUser->GetUserName() : \".global\";\n    return (m_mssRegistry.ReadFromDisk(GetSavePath() + \"/.registry\") ==\n            MCString::MCS_SUCCESS);\n}",
        "output": "0",
        "idx": 2021
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "utf32le_mbc_to_code(const UChar* p, const UChar* end ARG_UNUSED)\n{\n  return (OnigCodePoint )(((p[3] * 256 + p[2]) * 256 + p[1]) * 256 + p[0]);\n}",
        "output": "1",
        "idx": 2104
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void scalar32_min_max_xor(struct bpf_reg_state *dst_reg,\n\t\t\t\t struct bpf_reg_state *src_reg)\n{\n\tbool src_known = tnum_subreg_is_const(src_reg->var_off);\n\tbool dst_known = tnum_subreg_is_const(dst_reg->var_off);\n\tstruct tnum var32_off = tnum_subreg(dst_reg->var_off);\n\ts32 smin_val = src_reg->s32_min_value;\n\n\t/* Assuming scalar64_min_max_xor will be called so it is safe\n\t * to skip updating register for known case.\n\t */\n\tif (src_known && dst_known)\n\t\treturn;\n\n\t/* We get both minimum and maximum from the var32_off. */\n\tdst_reg->u32_min_value = var32_off.value;\n\tdst_reg->u32_max_value = var32_off.value | var32_off.mask;\n\n\tif (dst_reg->s32_min_value >= 0 && smin_val >= 0) {\n\t\t/* XORing two positive sign numbers gives a positive,\n\t\t * so safe to cast u32 result into s32.\n\t\t */\n\t\tdst_reg->s32_min_value = dst_reg->u32_min_value;\n\t\tdst_reg->s32_max_value = dst_reg->u32_max_value;\n\t} else {\n\t\tdst_reg->s32_min_value = S32_MIN;\n\t\tdst_reg->s32_max_value = S32_MAX;\n\t}\n}",
        "output": "1",
        "idx": 817
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int HtmlOutputDev::getOutlinePageNum(OutlineItem *item)\n{\n    const LinkAction *action   = item->getAction();\n    const LinkGoTo   *link     = nullptr;\n    LinkDest   *linkdest = nullptr;\n    int         pagenum  = -1;\n\n    if (!action || action->getKind() != actionGoTo)\n        return pagenum;\n\n    link = dynamic_cast<const LinkGoTo*>(action);\n\n    if (!link || !link->isOk())\n        return pagenum;\n\n    if (link->getDest())\n        linkdest = link->getDest()->copy();\n    else if (link->getNamedDest())\n        linkdest = catalog->findDest(link->getNamedDest());\n\n    if (!linkdest)\n        return pagenum;\n\n    if (linkdest->isPageRef()) {\n        Ref pageref = linkdest->getPageRef();\n        pagenum = catalog->findPage(pageref.num, pageref.gen);\n    } else {\n        pagenum = linkdest->getPageNum();\n    }\n\n    delete linkdest;\n    return pagenum;\n}",
        "output": "0",
        "idx": 840
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "copytoks (int tindex, int ntokens)\n{\n  int i;\n\n  for (i = 0; i < ntokens; ++i)\n    {\n      addtok(dfa->tokens[tindex + i]);\n      /* Update index into multibyte csets.  */\n      if (MB_CUR_MAX > 1 && dfa->tokens[tindex + i] == MBCSET)\n        dfa->multibyte_prop[dfa->tindex - 1] = dfa->multibyte_prop[tindex + i];\n    }\n}",
        "output": "1",
        "idx": 5997
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mm_answer_sesskey(int sock, Buffer *m)\n{\n\tBIGNUM *p;\n\tint rsafail;\n\n\t/* Turn off permissions */\n\tmonitor_permit(mon_dispatch, MONITOR_REQ_SESSKEY, 0);\n\n\tif ((p = BN_new()) == NULL)\n\t\tfatal(\"%s: BN_new\", __func__);\n\n\tbuffer_get_bignum2(m, p);\n\n\trsafail = ssh1_session_key(p);\n\n\tbuffer_clear(m);\n\tbuffer_put_int(m, rsafail);\n\tbuffer_put_bignum2(m, p);\n\n\tBN_clear_free(p);\n\n\tmm_request_send(sock, MONITOR_ANS_SESSKEY, m);\n\n\t/* Turn on permissions for sessid passing */\n\tmonitor_permit(mon_dispatch, MONITOR_REQ_SESSID, 1);\n\n\treturn (0);\n}",
        "output": "0",
        "idx": 5841
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Item_type_holder::Item_type_holder(THD *thd, Item *item)\n  :Item(thd, item), enum_set_typelib(0), fld_type(get_real_type(item))\n{\n  DBUG_ASSERT(item->fixed);\n  maybe_null= item->maybe_null;\n  collation.set(item->collation);\n  get_full_info(item);\n  /* fix variable decimals which always is NOT_FIXED_DEC */\n  if (Field::result_merge_type(fld_type) == INT_RESULT)\n    decimals= 0;\n  prev_decimal_int_part= item->decimal_int_part();\n#ifdef HAVE_SPATIAL\n  if (item->field_type() == MYSQL_TYPE_GEOMETRY)\n    geometry_type= item->get_geometry_type();\n#endif /* HAVE_SPATIAL */\n}",
        "output": "0",
        "idx": 5235
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int avrcp_controller_probe(struct btd_service *service)\n{\n\tstruct btd_device *dev = btd_service_get_device(service);\n\n\tDBG(\"path %s\", device_get_path(dev));\n\n\treturn control_init_remote(service);\n}",
        "output": "0",
        "idx": 1415
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qdev_prop_set_drive(DeviceState *dev, const char *name,\n\n                         BlockBackend *value, Error **errp)\n\n{\n\n    object_property_set_str(OBJECT(dev), value ? blk_name(value) : \"\",\n\n                            name, errp);\n\n}\n",
        "output": "1",
        "idx": 1762
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err schm_box_read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_SchemeTypeBox *ptr = (GF_SchemeTypeBox *)s;\n\n\tISOM_DECREASE_SIZE(ptr, 8);\n\tptr->scheme_type = gf_bs_read_u32(bs);\n\tptr->scheme_version = gf_bs_read_u32(bs);\n\n\tif (ptr->size && (ptr->flags & 0x000001)) {\n\t\tu32 len = (u32) (ptr->size);\n\t\tptr->URI = (char*)gf_malloc(sizeof(char)*len);\n\t\tif (!ptr->URI) return GF_OUT_OF_MEM;\n\t\tgf_bs_read_data(bs, ptr->URI, len);\n\t}\n\treturn GF_OK;\n}",
        "output": "1",
        "idx": 5201
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void palette8tobgr32(const uint8_t *src, uint8_t *dst, long num_pixels, const uint8_t *palette)\n\n{\n\n\tlong i;\n\n\tfor(i=0; i<num_pixels; i++)\n\n\t{\n\n\t\t#ifdef WORDS_BIGENDIAN\n\n\t\t\tdst[3]= palette[ src[i]*4+0 ];\n\n\t\t\tdst[2]= palette[ src[i]*4+1 ];\n\n\t\t\tdst[1]= palette[ src[i]*4+2 ];\n\n\t\t#else\n\n\t\t\t//FIXME slow?\n\n\t\t\tdst[0]= palette[ src[i]*4+0 ];\n\n\t\t\tdst[1]= palette[ src[i]*4+1 ];\n\n\t\t\tdst[2]= palette[ src[i]*4+2 ];\n\n\t\t\t//dst[3]= 0; /* do we need this cleansing? */\n\n\t\t#endif\n\n\n\n\t\tdst+= 4;\n\n\t}\n\n}\n",
        "output": "1",
        "idx": 5334
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int delete_path(const char *dump_dir_name)\n{\n    /* If doesn't start with \"g_settings_dump_location/\"... */\n    if (!dir_is_in_dump_location(dump_dir_name))\n    {\n        /* Then refuse to operate on it (someone is attacking us??) */\n        error_msg(\"Bad problem directory name '%s', should start with: '%s'\", dump_dir_name, g_settings_dump_location);\n        return 400; /* Bad Request */\n    }\n    if (!dump_dir_accessible_by_uid(dump_dir_name, client_uid))\n    {\n        if (errno == ENOTDIR)\n        {\n            error_msg(\"Path '%s' isn't problem directory\", dump_dir_name);\n            return 404; /* Not Found */\n        }\n        error_msg(\"Problem directory '%s' can't be accessed by user with uid %ld\", dump_dir_name, (long)client_uid);\n        return 403; /* Forbidden */\n    }\n\n    delete_dump_dir(dump_dir_name);\n\n    return 0; /* success */\n}",
        "output": "1",
        "idx": 3748
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "renderCoTable(struct table *tbl, int maxlimit)\n{\n    struct readbuffer obuf;\n    struct html_feed_environ h_env;\n    struct environment envs[MAX_ENV_LEVEL];\n    struct table *t;\n    int i, col, row;\n    int indent, maxwidth;\n\n    for (i = 0; i < tbl->ntable; i++) {\n\tt = tbl->tables[i].ptr;\n\tcol = tbl->tables[i].col;\n\trow = tbl->tables[i].row;\n\tindent = tbl->tables[i].indent;\n\n\tinit_henv(&h_env, &obuf, envs, MAX_ENV_LEVEL, tbl->tables[i].buf,\n\t\t  get_spec_cell_width(tbl, row, col), indent);\n\tcheck_row(tbl, row);\n\tif (h_env.limit > maxlimit)\n\t    h_env.limit = maxlimit;\n\tif (t->total_width == 0)\n\t    maxwidth = h_env.limit - indent;\n\telse if (t->total_width > 0)\n\t    maxwidth = t->total_width;\n\telse\n\t    maxwidth = t->total_width = -t->total_width * h_env.limit / 100;\n\trenderTable(t, maxwidth, &h_env);\n    }\n}",
        "output": "1",
        "idx": 2602
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "path_poly(PG_FUNCTION_ARGS)\n{\n\tPATH\t   *path = PG_GETARG_PATH_P(0);\n\tPOLYGON    *poly;\n\tint\t\t\tsize;\n\tint\t\t\ti;\n\n\t/* This is not very consistent --- other similar cases return NULL ... */\n\tif (!path->closed)\n\t\tereport(ERROR,\n\t\t\t\t(errcode(ERRCODE_INVALID_PARAMETER_VALUE),\n\t\t\t\t errmsg(\"open path cannot be converted to polygon\")));\n\n\tsize = offsetof(POLYGON, p[0]) +sizeof(poly->p[0]) * path->npts;\n\tpoly = (POLYGON *) palloc(size);\n\n\tSET_VARSIZE(poly, size);\n\tpoly->npts = path->npts;\n\n\tfor (i = 0; i < path->npts; i++)\n\t{\n\t\tpoly->p[i].x = path->p[i].x;\n\t\tpoly->p[i].y = path->p[i].y;\n\t}\n\n\tmake_bound_box(poly);\n\n\tPG_RETURN_POLYGON_P(poly);\n}",
        "output": "1",
        "idx": 657
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Component(int b, int l) : begin(b), len(l) {}",
        "output": "0",
        "idx": 6076
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tcp_accept_incoming_migration(void *opaque)\n\n{\n\n    struct sockaddr_in addr;\n\n    socklen_t addrlen = sizeof(addr);\n\n    int s = (unsigned long)opaque;\n\n    QEMUFile *f;\n\n    int c, ret;\n\n\n\n    do {\n\n        c = qemu_accept(s, (struct sockaddr *)&addr, &addrlen);\n\n    } while (c == -1 && socket_error() == EINTR);\n\n\n\n    DPRINTF(\"accepted migration\\n\");\n\n\n\n    if (c == -1) {\n\n        fprintf(stderr, \"could not accept migration connection\\n\");\n\n        return;\n\n    }\n\n\n\n    f = qemu_fopen_socket(c);\n\n    if (f == NULL) {\n\n        fprintf(stderr, \"could not qemu_fopen socket\\n\");\n\n        goto out;\n\n    }\n\n\n\n    ret = qemu_loadvm_state(f);\n\n    if (ret < 0) {\n\n        fprintf(stderr, \"load of migration failed\\n\");\n\n        goto out_fopen;\n\n    }\n\n    qemu_announce_self();\n\n    DPRINTF(\"successfully loaded vm state\\n\");\n\n\n\n    /* we've successfully migrated, close the server socket */\n\n    qemu_set_fd_handler2(s, NULL, NULL, NULL, NULL);\n\n    close(s);\n\n    if (autostart)\n\n        vm_start();\n\n\n\nout_fopen:\n\n    qemu_fclose(f);\n\nout:\n\n    close(c);\n\n}\n",
        "output": "0",
        "idx": 4076
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MagickExport void DisassociateBlob(Image *image)\n{\n  BlobInfo\n    *magick_restrict blob_info,\n    *clone_info;\n\n  MagickBooleanType\n    clone;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  if (image->debug != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  assert(image->blob != (BlobInfo *) NULL);\n  assert(image->blob->signature == MagickCoreSignature);\n  blob_info=image->blob;\n  clone=MagickFalse;\n  LockSemaphoreInfo(blob_info->semaphore);\n  assert(blob_info->reference_count >= 0);\n  if (blob_info->reference_count > 1)\n    clone=MagickTrue;\n  UnlockSemaphoreInfo(blob_info->semaphore);\n  if (clone == MagickFalse)\n    return;\n  clone_info=CloneBlobInfo(blob_info);\n  DestroyBlob(image);\n  image->blob=clone_info;\n}",
        "output": "0",
        "idx": 3106
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qtree_scan_dquots(struct quota_handle *h,\n\t\t      int (*process_dquot) (struct dquot *, void *),\n\t\t      void *data)\n{\n\tchar *bitmap;\n\tstruct v2_mem_dqinfo *v2info = &h->qh_info.u.v2_mdqi;\n\tstruct qtree_mem_dqinfo *info = &v2info->dqi_qtree;\n\tstruct dquot *dquot = get_empty_dquot();\n\n\tif (!dquot)\n\t\treturn -1;\n\n\tdquot->dq_h = h;\n\tif (ext2fs_get_memzero((info->dqi_blocks + 7) >> 3, &bitmap)) {\n\t\text2fs_free_mem(&dquot);\n\t\treturn -1;\n\t}\n\tv2info->dqi_used_entries = report_tree(dquot, QT_TREEOFF, 0, bitmap,\n\t\t\t\t\t       process_dquot, data);\n\tv2info->dqi_data_blocks = find_set_bits(bitmap, info->dqi_blocks);\n\text2fs_free_mem(&bitmap);\n\text2fs_free_mem(&dquot);\n\treturn 0;\n}",
        "output": "1",
        "idx": 2487
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void xdr_buf_pages_copy_right(const struct xdr_buf *buf,\n\t\t\t\t     unsigned int base, unsigned int len,\n\t\t\t\t     unsigned int shift)\n{\n\tconst struct kvec *tail = buf->tail;\n\tunsigned int to = base + shift;\n\tunsigned int pglen = 0;\n\tunsigned int talen = 0, tato = 0;\n\n\tif (base >= buf->page_len)\n\t\treturn;\n\tif (len > buf->page_len - base)\n\t\tlen = buf->page_len - base;\n\tif (to >= buf->page_len) {\n\t\ttato = to - buf->page_len;\n\t\tif (tail->iov_len >= len + tato)\n\t\t\ttalen = len;\n\t\telse if (tail->iov_len > tato)\n\t\t\ttalen = tail->iov_len - tato;\n\t} else if (len + to >= buf->page_len) {\n\t\tpglen = buf->page_len - to;\n\t\ttalen = len - pglen;\n\t\tif (talen > tail->iov_len)\n\t\t\ttalen = tail->iov_len;\n\t} else\n\t\tpglen = len;\n\n\t_copy_from_pages(tail->iov_base + tato, buf->pages,\n\t\t\t buf->page_base + base + pglen, talen);\n\t_shift_data_right_pages(buf->pages, buf->page_base + to,\n\t\t\t\tbuf->page_base + base, pglen);\n}",
        "output": "0",
        "idx": 168
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  uint32_t get_canvas_width() const { return m_width; }",
        "output": "0",
        "idx": 4248
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void notify_other(int fd) {\n\tFILE* stream;\n\tint newfd = fcntl(fd, F_DUPFD_CLOEXEC, 0);\n\tif (newfd == -1)\n\t\terrExit(\"fcntl\");\n\tstream = fdopen(newfd, \"w\");\n\tfprintf(stream, \"arg_noroot=%d\\n\", arg_noroot);\n\tfflush(stream);\n\tfclose(stream);\n}",
        "output": "0",
        "idx": 3108
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void migration_bitmap_sync_range(ram_addr_t start, ram_addr_t length)\n\n{\n\n    migration_dirty_pages +=\n\n        cpu_physical_memory_sync_dirty_bitmap(migration_bitmap, start, length);\n\n}\n",
        "output": "0",
        "idx": 4365
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void tee_putc(int c, FILE *file)\n{\n#ifdef _WIN32\n  if (my_win_is_console_cached(file))\n    my_win_console_putc(charset_info, c);\n  else\n#endif\n  putc(c, file);\n  if (opt_outfile)\n    putc(c, OUTFILE);\n}",
        "output": "0",
        "idx": 1312
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_uint8_equal(QEMUFile *f, void *pv, size_t size,\n\n                           VMStateField *field)\n\n{\n\n    uint8_t *v = pv;\n\n    uint8_t v2;\n\n    qemu_get_8s(f, &v2);\n\n\n\n    if (*v == v2) {\n\n        return 0;\n\n\n    error_report(\"%x != %x\", *v, v2);\n\n\n\n\n    return -EINVAL;\n",
        "output": "1",
        "idx": 2641
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void comps_objrtree_data_destroy(COMPS_ObjRTreeData * rtd) {\n    free(rtd->key);\n    comps_object_destroy(rtd->data);\n    comps_hslist_destroy(&rtd->subnodes);\n    free(rtd);\n}",
        "output": "0",
        "idx": 4315
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void bad_flp_intr(void)\n{\n\tint err_count;\n\n\tif (probing) {\n\t\tdrive_state[current_drive].probed_format++;\n\t\tif (!next_valid_format(current_drive))\n\t\t\treturn;\n\t}\n\terr_count = ++(*errors);\n\tINFBOUND(write_errors[current_drive].badness, err_count);\n\tif (err_count > drive_params[current_drive].max_errors.abort)\n\t\tcont->done(0);\n\tif (err_count > drive_params[current_drive].max_errors.reset)\n\t\tfdc_state[current_fdc].reset = 1;\n\telse if (err_count > drive_params[current_drive].max_errors.recal)\n\t\tdrive_state[current_drive].track = NEED_2_RECAL;\n}",
        "output": "1",
        "idx": 5854
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "longlong Item_func_ge::val_int()\n{\n  DBUG_ASSERT(fixed == 1);\n  int value= cmp.compare();\n  return value >= 0 ? 1 : 0;\n}",
        "output": "0",
        "idx": 1739
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int LibarchivePlugin::extractionFlags() const\n{\n    int result = ARCHIVE_EXTRACT_TIME;\n    result |= ARCHIVE_EXTRACT_SECURE_NODOTDOT;\n\n    // TODO: Don't use arksettings here\n    /*if ( ArkSettings::preservePerms() )\n    {\n        result &= ARCHIVE_EXTRACT_PERM;\n    }\n\n    if ( !ArkSettings::extractOverwrite() )\n    {\n        result &= ARCHIVE_EXTRACT_NO_OVERWRITE;\n    }*/\n\n    return result;\n}",
        "output": "1",
        "idx": 2750
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __mincore_unmapped_range(unsigned long addr, unsigned long end,\n\t\t\t\tstruct vm_area_struct *vma, unsigned char *vec)\n{\n\tunsigned long nr = (end - addr) >> PAGE_SHIFT;\n\tint i;\n\n\tif (vma->vm_file) {\n\t\tpgoff_t pgoff;\n\n\t\tpgoff = linear_page_index(vma, addr);\n\t\tfor (i = 0; i < nr; i++, pgoff++)\n\t\t\tvec[i] = mincore_page(vma->vm_file->f_mapping, pgoff);\n\t} else {\n\t\tfor (i = 0; i < nr; i++)\n\t\t\tvec[i] = 0;\n\t}\n\treturn nr;\n}",
        "output": "1",
        "idx": 2080
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool Server::MatchViewOrStatic(const std::string& method,\n                               const std::string& url, bool* stream) {\n  if (Router::MatchView(method, url, stream)) {\n    return true;\n  }\n\n  // Try to match a static file.\n  if (method == methods::kGet && !doc_root_.empty()) {\n    fs::path path = doc_root_ / url;\n\n    fs::error_code ec;\n    if (!fs::is_directory(path, ec) && fs::exists(path, ec)) {\n      return true;\n    }\n  }\n\n  return false;\n}",
        "output": "1",
        "idx": 1432
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void park_frame_worker_threads(FrameThreadContext *fctx, int thread_count)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < thread_count; i++) {\n\n        PerThreadContext *p = &fctx->threads[i];\n\n\n\n        if (p->state != STATE_INPUT_READY) {\n\n            pthread_mutex_lock(&p->progress_mutex);\n\n            while (p->state != STATE_INPUT_READY)\n\n                pthread_cond_wait(&p->output_cond, &p->progress_mutex);\n\n            pthread_mutex_unlock(&p->progress_mutex);\n\n        }\n\n\n    }\n\n}",
        "output": "1",
        "idx": 4107
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void set_repertoire_from_value()\n  {\n    collation.repertoire= my_string_repertoire(str_value.charset(),\n                                               str_value.ptr(),\n                                               str_value.length());\n  }",
        "output": "0",
        "idx": 3085
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_always_inline int get_decoded_frame(AVFormatContext *fmt_ctx,\n\n                                              AVFrame *frame, int *got_frame,\n\n                                              AVPacket *pkt)\n\n{\n\n    AVCodecContext *dec_ctx = fmt_ctx->streams[pkt->stream_index]->codec;\n\n    int ret = 0;\n\n\n\n    *got_frame = 0;\n\n    if (dec_ctx->codec) {\n\n    switch (dec_ctx->codec_type) {\n\n    case AVMEDIA_TYPE_VIDEO:\n\n        ret = avcodec_decode_video2(dec_ctx, frame, got_frame, pkt);\n\n        break;\n\n\n\n    case AVMEDIA_TYPE_AUDIO:\n\n        ret = avcodec_decode_audio4(dec_ctx, frame, got_frame, pkt);\n\n        break;\n\n\n\n\n\n    return ret;\n",
        "output": "1",
        "idx": 4845
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "NTSTATUS smb2cli_session_encryption_on(struct smbXcli_session *session)\n{\n\tif (session->smb2->should_encrypt) {\n\t\treturn NT_STATUS_OK;\n\t}\n\n\tif (session->conn->protocol < PROTOCOL_SMB2_24) {\n\t\treturn NT_STATUS_NOT_SUPPORTED;\n\t}\n\n\tif (session->conn->smb2.server.cipher == 0) {\n\t\treturn NT_STATUS_NOT_SUPPORTED;\n\t}\n\n\tif (session->smb2->signing_key.data == NULL) {\n\t\treturn NT_STATUS_NOT_SUPPORTED;\n\t}\n\tsession->smb2->should_encrypt = true;\n\treturn NT_STATUS_OK;\n}",
        "output": "1",
        "idx": 5869
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qemu_rdma_dump_id(const char *who, struct ibv_context *verbs)\n\n{\n\n    struct ibv_port_attr port;\n\n\n\n    if (ibv_query_port(verbs, 1, &port)) {\n\n        fprintf(stderr, \"FAILED TO QUERY PORT INFORMATION!\\n\");\n\n        return;\n\n    }\n\n\n\n    printf(\"%s RDMA Device opened: kernel name %s \"\n\n           \"uverbs device name %s, \"\n\n           \"infiniband_verbs class device path %s, \"\n\n           \"infiniband class device path %s, \"\n\n           \"transport: (%d) %s\\n\",\n\n                who,\n\n                verbs->device->name,\n\n                verbs->device->dev_name,\n\n                verbs->device->dev_path,\n\n                verbs->device->ibdev_path,\n\n                port.link_layer,\n\n                (port.link_layer == IBV_LINK_LAYER_INFINIBAND) ? \"Infiniband\" :\n\n                 ((port.link_layer == IBV_LINK_LAYER_ETHERNET) \n\n                    ? \"Ethernet\" : \"Unknown\"));\n\n}\n",
        "output": "1",
        "idx": 2973
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "grammar_current_rule_prec_set (symbol *precsym, location loc)\n{\n  /* POSIX says that any identifier is a nonterminal if it does not\n     appear on the LHS of a grammar rule and is not defined by %token\n     or by one of the directives that assigns precedence to a token.\n     We ignore this here because the only kind of identifier that\n     POSIX allows to follow a %prec is a token and because assuming\n     it's a token now can produce more logical error messages.\n     Nevertheless, grammar_rule_check_and_complete does obey what we\n     believe is the real intent of POSIX here: that an error be\n     reported for any identifier that appears after %prec but that is\n     not defined separately as a token.  */\n  symbol_class_set (precsym, token_sym, loc, false);\n  if (current_rule->ruleprec)\n    duplicate_rule_directive (\"%prec\",\n                              current_rule->ruleprec->location, loc);\n  else\n    current_rule->ruleprec = precsym;\n}",
        "output": "0",
        "idx": 3724
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t mp_dacl_getxattr(FsContext *ctx, const char *path,\n\n                                const char *name, void *value, size_t size)\n\n{\n\n    char *buffer;\n\n    ssize_t ret;\n\n\n\n    buffer = rpath(ctx, path);\n\n    ret = lgetxattr(buffer, MAP_ACL_DEFAULT, value, size);\n\n    g_free(buffer);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 1867
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int coroutine_fn bdrv_is_allocated(BlockDriverState *bs, int64_t offset,\n\n                                   int64_t bytes, int64_t *pnum)\n\n{\n\n    BlockDriverState *file;\n\n    int64_t sector_num = offset >> BDRV_SECTOR_BITS;\n\n    int nb_sectors = bytes >> BDRV_SECTOR_BITS;\n\n    int64_t ret;\n\n    int psectors;\n\n\n\n    assert(QEMU_IS_ALIGNED(offset, BDRV_SECTOR_SIZE));\n\n    assert(QEMU_IS_ALIGNED(bytes, BDRV_SECTOR_SIZE) && bytes < INT_MAX);\n\n    ret = bdrv_get_block_status(bs, sector_num, nb_sectors, &psectors,\n\n                                &file);\n\n    if (ret < 0) {\n\n        return ret;\n\n    }\n\n    if (pnum) {\n\n        *pnum = psectors * BDRV_SECTOR_SIZE;\n\n    }\n\n    return !!(ret & BDRV_BLOCK_ALLOCATED);\n\n}\n",
        "output": "0",
        "idx": 1666
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "using_utf8 (void)\n{\n  static int utf8 = -1;\n  if (utf8 == -1)\n    {\n#if defined HAVE_LANGINFO_CODESET && MBS_SUPPORT\n      utf8 = (STREQ (nl_langinfo (CODESET), \"UTF-8\"));\n#else\n      utf8 = 0;\n#endif\n    }\n\n  return utf8;\n}",
        "output": "0",
        "idx": 1292
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static krb5_error_code hdb_samba4_create(krb5_context context, struct HDB **db, const char *arg)\n{\n\tNTSTATUS nt_status;\n\tvoid *ptr = NULL;\n\tstruct samba_kdc_base_context *base_ctx = NULL;\n\n\tif (sscanf(arg, \"&%p\", &ptr) != 1) {\n\t\treturn EINVAL;\n\t}\n\n\tbase_ctx = talloc_get_type_abort(ptr, struct samba_kdc_base_context);\n\n\t/* The global kdc_mem_ctx and kdc_lp_ctx, Disgusting, ugly hack, but it means one less private hook */\n\tnt_status = hdb_samba4_create_kdc(base_ctx, context, db);\n\n\tif (NT_STATUS_IS_OK(nt_status)) {\n\t\treturn 0;\n\t} else if (NT_STATUS_EQUAL(nt_status, NT_STATUS_ERROR_DS_INCOMPATIBLE_VERSION)) {\n\t\treturn EINVAL;\n\t} else if (NT_STATUS_EQUAL(nt_status, NT_STATUS_CANT_ACCESS_DOMAIN_INFO)) {\n\t\t\n\t\tkrb5_set_error_message(context, EINVAL, \"Failed to open Samba4 LDB at %s\", lpcfg_private_path(base_ctx, base_ctx->lp_ctx, \"sam.ldb\"));\n\t} else {\n\t\tkrb5_set_error_message(context, EINVAL, \"Failed to connect to Samba4 DB: %s (%s)\", get_friendly_nt_error_msg(nt_status), nt_errstr(nt_status));\n\t}\n\n\treturn EINVAL;\n}",
        "output": "1",
        "idx": 3733
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_stats(AVCodecContext *avctx, int eos)\n\n{\n\n#ifdef TH_ENCCTL_2PASS_OUT\n\n    TheoraContext *h = avctx->priv_data;\n\n    uint8_t *buf;\n\n    int bytes;\n\n\n\n    bytes = th_encode_ctl(h->t_state, TH_ENCCTL_2PASS_OUT, &buf, sizeof(buf));\n\n    if (bytes < 0) {\n\n        av_log(avctx, AV_LOG_ERROR, \"Error getting first pass stats\\n\");\n\n        return AVERROR_EXTERNAL;\n\n    }\n\n    if (!eos) {\n\n        void *tmp = av_fast_realloc(h->stats, &h->stats_size,\n\n                                   h->stats_offset + bytes);\n\n        if (!tmp)\n\n\n        h->stats = tmp;\n\n        memcpy(h->stats + h->stats_offset, buf, bytes);\n\n        h->stats_offset += bytes;\n\n    } else {\n\n        int b64_size = AV_BASE64_SIZE(h->stats_offset);\n\n        // libtheora generates a summary header at the end\n\n        memcpy(h->stats, buf, bytes);\n\n        avctx->stats_out = av_malloc(b64_size);\n\n\n\n        av_base64_encode(avctx->stats_out, b64_size, h->stats, h->stats_offset);\n\n    }\n\n    return 0;\n\n#else\n\n    av_log(avctx, AV_LOG_ERROR, \"libtheora too old to support 2pass\\n\");\n\n    return AVERROR(ENOSUP);\n\n#endif\n\n}",
        "output": "1",
        "idx": 4689
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int Field_blob::store(double nr)\n{\n  CHARSET_INFO *cs=charset();\n  value.set_real(nr, NOT_FIXED_DEC, cs);\n  return Field_blob::store(value.ptr(),(uint) value.length(), cs);\n}",
        "output": "0",
        "idx": 5595
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void i82374_isa_realize(DeviceState *dev, Error **errp)\n\n{\n\n    ISAi82374State *isa = I82374(dev);\n\n    I82374State *s = &isa->state;\n\n    PortioList *port_list = g_new(PortioList, 1);\n\n\n\n    portio_list_init(port_list, OBJECT(isa), i82374_portio_list, s, \"i82374\");\n\n    portio_list_add(port_list, isa_address_space_io(&isa->parent_obj),\n\n                    isa->iobase);\n\n\n\n    i82374_realize(s, errp);\n\n\n\n    qdev_init_gpio_out(dev, &s->out, 1);\n\n}\n",
        "output": "1",
        "idx": 5974
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int mysql_real_query_for_lazy(const char *buf, int length)\n{\n  for (uint retry=0;; retry++)\n  {\n    int error;\n    if (!mysql_real_query(&mysql,buf,length))\n      return 0;\n    error= put_error(&mysql);\n    if (mysql_errno(&mysql) != CR_SERVER_GONE_ERROR || retry > 1 ||\n        !opt_reconnect)\n      return error;\n    if (reconnect())\n      return error;\n  }\n}",
        "output": "0",
        "idx": 2223
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int nl_portid_hash_dilute(struct nl_portid_hash *hash, int len)\n{\n\tint avg = hash->entries >> hash->shift;\n\n\tif (unlikely(avg > 1) && nl_portid_hash_rehash(hash, 1))\n\t\treturn 1;\n\n\tif (unlikely(len > avg) && time_after(jiffies, hash->rehash_time)) {\n\t\tnl_portid_hash_rehash(hash, 0);\n\t\treturn 1;\n\t}\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 267
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gain_compensate(COOKContext *q, cook_gains *gains_ptr,\n\n                            float* previous_buffer)\n\n{\n\n    const float fc = q->pow2tab[gains_ptr->previous[0] + 63];\n\n    float *buffer = q->mono_mdct_output;\n\n    int i;\n\n\n\n    /* Overlap with the previous block. */\n\n    for(i=0 ; i<q->samples_per_channel ; i++) {\n\n        buffer[i] *= fc;\n\n        buffer[i] += previous_buffer[i];\n\n    }\n\n\n\n    /* Apply gain profile */\n\n    for (i = 0; i < 8; i++) {\n\n        if (gains_ptr->now[i] || gains_ptr->now[i + 1])\n\n            interpolate(q, &buffer[q->gain_size_factor * i],\n\n                        gains_ptr->now[i], gains_ptr->now[i + 1]);\n\n    }\n\n\n\n    /* Save away the current to be previous block. */\n\n    memcpy(previous_buffer, buffer+q->samples_per_channel,\n\n           sizeof(float)*q->samples_per_channel);\n\n}\n",
        "output": "0",
        "idx": 2990
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline const u32 *flow_keys_hash_start(const struct flow_keys *flow)\n{\n\tconst void *p = flow;\n\n\tBUILD_BUG_ON(FLOW_KEYS_HASH_OFFSET % sizeof(u32));\n\treturn (const u32 *)(p + FLOW_KEYS_HASH_OFFSET);\n}",
        "output": "1",
        "idx": 3771
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rtw_wx_set_freq(struct net_device *dev,\n\t\t\t   struct iw_request_info *info,\n\t\t\t   union iwreq_data *wrqu, char *extra)\n{\n\tRT_TRACE(_module_rtl871x_mlme_c_, _drv_notice_, (\"+%s\\n\", __func__));\n\treturn 0;\n}",
        "output": "0",
        "idx": 6170
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void in_asm_used_var_warning_killer()\n\n{\n\n volatile int i= yCoeff+vrCoeff+ubCoeff+vgCoeff+ugCoeff+bF8+bFC+w400+w80+w10+\n\n bm00001111+bm00000111+bm11111000+b16Mask+g16Mask+r16Mask+b15Mask+g15Mask+r15Mask+asm_yalpha1+ asm_uvalpha1+\n\n M24A+M24B+M24C+w02 + b5Dither+g5Dither+r5Dither+g6Dither+dither4[0]+dither8[0];\n\n if(i) i=0;\n\n}\n",
        "output": "0",
        "idx": 1391
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_hb_ot_layout_init (hb_face_t *face)\n{\n  hb_ot_layout_t *layout = &face->ot_layout;\n\n  layout->gdef_blob = Sanitizer<GDEF>::sanitize (hb_face_get_table (face, HB_OT_TAG_GDEF));\n  layout->gdef = &Sanitizer<GDEF>::lock_instance (layout->gdef_blob);\n\n  layout->gsub_blob = Sanitizer<GSUB>::sanitize (hb_face_get_table (face, HB_OT_TAG_GSUB));\n  layout->gsub = &Sanitizer<GSUB>::lock_instance (layout->gsub_blob);\n\n  layout->gpos_blob = Sanitizer<GPOS>::sanitize (hb_face_get_table (face, HB_OT_TAG_GPOS));\n  layout->gpos = &Sanitizer<GPOS>::lock_instance (layout->gpos_blob);\n}",
        "output": "1",
        "idx": 2716
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DLLEXPORT unsigned long tjBufSize(int width, int height, int jpegSubsamp)\n{\n  unsigned long retval = 0;\n  int mcuw, mcuh, chromasf;\n\n  if (width < 1 || height < 1 || jpegSubsamp < 0 || jpegSubsamp >= NUMSUBOPT)\n    THROWG(\"tjBufSize(): Invalid argument\");\n\n  /* This allows for rare corner cases in which a JPEG image can actually be\n     larger than the uncompressed input (we wouldn't mention it if it hadn't\n     happened before.) */\n  mcuw = tjMCUWidth[jpegSubsamp];\n  mcuh = tjMCUHeight[jpegSubsamp];\n  chromasf = jpegSubsamp == TJSAMP_GRAY ? 0 : 4 * 64 / (mcuw * mcuh);\n  retval = PAD(width, mcuw) * PAD(height, mcuh) * (2 + chromasf) + 2048;\n\nbailout:\n  return retval;\n}",
        "output": "1",
        "idx": 3424
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void imc_get_coeffs(AVCodecContext *avctx,\n\n                           IMCContext *q, IMCChannel *chctx)\n\n{\n\n    int i, j, cw_len, cw;\n\n\n\n    for (i = 0; i < BANDS; i++) {\n\n        if (!chctx->sumLenArr[i])\n\n            continue;\n\n        if (chctx->bandFlagsBuf[i] || chctx->bandWidthT[i]) {\n\n            for (j = band_tab[i]; j < band_tab[i + 1]; j++) {\n\n                cw_len = chctx->CWlengthT[j];\n\n                cw = 0;\n\n\n\n                if (cw_len && (!chctx->bandFlagsBuf[i] || !chctx->skipFlags[j])) {\n\n                    if (get_bits_count(&q->gb) + cw_len > 512) {\n\n                        av_log(avctx, AV_LOG_WARNING,\n\n                            \"Potential problem on band %i, coefficient %i\"\n\n                            \": cw_len=%i\\n\", i, j, cw_len);\n\n                    }\n\n\n\n                    cw = get_bits(&q->gb, cw_len);\n\n                }\n\n\n\n                chctx->codewords[j] = cw;\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2640
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "flatpak_proxy_client_init (FlatpakProxyClient *client)\n{\n  init_side (client, &client->client_side);\n  init_side (client, &client->bus_side);\n\n  client->auth_end_offset = AUTH_END_INIT_OFFSET;\n  client->rewrite_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_object_unref);\n  client->get_owner_reply = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_free);\n  client->unique_id_policy = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);\n}",
        "output": "1",
        "idx": 4257
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t last_change_ms_show(struct device *dev,\n\t\t\t\t   struct device_attribute *attr, char *buf)\n{\n\tstruct wakeup_source *ws = dev_get_drvdata(dev);\n\n\treturn sprintf(buf, \"%lld\\n\", ktime_to_ms(ws->last_time));\n}",
        "output": "1",
        "idx": 1255
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pm_update_sci(PIIX4PMState *s)\n\n{\n\n    int sci_level, pmsts;\n\n    int64_t expire_time;\n\n\n\n    pmsts = get_pmsts(s);\n\n    sci_level = (((pmsts & s->pmen) &\n\n                  (RTC_EN | PWRBTN_EN | GBL_EN | TMROF_EN)) != 0);\n\n    qemu_set_irq(s->irq, sci_level);\n\n    /* schedule a timer interruption if needed */\n\n    if ((s->pmen & TMROF_EN) && !(pmsts & TMROF_EN)) {\n\n        expire_time = muldiv64(s->tmr_overflow_time, ticks_per_sec, PM_FREQ);\n\n        qemu_mod_timer(s->tmr_timer, expire_time);\n\n        s->tmr_overflow_time += 0x800000;\n\n    } else {\n\n        qemu_del_timer(s->tmr_timer);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1493
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_METHOD(Phar, offsetExists)\n{\n\tchar *fname;\n\tsize_t fname_len;\n\tphar_entry_info *entry;\n\n\tPHAR_ARCHIVE_OBJECT();\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"s\", &fname, &fname_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (zend_hash_str_exists(&phar_obj->archive->manifest, fname, (uint) fname_len)) {\n\t\tif (NULL != (entry = zend_hash_str_find_ptr(&phar_obj->archive->manifest, fname, (uint) fname_len))) {\n\t\t\tif (entry->is_deleted) {\n\t\t\t\t/* entry is deleted, but has not been flushed to disk yet */\n\t\t\t\tRETURN_FALSE;\n\t\t\t}\n\t\t}\n\n\t\tif (fname_len >= sizeof(\".phar\")-1 && !memcmp(fname, \".phar\", sizeof(\".phar\")-1)) {\n\t\t\t/* none of these are real files, so they don't exist */\n\t\t\tRETURN_FALSE;\n\t\t}\n\t\tRETURN_TRUE;\n\t} else {\n\t\tif (zend_hash_str_exists(&phar_obj->archive->virtual_dirs, fname, (uint) fname_len)) {\n\t\t\tRETURN_TRUE;\n\t\t}\n\t\tRETURN_FALSE;\n\t}\n}",
        "output": "1",
        "idx": 4112
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vt_disallocate(unsigned int vc_num)\n{\n\tstruct vc_data *vc = NULL;\n\tint ret = 0;\n\n\tconsole_lock();\n\tif (vt_busy(vc_num))\n\t\tret = -EBUSY;\n\telse if (vc_num)\n\t\tvc = vc_deallocate(vc_num);\n\tconsole_unlock();\n\n\tif (vc && vc_num >= MIN_NR_CONSOLES) {\n\t\ttty_port_destroy(&vc->port);\n\t\tkfree(vc);\n\t}\n\n\treturn ret;\n}",
        "output": "1",
        "idx": 1927
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nstatic void io_sq_thread_parkme(struct io_sq_data *sqd)\n{\n\tfor (;;) {\n\t\t/*\n\t\t * TASK_PARKED is a special state; we must serialize against\n\t\t * possible pending wakeups to avoid store-store collisions on\n\t\t * task->state.\n\t\t *\n\t\t * Such a collision might possibly result in the task state\n\t\t * changin from TASK_PARKED and us failing the\n\t\t * wait_task_inactive() in kthread_park().\n\t\t */\n\t\tset_special_state(TASK_PARKED);\n\t\tif (!test_bit(IO_SQ_THREAD_SHOULD_PARK, &sqd->state))\n\t\t\tbreak;\n\n\t\t/*\n\t\t * Thread is going to call schedule(), do not preempt it,\n\t\t * or the caller of kthread_park() may spend more time in\n\t\t * wait_task_inactive().\n\t\t */\n\t\tpreempt_disable();\n\t\tcomplete(&sqd->completion);\n\t\tschedule_preempt_disabled();\n\t\tpreempt_enable();\n\t}\n\t__set_current_state(TASK_RUNNING);",
        "output": "0",
        "idx": 1952
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static apr_status_t unschedule_slow_tasks(h2_mplx *m) \n{\n    h2_stream *stream;\n    int n;\n    \n    /* Try to get rid of streams that occupy workers. Look for safe requests\n     * that are repeatable. If none found, fail the connection.\n     */\n    n = (m->tasks_active - m->limit_active - (int)h2_ihash_count(m->sredo));\n    while (n > 0 && (stream = get_latest_repeatable_unsubmitted_stream(m))) {\n        h2_task_rst(stream->task, H2_ERR_CANCEL);\n        h2_ihash_add(m->sredo, stream);\n        --n;\n    }\n    \n    if ((m->tasks_active - h2_ihash_count(m->sredo)) > m->limit_active) {\n        stream = get_timed_out_busy_stream(m);\n        if (stream) {\n            /* Too many busy workers, unable to cancel enough streams\n             * and with a busy, timed out stream, we tell the client\n             * to go away... */\n            return APR_TIMEUP;\n        }\n    }\n    return APR_SUCCESS;\n}",
        "output": "1",
        "idx": 687
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool cmd_read_pio(IDEState *s, uint8_t cmd)\n\n{\n\n    bool lba48 = (cmd == WIN_READ_EXT);\n\n\n\n    if (s->drive_kind == IDE_CD) {\n\n        ide_set_signature(s); /* odd, but ATA4 8.27.5.2 requires it */\n\n        ide_abort_command(s);\n\n        return true;\n\n    }\n\n\n\n    if (!s->bs) {\n\n        ide_abort_command(s);\n\n        return true;\n\n    }\n\n\n\n    ide_cmd_lba48_transform(s, lba48);\n\n    s->req_nb_sectors = 1;\n\n    ide_sector_read(s);\n\n\n\n    return false;\n\n}\n",
        "output": "0",
        "idx": 3628
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_balloon_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    VirtioDeviceClass *vdc = VIRTIO_DEVICE_CLASS(klass);\n\n    dc->exit = virtio_balloon_device_exit;\n\n    dc->props = virtio_balloon_properties;\n\n    set_bit(DEVICE_CATEGORY_MISC, dc->categories);\n\n    vdc->init = virtio_balloon_device_init;\n\n    vdc->get_config = virtio_balloon_get_config;\n\n    vdc->set_config = virtio_balloon_set_config;\n\n    vdc->get_features = virtio_balloon_get_features;\n\n}\n",
        "output": "1",
        "idx": 6074
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int security_sem_alloc(struct sem_array *sma)\n{\n\treturn security_ops->sem_alloc_security(sma);\n}",
        "output": "0",
        "idx": 1238
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static coroutine_fn int qemu_gluster_co_flush_to_disk(BlockDriverState *bs)\n\n{\n\n    int ret;\n\n    GlusterAIOCB acb;\n\n    BDRVGlusterState *s = bs->opaque;\n\n\n\n    acb.size = 0;\n\n    acb.ret = 0;\n\n    acb.coroutine = qemu_coroutine_self();\n\n    acb.aio_context = bdrv_get_aio_context(bs);\n\n\n\n    ret = glfs_fsync_async(s->fd, gluster_finish_aiocb, &acb);\n\n    if (ret < 0) {\n\n        return -errno;\n\n    }\n\n\n\n    qemu_coroutine_yield();\n\n    return acb.ret;\n\n}\n",
        "output": "1",
        "idx": 2851
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(OwnedImplTest, PrependBuffer) {\n  std::string suffix = \"World!\", prefix = \"Hello, \";\n  Buffer::OwnedImpl buffer;\n  buffer.add(suffix);\n  Buffer::OwnedImpl prefixBuffer;\n  prefixBuffer.add(prefix);\n\n  buffer.prepend(prefixBuffer);\n\n  EXPECT_EQ(suffix.size() + prefix.size(), buffer.length());\n  EXPECT_EQ(prefix + suffix, buffer.toString());\n  EXPECT_EQ(0, prefixBuffer.length());\n}",
        "output": "0",
        "idx": 4858
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\tif(pvals == NULL) {\n\t\tLogError(0, RS_RET_MISSING_CNFPARAMS,\n\t\t\t        \"imhttp: required parameter are missing\\n\");\n\t\tABORT_FINALIZE(RS_RET_MISSING_CNFPARAMS);\n\t}",
        "output": "0",
        "idx": 2154
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_abso(DisasContext *ctx)\n\n{\n\n    int l1 = gen_new_label();\n\n    int l2 = gen_new_label();\n\n    int l3 = gen_new_label();\n\n    /* Start with XER OV disabled, the most likely case */\n\n    tcg_gen_movi_tl(cpu_ov, 0);\n\n    tcg_gen_brcondi_tl(TCG_COND_GE, cpu_gpr[rA(ctx->opcode)], 0, l2);\n\n    tcg_gen_brcondi_tl(TCG_COND_NE, cpu_gpr[rA(ctx->opcode)], 0x80000000, l1);\n\n    tcg_gen_movi_tl(cpu_ov, 1);\n\n    tcg_gen_movi_tl(cpu_so, 1);\n\n    tcg_gen_br(l2);\n\n    gen_set_label(l1);\n\n    tcg_gen_neg_tl(cpu_gpr[rD(ctx->opcode)], cpu_gpr[rA(ctx->opcode)]);\n\n    tcg_gen_br(l3);\n\n    gen_set_label(l2);\n\n    tcg_gen_mov_tl(cpu_gpr[rD(ctx->opcode)], cpu_gpr[rA(ctx->opcode)]);\n\n    gen_set_label(l3);\n\n    if (unlikely(Rc(ctx->opcode) != 0))\n\n        gen_set_Rc0(ctx, cpu_gpr[rD(ctx->opcode)]);\n\n}\n",
        "output": "0",
        "idx": 3218
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QEMUTimerList *qemu_clock_get_main_loop_timerlist(QEMUClockType type)\n\n{\n\n    return main_loop_tlg.tl[type];\n\n}\n",
        "output": "0",
        "idx": 4707
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "FileSpec::FileSpec(const Object *fileSpecA)\n{\n  ok = true;\n  fileName = nullptr;\n  platformFileName = nullptr;\n  embFile = nullptr;\n  desc = nullptr;\n  fileSpec = fileSpecA->copy();\n\n  Object obj1 = getFileSpecName(fileSpecA);\n  if (!obj1.isString()) {\n    ok = false;\n    error(errSyntaxError, -1, \"Invalid FileSpec\");\n    return;\n  }\n\n  fileName = obj1.getString()->copy();\n\n  if (fileSpec.isDict()) {\n    obj1 = fileSpec.dictLookup(\"EF\");\n    if (obj1.isDict()) {\n      fileStream = obj1.dictLookupNF(\"F\");\n      if (!fileStream.isRef()) {\n        ok = false;\n        fileStream.setToNull();\n        error(errSyntaxError, -1, \"Invalid FileSpec: Embedded file stream is not an indirect reference\");\n        return;\n      }\n    }\n  }\n\n  obj1 = fileSpec.dictLookup(\"Desc\");\n  if (obj1.isString())\n    desc = obj1.getString()->copy();\n}",
        "output": "1",
        "idx": 5158
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int rndis_keepalive_response(struct rndis_params *params,\n\t\t\t\t    rndis_keepalive_msg_type *buf)\n{\n\trndis_keepalive_cmplt_type *resp;\n\trndis_resp_t *r;\n\n\t/* host \"should\" check only in RNDIS_DATA_INITIALIZED state */\n\n\tr = rndis_add_response(params, sizeof(rndis_keepalive_cmplt_type));\n\tif (!r)\n\t\treturn -ENOMEM;\n\tresp = (rndis_keepalive_cmplt_type *)r->buf;\n\n\tresp->MessageType = cpu_to_le32(RNDIS_MSG_KEEPALIVE_C);\n\tresp->MessageLength = cpu_to_le32(16);\n\tresp->RequestID = buf->RequestID; /* Still LE in msg buffer */\n\tresp->Status = cpu_to_le32(RNDIS_STATUS_SUCCESS);\n\n\tparams->resp_avail(params->v);\n\treturn 0;\n}",
        "output": "0",
        "idx": 1603
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int common_init(AVCodecContext *avctx){\n\n    FFV1Context *s = avctx->priv_data;\n\n\n\n    s->avctx= avctx;\n\n    s->flags= avctx->flags;\n\n\n\n    avcodec_get_frame_defaults(&s->picture);\n\n\n\n    ff_dsputil_init(&s->dsp, avctx);\n\n\n\n    s->width = avctx->width;\n\n    s->height= avctx->height;\n\n\n\n    assert(s->width && s->height);\n\n    //defaults\n\n    s->num_h_slices=1;\n\n    s->num_v_slices=1;\n\n\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3283
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "have_createrole_privilege(void)\n{\n\treturn has_createrole_privilege(GetUserId());\n}",
        "output": "0",
        "idx": 1864
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ssh_scp_accept_request(ssh_scp scp){\n  char buffer[]={0x00};\n  int err;\n  if(scp==NULL)\n      return SSH_ERROR;\n  if(scp->state != SSH_SCP_READ_REQUESTED){\n    ssh_set_error(scp->session,SSH_FATAL,\"ssh_scp_deny_request called under invalid state\");\n    return SSH_ERROR;\n  }\n  err=ssh_channel_write(scp->channel,buffer,1);\n  if(err==SSH_ERROR) {\n    return SSH_ERROR;\n  }\n  if(scp->request_type==SSH_SCP_REQUEST_NEWFILE)\n    scp->state=SSH_SCP_READ_READING;\n  else\n    scp->state=SSH_SCP_READ_INITED;\n  return SSH_OK;\n}",
        "output": "1",
        "idx": 5480
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "iscsi_synccache10_cb(struct iscsi_context *iscsi, int status,\n\n                     void *command_data, void *opaque)\n\n{\n\n    IscsiAIOCB *acb = opaque;\n\n\n\n    if (acb->canceled != 0) {\n\n        return;\n\n    }\n\n\n\n    acb->status = 0;\n\n    if (status != 0) {\n\n        if (status == SCSI_STATUS_CHECK_CONDITION\n\n            && acb->task->sense.key == SCSI_SENSE_UNIT_ATTENTION\n\n            && acb->retries-- > 0) {\n\n            if (acb->task != NULL) {\n\n                scsi_free_scsi_task(acb->task);\n\n                acb->task = NULL;\n\n            }\n\n            if (iscsi_aio_flush_acb(acb) == 0) {\n\n                iscsi_set_events(acb->iscsilun);\n\n                return;\n\n            }\n\n        }\n\n        error_report(\"Failed to sync10 data on iSCSI lun. %s\",\n\n                     iscsi_get_error(iscsi));\n\n        acb->status = -EIO;\n\n    }\n\n\n\n    iscsi_schedule_bh(acb);\n\n}\n",
        "output": "0",
        "idx": 5830
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_P(SdsDynamicDownstreamIntegrationTest, WrongSecretFirst) {\n  on_server_init_function_ = [this]() {\n    createSdsStream(*(fake_upstreams_[1]));\n    sendSdsResponse(getWrongSecret(server_cert_));\n  };\n  initialize();\n\n  codec_client_ = makeRawHttpConnection(makeSslClientConnection());\n  // the connection state is not connected.\n  EXPECT_FALSE(codec_client_->connected());\n  codec_client_->connection()->close(Network::ConnectionCloseType::NoFlush);\n\n  sendSdsResponse(getServerSecret());\n\n  // Wait for ssl_context_updated_by_sds counter.\n  test_server_->waitForCounterGe(\n      listenerStatPrefix(\"server_ssl_socket_factory.ssl_context_update_by_sds\"), 1);\n\n  ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {\n    return makeSslClientConnection();\n  };\n  testRouterHeaderOnlyRequestAndResponse(&creator);\n}",
        "output": "1",
        "idx": 5967
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void migrate_fd_monitor_suspend(MigrationState *s, Monitor *mon)\n\n{\n\n    if (monitor_suspend(mon) == 0) {\n\n        DPRINTF(\"suspending monitor\\n\");\n\n    } else {\n\n        monitor_printf(mon, \"terminal does not allow synchronous \"\n\n                       \"migration, continuing detached\\n\");\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2693
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void RENAME(rgb24ToY)(uint8_t *dst, const uint8_t *src, long width, uint32_t *unused)\n\n{\n\n#if COMPILE_TEMPLATE_MMX\n\n    RENAME(bgr24ToY_mmx)(dst, src, width, PIX_FMT_RGB24);\n\n#else\n\n    int i;\n\n    for (i=0; i<width; i++) {\n\n        int r= src[i*3+0];\n\n        int g= src[i*3+1];\n\n        int b= src[i*3+2];\n\n\n\n        dst[i]= ((RY*r + GY*g + BY*b + (33<<(RGB2YUV_SHIFT-1)))>>RGB2YUV_SHIFT);\n\n    }\n\n#endif\n\n}\n",
        "output": "0",
        "idx": 4980
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void copy_to_user_state(struct xfrm_state *x, struct xfrm_usersa_info *p)\n{\n\tmemcpy(&p->id, &x->id, sizeof(p->id));\n\tmemcpy(&p->sel, &x->sel, sizeof(p->sel));\n\tmemcpy(&p->lft, &x->lft, sizeof(p->lft));\n\tmemcpy(&p->curlft, &x->curlft, sizeof(p->curlft));\n\tmemcpy(&p->stats, &x->stats, sizeof(p->stats));\n\tmemcpy(&p->saddr, &x->props.saddr, sizeof(p->saddr));\n\tp->mode = x->props.mode;\n\tp->replay_window = x->props.replay_window;\n\tp->reqid = x->props.reqid;\n\tp->family = x->props.family;\n\tp->flags = x->props.flags;\n\tp->seq = x->km.seq;\n}",
        "output": "1",
        "idx": 3123
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ahci_irq_raise(AHCIState *s, AHCIDevice *dev)\n\n{\n\n    AHCIPCIState *d = container_of(s, AHCIPCIState, ahci);\n\n    PCIDevice *pci_dev =\n\n        (PCIDevice *)object_dynamic_cast(OBJECT(d), TYPE_PCI_DEVICE);\n\n\n\n    DPRINTF(0, \"raise irq\\n\");\n\n\n\n    if (pci_dev && msi_enabled(pci_dev)) {\n\n        msi_notify(pci_dev, 0);\n\n    } else {\n\n        qemu_irq_raise(s->irq);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 3109
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MemoryRegionSection *phys_page_find(target_phys_addr_t index)\n\n{\n\n    PhysPageEntry lp = phys_map;\n\n    PhysPageEntry *p;\n\n    int i;\n\n    uint16_t s_index = phys_section_unassigned;\n\n\n\n    for (i = P_L2_LEVELS - 1; i >= 0 && !lp.is_leaf; i--) {\n\n        if (lp.ptr == PHYS_MAP_NODE_NIL) {\n\n            goto not_found;\n\n        }\n\n        p = phys_map_nodes[lp.ptr];\n\n        lp = p[(index >> (i * L2_BITS)) & (L2_SIZE - 1)];\n\n    }\n\n\n\n    s_index = lp.ptr;\n\nnot_found:\n\n    return &phys_sections[s_index];\n\n}\n",
        "output": "0",
        "idx": 5828
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nvme_set_bootindex(Object *obj, Visitor *v, void *opaque,\n\n                                  const char *name, Error **errp)\n\n{\n\n    NvmeCtrl *s = NVME(obj);\n\n    int32_t boot_index;\n\n    Error *local_err = NULL;\n\n\n\n    visit_type_int32(v, &boot_index, name, &local_err);\n\n    if (local_err) {\n\n        goto out;\n\n    }\n\n    /* check whether bootindex is present in fw_boot_order list  */\n\n    check_boot_index(boot_index, &local_err);\n\n    if (local_err) {\n\n        goto out;\n\n    }\n\n    /* change bootindex to a new one */\n\n    s->conf.bootindex = boot_index;\n\n\n\nout:\n\n    if (local_err) {\n\n        error_propagate(errp, local_err);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1202
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST(Url, ParsingForConnectTest) {\n  validateConnectUrl(\"host.com:443\", \"host.com:443\", 443);\n  validateConnectUrl(\"host.com:80\", \"host.com:80\", 80);\n}",
        "output": "1",
        "idx": 4598
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void rtnl_kfree_skbs(struct sk_buff *head, struct sk_buff *tail)\n{\n\tif (head && tail) {\n\t\ttail->next = defer_kfree_skb_list;\n\t\tdefer_kfree_skb_list = head;\n\t}\n}",
        "output": "0",
        "idx": 4455
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int sym_quant(int c, int e, int levels)\n\n{\n\n    int v = ((((levels * c) >> (24 - e)) + 1) >> 1) + (levels >> 1);\n\n    av_assert2(v >= 0 && v < levels);\n\n    return v;\n\n}\n",
        "output": "1",
        "idx": 221
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int m101_decode_init(AVCodecContext *avctx)\n\n{\n\n    if (avctx->extradata_size < 6*4)\n\n        return AVERROR_INVALIDDATA;\n\n\n\n    if (avctx->extradata[2*4] == 10)\n\n        avctx->pix_fmt = AV_PIX_FMT_YUV422P10;\n\n    else\n\n        avctx->pix_fmt = AV_PIX_FMT_YUYV422;\n\n\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2193
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}",
        "output": "0",
        "idx": 4581
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void clamp_mv(VP8Context *s, VP56mv *dst, const VP56mv *src)\n\n{\n\n    dst->x = av_clip(src->x, s->mv_min.x, s->mv_max.x);\n\n    dst->y = av_clip(src->y, s->mv_min.y, s->mv_max.y);\n\n}\n",
        "output": "1",
        "idx": 5631
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_vp3_v_loop_filter_c(uint8_t *first_pixel, int stride, int *bounding_values)\n\n{\n\n    unsigned char *end;\n\n    int filter_value;\n\n    const int nstride= -stride;\n\n\n\n    for (end= first_pixel + 8; first_pixel < end; first_pixel++) {\n\n        filter_value =\n\n            (first_pixel[2 * nstride] - first_pixel[ stride])\n\n         +3*(first_pixel[0          ] - first_pixel[nstride]);\n\n        filter_value = bounding_values[(filter_value + 4) >> 3];\n\n        first_pixel[nstride] = av_clip_uint8(first_pixel[nstride] + filter_value);\n\n        first_pixel[0] = av_clip_uint8(first_pixel[0] - filter_value);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4791
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pdf_t *pdf_new(const char *name)\n{\n    const char *n;\n    pdf_t      *pdf;\n   \n    pdf = calloc(1, sizeof(pdf_t));\n\n    if (name)\n    {\n        /* Just get the file name (not path) */\n        if ((n = strrchr(name, '/')))\n          ++n;\n        else\n          n = name;\n\n        pdf->name = malloc(strlen(n) + 1);\n        strcpy(pdf->name, n);\n    }\n    else /* !name */\n    {\n        pdf->name = malloc(strlen(\"Unknown\") + 1);\n        strcpy(pdf->name, \"Unknown\");\n    }\n\n    return pdf;\n}",
        "output": "1",
        "idx": 2232
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QPDF::writeHGeneric(BitWriter& w, HGeneric& t)\n{\n    w.writeBits(t.first_object, 32);\t\t\t    // 1\n    w.writeBits(t.first_object_offset, 32);\t\t    // 2\n    w.writeBits(t.nobjects, 32);\t\t\t    // 3\n    w.writeBits(t.group_length, 32);\t\t\t    // 4\n}",
        "output": "1",
        "idx": 5990
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_check(BlockDriverState *bs, BdrvCheckResult *res, BdrvCheckMode fix)\n\n{\n\n\n\n\n    if (bs->drv->bdrv_check == NULL) {\n\n        return -ENOTSUP;\n\n\n\n\n    memset(res, 0, sizeof(*res));\n\n    return bs->drv->bdrv_check(bs, res, fix);\n",
        "output": "1",
        "idx": 3861
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool check_client_passwd(PgSocket *client, const char *passwd)\n{\n\tchar md5[MD5_PASSWD_LEN + 1];\n\tconst char *correct;\n\tPgUser *user = client->auth_user;\n\n\t/* disallow empty passwords */\n\tif (!*passwd || !*user->passwd)\n\t\treturn false;\n\n\tswitch (cf_auth_type) {\n\tcase AUTH_PLAIN:\n\t\treturn strcmp(user->passwd, passwd) == 0;\n\tcase AUTH_CRYPT:\n\t\tcorrect = crypt(user->passwd, (char *)client->tmp_login_salt);\n\t\treturn correct && strcmp(correct, passwd) == 0;\n\tcase AUTH_MD5:\n\t\tif (strlen(passwd) != MD5_PASSWD_LEN)\n\t\t\treturn false;\n\t\tif (!isMD5(user->passwd))\n\t\t\tpg_md5_encrypt(user->passwd, user->name, strlen(user->name), user->passwd);\n\t\tpg_md5_encrypt(user->passwd + 3, (char *)client->tmp_login_salt, 4, md5);\n\t\treturn strcmp(md5, passwd) == 0;\n\t}\n\treturn false;\n}",
        "output": "1",
        "idx": 5433
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "sort_page_names (gconstpointer a,\n                 gconstpointer b)\n{\n\tconst char *name_1, *name_2;\n\tgchar *key_1, *key_2;\n\tgboolean sort_last_1, sort_last_2;\n\tint compare;\n\n\tname_1 = * (const char **) a;\n\tname_2 = * (const char **) b;\n\n\t#define SORT_LAST_CHAR1 '.'\n\t#define SORT_LAST_CHAR2 '#'\n\n\tsort_last_1 = name_1[0] == SORT_LAST_CHAR1 || name_1[0] == SORT_LAST_CHAR2;\n\tsort_last_2 = name_2[0] == SORT_LAST_CHAR1 || name_2[0] == SORT_LAST_CHAR2;\n\n\t#undef SORT_LAST_CHAR1\n\t#undef SORT_LAST_CHAR2\n\n\tif (sort_last_1 && !sort_last_2)\n\t{\n\t\tcompare = +1;\n\t}\n\telse if (!sort_last_1 && sort_last_2)\n\t{\n\t\tcompare = -1;\n\t} \n\telse\n\t{\n\t\tkey_1 = g_utf8_collate_key_for_filename (name_1, -1);\n\t\tkey_2 = g_utf8_collate_key_for_filename (name_2, -1);\n\n\t\tcompare = strcmp (key_1, key_2);\n\n\t\tg_free (key_1);\n\t\tg_free (key_2);\n\t}\n\n\treturn compare;\n}",
        "output": "0",
        "idx": 3445
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void snmp6_free_dev(struct inet6_dev *idev)\n{\n\tkfree(idev->stats.icmpv6msgdev);\n\tkfree(idev->stats.icmpv6dev);\n\tfree_percpu(idev->stats.ipv6);\n}",
        "output": "0",
        "idx": 2786
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PJ_DEF(void) pjmedia_rtcp_rx_rtcp( pjmedia_rtcp_session *sess,\n\t\t\t\t   const void *pkt,\n\t\t\t\t   pj_size_t size)\n{\n    pj_uint8_t *p, *p_end;\n\n    p = (pj_uint8_t*)pkt;\n    p_end = p + size;\n    while (p < p_end) {\n\tpjmedia_rtcp_common *common = (pjmedia_rtcp_common*)p;\n\tunsigned len;\n\n\tlen = (pj_ntohs((pj_uint16_t)common->length)+1) * 4;\n\tif (p + len > p_end)\n\t    break;\n\n\tswitch(common->pt) {\n\tcase RTCP_SR:\n\tcase RTCP_RR:\n\tcase RTCP_XR:\n\t    parse_rtcp_report(sess, p, len);\n\t    break;\n\tcase RTCP_SDES:\n\t    parse_rtcp_sdes(sess, p, len);\n\t    break;\n\tcase RTCP_BYE:\n\t    parse_rtcp_bye(sess, p, len);\n\t    break;\n\tcase RTCP_RTPFB:\n\tcase RTCP_PSFB:\n\t    parse_rtcp_fb(sess, p, len);\n\t    break;\n\tdefault:\n\t    /* Ignore unknown RTCP */\n\t    TRACE_((sess->name, \"Received unknown RTCP packet type=%d\",\n\t\t    common->pt));\n\t    break;\n\t}\n\n\tp += len;\n    }\n}",
        "output": "1",
        "idx": 689
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void aarch64_cpu_class_init(ObjectClass *oc, void *data)\n\n{\n\n    CPUClass *cc = CPU_CLASS(oc);\n\n\n\n\n    cc->dump_state = aarch64_cpu_dump_state;\n\n    cc->set_pc = aarch64_cpu_set_pc;\n\n    cc->gdb_read_register = aarch64_cpu_gdb_read_register;\n\n    cc->gdb_write_register = aarch64_cpu_gdb_write_register;\n\n    cc->gdb_num_core_regs = 34;\n\n    cc->gdb_core_xml_file = \"aarch64-core.xml\";\n\n}",
        "output": "1",
        "idx": 740
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool pc_machine_get_aligned_dimm(Object *obj, Error **errp)\n\n{\n\n    PCMachineState *pcms = PC_MACHINE(obj);\n\n\n\n    return pcms->enforce_aligned_dimm;\n\n}\n",
        "output": "0",
        "idx": 3376
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Visitor *qapi_dealloc_get_visitor(QapiDeallocVisitor *v)\n\n{\n\n    return &v->visitor;\n\n}\n",
        "output": "0",
        "idx": 963
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nvdec_h264_decode_init(AVCodecContext *avctx)\n\n{\n\n    const H264Context *h = avctx->priv_data;\n\n    const SPS       *sps = h->ps.sps;\n\n    return ff_nvdec_decode_init(avctx, sps->ref_frame_count + sps->num_reorder_frames);\n\n}\n",
        "output": "0",
        "idx": 1358
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rend_service_free(rend_service_t *service)\n{\n  if (!service)\n    return;\n\n  tor_free(service->directory);\n  if (service->ports) {\n    SMARTLIST_FOREACH(service->ports, rend_service_port_config_t*, p,\n                      rend_service_port_config_free(p));\n    smartlist_free(service->ports);\n  }\n  if (service->private_key)\n    crypto_pk_free(service->private_key);\n  if (service->intro_nodes) {\n    SMARTLIST_FOREACH(service->intro_nodes, rend_intro_point_t *, intro,\n      rend_intro_point_free(intro););\n    smartlist_free(service->intro_nodes);\n  }\n  if (service->expiring_nodes) {\n    SMARTLIST_FOREACH(service->expiring_nodes, rend_intro_point_t *, intro,\n                      rend_intro_point_free(intro););\n    smartlist_free(service->expiring_nodes);\n  }\n\n  rend_service_descriptor_free(service->desc);\n  if (service->clients) {\n    SMARTLIST_FOREACH(service->clients, rend_authorized_client_t *, c,\n      rend_authorized_client_free(c););\n    smartlist_free(service->clients);\n  }\n  if (service->accepted_intro_dh_parts) {\n    replaycache_free(service->accepted_intro_dh_parts);\n  }\n  tor_free(service);\n}",
        "output": "0",
        "idx": 4853
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_keep_msg_from_hist(void)\n{\n    if (keep_msg == NULL && last_msg_hist != NULL && msg_scrolled == 0\n\t\t\t\t\t\t      && (State & MODE_NORMAL))\n\tset_keep_msg(last_msg_hist->msg, last_msg_hist->attr);\n}",
        "output": "0",
        "idx": 5392
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_filesystem_type (const char *path)\n{\n        GFile      *file;\n        GFileInfo  *file_info;\n        GError     *error;\n        char       *filesystem_type;\n\n        file = g_file_new_for_path (path);\n        error = NULL;\n        file_info = g_file_query_filesystem_info (file,\n                                                  G_FILE_ATTRIBUTE_FILESYSTEM_TYPE,\n                                                  NULL,\n                                                  &error);\n        if (file_info == NULL) {\n                g_warning (\"Unable to query filesystem type for %s: %s\", path, error->message);\n                g_error_free (error);\n                g_object_unref (file);\n                return NULL;\n        }\n\n        filesystem_type = g_strdup (g_file_info_get_attribute_string (file_info,\n                                                                      G_FILE_ATTRIBUTE_FILESYSTEM_TYPE));\n        if (filesystem_type == NULL) {\n                g_warning (\"GIO returned NULL filesystem type for %s\", path);\n        }\n\n        g_object_unref (file);\n        g_object_unref (file_info);\n\n        return filesystem_type;\n}",
        "output": "0",
        "idx": 4338
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cirrus_bitblt_rop_nop(CirrusVGAState *s,\n\n                                  uint8_t *dst,const uint8_t *src,\n\n                                  int dstpitch,int srcpitch,\n\n                                  int bltwidth,int bltheight)\n\n{\n\n}\n",
        "output": "0",
        "idx": 5886
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void gen_add_data_offset(DisasContext *s, unsigned int insn,\n\n                                       TCGv var)\n\n{\n\n    int val, rm, shift, shiftop;\n\n    TCGv offset;\n\n\n\n    if (!(insn & (1 << 25))) {\n\n        /* immediate */\n\n        val = insn & 0xfff;\n\n        if (!(insn & (1 << 23)))\n\n            val = -val;\n\n        if (val != 0)\n\n            tcg_gen_addi_i32(var, var, val);\n\n    } else {\n\n        /* shift/register */\n\n        rm = (insn) & 0xf;\n\n        shift = (insn >> 7) & 0x1f;\n\n        shiftop = (insn >> 5) & 3;\n\n        offset = load_reg(s, rm);\n\n        gen_arm_shift_im(offset, shiftop, shift, 0);\n\n        if (!(insn & (1 << 23)))\n\n            tcg_gen_sub_i32(var, var, offset);\n\n        else\n\n            tcg_gen_add_i32(var, var, offset);\n\n        dead_tmp(offset);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5062
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vmgenid_realize(DeviceState *dev, Error **errp)\n\n{\n\n    VmGenIdState *vms = VMGENID(dev);\n\n\n\n    if (!vms->write_pointer_available) {\n\n        error_setg(errp, \"%s requires DMA write support in fw_cfg, \"\n\n                   \"which this machine type does not provide\", VMGENID_DEVICE);\n\n        return;\n\n    }\n\n\n\n    /* Given that this function is executing, there is at least one VMGENID\n\n     * device. Check if there are several.\n\n     */\n\n    if (!find_vmgenid_dev()) {\n\n        error_setg(errp, \"at most one %s device is permitted\", VMGENID_DEVICE);\n\n        return;\n\n    }\n\n\n\n    qemu_register_reset(vmgenid_handle_reset, vms);\n\n}\n",
        "output": "1",
        "idx": 6096
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "print_buffer(Pl_Buffer* bp)\n{\n    bp->finish();\n    Buffer* b = bp->getBuffer();\n    unsigned char const* p = b->getBuffer();\n    size_t l = b->getSize();\n    for (unsigned long i = 0; i < l; ++i)\n    {\n\tprintf(\"%02x%s\", static_cast<unsigned int>(p[i]),\n\t       (i == l - 1) ? \"\\n\" : \" \");\n    }\n    printf(\"\\n\");\n    delete b;\n}",
        "output": "1",
        "idx": 4166
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int jas_iccprof_gettagtab(jas_stream_t *in, jas_icctagtab_t *tagtab)\n{\n\tint i;\n\tjas_icctagtabent_t *tagtabent;\n\n\tif (tagtab->ents) {\n\t\tjas_free(tagtab->ents);\n\t\ttagtab->ents = 0;\n\t}\n\tif (jas_iccgetuint32(in, &tagtab->numents))\n\t\tgoto error;\n\tif (!(tagtab->ents = jas_malloc(tagtab->numents *\n\t  sizeof(jas_icctagtabent_t))))\n\t\tgoto error;\n\ttagtabent = tagtab->ents;\n\tfor (i = 0; i < JAS_CAST(long, tagtab->numents); ++i) {\n\t\tif (jas_iccgetuint32(in, &tagtabent->tag) ||\n\t\tjas_iccgetuint32(in, &tagtabent->off) ||\n\t\tjas_iccgetuint32(in, &tagtabent->len))\n\t\t\tgoto error;\n\t\t++tagtabent;\n\t}\n\treturn 0;\nerror:\n\tif (tagtab->ents) {\n\t\tjas_free(tagtab->ents);\n\t\ttagtab->ents = 0;\n\t}\n\treturn -1;\n}",
        "output": "1",
        "idx": 3673
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Item_param::set_value(THD *thd, sp_rcontext *ctx, Item **it)\n{\n  Item *arg= *it;\n  struct st_value tmp;\n  /*\n    The OUT parameter is bound to some data type.\n    It's important not to touch m_type_handler,\n    to make sure the next mysql_stmt_execute()\n    correctly fetches the value from the client-server protocol,\n    using set_param_func().\n  */\n  if (arg->save_in_value(&tmp) ||\n      set_value(thd, arg, &tmp, arg->type_handler()))\n  {\n    set_null();\n    return false;\n  }\n  /* It is wrapper => other set_* shoud set null_value */\n  DBUG_ASSERT(null_value == false);\n  return false;\n}",
        "output": "0",
        "idx": 2479
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "decode_NXAST_RAW_OUTPUT_REG2(const struct nx_action_output_reg2 *naor,\n                             enum ofp_version ofp_version OVS_UNUSED,\n                             const struct vl_mff_map *vl_mff_map,\n                             uint64_t *tlv_bitmap, struct ofpbuf *out)\n{\n    struct ofpact_output_reg *output_reg;\n    enum ofperr error;\n\n    output_reg = ofpact_put_OUTPUT_REG(out);\n    output_reg->ofpact.raw = NXAST_RAW_OUTPUT_REG2;\n    output_reg->src.ofs = nxm_decode_ofs(naor->ofs_nbits);\n    output_reg->src.n_bits = nxm_decode_n_bits(naor->ofs_nbits);\n    output_reg->max_len = ntohs(naor->max_len);\n\n    struct ofpbuf b = ofpbuf_const_initializer(naor, ntohs(naor->len));\n    ofpbuf_pull(&b, OBJECT_OFFSETOF(naor, pad));\n\n    error = mf_vl_mff_nx_pull_header(&b, vl_mff_map, &output_reg->src.field,\n                                     NULL, tlv_bitmap);\n    if (error) {\n        return error;\n    }\n\n    if (!is_all_zeros(b.data, b.size)) {\n        return OFPERR_NXBRC_MUST_BE_ZERO;\n    }\n\n    return mf_check_src(&output_reg->src, NULL);\n}",
        "output": "0",
        "idx": 1143
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    template<typename t>\n    CImg<_cimg_Tt> get_mul(const CImg<t>& img) const {\n      return CImg<_cimg_Tt>(*this,false).mul(img);",
        "output": "0",
        "idx": 2795
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_slbmfee(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_REG);\n\n#else\n\n    if (unlikely(ctx->pr)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_REG);\n\n        return;\n\n    }\n\n    gen_helper_load_slb_esid(cpu_gpr[rS(ctx->opcode)], cpu_env,\n\n                             cpu_gpr[rB(ctx->opcode)]);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 6097
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "decrypt(gcry_mpi_t output, gcry_mpi_t a, gcry_mpi_t b, ELG_secret_key *skey )\n{\n  gcry_mpi_t t1 = mpi_alloc_secure( mpi_get_nlimbs( skey->p ) );\n\n  /* output = b/(a^x) mod p */\n  gcry_mpi_powm( t1, a, skey->x, skey->p );\n  mpi_invm( t1, t1, skey->p );\n  mpi_mulm( output, b, t1, skey->p );\n#if 0\n  if( DBG_CIPHER )\n    {\n      log_mpidump(\"elg decrypted x= \", skey->x);\n      log_mpidump(\"elg decrypted p= \", skey->p);\n      log_mpidump(\"elg decrypted a= \", a);\n      log_mpidump(\"elg decrypted b= \", b);\n      log_mpidump(\"elg decrypted M= \", output);\n    }\n#endif\n  mpi_free(t1);\n}",
        "output": "1",
        "idx": 4342
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHPAPI char *php_lookup_class_name(zval *object, zend_uint *nlen)\n{\n\tzval **val;\n\tchar *retval = NULL;\n\tHashTable *object_properties;\n\tTSRMLS_FETCH();\n\n\tobject_properties = Z_OBJPROP_P(object);\n\n\tif (zend_hash_find(object_properties, MAGIC_MEMBER, sizeof(MAGIC_MEMBER), (void **) &val) == SUCCESS) {\n\t\tretval = estrndup(Z_STRVAL_PP(val), Z_STRLEN_PP(val));\n\n\t\tif (nlen) {\n\t\t\t*nlen = Z_STRLEN_PP(val);\n\t\t}\n\t}\n\n\treturn retval;\n}",
        "output": "1",
        "idx": 4773
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    void ms_handle_fast_accept(Connection *con) override {}",
        "output": "0",
        "idx": 4401
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HEnvironment::AddIncomingEdge(HBasicBlock* block, HEnvironment* other) {\n  ASSERT(!block->IsLoopHeader());\n  ASSERT(values_.length() == other->values_.length());\n\n  int length = values_.length();\n  for (int i = 0; i < length; ++i) {\n    HValue* value = values_[i];\n    if (value != NULL && value->IsPhi() && value->block() == block) {\n      // There is already a phi for the i'th value.\n      HPhi* phi = HPhi::cast(value);\n      // Assert index is correct and that we haven't missed an incoming edge.\n      ASSERT(phi->merged_index() == i);\n      ASSERT(phi->OperandCount() == block->predecessors()->length());\n      phi->AddInput(other->values_[i]);\n    } else if (values_[i] != other->values_[i]) {\n      // There is a fresh value on the incoming edge, a phi is needed.\n      ASSERT(values_[i] != NULL && other->values_[i] != NULL);\n      HPhi* phi = new(zone()) HPhi(i, zone());\n      HValue* old_value = values_[i];\n      for (int j = 0; j < block->predecessors()->length(); j++) {\n        phi->AddInput(old_value);\n      }\n      phi->AddInput(other->values_[i]);\n      this->values_[i] = phi;\n      block->AddPhi(phi);\n    }\n  }\n}",
        "output": "0",
        "idx": 2169
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void commit_tree(struct mount *mnt, struct mount *shadows)\n{\n\tstruct mount *parent = mnt->mnt_parent;\n\tstruct mount *m;\n\tLIST_HEAD(head);\n\tstruct mnt_namespace *n = parent->mnt_ns;\n\n\tBUG_ON(parent == mnt);\n\n\tlist_add_tail(&head, &mnt->mnt_list);\n\tlist_for_each_entry(m, &head, mnt_list)\n\t\tm->mnt_ns = n;\n\n\tlist_splice(&head, n->list.prev);\n\n\tattach_shadowed(mnt, parent, shadows);\n\ttouch_mnt_namespace(n);\n}",
        "output": "1",
        "idx": 976
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mxf_read_material_package(void *arg, AVIOContext *pb, int tag, int size, UID uid)\n\n{\n\n    MXFPackage *package = arg;\n\n    switch(tag) {\n\n    case 0x4403:\n\n        package->tracks_count = avio_rb32(pb);\n\n        if (package->tracks_count >= UINT_MAX / sizeof(UID))\n\n            return -1;\n\n        package->tracks_refs = av_malloc(package->tracks_count * sizeof(UID));\n\n        if (!package->tracks_refs)\n\n            return -1;\n\n        avio_skip(pb, 4); /* useless size of objects, always 16 according to specs */\n\n        avio_read(pb, (uint8_t *)package->tracks_refs, package->tracks_count * sizeof(UID));\n\n        break;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4304
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SAPI_API void sapi_startup(sapi_module_struct *sf)\n{\n#ifdef ZEND_SIGNALS\n\tzend_signal_startup();\n#endif\n\n\tsf->ini_entries = NULL;\n\tsapi_module = *sf;\n\n#ifdef ZTS\n\tts_allocate_id(&sapi_globals_id, sizeof(sapi_globals_struct), (ts_allocate_ctor) sapi_globals_ctor, (ts_allocate_dtor) sapi_globals_dtor);\n# ifdef PHP_WIN32\n\t_configthreadlocale(_ENABLE_PER_THREAD_LOCALE);\n# endif\n#else\n\tsapi_globals_ctor(&sapi_globals);\n#endif\n\n\tvirtual_cwd_startup(); /* Could use shutdown to free the main cwd but it would just slow it down for CGI */\n\n#ifdef PHP_WIN32\n\ttsrm_win32_startup();\n#endif\n\n\treentrancy_startup();\n}",
        "output": "0",
        "idx": 4613
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "u32 __skb_get_hash_symmetric(const struct sk_buff *skb)\n{\n\tstruct flow_keys keys;\n\n\t__flow_hash_secret_init();\n\n\tmemset(&keys, 0, sizeof(keys));\n\t__skb_flow_dissect(NULL, skb, &flow_keys_dissector_symmetric,\n\t\t\t   &keys, NULL, 0, 0, 0,\n\t\t\t   FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL);\n\n\treturn __flow_hash_from_keys(&keys, hashrnd);\n}",
        "output": "1",
        "idx": 3942
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void serial_update_parameters(SerialState *s)\n{\n    int speed, parity, data_bits, stop_bits, frame_size;\n    QEMUSerialSetParams ssp;\n\n    if (s->divider == 0)\n        return;\n\n    /* Start bit. */\n    frame_size = 1;\n    if (s->lcr & 0x08) {\n        /* Parity bit. */\n        frame_size++;\n        if (s->lcr & 0x10)\n            parity = 'E';\n        else\n            parity = 'O';\n    } else {\n            parity = 'N';\n    }\n    if (s->lcr & 0x04)\n        stop_bits = 2;\n    else\n        stop_bits = 1;\n\n    data_bits = (s->lcr & 0x03) + 5;\n    frame_size += data_bits + stop_bits;\n    speed = s->baudbase / s->divider;\n    ssp.speed = speed;\n    ssp.parity = parity;\n    ssp.data_bits = data_bits;\n    ssp.stop_bits = stop_bits;\n    s->char_transmit_time =  (NANOSECONDS_PER_SECOND / speed) * frame_size;\n    qemu_chr_fe_ioctl(s->chr, CHR_IOCTL_SERIAL_SET_PARAMS, &ssp);\n\n    DPRINTF(\"speed=%d parity=%c data=%d stop=%d\\n\",\n           speed, parity, data_bits, stop_bits);\n}",
        "output": "1",
        "idx": 88
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void *qpa_audio_init (void)\n\n{\n\n    return &conf;\n\n}\n",
        "output": "1",
        "idx": 3671
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void set_irq_level(void *opaque, int n, int level)\n\n{\n\n    NVICState *s = opaque;\n\n    VecInfo *vec;\n\n\n\n    n += NVIC_FIRST_IRQ;\n\n\n\n    assert(n >= NVIC_FIRST_IRQ && n < s->num_irq);\n\n\n\n    trace_nvic_set_irq_level(n, level);\n\n\n\n    /* The pending status of an external interrupt is\n\n     * latched on rising edge and exception handler return.\n\n     *\n\n     * Pulsing the IRQ will always run the handler\n\n     * once, and the handler will re-run until the\n\n     * level is low when the handler completes.\n\n     */\n\n    vec = &s->vectors[n];\n\n    if (level != vec->level) {\n\n        vec->level = level;\n\n        if (level) {\n\n            armv7m_nvic_set_pending(s, n);\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3140
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "STATIC GC_bool GC_alloc_reclaim_list(struct obj_kind *kind)\n{\n    struct hblk ** result = (struct hblk **)\n                GC_scratch_alloc((MAXOBJGRANULES+1) * sizeof(struct hblk *));\n    if (result == 0) return(FALSE);\n    BZERO(result, (MAXOBJGRANULES+1)*sizeof(struct hblk *));\n    kind -> ok_reclaim_list = result;\n    return(TRUE);\n}",
        "output": "0",
        "idx": 5436
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vhost_user_set_log_base(struct vhost_dev *dev, uint64_t base,\n\n                                   struct vhost_log *log)\n\n{\n\n    int fds[VHOST_MEMORY_MAX_NREGIONS];\n\n    size_t fd_num = 0;\n\n    bool shmfd = virtio_has_feature(dev->protocol_features,\n\n                                    VHOST_USER_PROTOCOL_F_LOG_SHMFD);\n\n    VhostUserMsg msg = {\n\n        .request = VHOST_USER_SET_LOG_BASE,\n\n        .flags = VHOST_USER_VERSION,\n\n        .u64 = base,\n\n        .size = sizeof(m.u64),\n\n    };\n\n\n\n    if (shmfd && log->fd != -1) {\n\n        fds[fd_num++] = log->fd;\n\n    }\n\n\n\n    vhost_user_write(dev, &msg, fds, fd_num);\n\n\n\n    if (shmfd) {\n\n        msg.size = 0;\n\n        if (vhost_user_read(dev, &msg) < 0) {\n\n            return 0;\n\n        }\n\n\n\n        if (msg.request != VHOST_USER_SET_LOG_BASE) {\n\n            error_report(\"Received unexpected msg type. \"\n\n                         \"Expected %d received %d\",\n\n                         VHOST_USER_SET_LOG_BASE, msg.request);\n\n            return -1;\n\n        }\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5215
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int cinepak_encode_end(AVCodecContext *avctx)\n\n{\n\n    CinepakEncContext *s = avctx->priv_data;\n\n    int x;\n\n\n\n    av_free(s->codebook_input);\n\n    av_free(s->codebook_closest);\n\n    av_free(s->strip_buf);\n\n    av_free(s->frame_buf);\n\n    av_free(s->mb);\n\n#ifdef CINEPAKENC_DEBUG\n\n    av_free(s->best_mb);\n\n#endif\n\n\n\n    for(x = 0; x < 3; x++)\n\n        av_free(s->pict_bufs[x]);\n\n\n\n    av_log(avctx, AV_LOG_INFO, \"strip coding stats: %i V1 mode, %i V4 mode, %i MC mode (%i V1 encs, %i V4 encs, %i skips)\\n\",\n\n        s->num_v1_mode, s->num_v4_mode, s->num_mc_mode, s->num_v1_encs, s->num_v4_encs, s->num_skips);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3791
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nfs4_open_recover_helper(struct nfs4_opendata *opendata, mode_t openflags, struct nfs4_state **res)\n{\n\tstruct nfs4_state *newstate;\n\tint ret;\n\n\topendata->o_arg.open_flags = openflags;\n\tmemset(&opendata->o_res, 0, sizeof(opendata->o_res));\n\tmemset(&opendata->c_res, 0, sizeof(opendata->c_res));\n\tnfs4_init_opendata_res(opendata);\n\tret = _nfs4_proc_open(opendata);\n\tif (ret != 0)\n\t\treturn ret; \n\tnewstate = nfs4_opendata_to_nfs4_state(opendata);\n\tif (IS_ERR(newstate))\n\t\treturn PTR_ERR(newstate);\n\tnfs4_close_state(&opendata->path, newstate, openflags);\n\t*res = newstate;\n\treturn 0;\n}",
        "output": "1",
        "idx": 4900
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int imap_path_pretty(char *buf, size_t buflen, const char *folder)\n{\n  if (!buf || !folder)\n    return -1;\n\n  imap_pretty_mailbox(buf, buflen, folder);\n  return 0;\n}",
        "output": "0",
        "idx": 425
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int qemu_savevm_state(QEMUFile *f, Error **errp)\n\n{\n\n    int ret;\n\n    MigrationParams params = {\n\n        .blk = 0,\n\n        .shared = 0\n\n    };\n\n    MigrationState *ms = migrate_init(&params);\n\n    ms->to_dst_file = f;\n\n\n\n    if (qemu_savevm_state_blocked(errp)) {\n\n        return -EINVAL;\n\n    }\n\n\n\n    qemu_mutex_unlock_iothread();\n\n    qemu_savevm_state_header(f);\n\n    qemu_savevm_state_begin(f, &params);\n\n    qemu_mutex_lock_iothread();\n\n\n\n    while (qemu_file_get_error(f) == 0) {\n\n        if (qemu_savevm_state_iterate(f, false) > 0) {\n\n            break;\n\n        }\n\n    }\n\n\n\n    ret = qemu_file_get_error(f);\n\n    if (ret == 0) {\n\n        qemu_savevm_state_complete_precopy(f, false);\n\n        ret = qemu_file_get_error(f);\n\n    }\n\n    qemu_savevm_state_cleanup();\n\n    if (ret != 0) {\n\n        error_setg_errno(errp, -ret, \"Error while writing VM state\");\n\n    }\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 4002
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int compare_order_lists(SQL_I_List<ORDER> *part_list1,\n                        SQL_I_List<ORDER> *part_list2)\n{\n  if (part_list1 == part_list2)\n    return CMP_EQ;\n  ORDER *elem1= part_list1->first;\n  ORDER *elem2= part_list2->first;\n  for ( ; elem1 && elem2; elem1= elem1->next, elem2= elem2->next)\n  {\n    int cmp;\n    // remove all constants as we don't need them for comparision\n    while(elem1 && ((*elem1->item)->real_item())->const_item())\n    {\n      elem1= elem1->next;\n      continue;\n    }\n\n    while(elem2 && ((*elem2->item)->real_item())->const_item())\n    {\n      elem2= elem2->next;\n      continue;\n    }\n\n    if (!elem1 || !elem2)\n      break;\n\n    if ((cmp= compare_order_elements(elem1, elem2)))\n      return cmp;\n  }\n  if (elem1)\n    return CMP_GT_C;\n  if (elem2)\n    return CMP_LT_C;\n  return CMP_EQ;\n}",
        "output": "1",
        "idx": 1208
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMI_DH_PCR_Unmarshal(TPMI_DH_PCR *target, BYTE **buffer, INT32 *size, BOOL allowNull)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n\n    if (rc == TPM_RC_SUCCESS) {\n\trc = TPM_HANDLE_Unmarshal(target, buffer, size);  \n    }\n    if (rc == TPM_RC_SUCCESS) {\n\tBOOL isNotPcr = (*target > PCR_LAST);\n\tBOOL isNotLegalNull = (*target != TPM_RH_NULL) || !allowNull;\n\tif (isNotPcr &&\n\t    isNotLegalNull) {\n\t    rc = TPM_RC_VALUE;\n\t}\n    }\n    return rc;\n}",
        "output": "1",
        "idx": 376
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AioContext *aio_context_new(void)\n\n{\n\n    return (AioContext *) g_source_new(&aio_source_funcs, sizeof(AioContext));\n\n}\n",
        "output": "0",
        "idx": 169
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){\n  Expr *p = sqlite3ExprAlloc(db, TK_COLUMN, 0, 0);\n  if( p ){\n    struct SrcList_item *pItem = &pSrc->a[iSrc];\n    p->y.pTab = pItem->pTab;\n    p->iTable = pItem->iCursor;\n    if( p->y.pTab->iPKey==iCol ){\n      p->iColumn = -1;\n    }else{\n      p->iColumn = (ynVar)iCol;\n      testcase( iCol==BMS );\n      testcase( iCol==BMS-1 );\n      pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);\n    }\n  }\n  return p;\n}",
        "output": "1",
        "idx": 3005
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ceph_x_verify_authorizer_reply(struct ceph_auth_client *ac,\n\t\t\t\t\t  struct ceph_authorizer *a, size_t len)\n{\n\tstruct ceph_x_authorizer *au = (void *)a;\n\tstruct ceph_x_ticket_handler *th;\n\tint ret = 0;\n\tstruct ceph_x_authorize_reply reply;\n\tvoid *p = au->reply_buf;\n\tvoid *end = p + sizeof(au->reply_buf);\n\n\tth = get_ticket_handler(ac, au->service);\n\tif (IS_ERR(th))\n\t\treturn PTR_ERR(th);\n\tret = ceph_x_decrypt(&th->session_key, &p, end, &reply, sizeof(reply));\n\tif (ret < 0)\n\t\treturn ret;\n\tif (ret != sizeof(reply))\n\t\treturn -EPERM;\n\n\tif (au->nonce + 1 != le64_to_cpu(reply.nonce_plus_one))\n\t\tret = -EPERM;\n\telse\n\t\tret = 0;\n\tdout(\"verify_authorizer_reply nonce %llx got %llx ret %d\\n\",\n\t     au->nonce, le64_to_cpu(reply.nonce_plus_one), ret);\n\treturn ret;\n}",
        "output": "1",
        "idx": 3676
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  const int num_elements = NumElements(input);\n  TF_LITE_ENSURE_EQ(context, num_elements, NumElements(output));\n  switch (input->type) {\n    case kTfLiteInt64:\n      return copyToTensor(context, input->data.i64, output, num_elements);\n    case kTfLiteInt32:\n      return copyToTensor(context, input->data.i32, output, num_elements);\n    case kTfLiteUInt8:\n      return copyToTensor(context, input->data.uint8, output, num_elements);\n    case kTfLiteFloat32:\n      return copyToTensor(context, GetTensorData<float>(input), output,\n                          num_elements);\n    case kTfLiteBool:\n      return copyToTensor(context, input->data.b, output, num_elements);\n    case kTfLiteComplex64:\n      return copyToTensor(\n          context, reinterpret_cast<std::complex<float>*>(input->data.c64),\n          output, num_elements);\n    default:\n      // Unsupported type.\n      TF_LITE_UNSUPPORTED_TYPE(context, input->type, \"Cast\");\n  }\n  return kTfLiteOk;\n}",
        "output": "1",
        "idx": 2767
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)\n{\n    for (; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela) {\n        unsigned const symnum = get_te64(&rela->r_info) >> 32;\n        char const *const symnam = get_te32(&dynsym[symnum].st_name) + dynstr;\n        if (0==strcmp(symnam, \"__libc_start_main\")  // glibc\n        ||  0==strcmp(symnam, \"__libc_init\")  // Android\n        ||  0==strcmp(symnam, \"__uClibc_main\")\n        ||  0==strcmp(symnam, \"__uClibc_start_main\"))\n            return true;\n    }\n    return false;\n}",
        "output": "1",
        "idx": 3537
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LogFilePrep(const char *fname, const char *backup, const char *idstring)\n{\n    char *logFileName = NULL;\n\n    if (asprintf(&logFileName, fname, idstring) == -1)\n        FatalError(\"Cannot allocate space for the log file name\\n\");\n\n    if (backup && *backup) {\n        struct stat buf;\n\n        if (!stat(logFileName, &buf) && S_ISREG(buf.st_mode)) {\n            char *suffix;\n            char *oldLog;\n\n            if ((asprintf(&suffix, backup, idstring) == -1) ||\n                (asprintf(&oldLog, \"%s%s\", logFileName, suffix) == -1)) {\n                FatalError(\"Cannot allocate space for the log file name\\n\");\n            }\n            free(suffix);\n\n            if (rename(logFileName, oldLog) == -1) {\n                FatalError(\"Cannot move old log file \\\"%s\\\" to \\\"%s\\\"\\n\",\n                           logFileName, oldLog);\n            }\n            free(oldLog);\n        }\n    }\n    else {\n        if (remove(logFileName) != 0 && errno != ENOENT) {\n            FatalError(\"Cannot remove old log file \\\"%s\\\": %s\\n\",\n                       logFileName, strerror(errno));\n        }\n    }\n\n    return logFileName;\n}",
        "output": "1",
        "idx": 2007
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "setGraphAttr(Agraph_t * g, char *name, char *value, userdata_t * ud)\n{\n    Agsym_t *ap;\n\n    if ((g == root) && !strcmp(name, \"strict\") && !strcmp(value, \"true\")) {\n\tg->desc.strict = 1;\n    } else if (strcmp(name, \"name\") == 0)\n\tsetName(ud->nameMap, (Agobj_t *) g, value);\n    else {\n\tap = agattr(root, AGRAPH, name, 0);\n\tif (ap)\n\t    agxset(g, ap, value);\n\telse if (g == root)\n\t    agattr(root, AGRAPH, name, value);\n\telse {\n\t    ap = agattr(root, AGRAPH, name, defval);\n\t    agxset(g, ap, value);\n\t}\n    }\n}",
        "output": "0",
        "idx": 2517
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err ccst_Read(GF_Box *s, GF_BitStream *bs)\n{\n\tGF_CodingConstraintsBox *ptr = (GF_CodingConstraintsBox *)s;\n\n\tISOM_DECREASE_SIZE(ptr, 4);\n\tptr->all_ref_pics_intra = gf_bs_read_int(bs, 1);\n\tptr->intra_pred_used = gf_bs_read_int(bs, 1);\n\tptr->max_ref_per_pic = gf_bs_read_int(bs, 4);\n\tptr->reserved = gf_bs_read_int(bs, 26);\n\treturn GF_OK;\n}",
        "output": "0",
        "idx": 2035
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_hevc_hls_filter(HEVCContext *s, int x, int y, int ctb_size)\n\n{\n\n    deblocking_filter_CTB(s, x, y);\n\n    if (s->sps->sao_enabled) {\n\n        int x_end = x >= s->sps->width  - ctb_size;\n\n        int y_end = y >= s->sps->height - ctb_size;\n\n        if (y && x)\n\n            sao_filter_CTB(s, x - ctb_size, y - ctb_size);\n\n        if (x && y_end)\n\n            sao_filter_CTB(s, x - ctb_size, y);\n\n        if (y && x_end) {\n\n            sao_filter_CTB(s, x, y - ctb_size);\n\n            if (s->threads_type & FF_THREAD_FRAME )\n\n                ff_thread_report_progress(&s->ref->tf, y - ctb_size, 0);\n\n        }\n\n        if (x_end && y_end) {\n\n            sao_filter_CTB(s, x , y);\n\n            if (s->threads_type & FF_THREAD_FRAME )\n\n                ff_thread_report_progress(&s->ref->tf, y, 0);\n\n        }\n\n    } else {\n\n        if (y && x >= s->sps->width - ctb_size)\n\n            if (s->threads_type & FF_THREAD_FRAME )\n\n                ff_thread_report_progress(&s->ref->tf, y, 0);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4467
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *postcopy_get_tmp_page(MigrationIncomingState *mis)\n\n{\n\n    if (!mis->postcopy_tmp_page) {\n\n        mis->postcopy_tmp_page = mmap(NULL, getpagesize(),\n\n                             PROT_READ | PROT_WRITE, MAP_PRIVATE |\n\n                             MAP_ANONYMOUS, -1, 0);\n\n        if (!mis->postcopy_tmp_page) {\n\n            error_report(\"%s: %s\", __func__, strerror(errno));\n\n            return NULL;\n\n        }\n\n    }\n\n\n\n    return mis->postcopy_tmp_page;\n\n}\n",
        "output": "1",
        "idx": 1680
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void opt_frame_pad_bottom(const char *arg)\n\n{\n\n    frame_padbottom = atoi(arg);\n\n    if (frame_padbottom < 0) {\n\n        fprintf(stderr, \"Incorrect bottom pad size\\n\");\n\n        av_exit(1);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 211
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_desc_handler_characters (RsvgSaxHandler * self, const char *ch, int len)\n{\n    RsvgSaxHandlerDesc *z = (RsvgSaxHandlerDesc *) self;\n    RsvgHandle *ctx = z->ctx;\n\n    /* This isn't quite the correct behavior - in theory, any graphics\n       element may contain a title or desc element */\n\n    if (!ch || !len)\n        return;\n\n    if (!g_utf8_validate ((char *) ch, len, NULL)) {\n        char *utf8;\n        utf8 = rsvg_make_valid_utf8 ((char *) ch, len);\n        g_string_append (ctx->priv->desc, utf8);\n        g_free (utf8);\n    } else {\n        g_string_append_len (ctx->priv->desc, (char *) ch, len);\n    }\n}",
        "output": "0",
        "idx": 1139
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pppol2tp_session_create(struct net *net, u32 tunnel_id, u32 session_id, u32 peer_session_id, struct l2tp_session_cfg *cfg)\n{\n\tint error;\n\tstruct l2tp_tunnel *tunnel;\n\tstruct l2tp_session *session;\n\tstruct pppol2tp_session *ps;\n\n\ttunnel = l2tp_tunnel_find(net, tunnel_id);\n\n\t/* Error if we can't find the tunnel */\n\terror = -ENOENT;\n\tif (tunnel == NULL)\n\t\tgoto out;\n\n\t/* Error if tunnel socket is not prepped */\n\tif (tunnel->sock == NULL)\n\t\tgoto out;\n\n\t/* Default MTU values. */\n\tif (cfg->mtu == 0)\n\t\tcfg->mtu = 1500 - PPPOL2TP_HEADER_OVERHEAD;\n\tif (cfg->mru == 0)\n\t\tcfg->mru = cfg->mtu;\n\n\t/* Allocate and initialize a new session context. */\n\tsession = l2tp_session_create(sizeof(struct pppol2tp_session),\n\t\t\t\t      tunnel, session_id,\n\t\t\t\t      peer_session_id, cfg);\n\tif (IS_ERR(session)) {\n\t\terror = PTR_ERR(session);\n\t\tgoto out;\n\t}\n\n\tps = l2tp_session_priv(session);\n\tps->tunnel_sock = tunnel->sock;\n\n\tl2tp_info(session, L2TP_MSG_CONTROL, \"%s: created\\n\",\n\t\t  session->name);\n\n\terror = 0;\n\nout:\n\treturn error;\n}",
        "output": "1",
        "idx": 5727
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void selinux_netlbl_err(struct sk_buff *skb, int error, int gateway)\n{\n\tnetlbl_skbuff_err(skb, error, gateway);\n}",
        "output": "0",
        "idx": 4420
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t rgb_to_yuv(uint32_t rgb)\n{\n    uint8_t r, g, b;\n    int y, cb, cr;\n\n    r = (rgb >> 16) & 0xFF;\n    g = (rgb >>  8) & 0xFF;\n    b = (rgb      ) & 0xFF;\n\n    y  = av_clip_uint8(( 16000 +  257 * r + 504 * g +  98 * b)/1000);\n    cb = av_clip_uint8((128000 -  148 * r - 291 * g + 439 * b)/1000);\n    cr = av_clip_uint8((128000 +  439 * r - 368 * g -  71 * b)/1000);\n\n    return (y << 16) | (cr << 8) | cb;\n}",
        "output": "0",
        "idx": 2524
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Opal::Call::OnEstablished (OpalConnection & connection)\n{\n  RTP_Session *session = NULL; \n  OpalMediaStreamPtr stream;\n\n  NoAnswerTimer.Stop (false);\n\n  if (!PIsDescendant(&connection, OpalPCSSConnection)) {\n\n    parse_info (connection);\n    Ekiga::Runtime::run_in_main (boost::bind (&Opal::Call::emit_established_in_main, this));\n  }\n\n  if (PIsDescendant(&connection, OpalRTPConnection)) {\n\n    stream = connection.GetMediaStream (OpalMediaType::Audio (), false);\n    if (stream != NULL) {\n\n      session = PDownCast (OpalRTPConnection, &connection)->GetSession (stream->GetSessionID ());\n      if (session) {\n      \n        session->SetIgnorePayloadTypeChanges (TRUE);\n        session->SetRxStatisticsInterval(50);\n        session->SetTxStatisticsInterval(50);\n      }\n    }\n\n    stream = connection.GetMediaStream (OpalMediaType::Video (), false);\n    if (stream != NULL) { \n\n      session = PDownCast (OpalRTPConnection, &connection)->GetSession (stream->GetSessionID ());\n      if (session) {\n\n        session->SetIgnorePayloadTypeChanges (TRUE);\n        session->SetRxStatisticsInterval(50);\n        session->SetTxStatisticsInterval(50);\n      }\n    }\n  }\n  \n  return OpalCall::OnEstablished (connection);\n}",
        "output": "1",
        "idx": 896
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool PackLinuxElf64::calls_crt1(Elf64_Rela const *rela, int sz)\n{\n    if (!dynsym || !dynstr) {\n        return false;\n    }\n    for (unsigned relnum= 0; 0 < sz; (sz -= sizeof(Elf64_Rela)), ++rela, ++relnum) {\n        unsigned const symnum = get_te64(&rela->r_info) >> 32;\n        char const *const symnam = get_dynsym_name(symnum, relnum);\n        if (0==strcmp(symnam, \"__libc_start_main\")  // glibc\n        ||  0==strcmp(symnam, \"__libc_init\")  // Android\n        ||  0==strcmp(symnam, \"__uClibc_main\")\n        ||  0==strcmp(symnam, \"__uClibc_start_main\"))\n            return true;\n    }\n    return false;\n}",
        "output": "1",
        "idx": 3746
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_exception_return(DisasContext *s, TCGv pc)\n\n{\n\n    TCGv tmp;\n\n    store_reg(s, 15, pc);\n\n    tmp = load_cpu_field(spsr);\n\n    gen_set_cpsr(tmp, 0xffffffff);\n\n    dead_tmp(tmp);\n\n    s->is_jmp = DISAS_UPDATE;\n\n}\n",
        "output": "1",
        "idx": 121
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vnc_handshake_io(void *opaque) {\n\n    struct VncState *vs = (struct VncState *)opaque;\n\n\n\n    VNC_DEBUG(\"Handshake IO continue\\n\");\n\n    vnc_continue_handshake(vs);\n\n}\n",
        "output": "0",
        "idx": 3880
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nstatic inline struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)\n{\n\treturn &skb_shinfo(skb)->hwtstamps;",
        "output": "0",
        "idx": 2157
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AVFrame *avcodec_alloc_frame(void)\n\n{\n\n    AVFrame *frame = av_malloc(sizeof(AVFrame));\n\n\n\n    if (frame == NULL)\n\n        return NULL;\n\n\n\n    avcodec_get_frame_defaults(frame);\n\n\n\n    return frame;\n\n}\n",
        "output": "1",
        "idx": 2626
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "utf_iscomposing_uint(UINT32_T c)\n{\n    return utf_iscomposing((int)c);\n}",
        "output": "0",
        "idx": 1621
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static VALUE read_memory(VALUE klass, VALUE content)\n{\n  xmlRelaxNGParserCtxtPtr ctx = xmlRelaxNGNewMemParserCtxt(\n      (const char *)StringValuePtr(content),\n      (int)RSTRING_LEN(content)\n  );\n  xmlRelaxNGPtr schema;\n  VALUE errors = rb_ary_new();\n  VALUE rb_schema;\n\n  xmlSetStructuredErrorFunc((void *)errors, Nokogiri_error_array_pusher);\n\n#ifdef HAVE_XMLRELAXNGSETPARSERSTRUCTUREDERRORS\n  xmlRelaxNGSetParserStructuredErrors(\n    ctx,\n    Nokogiri_error_array_pusher,\n    (void *)errors\n  );\n#endif\n\n  schema = xmlRelaxNGParse(ctx);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n  xmlRelaxNGFreeParserCtxt(ctx);\n\n  if(NULL == schema) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      Nokogiri_error_raise(NULL, error);\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  rb_schema = Data_Wrap_Struct(klass, 0, dealloc, schema);\n  rb_iv_set(rb_schema, \"@errors\", errors);\n\n  return rb_schema;\n}",
        "output": "1",
        "idx": 4202
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "[[noreturn]] void TProtocolException::throwTruncatedData() {\n  throw TProtocolException(\n      TProtocolException::INVALID_DATA,\n      \"Not enough bytes to read the entire message, the data appears to be \"\n      \"truncated\");\n}",
        "output": "0",
        "idx": 1907
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct tcf_block *tcf_block_find(struct net *net, struct Qdisc **q,\n\t\t\t\t\tu32 *parent, unsigned long *cl,\n\t\t\t\t\tint ifindex, u32 block_index,\n\t\t\t\t\tstruct netlink_ext_ack *extack)\n{\n\tstruct tcf_block *block;\n\tint err = 0;\n\n\tASSERT_RTNL();\n\n\terr = __tcf_qdisc_find(net, q, parent, ifindex, true, extack);\n\tif (err)\n\t\tgoto errout;\n\n\terr = __tcf_qdisc_cl_find(*q, *parent, cl, ifindex, extack);\n\tif (err)\n\t\tgoto errout_qdisc;\n\n\tblock = __tcf_block_find(net, *q, *cl, ifindex, block_index, extack);\n\tif (IS_ERR(block)) {\n\t\terr = PTR_ERR(block);\n\t\tgoto errout_qdisc;\n\t}\n\n\treturn block;\n\nerrout_qdisc:\n\tif (*q)\n\t\tqdisc_put(*q);\nerrout:\n\t*q = NULL;\n\treturn ERR_PTR(err);\n}",
        "output": "0",
        "idx": 5719
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void streamGetEdgeID(stream *s, int first, int skip_tombstones, streamID *edge_id)\n{\n    streamIterator si;\n    int64_t numfields;\n    streamIteratorStart(&si,s,NULL,NULL,!first);\n    si.skip_tombstones = skip_tombstones;\n    int found = streamIteratorGetID(&si,edge_id,&numfields);\n    if (!found) {\n        streamID min_id = {0, 0}, max_id = {UINT64_MAX, UINT64_MAX};\n        *edge_id = first ? max_id : min_id;\n    }\n\n}",
        "output": "1",
        "idx": 3989
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nautilus_file_get_boolean_metadata (NautilusFile *file,\n\t\t\t\t    const char   *key,\n\t\t\t\t    gboolean      default_metadata)\n{\n\tg_return_val_if_fail (key != NULL, default_metadata);\n\tg_return_val_if_fail (key[0] != '\\0', default_metadata);\n\tif (file == NULL) {\n\t\treturn default_metadata;\n\t}\n\tg_return_val_if_fail (NAUTILUS_IS_FILE (file), default_metadata);\n\n\treturn nautilus_directory_get_boolean_file_metadata\n\t\t(file->details->directory,\n\t\t get_metadata_name (file),\n\t\t key,\n\t\t default_metadata);\n}",
        "output": "0",
        "idx": 236
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_put_vcpu_events(CPUState *env, int level)\n\n{\n\n    struct kvm_vcpu_events events;\n\n\n\n    if (!kvm_has_vcpu_events()) {\n\n        return 0;\n\n    }\n\n\n\n    events.exception.injected = (env->exception_injected >= 0);\n\n    events.exception.nr = env->exception_injected;\n\n    events.exception.has_error_code = env->has_error_code;\n\n    events.exception.error_code = env->error_code;\n\n\n\n\n    events.interrupt.injected = (env->interrupt_injected >= 0);\n\n    events.interrupt.nr = env->interrupt_injected;\n\n    events.interrupt.soft = env->soft_interrupt;\n\n\n\n    events.nmi.injected = env->nmi_injected;\n\n    events.nmi.pending = env->nmi_pending;\n\n    events.nmi.masked = !!(env->hflags2 & HF2_NMI_MASK);\n\n    events.nmi.pad = 0;\n\n\n\n    events.sipi_vector = env->sipi_vector;\n\n\n\n    events.flags = 0;\n\n    if (level >= KVM_PUT_RESET_STATE) {\n\n        events.flags |=\n\n            KVM_VCPUEVENT_VALID_NMI_PENDING | KVM_VCPUEVENT_VALID_SIPI_VECTOR;\n\n    }\n\n\n\n    return kvm_vcpu_ioctl(env, KVM_SET_VCPU_EVENTS, &events);\n\n}",
        "output": "1",
        "idx": 5074
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor)\n\t{\n\tif (generator == NULL)\n\t\t{\n\t\tECerr(EC_F_EC_GROUP_SET_GENERATOR, ERR_R_PASSED_NULL_PARAMETER);\n\t\treturn 0   ;\n\t\t}\n\n\tif (group->generator == NULL)\n\t\t{\n\t\tgroup->generator = EC_POINT_new(group);\n\t\tif (group->generator == NULL) return 0;\n\t\t}\n\tif (!EC_POINT_copy(group->generator, generator)) return 0;\n\n\tif (order != NULL)\n\t\t{ if (!BN_copy(&group->order, order)) return 0; }\t\n\telse\n\t\tBN_zero(&group->order);\n\n\tif (cofactor != NULL)\n\t\t{ if (!BN_copy(&group->cofactor, cofactor)) return 0; }\t\n\telse\n\t\tBN_zero(&group->cofactor);\n\n\treturn 1;\n\t}",
        "output": "1",
        "idx": 496
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "tcf_action_dump_1(struct sk_buff *skb, struct tc_action *a, int bind, int ref)\n{\n\tint err = -EINVAL;\n\tunsigned char *b = skb_tail_pointer(skb);\n\tstruct nlattr *nest;\n\n\tif (nla_put_string(skb, TCA_KIND, a->ops->kind))\n\t\tgoto nla_put_failure;\n\tif (tcf_action_copy_stats(skb, a, 0))\n\t\tgoto nla_put_failure;\n\tnest = nla_nest_start(skb, TCA_OPTIONS);\n\tif (nest == NULL)\n\t\tgoto nla_put_failure;\n\terr = tcf_action_dump_old(skb, a, bind, ref);\n\tif (err > 0) {\n\t\tnla_nest_end(skb, nest);\n\t\treturn err;\n\t}\n\nnla_put_failure:\n\tnlmsg_trim(skb, b);\n\treturn -1;\n}",
        "output": "0",
        "idx": 4999
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int acpi_pcihp_get_bsel(PCIBus *bus)\n\n{\n\n    QObject *o = object_property_get_qobject(OBJECT(bus),\n\n                                             ACPI_PCIHP_PROP_BSEL, NULL);\n\n    int64_t bsel = -1;\n\n    if (o) {\n\n        bsel = qint_get_int(qobject_to_qint(o));\n\n    }\n\n    if (bsel < 0) {\n\n        return -1;\n\n    }\n\n    return bsel;\n\n}\n",
        "output": "1",
        "idx": 2085
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dfafree (struct dfa *d)\n{\n  size_t i;\n  struct dfamust *dm, *ndm;\n\n  free(d->charclasses);\n  free(d->tokens);\n\n  if (d->mb_cur_max > 1)\n    free_mbdata(d);\n\n  for (i = 0; i < d->sindex; ++i) {\n    free(d->states[i].elems.elems);\n    if (MBS_SUPPORT)\n      free(d->states[i].mbps.elems);\n  }\n  free(d->states);\n  for (i = 0; i < d->tindex; ++i)\n    free(d->follows[i].elems);\n  free(d->follows);\n  for (i = 0; i < d->tralloc; ++i)\n    {\n      free(d->trans[i]);\n      free(d->fails[i]);\n    }\n  free(d->realtrans);\n  free(d->fails);\n  free(d->newlines);\n  free(d->success);\n  for (dm = d->musts; dm; dm = ndm)\n    {\n      ndm = dm->next;\n      free(dm->must);\n      free(dm);\n    }\n}",
        "output": "0",
        "idx": 5811
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint64_t helper_cmpbge(uint64_t op1, uint64_t op2)\n\n{\n\n    uint8_t opa, opb, res;\n\n    int i;\n\n\n\n    res = 0;\n\n    for (i = 0; i < 8; i++) {\n\n        opa = op1 >> (i * 8);\n\n        opb = op2 >> (i * 8);\n\n        if (opa >= opb) {\n\n            res |= 1 << i;\n\n        }\n\n    }\n\n    return res;\n\n}\n",
        "output": "0",
        "idx": 4157
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_pop_def_group (RsvgHandle * ctx)\n{\n    if (ctx->priv->currentnode != NULL)\n        ctx->priv->currentnode = ctx->priv->currentnode->parent;\n}",
        "output": "1",
        "idx": 816
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "tiffsep_device_finalize(const gs_memory_t *cmem, void *vpdev)\n{\n    /* We need to deallocate the names. */\n    devn_free_params((gx_device*) vpdev);\n    gx_device_finalize(cmem, vpdev);\n}",
        "output": "0",
        "idx": 2352
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_s390_check_enable_cmma(KVMState *s)\n\n{\n\n    struct kvm_device_attr attr = {\n\n        .group = KVM_S390_VM_MEM_CTRL,\n\n        .attr = KVM_S390_VM_MEM_ENABLE_CMMA,\n\n    };\n\n\n\n    return kvm_vm_ioctl(s, KVM_HAS_DEVICE_ATTR, &attr);\n\n}\n",
        "output": "0",
        "idx": 122
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_notify_work(struct work_struct *work)\n{\n\tstruct capictr_event *event =\n\t\tcontainer_of(work, struct capictr_event, work);\n\n\tswitch (event->type) {\n\tcase CAPICTR_UP:\n\t\tnotify_up(event->controller);\n\t\tbreak;\n\tcase CAPICTR_DOWN:\n\t\tnotify_down(event->controller);\n\t\tbreak;\n\t}\n\n\tkfree(event);\n}",
        "output": "0",
        "idx": 5551
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SwapCreateRegister(xRecordRegisterClientsReq * stuff)\n{\n    int i;\n    XID *pClientID;\n\n    swapl(&stuff->context);\n    swapl(&stuff->nClients);\n    swapl(&stuff->nRanges);\n    pClientID = (XID *) &stuff[1];\n    if (stuff->nClients >\n        stuff->length - bytes_to_int32(sz_xRecordRegisterClientsReq))\n        return BadLength;\n    for (i = 0; i < stuff->nClients; i++, pClientID++) {\n        swapl(pClientID);\n    }\n    if (stuff->nRanges >\n        stuff->length - bytes_to_int32(sz_xRecordRegisterClientsReq)\n        - stuff->nClients)\n        return BadLength;\n    RecordSwapRanges((xRecordRange *) pClientID, stuff->nRanges);\n    return Success;\n}                               /* SwapCreateRegister */",
        "output": "1",
        "idx": 2486
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int register_ftrace_command(struct ftrace_func_command *cmd)\n{\n\tstruct ftrace_func_command *p;\n\tint ret = 0;\n\n\tmutex_lock(&ftrace_cmd_mutex);\n\tlist_for_each_entry(p, &ftrace_commands, list) {\n\t\tif (strcmp(cmd->name, p->name) == 0) {\n\t\t\tret = -EBUSY;\n\t\t\tgoto out_unlock;\n\t\t}\n\t}\n\tlist_add(&cmd->list, &ftrace_commands);\n out_unlock:\n\tmutex_unlock(&ftrace_cmd_mutex);\n\n\treturn ret;\n}",
        "output": "0",
        "idx": 2672
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int bufsize_v4l2_buffer(struct v4l2_buffer32 __user *up, u32 *size)\n{\n\tu32 type;\n\tu32 length;\n\n\tif (!access_ok(VERIFY_READ, up, sizeof(*up)) ||\n\t    get_user(type, &up->type) ||\n\t    get_user(length, &up->length))\n\t\treturn -EFAULT;\n\n\tif (V4L2_TYPE_IS_MULTIPLANAR(type)) {\n\t\tif (length > VIDEO_MAX_PLANES)\n\t\t\treturn -EINVAL;\n\n\t\t/*\n\t\t * We don't really care if userspace decides to kill itself\n\t\t * by passing a very big length value\n\t\t */\n\t\t*size = length * sizeof(struct v4l2_plane);\n\t} else {\n\t\t*size = 0;\n\t}\n\treturn 0;\n}",
        "output": "0",
        "idx": 2898
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "psutil_pid_exists(PyObject *self, PyObject *args) {\n    long pid;\n    int status;\n\n    if (! PyArg_ParseTuple(args, \"l\", &pid))\n        return NULL;\n\n    status = psutil_pid_is_running(pid);\n    if (-1 == status)\n        return NULL; // exception raised in psutil_pid_is_running()\n    return PyBool_FromLong(status);\n}",
        "output": "0",
        "idx": 2927
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DISAS_INSN(divw)\n\n{\n\n    TCGv reg;\n\n    TCGv tmp;\n\n    TCGv src;\n\n    int sign;\n\n\n\n    sign = (insn & 0x100) != 0;\n\n    reg = DREG(insn, 9);\n\n    if (sign) {\n\n        tcg_gen_ext16s_i32(QREG_DIV1, reg);\n\n    } else {\n\n        tcg_gen_ext16u_i32(QREG_DIV1, reg);\n\n    }\n\n    SRC_EA(env, src, OS_WORD, sign, NULL);\n\n    tcg_gen_mov_i32(QREG_DIV2, src);\n\n    if (sign) {\n\n        gen_helper_divs(cpu_env, tcg_const_i32(1));\n\n    } else {\n\n        gen_helper_divu(cpu_env, tcg_const_i32(1));\n\n    }\n\n\n\n    tmp = tcg_temp_new();\n\n    src = tcg_temp_new();\n\n    tcg_gen_ext16u_i32(tmp, QREG_DIV1);\n\n    tcg_gen_shli_i32(src, QREG_DIV2, 16);\n\n    tcg_gen_or_i32(reg, tmp, src);\n\n\n\n    set_cc_op(s, CC_OP_FLAGS);\n\n}\n",
        "output": "1",
        "idx": 2862
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int do_fault(struct mm_struct *mm, struct vm_area_struct *vma,\n\t\tunsigned long address, pte_t *page_table, pmd_t *pmd,\n\t\tunsigned int flags, pte_t orig_pte)\n{\n\tpgoff_t pgoff = (((address & PAGE_MASK)\n\t\t\t- vma->vm_start) >> PAGE_SHIFT) + vma->vm_pgoff;\n\n\tpte_unmap(page_table);\n\tif (!(flags & FAULT_FLAG_WRITE))\n\t\treturn do_read_fault(mm, vma, address, pmd, pgoff, flags,\n\t\t\t\torig_pte);\n\tif (!(vma->vm_flags & VM_SHARED))\n\t\treturn do_cow_fault(mm, vma, address, pmd, pgoff, flags,\n\t\t\t\torig_pte);\n\treturn do_shared_fault(mm, vma, address, pmd, pgoff, flags, orig_pte);\n}",
        "output": "1",
        "idx": 5291
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct dirent *local_readdir(FsContext *ctx, V9fsFidOpenState *fs)\n\n{\n\n    struct dirent *entry;\n\n\n\nagain:\n\n    entry = readdir(fs->dir.stream);\n\n    if (!entry) {\n\n        return NULL;\n\n    }\n\n\n\n    if (ctx->export_flags & V9FS_SM_MAPPED) {\n\n        entry->d_type = DT_UNKNOWN;\n\n    } else if (ctx->export_flags & V9FS_SM_MAPPED_FILE) {\n\n        if (!strcmp(entry->d_name, VIRTFS_META_DIR)) {\n\n            /* skp the meta data directory */\n\n            goto again;\n\n        }\n\n        entry->d_type = DT_UNKNOWN;\n\n    }\n\n\n\n    return entry;\n\n}\n",
        "output": "1",
        "idx": 1051
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void vmsvga_update_rect(struct vmsvga_state_s *s,\n\n                int x, int y, int w, int h)\n\n{\n\n    int line;\n\n    int bypl;\n\n    int width;\n\n    int start;\n\n    uint8_t *src;\n\n    uint8_t *dst;\n\n\n\n    if (x + w > s->width) {\n\n        fprintf(stderr, \"%s: update width too large x: %d, w: %d\\n\",\n\n                        __FUNCTION__, x, w);\n\n        x = MIN(x, s->width);\n\n        w = s->width - x;\n\n    }\n\n\n\n    if (y + h > s->height) {\n\n        fprintf(stderr, \"%s: update height too large y: %d, h: %d\\n\",\n\n                        __FUNCTION__, y, h);\n\n        y = MIN(y, s->height);\n\n        h = s->height - y;\n\n    }\n\n\n\n    line = h;\n\n    bypl = s->bypp * s->width;\n\n    width = s->bypp * w;\n\n    start = s->bypp * x + bypl * y;\n\n    src = s->vga.vram_ptr + start;\n\n    dst = ds_get_data(s->vga.ds) + start;\n\n\n\n    for (; line > 0; line --, src += bypl, dst += bypl)\n\n        memcpy(dst, src, width);\n\n\n\n    dpy_gfx_update(s->vga.ds, x, y, w, h);\n\n}\n",
        "output": "0",
        "idx": 4787
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ev_stream_closed(h2_session *session, h2_stream *stream)\n{\n    apr_bucket *b;\n    \n    if (H2_STREAM_CLIENT_INITIATED(stream->id)\n        && (stream->id > session->local.completed_max)) {\n        session->local.completed_max = stream->id;\n    }\n    switch (session->state) {\n        case H2_SESSION_ST_IDLE:\n            if (session->open_streams == 0) {\n                /* enter keepalive timeout, since we no longer have streams */\n                session->idle_until = (session->s->keep_alive_timeout\n                                       + apr_time_now());\n            }\n            break;\n        default:\n            break;\n    }\n    \n    /* The stream might have data in the buffers of the main connection.\n     * We can only free the allocated resources once all had been written.\n     * Send a special buckets on the connection that gets destroyed when\n     * all preceding data has been handled. On its destruction, it is safe\n     * to purge all resources of the stream. */\n    b = h2_bucket_eos_create(session->c->bucket_alloc, stream);\n    APR_BRIGADE_INSERT_TAIL(session->bbtmp, b);\n    h2_conn_io_pass(&session->io, session->bbtmp);\n    apr_brigade_cleanup(session->bbtmp);\n}",
        "output": "1",
        "idx": 5825
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "get_settings (NMExportedConnection *exported)\n{\n\tNMConnection *connection;\n\tGHashTable *settings;\n\n\tconnection = nm_exported_connection_get_connection (exported);\n\n\tutils_fill_connection_certs (connection);\n\tsettings = nm_connection_to_hash (connection);\n\tutils_clear_filled_connection_certs (connection);\n\n\treturn settings;\n}",
        "output": "1",
        "idx": 612
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void run_on_cpu(CPUState *env, void (*func)(void *data), void *data)\n\n{\n\n    struct qemu_work_item wi;\n\n\n\n    if (qemu_cpu_self(env)) {\n\n        func(data);\n\n        return;\n\n    }\n\n\n\n    wi.func = func;\n\n    wi.data = data;\n\n    if (!env->queued_work_first)\n\n        env->queued_work_first = &wi;\n\n    else\n\n        env->queued_work_last->next = &wi;\n\n    env->queued_work_last = &wi;\n\n    wi.next = NULL;\n\n    wi.done = false;\n\n\n\n    qemu_cpu_kick(env);\n\n    while (!wi.done) {\n\n        CPUState *self_env = cpu_single_env;\n\n\n\n        qemu_cond_wait(&qemu_work_cond, &qemu_global_mutex);\n\n        cpu_single_env = self_env;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 736
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int php_snmp_write_max_oids(php_snmp_object *snmp_object, zval *newval TSRMLS_DC)\n{\n\tzval ztmp;\n\tint ret = SUCCESS;\n\n\tif (Z_TYPE_P(newval) == IS_NULL) {\n\t\tsnmp_object->max_oids = 0;\n\t\treturn ret;\n\t}\n\n\tif (Z_TYPE_P(newval) != IS_LONG) {\n\t\tztmp = *newval;\n\t\tzval_copy_ctor(&ztmp);\n\t\tconvert_to_long(&ztmp);\n\t\tnewval = &ztmp;\n\t}\n\n\tif (Z_LVAL_P(newval) > 0) {\n\t\tsnmp_object->max_oids = Z_LVAL_P(newval);\n\t} else {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"max_oids should be positive integer or NULL, got %ld\", Z_LVAL_P(newval));\n\t}\n\t\n\tif (newval == &ztmp) {\n\t\tzval_dtor(newval);\n\t}\n\n\treturn ret;\n}",
        "output": "1",
        "idx": 4537
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void discard_vq_data(VirtQueue *vq, VirtIODevice *vdev)\n\n{\n\n    VirtQueueElement elem;\n\n\n\n    if (!virtio_queue_ready(vq)) {\n\n        return;\n\n    }\n\n    while (virtqueue_pop(vq, &elem)) {\n\n        virtqueue_push(vq, &elem, 0);\n\n    }\n\n    virtio_notify(vdev, vq);\n\n}\n",
        "output": "0",
        "idx": 5992
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int zl100313_frontend_attach(struct dvb_usb_adapter *d)\n{\n\td->fe_adap[0].fe = dvb_attach(mt312_attach, &zl313_config,\n\t\t\t&d->dev->i2c_adap);\n\tif (d->fe_adap[0].fe != NULL) {\n\t\tif (dvb_attach(zl10039_attach, d->fe_adap[0].fe, 0x60,\n\t\t\t\t&d->dev->i2c_adap)) {\n\t\t\td->fe_adap[0].fe->ops.set_voltage = dw210x_set_voltage;\n\t\t\tinfo(\"Attached zl100313+zl10039!\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -EIO;\n}",
        "output": "0",
        "idx": 3016
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_never_users(uid_t uid, uid_t *nusers)\n{\nint i;\nif (!nusers) return FALSE;\nfor (i = 1; i <= (int)(nusers[0]); i++) if (nusers[i] == uid) return TRUE;\nreturn FALSE;\n}",
        "output": "0",
        "idx": 4728
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(xml_parser_free)\n{\n\tzval *pind;\n\txml_parser *parser;\n\tzend_resource *res;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &pind) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif ((parser = (xml_parser *)zend_fetch_resource(Z_RES_P(pind), \"XML Parser\", le_xml_parser)) == NULL) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (parser->isparsing == 1) {\n\t\tphp_error_docref(NULL, E_WARNING, \"Parser cannot be freed while it is parsing.\");\n\t\tRETURN_FALSE;\n\t}\n\n\tres = Z_RES(parser->index);\n\tZVAL_UNDEF(&parser->index);\n\tzend_list_close(res);\n\tRETURN_TRUE;\n}",
        "output": "0",
        "idx": 1433
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void tcp_start_outgoing_migration(MigrationState *s,\n\n                                  const char *host_port,\n\n                                  Error **errp)\n\n{\n\n    Error *err = NULL;\n\n    SocketAddress *saddr = tcp_build_address(host_port, &err);\n\n    if (!err) {\n\n        socket_start_outgoing_migration(s, saddr, &err);\n\n    }\n\n    error_propagate(errp, err);\n\n}\n",
        "output": "0",
        "idx": 2538
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int index_search_timestamp(AVIndexEntry *entries, \n\n                                  int nb_entries, int wanted_timestamp)\n\n{\n\n    int a, b, m;\n\n    int64_t timestamp;\n\n\n\n    if (nb_entries <= 0)\n\n        return -1;\n\n    \n\n    a = 0;\n\n    b = nb_entries - 1;\n\n    while (a <= b) {\n\n        m = (a + b) >> 1;\n\n        timestamp = entries[m].timestamp;\n\n        if (timestamp == wanted_timestamp)\n\n            goto found;\n\n        else if (timestamp > wanted_timestamp) {\n\n            b = m - 1;\n\n        } else {\n\n            a = m + 1;\n\n        }\n\n    }\n\n    m = a;\n\n    if (m > 0)\n\n        m--;\n\n found:\n\n    return m;\n\n}\n",
        "output": "0",
        "idx": 397
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mesalink_shutdown(struct Curl_easy *data,\n                  struct connectdata *conn, int sockindex)\n{\n  int retval = 0;\n  struct ssl_connect_data *connssl = &conn->ssl[sockindex];\n\n  (void) data;\n\n  if(BACKEND->handle) {\n    SSL_free(BACKEND->handle);\n    BACKEND->handle = NULL;\n  }\n  return retval;\n}",
        "output": "0",
        "idx": 2589
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void \nmono_reflection_create_dynamic_method (MonoReflectionDynamicMethod *mb)\n{",
        "output": "1",
        "idx": 4176
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_cursor_command(void)\n{\n    RedMemSlotInfo mem_info;\n    RedCursorCmd *red_cursor_cmd;\n    QXLCursorCmd cursor_cmd;\n    QXLCursor *cursor;\n\n    init_meminfo(&mem_info);\n\n    /* test base cursor with no problems */\n    memset(&cursor_cmd, 0, sizeof(cursor_cmd));\n    cursor_cmd.type = QXL_CURSOR_SET;\n\n    cursor = create_chunk(SPICE_OFFSETOF(QXLCursor, chunk), 128 * 128 * 4, NULL, 0xaa);\n    cursor->header.unique = 1;\n    cursor->header.width = 128;\n    cursor->header.height = 128;\n    cursor->data_size = 128 * 128 * 4;\n\n    cursor_cmd.u.set.shape = to_physical(cursor);\n\n    red_cursor_cmd = red_cursor_cmd_new(NULL, &mem_info, 0, to_physical(&cursor_cmd));\n    g_assert_nonnull(red_cursor_cmd);\n    red_cursor_cmd_unref(red_cursor_cmd);\n    g_free(cursor);\n    memslot_info_destroy(&mem_info);\n}",
        "output": "0",
        "idx": 2000
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uchar *getMSG(msg_t *pM)\n{\n\tuchar *ret;\n\tif(pM == NULL)\n\t\tret = UCHAR_CONSTANT(\"\");\n\telse {\n\t\tif(pM->iLenMSG == 0)\n\t\t\tret = UCHAR_CONSTANT(\"\");\n\t\telse\n\t\t\tret = pM->pszRawMsg + pM->offMSG;\n\t}\n\treturn ret;\n}",
        "output": "0",
        "idx": 3789
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unsigned paravirt_patch_call(void *insnbuf,\n\t\t\t     const void *target, u16 tgt_clobbers,\n\t\t\t     unsigned long addr, u16 site_clobbers,\n\t\t\t     unsigned len)\n{\n\tstruct branch *b = insnbuf;\n\tunsigned long delta = (unsigned long)target - (addr+5);\n\n\tif (len < 5) {\n#ifdef CONFIG_RETPOLINE\n\t\tWARN_ONCE(\"Failing to patch indirect CALL in %ps\\n\", (void *)addr);\n#endif\n\t\treturn len;\t/* call too long for patch site */\n\t}\n\n\tb->opcode = 0xe8; /* call */\n\tb->delta = delta;\n\tBUILD_BUG_ON(sizeof(*b) != 5);\n\n\treturn 5;\n}",
        "output": "0",
        "idx": 4438
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "selaGetCombName(SELA    *sela,\n                l_int32  size,\n                l_int32  direction)\n{\nchar    *selname;\nchar     combname[L_BUF_SIZE];\nl_int32  i, nsels, sx, sy, found;\nSEL     *sel;\n\n    PROCNAME(\"selaGetCombName\");\n\n    if (!sela)\n        return (char *)ERROR_PTR(\"sela not defined\", procName, NULL);\n    if (direction != L_HORIZ && direction != L_VERT)\n        return (char *)ERROR_PTR(\"invalid direction\", procName, NULL);\n\n        /* Derive the comb name we're looking for */\n    if (direction == L_HORIZ)\n        snprintf(combname, L_BUF_SIZE, \"sel_comb_%dh\", size);\n    else  /* direction == L_VERT */\n        snprintf(combname, L_BUF_SIZE, \"sel_comb_%dv\", size);\n\n    found = FALSE;\n    nsels = selaGetCount(sela);\n    for (i = 0; i < nsels; i++) {\n        sel = selaGetSel(sela, i);\n        selGetParameters(sel, &sy, &sx, NULL, NULL);\n        if (sy != 1 && sx != 1)  /* 2-D; not a comb */\n            continue;\n        selname = selGetName(sel);\n        if (!strcmp(selname, combname)) {\n            found = TRUE;\n            break;\n        }\n    }\n\n    if (found)\n        return stringNew(selname);\n    else\n        return (char *)ERROR_PTR(\"sel not found\", procName, NULL);\n}",
        "output": "1",
        "idx": 2637
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int parse_line(char *str)\n{\n\tuint8_t array[256];\n\tuint16_t value, pskey, length = 0;\n\tchar *off, *end;\n\n\tpskey = strtol(str + 1, NULL, 16);\n\toff = strstr(str, \"=\");\n\tif (!off)\n\t\treturn -EIO;\n\n\toff++;\n\n\twhile (1) {\n\t\tvalue = strtol(off, &end, 16);\n\t\tif (value == 0 && off == end)\n\t\t\tbreak;\n\n\t\tarray[length++] = value & 0xff;\n\t\tarray[length++] = value >> 8;\n\n\t\tif (*end == '\\0')\n\t\t\tbreak;\n\n\t\toff = end + 1;\n\t}\n\n\treturn psr_put(pskey, array, length);\n}",
        "output": "1",
        "idx": 3693
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pipe_iov_copy_from_user(void *to, struct iovec *iov, unsigned long len,\n\t\t\tint atomic)\n{\n\tunsigned long copy;\n\n\twhile (len > 0) {\n\t\twhile (!iov->iov_len)\n\t\t\tiov++;\n\t\tcopy = min_t(unsigned long, len, iov->iov_len);\n\n\t\tif (atomic) {\n\t\t\tif (__copy_from_user_inatomic(to, iov->iov_base, copy))\n\t\t\t\treturn -EFAULT;\n\t\t} else {\n\t\t\tif (copy_from_user(to, iov->iov_base, copy))\n\t\t\t\treturn -EFAULT;\n\t\t}\n\t\tto += copy;\n\t\tlen -= copy;\n\t\tiov->iov_base += copy;\n\t\tiov->iov_len -= copy;\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 5592
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "onig_new_without_alloc(regex_t* reg,\n                       const UChar* pattern, const UChar* pattern_end,\n                       OnigOptionType option, OnigEncoding enc,\n                       OnigSyntaxType* syntax, OnigErrorInfo* einfo)\n{\n  int r;\n\n  r = onig_reg_init(reg, option, ONIGENC_CASE_FOLD_DEFAULT, enc, syntax);\n  if (r != 0) return r;\n\n  r = onig_compile(reg, pattern, pattern_end, einfo);\n  return r;\n}",
        "output": "0",
        "idx": 38
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static UINT printer_process_irp_write(PRINTER_DEVICE* printer_dev, IRP* irp)\n{\n\tUINT32 Length;\n\tUINT64 Offset;\n\trdpPrintJob* printjob = NULL;\n\tUINT error = CHANNEL_RC_OK;\n\tStream_Read_UINT32(irp->input, Length);\n\tStream_Read_UINT64(irp->input, Offset);\n\tStream_Seek(irp->input, 20); /* Padding */\n\n\tif (printer_dev->printer)\n\t\tprintjob = printer_dev->printer->FindPrintJob(printer_dev->printer, irp->FileId);\n\n\tif (!printjob)\n\t{\n\t\tirp->IoStatus = STATUS_UNSUCCESSFUL;\n\t\tLength = 0;\n\t}\n\telse\n\t{\n\t\terror = printjob->Write(printjob, Stream_Pointer(irp->input), Length);\n\t}\n\n\tif (error)\n\t{\n\t\tWLog_ERR(TAG, \"printjob->Write failed with error %\" PRIu32 \"!\", error);\n\t\treturn error;\n\t}\n\n\tStream_Write_UINT32(irp->output, Length);\n\tStream_Write_UINT8(irp->output, 0); /* Padding */\n\treturn irp->Complete(irp);\n}",
        "output": "1",
        "idx": 264
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "write_vector_int(BitWriter& w, int nitems, std::vector<T>& vec,\n\t\t int bits, int_type T::*field)\n{\n    // nitems times, write bits bits from the given field of the ith\n    // vector to the given bit writer.\n\n    for (size_t i = 0; i < QIntC::to_size(nitems); ++i)\n    {\n\tw.writeBits(QIntC::to_ulonglong(vec.at(i).*field),\n                    QIntC::to_size(bits));\n    }\n    // The PDF spec says that each hint table starts at a byte\n    // boundary.  Each \"row\" actually must start on a byte boundary.\n    w.flush();\n}",
        "output": "0",
        "idx": 1501
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    DRW_TableEntry(const DRW_TableEntry& e) {\n        tType = e.tType;\n        handle = e.handle;\n        parentHandle = e.parentHandle;\n        name = e.name;\n        flags = e.flags;\n        numReactors = e.numReactors;\n        xDictFlag = e.xDictFlag;\n        curr = e.curr;\n        for (std::vector<DRW_Variant*>::const_iterator it=e.extData.begin(); it!=e.extData.end(); ++it){\n            extData.push_back(new DRW_Variant(*(*it)));\n        }\n    }",
        "output": "1",
        "idx": 3941
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fd_chr_close(struct CharDriverState *chr)\n\n{\n\n    FDCharDriver *s = chr->opaque;\n\n\n\n    if (s->fd_in_tag) {\n\n        g_source_remove(s->fd_in_tag);\n\n        s->fd_in_tag = 0;\n\n    }\n\n\n\n    if (s->fd_in) {\n\n        g_io_channel_unref(s->fd_in);\n\n    }\n\n    if (s->fd_out) {\n\n        g_io_channel_unref(s->fd_out);\n\n    }\n\n\n\n    g_free(s);\n\n    qemu_chr_be_event(chr, CHR_EVENT_CLOSED);\n\n}\n",
        "output": "1",
        "idx": 5641
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void* OwnedImpl::linearize(uint32_t size) {\n  RELEASE_ASSERT(size <= length(), \"Linearize size exceeds buffer size\");\n  if (slices_.empty()) {\n    return nullptr;\n  }\n  uint64_t linearized_size = 0;\n  uint64_t num_slices_to_linearize = 0;\n  for (const auto& slice : slices_) {\n    num_slices_to_linearize++;\n    linearized_size += slice->dataSize();\n    if (linearized_size >= size) {\n      break;\n    }\n  }\n  if (num_slices_to_linearize > 1) {\n    auto new_slice = OwnedSlice::create(linearized_size);\n    uint64_t bytes_copied = 0;\n    Slice::Reservation reservation = new_slice->reserve(linearized_size);\n    ASSERT(reservation.mem_ != nullptr);\n    ASSERT(reservation.len_ == linearized_size);\n    auto dest = static_cast<uint8_t*>(reservation.mem_);\n    do {\n      uint64_t data_size = slices_.front()->dataSize();\n      memcpy(dest, slices_.front()->data(), data_size);\n      bytes_copied += data_size;\n      dest += data_size;\n      slices_.pop_front();\n    } while (bytes_copied < linearized_size);\n    ASSERT(dest == static_cast<const uint8_t*>(reservation.mem_) + linearized_size);\n    new_slice->commit(reservation);\n    slices_.emplace_front(std::move(new_slice));\n  }\n  return slices_.front()->data();\n}",
        "output": "1",
        "idx": 5207
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static char *parse_tmp_evals(RCore *core, const char *str) {\n\tchar *res = NULL;\n\tRStrBuf *buf;\n\tchar *s = strdup (str);\n\tbuf = r_strbuf_new (\"\");\n\tint i, argc = r_str_split (s, ',');\n\tfor (i = 0; i < argc; i++) {\n\t\tchar *eq, *kv = (char *)r_str_word_get0 (s, i);\n\t\tif (!kv) {\n\t\t\tbreak;\n\t\t}\n\t\teq = strchr (kv, '=');\n\t\tif (eq) {\n\t\t\t*eq = 0;\n\t\t\tconst char *ov = r_config_get (core->config, kv);\n\t\t\tr_strbuf_appendf (buf, \"e %s=%s;\", kv, ov);\n\t\t\tr_config_set (core->config, kv, eq + 1);\n\t\t\t*eq = '=';\n\t\t} else {\n\t\t\teprintf (\"Missing '=' in e: expression (%s)\\n\", kv);\n\t\t}\n\t}\n\tres = r_strbuf_drain (buf);\n\tfree (s);\n\treturn res;\n}",
        "output": "0",
        "idx": 678
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AVEvalExpr * ff_parse(const char *s, const char * const *const_name,\n\n               double (**func1)(void *, double), const char **func1_name,\n\n               double (**func2)(void *, double, double), const char **func2_name,\n\n               const char **error){\n\n    Parser p;\n\n    AVEvalExpr * e;\n\n    char w[strlen(s) + 1], * wp = w;\n\n\n\n    while (*s)\n\n        if (!isspace(*s++)) *wp++ = s[-1];\n\n    *wp++ = 0;\n\n\n\n    p.stack_index=100;\n\n    p.s= w;\n\n    p.const_name = const_name;\n\n    p.func1      = func1;\n\n    p.func1_name = func1_name;\n\n    p.func2      = func2;\n\n    p.func2_name = func2_name;\n\n    p.error= error;\n\n\n\n    e = parse_expr(&p);\n\n    if (!verify_expr(e)) {\n\n        ff_eval_free(e);\n\n        return NULL;\n\n    }\n\n    return e;\n\n}\n",
        "output": "1",
        "idx": 1246
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ecryptfs_get_lower_file(struct dentry *dentry, struct inode *inode)\n{\n\tstruct ecryptfs_inode_info *inode_info;\n\tint count, rc = 0;\n\n\tinode_info = ecryptfs_inode_to_private(inode);\n\tmutex_lock(&inode_info->lower_file_mutex);\n\tcount = atomic_inc_return(&inode_info->lower_file_count);\n\tif (WARN_ON_ONCE(count < 1))\n\t\trc = -EINVAL;\n\telse if (count == 1) {\n\t\trc = ecryptfs_init_lower_file(dentry,\n\t\t\t\t\t      &inode_info->lower_file);\n\t\tif (rc)\n\t\t\tatomic_set(&inode_info->lower_file_count, 0);\n\t}\n\tmutex_unlock(&inode_info->lower_file_mutex);\n\treturn rc;\n}",
        "output": "0",
        "idx": 5106
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool bdrv_drain_one(BlockDriverState *bs)\n\n{\n\n    bool bs_busy;\n\n\n\n    bdrv_flush_io_queue(bs);\n\n    bdrv_start_throttled_reqs(bs);\n\n    bs_busy = bdrv_requests_pending(bs);\n\n    bs_busy |= aio_poll(bdrv_get_aio_context(bs), bs_busy);\n\n    return bs_busy;\n\n}\n",
        "output": "0",
        "idx": 2130
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int kvm_arch_set_tsc_khz(CPUState *cs)\n\n{\n\n    X86CPU *cpu = X86_CPU(cs);\n\n    CPUX86State *env = &cpu->env;\n\n    int r;\n\n\n\n    if (!env->tsc_khz) {\n\n        return 0;\n\n    }\n\n\n\n    r = kvm_check_extension(cs->kvm_state, KVM_CAP_TSC_CONTROL) ?\n\n        kvm_vcpu_ioctl(cs, KVM_SET_TSC_KHZ, env->tsc_khz) :\n\n        -ENOTSUP;\n\n    if (r < 0) {\n\n        /* When KVM_SET_TSC_KHZ fails, it's an error only if the current\n\n         * TSC frequency doesn't match the one we want.\n\n         */\n\n        int cur_freq = kvm_check_extension(cs->kvm_state, KVM_CAP_GET_TSC_KHZ) ?\n\n                       kvm_vcpu_ioctl(cs, KVM_GET_TSC_KHZ) :\n\n                       -ENOTSUP;\n\n        if (cur_freq <= 0 || cur_freq != env->tsc_khz) {\n\n            error_report(\"warning: TSC frequency mismatch between \"\n\n                         \"VM (%\" PRId64 \" kHz) and host (%d kHz), \"\n\n                         \"and TSC scaling unavailable\",\n\n                         env->tsc_khz, cur_freq);\n\n            return r;\n\n        }\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3145
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BlockAIOCB *dma_bdrv_io(\n\n    BlockDriverState *bs, QEMUSGList *sg, uint64_t sector_num,\n\n    DMAIOFunc *io_func, BlockCompletionFunc *cb,\n\n    void *opaque, DMADirection dir)\n\n{\n\n    DMAAIOCB *dbs = qemu_aio_get(&dma_aiocb_info, bs, cb, opaque);\n\n\n\n    trace_dma_bdrv_io(dbs, bs, sector_num, (dir == DMA_DIRECTION_TO_DEVICE));\n\n\n\n    dbs->acb = NULL;\n\n    dbs->bs = bs;\n\n    dbs->sg = sg;\n\n    dbs->sector_num = sector_num;\n\n    dbs->sg_cur_index = 0;\n\n    dbs->sg_cur_byte = 0;\n\n    dbs->dir = dir;\n\n    dbs->io_func = io_func;\n\n    dbs->bh = NULL;\n\n    qemu_iovec_init(&dbs->iov, sg->nsg);\n\n    dma_bdrv_cb(dbs, 0);\n\n    return &dbs->common;\n\n}\n",
        "output": "0",
        "idx": 306
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void mac_drv_clear_rxd(struct s_smc *smc, volatile struct s_smt_fp_rxd *rxd,\n\t\t       int frag_count)\n{\n\n\tstruct sk_buff *skb;\n\n\tPRINTK(\"entering mac_drv_clear_rxd\\n\");\n\n\tif (frag_count != 1)\t// This is not allowed to happen.\n\n\t\tprintk(\"fddi: Multi-fragment clear!\\n\");\n\n\tfor (; frag_count > 0; frag_count--) {\n\t\tskb = rxd->rxd_os.skb;\n\t\tif (skb != NULL) {\n\t\t\tskfddi_priv *bp = &smc->os;\n\t\t\tint MaxFrameSize = bp->MaxFrameSize;\n\n\t\t\tpci_unmap_single(&bp->pdev, rxd->rxd_os.dma_addr,\n\t\t\t\t\t MaxFrameSize, PCI_DMA_FROMDEVICE);\n\n\t\t\tdev_kfree_skb(skb);\n\t\t\trxd->rxd_os.skb = NULL;\n\t\t}\n\t\trxd = rxd->rxd_next;\t// Next RXD.\n\n\t}\n}\t\t\t\t// mac_drv_clear_rxd",
        "output": "0",
        "idx": 5362
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static abi_long do_sendto(int fd, abi_ulong msg, size_t len, int flags,\n\n                          abi_ulong target_addr, socklen_t addrlen)\n\n{\n\n    void *addr;\n\n    void *host_msg;\n\n    abi_long ret;\n\n\n\n    if (addrlen < 0 || addrlen > MAX_SOCK_ADDR)\n\n        return -TARGET_EINVAL;\n\n\n\n    host_msg = lock_user(VERIFY_READ, msg, len, 1);\n\n    if (!host_msg)\n\n        return -TARGET_EFAULT;\n\n    if (target_addr) {\n\n        addr = alloca(addrlen);\n\n        target_to_host_sockaddr(addr, target_addr, addrlen);\n\n        ret = get_errno(sendto(fd, host_msg, len, flags, addr, addrlen));\n\n    } else {\n\n        ret = get_errno(send(fd, host_msg, len, flags));\n\n    }\n\n    unlock_user(host_msg, msg, 0);\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 2268
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void io_watch_poll_finalize(GSource *source)\n\n{\n\n    IOWatchPoll *iwp = io_watch_poll_from_source(source);\n\n    if (iwp->src) {\n\n        g_source_destroy(iwp->src);\n\n        g_source_unref(iwp->src);\n\n        iwp->src = NULL;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1209
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int\tspecial(DviContext *dvi, int opcode)\n{\n\tchar\t*s;\n\tInt32\targ;\n\t\n\targ = dugetn(dvi, opcode - DVI_XXX1 + 1);\n\ts = mdvi_malloc(arg + 1);\n\tdread(dvi, s, arg);\n\ts[arg] = 0;\n\tmdvi_do_special(dvi, s);\n\tSHOWCMD((dvi, \"XXXX\", opcode - DVI_XXX1 + 1,\n\t\t\"[%s]\", s));\n\tmdvi_free(s);\n\treturn 0;\n}",
        "output": "1",
        "idx": 1575
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t dchip_read(void *opaque, target_phys_addr_t addr, unsigned size)\n\n{\n\n    /* Skip this.  It's all related to DRAM timing and setup.  */\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1033
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_qemu_strtoul_full_correct(void)\n\n{\n\n    const char *str = \"123\";\n\n    unsigned long res = 999;\n\n    int err;\n\n\n\n    err = qemu_strtoul(str, NULL, 0, &res);\n\n\n\n    g_assert_cmpint(err, ==, 0);\n\n    g_assert_cmpint(res, ==, 123);\n\n}\n",
        "output": "0",
        "idx": 5500
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gst_aac_parse_adts_get_frame_len (const guint8 * data)\n{\n  return ((data[3] & 0x03) << 11) | (data[4] << 3) | ((data[5] & 0xe0) >> 5);\n}",
        "output": "0",
        "idx": 1040
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int chr_can_read(void *opaque)\n\n{\n\n    int can_read;\n\n    SCLPConsole *scon = opaque;\n\n\n\n    can_read = SIZE_BUFFER_VT220 - scon->iov_data_len;\n\n\n\n    return can_read;\n\n}\n",
        "output": "1",
        "idx": 2796
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int outwrite(const gs_memory_t *mem, const char *str, int len)\n{\n    int code;\n    gs_lib_ctx_t *pio = mem->gs_lib_ctx;\n    gs_lib_ctx_core_t *core = pio->core;\n\n    if (len == 0)\n        return 0;\n    if (core->stdout_is_redirected) {\n        if (core->stdout_to_stderr)\n            return errwrite(mem, str, len);\n        code = gp_fwrite(str, 1, len, core->fstdout2);\n        gp_fflush(core->fstdout2);\n    } else if (core->stdout_fn) {\n        return (*core->stdout_fn)(core->std_caller_handle, str, len);\n    } else {\n        code = fwrite(str, 1, len, core->fstdout);\n        fflush(core->fstdout);\n    }\n    return code;\n}",
        "output": "0",
        "idx": 639
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_system_guest_panicked(GuestPanicInformation *info)\n{\n    if (current_cpu) {\n        current_cpu->crash_occurred = true;\n    }\n    qapi_event_send_guest_panicked(GUEST_PANIC_ACTION_PAUSE,\n                                   !!info, info, &error_abort);\n    vm_stop(RUN_STATE_GUEST_PANICKED);\n    if (!no_shutdown) {\n        qapi_event_send_guest_panicked(GUEST_PANIC_ACTION_POWEROFF,\n                                       !!info, info, &error_abort);\n        qemu_system_shutdown_request();\n    }\n    if (info) {\n        if (info->type == GUEST_PANIC_INFORMATION_KIND_HYPER_V) {\n            qemu_log_mask(LOG_GUEST_ERROR, \"HV crash parameters: (%#\"PRIx64\n                          \" %#\"PRIx64\" %#\"PRIx64\" %#\"PRIx64\" %#\"PRIx64\")\\n\",\n                          info->u.hyper_v.data->arg1,\n                          info->u.hyper_v.data->arg2,\n                          info->u.hyper_v.data->arg3,\n                          info->u.hyper_v.data->arg4,\n                          info->u.hyper_v.data->arg5);\n        }\n        qapi_free_GuestPanicInformation(info);\n    }\n}",
        "output": "1",
        "idx": 3883
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_asn1_extract_der_octet (asn1_node node, const unsigned char *der,\n\t\t\t int der_len)\n{\n  int len2, len3;\n  int counter2, counter_end;\n\n  len2 = asn1_get_length_der (der, der_len, &len3);\n  if (len2 < -1)\n    return ASN1_DER_ERROR;\n\n  counter2 = len3 + 1;\n\n  if (len2 == -1)\n    counter_end = der_len - 2;\n  else\n    counter_end = der_len;\n\n  while (counter2 < counter_end)\n    {\n      len2 = asn1_get_length_der (der + counter2, der_len - counter2, &len3);\n\n      if (len2 < -1)\n\treturn ASN1_DER_ERROR;\n\n      if (len2 > 0)\n\t{\n\t  _asn1_append_value (node, der + counter2 + len3, len2);\n\t}\n      else\n\t{\t\t\t/* indefinite */\n\n\t  len2 =\n\t    _asn1_extract_der_octet (node, der + counter2 + len3,\n\t\t\t\t     der_len - counter2 - len3);\n\t  if (len2 < 0)\n\t    return len2;\n\t}\n\n      counter2 += len2 + len3 + 1;\n    }\n\n  return ASN1_SUCCESS;\n}",
        "output": "1",
        "idx": 5323
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char *get_boot_devices_list(uint32_t *size)\n\n{\n\n    FWBootEntry *i;\n\n    uint32_t total = 0;\n\n    char *list = NULL;\n\n\n\n    QTAILQ_FOREACH(i, &fw_boot_order, link) {\n\n        char *devpath = NULL, *bootpath;\n\n        int len;\n\n\n\n        if (i->dev) {\n\n            devpath = qdev_get_fw_dev_path(i->dev);\n\n            assert(devpath);\n\n        }\n\n\n\n        if (i->suffix && devpath) {\n\n            bootpath = qemu_malloc(strlen(devpath) + strlen(i->suffix) + 1);\n\n            sprintf(bootpath, \"%s%s\", devpath, i->suffix);\n\n            qemu_free(devpath);\n\n        } else if (devpath) {\n\n            bootpath = devpath;\n\n        } else {\n\n            bootpath = strdup(i->suffix);\n\n            assert(bootpath);\n\n        }\n\n\n\n        if (total) {\n\n            list[total-1] = '\\n';\n\n        }\n\n        len = strlen(bootpath) + 1;\n\n        list = qemu_realloc(list, total + len);\n\n        memcpy(&list[total], bootpath, len);\n\n        total += len;\n\n        qemu_free(bootpath);\n\n    }\n\n\n\n    *size = total;\n\n\n\n    return list;\n\n}\n",
        "output": "0",
        "idx": 1451
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ehci_async_complete_packet(USBPort *port, USBPacket *packet)\n\n{\n\n    EHCIQueue *q;\n\n    EHCIState *s = port->opaque;\n\n    uint32_t portsc = s->portsc[port->index];\n\n\n\n    if (portsc & PORTSC_POWNER) {\n\n        USBPort *companion = s->companion_ports[port->index];\n\n        companion->ops->complete(companion, packet);\n\n        return;\n\n    }\n\n\n\n    q = container_of(packet, EHCIQueue, packet);\n\n    trace_usb_ehci_queue_action(q, \"wakeup\");\n\n    assert(q->async == EHCI_ASYNC_INFLIGHT);\n\n    q->async = EHCI_ASYNC_FINISHED;\n\n    q->usb_status = packet->len;\n\n}\n",
        "output": "1",
        "idx": 3961
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void peripheral_device_del_completion(ReadLineState *rs,\n\n                                             const char *str, size_t len)\n\n{\n\n    Object *peripheral;\n\n    GSList *list = NULL, *item;\n\n\n\n    peripheral = object_resolve_path(\"/machine/peripheral/\", NULL);\n\n    if (peripheral == NULL) {\n\n        return;\n\n    }\n\n\n\n    object_child_foreach(peripheral, qdev_build_hotpluggable_device_list,\n\n                         &list);\n\n\n\n    for (item = list; item; item = g_slist_next(item)) {\n\n        DeviceState *dev = item->data;\n\n\n\n        if (dev->id && !strncmp(str, dev->id, len)) {\n\n            readline_add_completion(rs, dev->id);\n\n        }\n\n    }\n\n\n\n    g_slist_free(list);\n\n}\n",
        "output": "1",
        "idx": 762
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Item_name_const::Item_name_const(THD *thd, Item *name_arg, Item *val):\n  Item(thd), value_item(val), name_item(name_arg)\n{\n  StringBuffer<128> name_buffer;\n  String *name_str;\n  Item::maybe_null= TRUE;\n  valid_args= true;\n  if (!name_item->basic_const_item() ||\n      !(name_str= name_item->val_str(&name_buffer))) // Can't have a NULL name\n    goto err;\n  set_name(thd, name_str->ptr(), name_str->length(), name_str->charset());\n\n  if (value_item->basic_const_item())\n    return; // ok\n\n  if (value_item->type() == FUNC_ITEM)\n  {\n    Item_func *value_func= (Item_func *) value_item;\n    if (value_func->functype() != Item_func::COLLATE_FUNC &&\n        value_func->functype() != Item_func::NEG_FUNC)\n      goto err;\n\n    if (value_func->key_item()->basic_const_item())\n      return; // ok\n  }\n\nerr:\n  valid_args= false;\n  my_error(ER_WRONG_ARGUMENTS, MYF(0), \"NAME_CONST\");\n}",
        "output": "0",
        "idx": 4454
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int RGWGetACLs::verify_permission()\n{\n  bool perm;\n  if (!s->object.empty()) {\n    auto iam_action = s->object.instance.empty() ?\n      rgw::IAM::s3GetObjectAcl :\n      rgw::IAM::s3GetObjectVersionAcl;\n\n    if (s->iam_policy && s->iam_policy->has_partial_conditional(S3_EXISTING_OBJTAG)){\n      rgw_obj obj = rgw_obj(s->bucket, s->object);\n      rgw_iam_add_existing_objtags(store, s, obj, iam_action);\n    }\n\n    perm = verify_object_permission(s, iam_action);\n  } else {\n    perm = verify_bucket_permission(s, rgw::IAM::s3GetBucketAcl);\n  }\n  if (!perm)\n    return -EACCES;\n\n  return 0;\n}",
        "output": "0",
        "idx": 995
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GuestMemoryBlockInfo *qmp_guest_get_memory_block_info(Error **errp)\n\n{\n\n    Error *local_err = NULL;\n\n    char *dirpath;\n\n    int dirfd;\n\n    char *buf;\n\n    GuestMemoryBlockInfo *info;\n\n\n\n    dirpath = g_strdup_printf(\"/sys/devices/system/memory/\");\n\n    dirfd = open(dirpath, O_RDONLY | O_DIRECTORY);\n\n    if (dirfd == -1) {\n\n        error_setg_errno(errp, errno, \"open(\\\"%s\\\")\", dirpath);\n\n        g_free(dirpath);\n\n        return NULL;\n\n    }\n\n    g_free(dirpath);\n\n\n\n    buf = g_malloc0(20);\n\n    ga_read_sysfs_file(dirfd, \"block_size_bytes\", buf, 20, &local_err);\n\n\n    if (local_err) {\n\n        g_free(buf);\n\n        error_propagate(errp, local_err);\n\n        return NULL;\n\n    }\n\n\n\n    info = g_new0(GuestMemoryBlockInfo, 1);\n\n    info->size = strtol(buf, NULL, 16); /* the unit is bytes */\n\n\n\n    g_free(buf);\n\n\n\n    return info;\n\n}",
        "output": "1",
        "idx": 3593
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "delete_port(struct seq_oss_devinfo *dp)\n{\n\tif (dp->port < 0)\n\t\treturn 0;\n\n\tdebug_printk((\"delete_port %i\\n\", dp->port));\n\treturn snd_seq_event_port_detach(dp->cseq, dp->port);\n}",
        "output": "1",
        "idx": 5167
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "unsigned int s390_cpu_set_state(uint8_t cpu_state, S390CPU *cpu)\n\n {\n\n    trace_cpu_set_state(CPU(cpu)->cpu_index, cpu_state);\n\n\n\n    switch (cpu_state) {\n\n    case CPU_STATE_STOPPED:\n\n    case CPU_STATE_CHECK_STOP:\n\n        /* halt the cpu for common infrastructure */\n\n        s390_cpu_halt(cpu);\n\n        break;\n\n    case CPU_STATE_OPERATING:\n\n    case CPU_STATE_LOAD:\n\n        /* unhalt the cpu for common infrastructure */\n\n        s390_cpu_unhalt(cpu);\n\n        break;\n\n    default:\n\n        error_report(\"Requested CPU state is not a valid S390 CPU state: %u\",\n\n                     cpu_state);\n\n        exit(1);\n\n\n\n\n\n    cpu->env.cpu_state = cpu_state;\n\n\n\n    return s390_count_running_cpus();\n",
        "output": "1",
        "idx": 2685
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int net_socket_mcast_init(NetClientState *peer,\n\n                                 const char *model,\n\n                                 const char *name,\n\n                                 const char *host_str,\n\n                                 const char *localaddr_str)\n\n{\n\n    NetSocketState *s;\n\n    int fd;\n\n    struct sockaddr_in saddr;\n\n    struct in_addr localaddr, *param_localaddr;\n\n\n\n    if (parse_host_port(&saddr, host_str) < 0)\n\n        return -1;\n\n\n\n    if (localaddr_str != NULL) {\n\n        if (inet_aton(localaddr_str, &localaddr) == 0)\n\n            return -1;\n\n        param_localaddr = &localaddr;\n\n    } else {\n\n        param_localaddr = NULL;\n\n    }\n\n\n\n    fd = net_socket_mcast_create(&saddr, param_localaddr);\n\n    if (fd < 0)\n\n        return -1;\n\n\n\n    s = net_socket_fd_init(peer, model, name, fd, 0);\n\n    if (!s)\n\n        return -1;\n\n\n\n    s->dgram_dst = saddr;\n\n\n\n    snprintf(s->nc.info_str, sizeof(s->nc.info_str),\n\n             \"socket: mcast=%s:%d\",\n\n             inet_ntoa(saddr.sin_addr), ntohs(saddr.sin_port));\n\n    return 0;\n\n\n\n}\n",
        "output": "1",
        "idx": 2025
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_mpegts_parse_close(MpegTSContext *ts)\n\n{\n\n    int i;\n\n\n\n    for(i=0;i<NB_PID_MAX;i++)\n\n        av_free(ts->pids[i]);\n\n    av_free(ts);\n\n}\n",
        "output": "1",
        "idx": 2681
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int key_exchange_expected(SSL *s)\n{\n    long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;\n\n    /*\n     * Can't skip server key exchange if this is an ephemeral\n     * ciphersuite or for SRP\n     */\n    if (alg_k & (SSL_kDHE | SSL_kECDHE | SSL_kDHEPSK | SSL_kECDHEPSK\n                 | SSL_kSRP)) {\n        return 1;\n    }\n\n    return 0;\n}",
        "output": "0",
        "idx": 3169
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_vorbis_ready_floor1_list(vorbis_floor1_entry * list, int values)\n\n{\n\n    int i;\n\n    list[0].sort = 0;\n\n    list[1].sort = 1;\n\n    for (i = 2; i < values; i++) {\n\n        int j;\n\n        list[i].low  = 0;\n\n        list[i].high = 1;\n\n        list[i].sort = i;\n\n        for (j = 2; j < i; j++) {\n\n            int tmp = list[j].x;\n\n            if (tmp < list[i].x) {\n\n                if (tmp > list[list[i].low].x)\n\n                    list[i].low  =  j;\n\n            } else {\n\n                if (tmp < list[list[i].high].x)\n\n                    list[i].high = j;\n\n            }\n\n        }\n\n    }\n\n    for (i = 0; i < values - 1; i++) {\n\n        int j;\n\n        for (j = i + 1; j < values; j++) {\n\n            if (list[list[i].sort].x > list[list[j].sort].x) {\n\n                int tmp = list[i].sort;\n\n                list[i].sort = list[j].sort;\n\n                list[j].sort = tmp;\n\n            }\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 6123
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint16_t mesg_id (void) {\n\tstatic uint16_t id = 0;\n\n\tif (!id) {\n\t\tsrandom (time (NULL));\n\t\tid = random ();\n\t}\n\tid++;\n\n\tif (T.debug > 4)\n\t\tsyslog (LOG_DEBUG, \"mesg_id() = %d\", id);\n\treturn id;\n}",
        "output": "1",
        "idx": 2854
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void clear_evtchn(evtchn_port_t port)\n{\n\tevtchn_ops->clear_pending(port);\n}",
        "output": "0",
        "idx": 2705
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_h264_remove_all_refs(H264Context *h)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < 16; i++) {\n\n        remove_long(h, i, 0);\n\n    }\n\n    assert(h->long_ref_count == 0);\n\n\n\n    ff_h264_unref_picture(h, &h->last_pic_for_ec);\n\n    if (h->short_ref_count)\n\n        ff_h264_ref_picture(h, &h->last_pic_for_ec, h->short_ref[0]);\n\n\n\n    for (i = 0; i < h->short_ref_count; i++) {\n\n        unreference_pic(h, h->short_ref[i], 0);\n\n        h->short_ref[i] = NULL;\n\n    }\n\n    h->short_ref_count = 0;\n\n\n\n    memset(h->default_ref_list, 0, sizeof(h->default_ref_list));\n\n    memset(h->ref_list, 0, sizeof(h->ref_list));\n\n}\n",
        "output": "0",
        "idx": 3891
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "OPJ_UINT32 opj_j2k_get_SQcd_SQcc_size ( opj_j2k_t *p_j2k,\n                                                                        OPJ_UINT32 p_tile_no,\n                                                                        OPJ_UINT32 p_comp_no )\n{\n        OPJ_UINT32 l_num_bands;\n\n        opj_cp_t *l_cp = 00;\n        opj_tcp_t *l_tcp = 00;\n        opj_tccp_t *l_tccp = 00;\n\n        /* preconditions */\n        assert(p_j2k != 00);\n\n        l_cp = &(p_j2k->m_cp);\n        l_tcp = &l_cp->tcps[p_tile_no];\n        l_tccp = &l_tcp->tccps[p_comp_no];\n\n        /* preconditions again */\n        assert(p_tile_no < l_cp->tw * l_cp->th);\n        assert(p_comp_no < p_j2k->m_private_image->numcomps);\n\n        l_num_bands = (l_tccp->qntsty == J2K_CCP_QNTSTY_SIQNT) ? 1 : (l_tccp->numresolutions * 3 - 2);\n\n        if (l_tccp->qntsty == J2K_CCP_QNTSTY_NOQNT)  {\n                return 1 + l_num_bands;\n        }\n        else {\n                return 1 + 2*l_num_bands;\n        }\n}",
        "output": "0",
        "idx": 759
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "psutil_ppid_map(PyObject *self, PyObject *args) {\n    PyObject *py_pid = NULL;\n    PyObject *py_ppid = NULL;\n    PyObject *py_retdict = PyDict_New();\n    HANDLE handle = NULL;\n    PROCESSENTRY32 pe = {0};\n    pe.dwSize = sizeof(PROCESSENTRY32);\n\n    if (py_retdict == NULL)\n        return NULL;\n    handle = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (handle == INVALID_HANDLE_VALUE) {\n        PyErr_SetFromWindowsErr(0);\n        Py_DECREF(py_retdict);\n        return NULL;\n    }\n\n    if (Process32First(handle, &pe)) {\n        do {\n            py_pid = Py_BuildValue(\"I\", pe.th32ProcessID);\n            if (py_pid == NULL)\n                goto error;\n            py_ppid = Py_BuildValue(\"I\", pe.th32ParentProcessID);\n            if (py_ppid == NULL)\n                goto error;\n            if (PyDict_SetItem(py_retdict, py_pid, py_ppid))\n                goto error;\n            Py_DECREF(py_pid);\n            Py_DECREF(py_ppid);\n        } while (Process32Next(handle, &pe));\n    }\n\n    CloseHandle(handle);\n    return py_retdict;\n\nerror:\n    Py_XDECREF(py_pid);\n    Py_XDECREF(py_ppid);\n    Py_DECREF(py_retdict);\n    CloseHandle(handle);\n    return NULL;\n}",
        "output": "1",
        "idx": 1153
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int perf_event_task_enable(void)\n{\n\tstruct perf_event *event;\n\n\tmutex_lock(&current->perf_event_mutex);\n\tlist_for_each_entry(event, &current->perf_event_list, owner_entry)\n\t\tperf_event_for_each_child(event, perf_event_enable);\n\tmutex_unlock(&current->perf_event_mutex);\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 643
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  For_Obj Parser::parse_for_directive()\n  {\n    stack.push_back(Scope::Control);\n    ParserState for_source_position = pstate;\n    bool root = block_stack.back()->is_root();\n    lex_variable();\n    std::string var(Util::normalize_underscores(lexed));\n    if (!lex< kwd_from >()) error(\"expected 'from' keyword in @for directive\");\n    Expression_Obj lower_bound = parse_expression();\n    bool inclusive = false;\n    if (lex< kwd_through >()) inclusive = true;\n    else if (lex< kwd_to >()) inclusive = false;\n    else                  error(\"expected 'through' or 'to' keyword in @for directive\");\n    Expression_Obj upper_bound = parse_expression();\n    Block_Obj body = parse_block(root);\n    stack.pop_back();\n    return SASS_MEMORY_NEW(For, for_source_position, var, lower_bound, upper_bound, body, inclusive);\n  }",
        "output": "0",
        "idx": 1241
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_thread_await_progress(ThreadFrame *f, int n, int field)\n\n{\n\n    PerThreadContext *p;\n\n    atomic_int *progress = f->progress ? (atomic_int*)f->progress->data : NULL;\n\n\n\n    if (!progress ||\n\n        atomic_load_explicit(&progress[field], memory_order_acquire) >= n)\n\n        return;\n\n\n\n    p = f->owner[field]->internal->thread_ctx;\n\n\n\n    pthread_mutex_lock(&p->progress_mutex);\n\n    if (f->owner[field]->debug&FF_DEBUG_THREADS)\n\n        av_log(f->owner[field], AV_LOG_DEBUG,\n\n               \"thread awaiting %d field %d from %p\\n\", n, field, progress);\n\n    while (atomic_load_explicit(&progress[field], memory_order_relaxed) < n)\n\n        pthread_cond_wait(&p->progress_cond, &p->progress_mutex);\n\n    pthread_mutex_unlock(&p->progress_mutex);\n\n}\n",
        "output": "1",
        "idx": 6092
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void savecursor(VTermState *state, int save)\n{\n  if(save) {\n    state->saved.pos = state->pos;\n    state->saved.mode.cursor_visible = state->mode.cursor_visible;\n    state->saved.mode.cursor_blink   = state->mode.cursor_blink;\n    state->saved.mode.cursor_shape   = state->mode.cursor_shape;\n\n    vterm_state_savepen(state, 1);\n  }\n  else {\n    VTermPos oldpos = state->pos;\n\n    state->pos = state->saved.pos;\n\n    settermprop_bool(state, VTERM_PROP_CURSORVISIBLE, state->saved.mode.cursor_visible);\n    settermprop_bool(state, VTERM_PROP_CURSORBLINK,   state->saved.mode.cursor_blink);\n    settermprop_int (state, VTERM_PROP_CURSORSHAPE,   state->saved.mode.cursor_shape);\n\n    vterm_state_savepen(state, 0);\n\n    updatecursor(state, &oldpos, 1);\n  }\n}",
        "output": "0",
        "idx": 401
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_net_add_queue(VirtIONet *n, int index)\n{\n    VirtIODevice *vdev = VIRTIO_DEVICE(n);\n\n    n->vqs[index].rx_vq = virtio_add_queue(vdev, n->net_conf.rx_queue_size,\n                                           virtio_net_handle_rx);\n\n    if (n->net_conf.tx && !strcmp(n->net_conf.tx, \"timer\")) {\n        n->vqs[index].tx_vq =\n            virtio_add_queue(vdev, n->net_conf.tx_queue_size,\n                             virtio_net_handle_tx_timer);\n        n->vqs[index].tx_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL,\n                                              virtio_net_tx_timer,\n                                              &n->vqs[index]);\n    } else {\n        n->vqs[index].tx_vq =\n            virtio_add_queue(vdev, n->net_conf.tx_queue_size,\n                             virtio_net_handle_tx_bh);\n        n->vqs[index].tx_bh = qemu_bh_new(virtio_net_tx_bh, &n->vqs[index]);\n    }\n\n    n->vqs[index].tx_waiting = 0;\n    n->vqs[index].n = n;\n}",
        "output": "0",
        "idx": 227
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void json_start_object(QJSON *json, const char *name)\n\n{\n\n    json_emit_element(json, name);\n\n    qstring_append(json->str, \"{ \");\n\n    json->omit_comma = true;\n\n}\n",
        "output": "0",
        "idx": 2678
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": " */\nxmlNodePtr\nxmlXPathNextFollowing(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {\n    if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);\n    if (cur != NULL && cur->children != NULL)\n        return cur->children ;\n    if (cur == NULL) cur = ctxt->context->node;\n    if (cur == NULL) return(NULL) ; /* ERROR */\n    if (cur->next != NULL) return(cur->next) ;\n    do {\n        cur = cur->parent;\n        if (cur == NULL) break;\n        if (cur == (xmlNodePtr) ctxt->context->doc) return(NULL);\n        if (cur->next != NULL) return(cur->next);\n    } while (cur != NULL);",
        "output": "1",
        "idx": 1734
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t qvirtio_pci_config_readl(QVirtioDevice *d, uint64_t off)\n\n{\n\n    QVirtioPCIDevice *dev = (QVirtioPCIDevice *)d;\n\n    uint32_t value;\n\n\n\n    value = qpci_io_readl(dev->pdev, CONFIG_BASE(dev) + off);\n\n    if (qvirtio_is_big_endian(d)) {\n\n        value = bswap32(value);\n\n    }\n\n    return value;\n\n}\n",
        "output": "1",
        "idx": 5424
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void bdrv_debug_event(BlockDriverState *bs, BlkDebugEvent event)\n\n{\n\n    if (!bs || !bs->drv || !bs->drv->bdrv_debug_event) {\n\n        return;\n\n    }\n\n\n\n    bs->drv->bdrv_debug_event(bs, event);\n\n}\n",
        "output": "0",
        "idx": 4879
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void perf_lifecycle(void)\n\n{\n\n    Coroutine *coroutine;\n\n    unsigned int i, max;\n\n    double duration;\n\n\n\n    max = 1000000;\n\n\n\n    g_test_timer_start();\n\n    for (i = 0; i < max; i++) {\n\n        coroutine = qemu_coroutine_create(empty_coroutine);\n\n        qemu_coroutine_enter(coroutine, NULL);\n\n    }\n\n    duration = g_test_timer_elapsed();\n\n\n\n    g_test_message(\"Lifecycle %u iterations: %f s\\n\", max, duration);\n\n}\n",
        "output": "1",
        "idx": 2017
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int check_intra_pred4x4_mode_emuedge(int mode, int mb_x, int mb_y, int *copy_buf)\n\n{\n\n    switch (mode) {\n\n    case VERT_PRED:\n\n        if (!mb_x && mb_y) {\n\n            *copy_buf = 1;\n\n            return mode;\n\n        }\n\n        /* fall-through */\n\n    case DIAG_DOWN_LEFT_PRED:\n\n    case VERT_LEFT_PRED:\n\n        return !mb_y ? DC_127_PRED : mode;\n\n    case HOR_PRED:\n\n        if (!mb_y) {\n\n            *copy_buf = 1;\n\n            return mode;\n\n        }\n\n        /* fall-through */\n\n    case HOR_UP_PRED:\n\n        return !mb_x ? DC_129_PRED : mode;\n\n    case TM_VP8_PRED:\n\n        return check_tm_pred4x4_mode(mode, mb_x, mb_y);\n\n    case DC_PRED: /* 4x4 DC doesn't use the same \"H.264-style\" exceptions\n\n                   * as 16x16/8x8 DC */\n\n    case DIAG_DOWN_RIGHT_PRED:\n\n    case VERT_RIGHT_PRED:\n\n    case HOR_DOWN_PRED:\n\n        if (!mb_y || !mb_x)\n\n            *copy_buf = 1;\n\n        return mode;\n\n    }\n\n    return mode;\n\n}\n",
        "output": "1",
        "idx": 3938
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int csrhci_write(struct CharDriverState *chr,\n\n                const uint8_t *buf, int len)\n\n{\n\n    struct csrhci_s *s = (struct csrhci_s *) chr->opaque;\n\n    int plen = s->in_len;\n\n\n\n    if (!s->enable)\n\n        return 0;\n\n\n\n    s->in_len += len;\n\n    memcpy(s->inpkt + plen, buf, len);\n\n\n\n    while (1) {\n\n        if (s->in_len >= 2 && plen < 2)\n\n            s->in_hdr = csrhci_header_len(s->inpkt) + 1;\n\n\n\n        if (s->in_len >= s->in_hdr && plen < s->in_hdr)\n\n            s->in_data = csrhci_data_len(s->inpkt) + s->in_hdr;\n\n\n\n        if (s->in_len >= s->in_data) {\n\n            csrhci_in_packet(s, s->inpkt);\n\n\n\n            memmove(s->inpkt, s->inpkt + s->in_len, s->in_len - s->in_data);\n\n            s->in_len -= s->in_data;\n\n            s->in_hdr = INT_MAX;\n\n            s->in_data = INT_MAX;\n\n            plen = 0;\n\n        } else\n\n            break;\n\n    }\n\n\n\n    return len;\n\n}\n",
        "output": "1",
        "idx": 2852
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int find_sys_file(struct mschm_decompressor_p *self,\n\t\t\t struct mschmd_sec_mscompressed *sec,\n\t\t\t struct mschmd_file **f_ptr, const char *name)\n{\n    struct mspack_system *sys = self->system;\n    struct mschmd_file result;\n\n    /* already loaded */\n    if (*f_ptr) return MSPACK_ERR_OK;\n\n    /* try using fast_find to find the file - return DATAFORMAT error if\n     * it fails, or successfully doesn't find the file */\n    if (chmd_fast_find((struct mschm_decompressor *) self, sec->base.chm,\n\t\t       name, &result, (int)sizeof(result)) || !result.section)\n    {\n\treturn MSPACK_ERR_DATAFORMAT;\n    }\n\n    if (!(*f_ptr = (struct mschmd_file *) sys->alloc(sys, sizeof(result)))) {\n\treturn MSPACK_ERR_NOMEMORY;\n    }\n\n    /* copy result */\n    *(*f_ptr) = result;\n    (*f_ptr)->filename = (char *) name;\n\n    /* link file into sysfiles list */\n    (*f_ptr)->next = sec->base.chm->sysfiles;\n    sec->base.chm->sysfiles = *f_ptr;\n    return MSPACK_ERR_OK;\n}",
        "output": "0",
        "idx": 3809
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int gss_iakerbmechglue_init(void)\n{\n    struct gss_mech_config mech_iakerb;\n    struct gss_config iakerb_mechanism = krb5_mechanism;\n\n    /* IAKERB mechanism mirrors krb5, but with different context SPIs */\n    iakerb_mechanism.gss_accept_sec_context = iakerb_gss_accept_sec_context;\n    iakerb_mechanism.gss_init_sec_context   = iakerb_gss_init_sec_context;\n    iakerb_mechanism.gss_delete_sec_context = iakerb_gss_delete_sec_context;\n    iakerb_mechanism.gss_acquire_cred       = iakerb_gss_acquire_cred;\n    iakerb_mechanism.gssspi_acquire_cred_with_password\n                                    = iakerb_gss_acquire_cred_with_password;\n\n    memset(&mech_iakerb, 0, sizeof(mech_iakerb));\n    mech_iakerb.mech = &iakerb_mechanism;\n\n    mech_iakerb.mechNameStr = \"iakerb\";\n    mech_iakerb.mech_type = (gss_OID)gss_mech_iakerb;\n    gssint_register_mechinfo(&mech_iakerb);\n\n    return 0;\n}",
        "output": "1",
        "idx": 6191
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "sofcantsendmore(struct socket *so)\n\n{\n\n\tif ((so->so_state & SS_NOFDREF) == 0) {\n\n            shutdown(so->s,1);           /* send FIN to fhost */\n\n            if (global_readfds) {\n\n                FD_CLR(so->s,global_readfds);\n\n            }\n\n            if (global_xfds) {\n\n                FD_CLR(so->s,global_xfds);\n\n            }\n\n\t}\n\n\tso->so_state &= ~(SS_ISFCONNECTING);\n\n\tif (so->so_state & SS_FCANTRCVMORE) {\n\n\t   so->so_state &= SS_PERSISTENT_MASK;\n\n\t   so->so_state |= SS_NOFDREF; /* as above */\n\n\t} else {\n\n\t   so->so_state |= SS_FCANTSENDMORE;\n\n\t}\n\n}\n",
        "output": "0",
        "idx": 1079
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "target_ulong helper_sub_suov(CPUTriCoreState *env, target_ulong r1,\n\n                             target_ulong r2)\n\n{\n\n    int64_t t1 = extract64(r1, 0, 32);\n\n    int64_t t2 = extract64(r2, 0, 32);\n\n    int64_t result = t1 - t2;\n\n    return suov32(env, result);\n\n}\n",
        "output": "1",
        "idx": 5715
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "utfc_char2bytes(int off, char_u *buf)\n{\n    int\t\tlen;\n    int\t\ti;\n\n    len = utf_char2bytes(ScreenLinesUC[off], buf);\n    for (i = 0; i < Screen_mco; ++i)\n    {\n\tif (ScreenLinesC[i][off] == 0)\n\t    break;\n\tlen += utf_char2bytes(ScreenLinesC[i][off], buf + len);\n    }\n    return len;\n}",
        "output": "0",
        "idx": 115
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sctp_cmd_setup_t2(sctp_cmd_seq_t *cmds,\n\t\t\t      struct sctp_association *asoc,\n\t\t\t      struct sctp_chunk *chunk)\n{\n\tstruct sctp_transport *t;\n\n\tif (chunk->transport)\n\t\tt = chunk->transport;\n\telse {\n\t\tt = sctp_assoc_choose_alter_transport(asoc,\n\t\t\t\t\t      asoc->shutdown_last_sent_to);\n\t\tchunk->transport = t;\n\t}\n\tasoc->shutdown_last_sent_to = t;\n\tasoc->timeouts[SCTP_EVENT_TIMEOUT_T2_SHUTDOWN] = t->rto;\n}",
        "output": "0",
        "idx": 4102
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t flush_buf(VirtIOSerialPort *port,\n                         const uint8_t *buf, ssize_t len)\n{\n    VirtConsole *vcon = VIRTIO_CONSOLE(port);\n    ssize_t ret;\n    if (!vcon->chr) {\n        /* If there's no backend, we can just say we consumed all data. */\n        return len;\n    }\n    ret = qemu_chr_fe_write(vcon->chr, buf, len);\n    trace_virtio_console_flush_buf(port->id, len, ret);\n    if (ret < len) {\n        VirtIOSerialPortClass *k = VIRTIO_SERIAL_PORT_GET_CLASS(port);\n        /*\n         * Ideally we'd get a better error code than just -1, but\n         * that's what the chardev interface gives us right now.  If\n         * we had a finer-grained message, like -EPIPE, we could close\n         * this connection.\n        if (ret < 0)\n            ret = 0;\n        if (!k->is_console) {\n            virtio_serial_throttle_port(port, true);\n            if (!vcon->watch) {\n                vcon->watch = qemu_chr_fe_add_watch(vcon->chr,\n                                                    G_IO_OUT|G_IO_HUP,\n                                                    chr_write_unblocked, vcon);\n            }\n        }\n    }\n    return ret;\n}",
        "output": "1",
        "idx": 5692
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cirrus_mem_writeb_mode4and5_8bpp(CirrusVGAState * s,\n\t\t\t\t\t     unsigned mode,\n\t\t\t\t\t     unsigned offset,\n\t\t\t\t\t     uint32_t mem_value)\n{\n    int x;\n    unsigned val = mem_value;\n    uint8_t *dst;\n\n    dst = s->vram_ptr + offset;\n    for (x = 0; x < 8; x++) {\n\tif (val & 0x80) {\n\t    *dst = s->cirrus_shadow_gr1;\n\t} else if (mode == 5) {\n\t    *dst = s->cirrus_shadow_gr0;\n\t}\n\tval <<= 1;\n\tdst++;\n    }\n    cpu_physical_memory_set_dirty(s->vram_offset + offset);\n    cpu_physical_memory_set_dirty(s->vram_offset + offset + 7);\n}",
        "output": "1",
        "idx": 3934
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    bool is_resized() const {\n      return _is_resized;\n    }",
        "output": "0",
        "idx": 4196
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  ~RGWGetBucketLocation() override {}",
        "output": "0",
        "idx": 1826
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int update_add_entry(struct libmnt_update *upd, struct libmnt_lock *lc)\n{\n\tstruct libmnt_table *tb;\n\tint rc = 0, u_lc = -1;\n\n\tassert(upd);\n\tassert(upd->fs);\n\n\tDBG(UPDATE, mnt_debug_h(upd, \"%s: add entry\", upd->filename));\n\n\tif (lc)\n\t\tmnt_lock_file(lc);\n\telse if (upd->userspace_only)\n\t\tu_lc = utab_lock(upd->filename);\n\n\ttb = __mnt_new_table_from_file(upd->filename,\n\t\t\tupd->userspace_only ? MNT_FMT_UTAB : MNT_FMT_MTAB);\n\tif (tb) {\n\t\tstruct libmnt_fs *fs = mnt_copy_fs(NULL, upd->fs);\n\t\tif (!fs)\n\t\t\trc = -ENOMEM;\n\t\telse {\n\t\t\tmnt_table_add_fs(tb, fs);\n\t\t\trc = update_table(upd, tb);\n\t\t}\n\t}\n\n\tif (lc)\n\t\tmnt_unlock_file(lc);\n\telse if (u_lc != -1)\n\t\tutab_unlock(u_lc);\n\n\tmnt_free_table(tb);\n\treturn rc;\n}",
        "output": "1",
        "idx": 1988
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int32_t scalarproduct_and_madd_int16_c(int16_t *v1, const int16_t *v2,\n\n                                              const int16_t *v3,\n\n                                              int order, int mul)\n\n{\n\n    int res = 0;\n\n\n\n    while (order--) {\n\n        res   += *v1 * *v2++;\n\n        *v1++ += mul * *v3++;\n\n    }\n\n    return res;\n\n}\n",
        "output": "1",
        "idx": 2420
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ElectronBrowserClient::RegisterBrowserInterfaceBindersForFrame(\n    content::RenderFrameHost* render_frame_host,\n    mojo::BinderMapWithContext<content::RenderFrameHost*>* map) {\n  map->Add<network_hints::mojom::NetworkHintsHandler>(\n      base::BindRepeating(&BindNetworkHintsHandler));\n  map->Add<blink::mojom::BadgeService>(\n      base::BindRepeating(&badging::BadgeManager::BindFrameReceiver));\n  map->Add<electron::mojom::ElectronBrowser>(\n      base::BindRepeating(&BindElectronBrowser));\n#if BUILDFLAG(ENABLE_ELECTRON_EXTENSIONS)\n  map->Add<extensions::mime_handler::MimeHandlerService>(\n      base::BindRepeating(&BindMimeHandlerService));\n  map->Add<extensions::mime_handler::BeforeUnloadControl>(\n      base::BindRepeating(&BindBeforeUnloadControl));\n\n  content::WebContents* web_contents =\n      content::WebContents::FromRenderFrameHost(render_frame_host);\n  if (!web_contents)\n    return;\n\n  const GURL& site = render_frame_host->GetSiteInstance()->GetSiteURL();\n  if (!site.SchemeIs(extensions::kExtensionScheme))\n    return;\n\n  content::BrowserContext* browser_context =\n      render_frame_host->GetProcess()->GetBrowserContext();\n  auto* extension = extensions::ExtensionRegistry::Get(browser_context)\n                        ->enabled_extensions()\n                        .GetByID(site.host());\n  if (!extension)\n    return;\n  extensions::ExtensionsBrowserClient::Get()\n      ->RegisterBrowserInterfaceBindersForFrame(map, render_frame_host,\n                                                extension);\n#endif\n}",
        "output": "1",
        "idx": 1110
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_qga_fsfreeze_and_thaw(gconstpointer fix)\n\n{\n\n    const TestFixture *fixture = fix;\n\n    QDict *ret;\n\n    const gchar *status;\n\n\n\n    ret = qmp_fd(fixture->fd, \"{'execute': 'guest-fsfreeze-freeze'}\");\n\n    g_assert_nonnull(ret);\n\n    qmp_assert_no_error(ret);\n\n    QDECREF(ret);\n\n\n\n    ret = qmp_fd(fixture->fd, \"{'execute': 'guest-fsfreeze-status'}\");\n\n    g_assert_nonnull(ret);\n\n    qmp_assert_no_error(ret);\n\n    status = qdict_get_try_str(ret, \"return\");\n\n    g_assert_cmpstr(status, ==, \"frozen\");\n\n    QDECREF(ret);\n\n\n\n    ret = qmp_fd(fixture->fd, \"{'execute': 'guest-fsfreeze-thaw'}\");\n\n    g_assert_nonnull(ret);\n\n    qmp_assert_no_error(ret);\n\n    QDECREF(ret);\n\n}\n",
        "output": "1",
        "idx": 1549
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "true_always(node *tree)\n{\n  switch (nint(tree->car)) {\n  case NODE_TRUE:\n  case NODE_INT:\n  case NODE_STR:\n  case NODE_SYM:\n    return TRUE;\n  default:\n    return FALSE;\n  }\n}",
        "output": "0",
        "idx": 2892
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlXPtrNewCollapsedRange(xmlNodePtr start) {\n    xmlXPathObjectPtr ret;\n\n    if (start == NULL)\n\treturn(NULL);\n\n    ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));\n    if (ret == NULL) {\n        xmlXPtrErrMemory(\"allocating range\");\n\treturn(NULL);\n    }\n    memset(ret, 0 , (size_t) sizeof(xmlXPathObject));\n    ret->type = XPATH_RANGE;\n    ret->user = start;\n    ret->index = -1;\n    ret->user2 = NULL;\n    ret->index2 = -1;\n    return(ret);\n}",
        "output": "1",
        "idx": 5594
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static abi_long do_getpeername(int fd, abi_ulong target_addr,\n\n                               abi_ulong target_addrlen_addr)\n\n{\n\n    socklen_t addrlen;\n\n    void *addr;\n\n    abi_long ret;\n\n\n\n    if (get_user_u32(addrlen, target_addrlen_addr))\n\n        return -TARGET_EFAULT;\n\n\n\n    if (addrlen < 0 || addrlen > MAX_SOCK_ADDR)\n\n        return -TARGET_EINVAL;\n\n\n\n    addr = alloca(addrlen);\n\n\n\n    ret = get_errno(getpeername(fd, addr, &addrlen));\n\n    if (!is_error(ret)) {\n\n        host_to_target_sockaddr(target_addr, addr, addrlen);\n\n        if (put_user_u32(addrlen, target_addrlen_addr))\n\n            ret = -TARGET_EFAULT;\n\n    }\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 3522
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dotraplinkage void do_stack_segment(struct pt_regs *regs, long error_code)\n{\n\tenum ctx_state prev_state;\n\n\tprev_state = exception_enter();\n\tif (notify_die(DIE_TRAP, \"stack segment\", regs, error_code,\n\t\t       X86_TRAP_SS, SIGBUS) != NOTIFY_STOP) {\n\t\tpreempt_conditional_sti(regs);\n\t\tdo_trap(X86_TRAP_SS, SIGBUS, \"stack segment\", regs, error_code, NULL);\n\t\tpreempt_conditional_cli(regs);\n\t}\n\texception_exit(prev_state);\n}",
        "output": "1",
        "idx": 5716
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int snd_rawmidi_info_select_user(struct snd_card *card,\n\t\t\t\t\tstruct snd_rawmidi_info __user *_info)\n{\n\tint err;\n\tstruct snd_rawmidi_info info;\n\tif (get_user(info.device, &_info->device))\n\t\treturn -EFAULT;\n\tif (get_user(info.stream, &_info->stream))\n\t\treturn -EFAULT;\n\tif (get_user(info.subdevice, &_info->subdevice))\n\t\treturn -EFAULT;\n\tif ((err = snd_rawmidi_info_select(card, &info)) < 0)\n\t\treturn err;\n\tif (copy_to_user(_info, &info, sizeof(struct snd_rawmidi_info)))\n\t\treturn -EFAULT;\n\treturn 0;\n}",
        "output": "0",
        "idx": 6021
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void do_4xx_tlbsx_ (void)\n\n{\n\n    int tmp = xer_ov;\n\n\n\n    T0 = ppcemb_tlb_search(env, T0, env->spr[SPR_40x_PID]);\n\n    if (T0 != -1)\n\n        tmp |= 0x02;\n\n    env->crf[0] = tmp;\n\n}\n",
        "output": "1",
        "idx": 3458
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int __get_file_write_access(struct inode *inode,\n\t\t\t\t\t  struct vfsmount *mnt)\n{\n\tint error;\n\terror = get_write_access(inode);\n\tif (error)\n\t\treturn error;\n\t/*\n\t * Do not take mount writer counts on\n\t * special files since no writes to\n\t * the mount itself will occur.\n\t */\n\tif (!special_file(inode->i_mode)) {\n\t\t/*\n\t\t * Balanced in __fput()\n\t\t */\n\t\terror = __mnt_want_write(mnt);\n\t\tif (error)\n\t\t\tput_write_access(inode);\n\t}\n\treturn error;\n}",
        "output": "0",
        "idx": 1178
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    string_255 typeName() const\n    {\n        return type_name_;\n    }",
        "output": "1",
        "idx": 2406
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dns_zone_addnsec3chain(dns_zone_t *zone, dns_rdata_nsec3param_t *nsec3param) {\n\tisc_result_t result;\n\tchar salt[255*2+1];\n\n\tREQUIRE(DNS_ZONE_VALID(zone));\n\n\tresult = dns_nsec3param_salttotext(nsec3param, salt, sizeof(salt));\n\tRUNTIME_CHECK(result == ISC_R_SUCCESS);\n\tdnssec_log(zone, ISC_LOG_NOTICE,\n\t\t   \"dns_zone_addnsec3chain(hash=%u, iterations=%u, salt=%s)\",\n\t\t   nsec3param->hash, nsec3param->iterations, salt);\n\tLOCK_ZONE(zone);\n\tresult = zone_addnsec3chain(zone, nsec3param);\n\tUNLOCK_ZONE(zone);\n\n\treturn (result);\n}",
        "output": "0",
        "idx": 5355
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_P(DownstreamProtocolIntegrationTest, ComputedHealthCheck) {\n  config_helper_.addFilter(R\"EOF(\nname: health_check\ntyped_config:\n    \"@type\": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck\n    pass_through_mode: false\n    cluster_min_healthy_percentages:\n        example_cluster_name: { value: 75 }\n)EOF\");\n  initialize();\n\n  codec_client_ = makeHttpConnection(lookupPort(\"http\"));\n  auto response = codec_client_->makeHeaderOnlyRequest(Http::TestRequestHeaderMapImpl{\n      {\":method\", \"GET\"}, {\":path\", \"/healthcheck\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}});\n  ASSERT_TRUE(response->waitForEndStream());\n\n  EXPECT_TRUE(response->complete());\n  EXPECT_EQ(\"503\", response->headers().getStatusValue());\n}",
        "output": "0",
        "idx": 2603
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int is_git_directory(const char *suspect)\n{\n\tchar path[PATH_MAX];\n\tsize_t len = strlen(suspect);\n\n\tstrcpy(path, suspect);\n\tif (getenv(DB_ENVIRONMENT)) {\n\t\tif (access(getenv(DB_ENVIRONMENT), X_OK))\n\t\t\treturn 0;\n\t}\n\telse {\n\t\tstrcpy(path + len, \"/objects\");\n\t\tif (access(path, X_OK))\n\t\t\treturn 0;\n\t}\n\n\tstrcpy(path + len, \"/refs\");\n\tif (access(path, X_OK))\n\t\treturn 0;\n\n\tstrcpy(path + len, \"/HEAD\");\n\tif (validate_headref(path))\n\t\treturn 0;\n\n\treturn 1;\n}",
        "output": "1",
        "idx": 2680
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  const HeaderEntry& hostHeaderEntry(const std::string& host_value, bool set_connect = false) {\n    headers_.setHost(host_value);\n    if (set_connect) {\n      headers_.setMethod(Http::Headers::get().MethodValues.Connect);\n    }\n    return *headers_.Host();\n  }",
        "output": "0",
        "idx": 1290
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mp_pacl_removexattr(FsContext *ctx,\n\n                               const char *path, const char *name)\n\n{\n\n    int ret;\n\n    char *buffer;\n\n\n\n    buffer = rpath(ctx, path);\n\n    ret  = lremovexattr(buffer, MAP_ACL_ACCESS);\n\n    if (ret == -1 && errno == ENODATA) {\n\n        /*\n\n         * We don't get ENODATA error when trying to remove a\n\n         * posix acl that is not present. So don't throw the error\n\n         * even in case of mapped security model\n\n         */\n\n        errno = 0;\n\n        ret = 0;\n\n    }\n\n    g_free(buffer);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 3878
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_outFieldSelect(StringInfo str, const FieldSelect *node)\n{\n\tWRITE_NODE_TYPE(\"FIELDSELECT\");\n\n\tWRITE_NODE_FIELD(arg);\n\tWRITE_INT_FIELD(fieldnum);\n\tWRITE_OID_FIELD(resulttype);\n\tWRITE_INT_FIELD(resulttypmod);\n\tWRITE_OID_FIELD(resultcollid);\n}",
        "output": "0",
        "idx": 1626
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nbd_co_send_request(BDRVNBDState *s, struct nbd_request *request,\n\n                               struct iovec *iov, int offset)\n\n{\n\n    int rc, ret;\n\n\n\n    qemu_co_mutex_lock(&s->send_mutex);\n\n    s->send_coroutine = qemu_coroutine_self();\n\n    qemu_aio_set_fd_handler(s->sock, nbd_reply_ready, nbd_restart_write,\n\n                            nbd_have_request, NULL, s);\n\n    rc = nbd_send_request(s->sock, request);\n\n    if (rc >= 0 && iov) {\n\n        ret = qemu_co_sendv(s->sock, iov, request->len, offset);\n\n        if (ret != request->len) {\n\n            errno = -EIO;\n\n            rc = -1;\n\n        }\n\n    }\n\n    qemu_aio_set_fd_handler(s->sock, nbd_reply_ready, NULL,\n\n                            nbd_have_request, NULL, s);\n\n    s->send_coroutine = NULL;\n\n    qemu_co_mutex_unlock(&s->send_mutex);\n\n    return rc;\n\n}\n",
        "output": "0",
        "idx": 4213
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Debug(const char *fmtstr,\n      va_list args)\n{\n   /* Ignored */\n#ifdef VMX86_DEBUG\n   sLog(log_debug, \"Debug callback invoked. \\n\");\n#endif\n}",
        "output": "1",
        "idx": 5162
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "eb_relocate_vma_slow(struct i915_execbuffer *eb, struct i915_vma *vma)\n{\n\tconst struct drm_i915_gem_exec_object2 *entry = exec_entry(eb, vma);\n\tstruct drm_i915_gem_relocation_entry *relocs =\n\t\tu64_to_ptr(typeof(*relocs), entry->relocs_ptr);\n\tunsigned int i;\n\tint err;\n\n\tfor (i = 0; i < entry->relocation_count; i++) {\n\t\tu64 offset = eb_relocate_entry(eb, vma, &relocs[i]);\n\n\t\tif ((s64)offset < 0) {\n\t\t\terr = (int)offset;\n\t\t\tgoto err;\n\t\t}\n\t}\n\terr = 0;\nerr:\n\treloc_cache_reset(&eb->reloc_cache);\n\treturn err;\n}",
        "output": "0",
        "idx": 5676
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int skcipher_next_fast(struct skcipher_walk *walk)\n{\n\tunsigned long diff;\n\n\twalk->src.phys.page = scatterwalk_page(&walk->in);\n\twalk->src.phys.offset = offset_in_page(walk->in.offset);\n\twalk->dst.phys.page = scatterwalk_page(&walk->out);\n\twalk->dst.phys.offset = offset_in_page(walk->out.offset);\n\n\tif (walk->flags & SKCIPHER_WALK_PHYS)\n\t\treturn 0;\n\n\tdiff = walk->src.phys.offset - walk->dst.phys.offset;\n\tdiff |= walk->src.virt.page - walk->dst.virt.page;\n\n\tskcipher_map_src(walk);\n\twalk->dst.virt.addr = walk->src.virt.addr;\n\n\tif (diff) {\n\t\twalk->flags |= SKCIPHER_WALK_DIFF;\n\t\tskcipher_map_dst(walk);\n\t}\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 382
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlXPtrEvalXPointer(xmlXPathParserContextPtr ctxt) {\n    if (ctxt->valueTab == NULL) {\n\t/* Allocate the value stack */\n\tctxt->valueTab = (xmlXPathObjectPtr *) \n\t\t\t xmlMalloc(10 * sizeof(xmlXPathObjectPtr));\n\tif (ctxt->valueTab == NULL) {\n\t    xmlXPtrErrMemory(\"allocating evaluation context\");\n\t    return;\n\t}\n\tctxt->valueNr = 0;\n\tctxt->valueMax = 10;\n\tctxt->value = NULL;\n    }\n    SKIP_BLANKS;\n    if (CUR == '/') {\n\txmlXPathRoot(ctxt);\n        xmlXPtrEvalChildSeq(ctxt, NULL);\n    } else {\n\txmlChar *name;\n\n\tname = xmlXPathParseName(ctxt);\n\tif (name == NULL)\n\t    XP_ERROR(XPATH_EXPR_ERROR);\n\tif (CUR == '(') {\n\t    xmlXPtrEvalFullXPtr(ctxt, name);\n\t    /* Short evaluation */\n\t    return;\n\t} else {\n\t    /* this handle both Bare Names and Child Sequences */\n\t    xmlXPtrEvalChildSeq(ctxt, name);\n\t}\n    }\n    SKIP_BLANKS;\n    if (CUR != 0)\n\tXP_ERROR(XPATH_EXPR_ERROR);\n}",
        "output": "1",
        "idx": 4697
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void slavio_serial_ms_kbd_init(target_phys_addr_t base, qemu_irq irq,\n\n                               int disabled, int clock, int it_shift)\n\n{\n\n    DeviceState *dev;\n\n    SysBusDevice *s;\n\n\n\n    dev = qdev_create(NULL, \"escc\");\n\n    qdev_prop_set_uint32(dev, \"disabled\", disabled);\n\n    qdev_prop_set_uint32(dev, \"frequency\", clock);\n\n    qdev_prop_set_uint32(dev, \"it_shift\", it_shift);\n\n    qdev_prop_set_chr(dev, \"chrB\", NULL);\n\n    qdev_prop_set_chr(dev, \"chrA\", NULL);\n\n    qdev_prop_set_uint32(dev, \"chnBtype\", mouse);\n\n    qdev_prop_set_uint32(dev, \"chnAtype\", kbd);\n\n    qdev_init_nofail(dev);\n\n    s = sysbus_from_qdev(dev);\n\n    sysbus_connect_irq(s, 0, irq);\n\n    sysbus_connect_irq(s, 1, irq);\n\n    sysbus_mmio_map(s, 0, base);\n\n}\n",
        "output": "0",
        "idx": 2134
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "printableStringValidate(\n\tSyntax *syntax,\n\tstruct berval *val )\n{\n\tber_len_t i;\n\n\tif( BER_BVISEMPTY( val ) ) return LDAP_INVALID_SYNTAX;\n\n\tfor(i=0; i < val->bv_len; i++) {\n\t\tif( !SLAP_PRINTABLE(val->bv_val[i]) ) {\n\t\t\treturn LDAP_INVALID_SYNTAX;\n\t\t}\n\t}\n\n\treturn LDAP_SUCCESS;\n}",
        "output": "0",
        "idx": 3762
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xa_read_packet(AVFormatContext *s,\n\n                          AVPacket *pkt)\n\n{\n\n    MaxisXADemuxContext *xa = s->priv_data;\n\n    AVStream *st = s->streams[0];\n\n    ByteIOContext *pb = s->pb;\n\n    unsigned int packet_size;\n\n    int ret;\n\n\n\n    if(xa->sent_bytes > xa->out_size)\n\n        return AVERROR(EIO);\n\n    /* 1 byte header and 14 bytes worth of samples * number channels per block */\n\n    packet_size = 15*st->codec->channels;\n\n\n\n    ret = av_get_packet(pb, pkt, packet_size);\n\n    if(ret != packet_size)\n\n        return AVERROR(EIO);\n\n\n\n    pkt->stream_index = st->index;\n\n    xa->sent_bytes += packet_size;\n\n    pkt->pts = xa->audio_frame_counter;\n\n    /* 14 bytes Samples per channel with 2 samples per byte */\n\n    xa->audio_frame_counter += 28 * st->codec->channels;\n\n\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 4332
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "      return get_split(axis,nb).move_to(*this);\n    }\n\n    //! Return a list where each image has been split along the specified axis \\newinstance.\n    CImgList<T> get_split(const char axis, const int nb=-1) const {",
        "output": "0",
        "idx": 1507
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dw_reader(struct dw_spi *dws)\n{\n\tu32 max = rx_max(dws);\n\tu16 rxw;\n\n\twhile (max--) {\n\t\trxw = dw_read_io_reg(dws, DW_SPI_DR);\n\t\t/* Care rx only if the transfer's original \"rx\" is not null */\n\t\tif (dws->rx_end - dws->len) {\n\t\t\tif (dws->n_bytes == 1)\n\t\t\t\t*(u8 *)(dws->rx) = rxw;\n\t\t\telse\n\t\t\t\t*(u16 *)(dws->rx) = rxw;\n\t\t}\n\t\tdws->rx += dws->n_bytes;\n\t}\n}",
        "output": "1",
        "idx": 2745
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rc4030_unrealize(DeviceState *dev, Error **errp)\n\n{\n\n    rc4030State *s = RC4030(dev);\n\n    int i;\n\n\n\n    timer_free(s->periodic_timer);\n\n\n\n    address_space_destroy(&s->dma_as);\n\n    object_unparent(OBJECT(&s->dma_tt));\n\n    object_unparent(OBJECT(&s->dma_tt_alias));\n\n    object_unparent(OBJECT(&s->dma_mr));\n\n    for (i = 0; i < MAX_TL_ENTRIES; ++i) {\n\n        memory_region_del_subregion(&s->dma_mr, &s->dma_mrs[i]);\n\n        object_unparent(OBJECT(&s->dma_mrs[i]));\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4444
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "directory_exists (dirname)\n     const char *dirname;\n{\n  char *new_dirname;\n  int dirlen, r;\n  struct stat sb;\n\n  /* First, dequote the directory name */\n  new_dirname = bash_dequote_filename ((char *)dirname, rl_completion_quote_character);\n  dirlen = STRLEN (new_dirname);\n  if (new_dirname[dirlen - 1] == '/')\n    new_dirname[dirlen - 1] = '\\0';\n#if defined (HAVE_LSTAT)\n  r = lstat (new_dirname, &sb) == 0;\n#else\n  r = stat (new_dirname, &sb) == 0;\n#endif\n  free (new_dirname);\n  return (r);\n}",
        "output": "1",
        "idx": 4801
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "lldpd_started_by_upstart()\n{\n#ifdef HOST_OS_LINUX\n\tconst char *upstartjob = getenv(\"UPSTART_JOB\");\n\tif (!(upstartjob && !strcmp(upstartjob, \"lldpd\")))\n\t\treturn 0;\n\tlog_debug(\"main\", \"running with upstart, don't fork but stop\");\n\traise(SIGSTOP);\n\tunsetenv(\"UPSTART_JOB\");\n\treturn 1;\n#else\n\treturn 0;\n#endif\n}",
        "output": "0",
        "idx": 2617
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ogg_save(AVFormatContext *s)\n\n{\n\n    struct ogg *ogg = s->priv_data;\n\n    struct ogg_state *ost =\n\n        av_malloc(sizeof (*ost) + (ogg->nstreams-1) * sizeof (*ogg->streams));\n\n    int i;\n\n    ost->pos = avio_tell (s->pb);\n\n    ost->curidx = ogg->curidx;\n\n    ost->next = ogg->state;\n\n    ost->nstreams = ogg->nstreams;\n\n    memcpy(ost->streams, ogg->streams, ogg->nstreams * sizeof(*ogg->streams));\n\n\n\n    for (i = 0; i < ogg->nstreams; i++){\n\n        struct ogg_stream *os = ogg->streams + i;\n\n        os->buf = av_malloc (os->bufsize);\n\n        memset (os->buf, 0, os->bufsize);\n\n        memcpy (os->buf, ost->streams[i].buf, os->bufpos);\n\n    }\n\n\n\n    ogg->state = ost;\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3476
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ipc_has_perm(struct kern_ipc_perm *ipc_perms,\n\t\t\tu32 perms)\n{\n\tstruct ipc_security_struct *isec;\n\tstruct common_audit_data ad;\n\tstruct selinux_audit_data sad = {0,};\n\tu32 sid = current_sid();\n\n\tisec = ipc_perms->security;\n\n\tCOMMON_AUDIT_DATA_INIT(&ad, IPC);\n\tad.selinux_audit_data = &sad;\n\tad.u.ipc_id = ipc_perms->key;\n\n\treturn avc_has_perm(sid, isec->sid, isec->sclass, perms, &ad);\n}",
        "output": "0",
        "idx": 4103
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pipe_iov_copy_to_user(struct iovec *iov, const void *from, unsigned long len,\n\t\t      int atomic)\n{\n\tunsigned long copy;\n\n\twhile (len > 0) {\n\t\twhile (!iov->iov_len)\n\t\t\tiov++;\n\t\tcopy = min_t(unsigned long, len, iov->iov_len);\n\n\t\tif (atomic) {\n\t\t\tif (__copy_to_user_inatomic(iov->iov_base, from, copy))\n\t\t\t\treturn -EFAULT;\n\t\t} else {\n\t\t\tif (copy_to_user(iov->iov_base, from, copy))\n\t\t\t\treturn -EFAULT;\n\t\t}\n\t\tfrom += copy;\n\t\tlen -= copy;\n\t\tiov->iov_base += copy;\n\t\tiov->iov_len -= copy;\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 6004
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static PHP_NAMED_FUNCTION(zif_zip_entry_read)\n{\n\tzval * zip_entry;\n\tzend_long len = 0;\n\tzip_read_rsrc * zr_rsrc;\n\tzend_string *buffer;\n\tint n = 0;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS(), \"r|l\", &zip_entry, &len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tif ((zr_rsrc = (zip_read_rsrc *)zend_fetch_resource(Z_RES_P(zip_entry), le_zip_entry_name, le_zip_entry)) == NULL) {\n\t\tRETURN_FALSE;\n\t}\n\n\tif (len <= 0) {\n\t\tlen = 1024;\n\t}\n\n\tif (zr_rsrc->zf) {\n\t\tbuffer = zend_string_alloc(len, 0);\n\t\tn = zip_fread(zr_rsrc->zf, ZSTR_VAL(buffer), ZSTR_LEN(buffer));\n\t\tif (n > 0) {\n\t\t\tZSTR_VAL(buffer)[n] = '\\0';\n\t\t\tZSTR_LEN(buffer) = n;\n\t\t\tRETURN_NEW_STR(buffer);\n\t\t} else {\n\t\t\tzend_string_free(buffer);\n\t\t\tRETURN_EMPTY_STRING()\n\t\t}\n\t} else {\n\t\tRETURN_FALSE;\n\t}\n}",
        "output": "1",
        "idx": 3574
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ProtocolV2::append_keepalive() {\n  ldout(cct, 10) << __func__ << dendl;\n  auto keepalive_frame = KeepAliveFrame::Encode();\n  connection->outgoing_bl.append(keepalive_frame.get_buffer(session_stream_handlers));\n}",
        "output": "1",
        "idx": 4552
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out,\n\t\t\t  loff_t *ppos, size_t len, unsigned int flags)\n{\n\tstruct address_space *mapping = out->f_mapping;\n\tssize_t ret;\n\n\tret = splice_from_pipe(pipe, out, ppos, len, flags, pipe_to_file);\n\tif (ret > 0) {\n\t\tstruct inode *inode = mapping->host;\n\n\t\t*ppos += ret;\n\n\t\t/*\n\t\t * If file or inode is SYNC and we actually wrote some data,\n\t\t * sync it.\n\t\t */\n\t\tif (unlikely((out->f_flags & O_SYNC) || IS_SYNC(inode))) {\n\t\t\tint err;\n\n\t\t\tmutex_lock(&inode->i_mutex);\n\t\t\terr = generic_osync_inode(inode, mapping,\n\t\t\t\t\t\t  OSYNC_METADATA|OSYNC_DATA);\n\t\t\tmutex_unlock(&inode->i_mutex);\n\n\t\t\tif (err)\n\t\t\t\tret = err;\n\t\t}\n\t}\n\n\treturn ret;\n}",
        "output": "1",
        "idx": 3008
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "opts_start_list(Visitor *v, const char *name, Error **errp)\n\n{\n\n    OptsVisitor *ov = to_ov(v);\n\n\n\n    /* we can't traverse a list in a list */\n\n    assert(ov->list_mode == LM_NONE);\n\n    ov->repeated_opts = lookup_distinct(ov, name, errp);\n\n    if (ov->repeated_opts != NULL) {\n\n        ov->list_mode = LM_STARTED;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3011
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ServerDB::setSUPW(int srvnum, const QString &pw) {\n\tTransactionHolder th;\n\n\tQCryptographicHash hash(QCryptographicHash::Sha1);\n\thash.addData(pw.toUtf8());\n\n\tQSqlQuery &query = *th.qsqQuery;\n\n\tSQLPREP(\"SELECT `user_id` FROM `%1users` WHERE `server_id` = ? AND `user_id` = ?\");\n\tquery.addBindValue(srvnum);\n\tquery.addBindValue(0);\n\tSQLEXEC();\n\tif (! query.next()) {\n\t\tSQLPREP(\"INSERT INTO `%1users` (`server_id`, `user_id`, `name`) VALUES (?, ?, ?)\");\n\t\tquery.addBindValue(srvnum);\n\t\tquery.addBindValue(0);\n\t\tquery.addBindValue(QLatin1String(\"SuperUser\"));\n\t\tSQLEXEC();\n\t}\n\n\tSQLPREP(\"UPDATE `%1users` SET `pw`=? WHERE `server_id` = ? AND `user_id`=?\");\n\tquery.addBindValue(QString::fromLatin1(hash.result().toHex()));\n\tquery.addBindValue(srvnum);\n\tquery.addBindValue(0);\n\tSQLEXEC();\n}",
        "output": "0",
        "idx": 3316
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void print_value(int output, int num, const char *devname,\n\t\t\tconst char *value, const char *name, size_t valsz)\n{\n\tif (output & OUTPUT_VALUE_ONLY) {\n\t\tfputs(value, stdout);\n\t\tfputc('\\n', stdout);\n\n\t} else if (output & OUTPUT_UDEV_LIST) {\n\t\tprint_udev_format(name, value);\n\n\t} else if (output & OUTPUT_EXPORT_LIST) {\n\t\tif (num == 1 && devname)\n\t\t\tprintf(\"DEVNAME=%s\\n\", devname);\n\t\tfputs(name, stdout);\n\t\tfputs(\"=\", stdout);\n\t\tsafe_print(value, valsz, \" \\\\\\\"'$`<>\");\n\t\tfputs(\"\\n\", stdout);\n\n\t} else {\n\t\tif (num == 1 && devname)\n\t\t\tprintf(\"%s:\", devname);\n\t\tfputs(\" \", stdout);\n\t\tfputs(name, stdout);\n\t\tfputs(\"=\\\"\", stdout);\n\t\tsafe_print(value, valsz, \"\\\"\\\\\");\n\t\tfputs(\"\\\"\", stdout);\n\t}\n}",
        "output": "0",
        "idx": 67
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct addr_t* MACH0_(get_entrypoint)(struct MACH0_(obj_t)* bin) {\n\tstruct addr_t *entry;\n\tint i;\n\n\tif (!bin->entry && !bin->sects) {\n\t\treturn NULL;\n\t}\n\tif (!(entry = calloc (1, sizeof (struct addr_t)))) {\n\t\treturn NULL;\n\t}\n\n\tif (bin->entry) {\n\t\tentry->addr = entry_to_vaddr (bin);\n\t\tentry->offset = addr_to_offset (bin, entry->addr);\n\t\tentry->haddr = sdb_num_get (bin->kv, \"mach0.entry.offset\", 0);\n\t}\n\n\tif (!bin->entry || entry->offset == 0) {\n\t\t// XXX: section name doesnt matters at all.. just check for exec flags\n\t\tfor (i = 0; i < bin->nsects; i++) {\n\t\t\tif (!strncmp (bin->sects[i].sectname, \"__text\", 6)) {\n\t\t\t\tentry->offset = (ut64)bin->sects[i].offset;\n\t\t\t\tsdb_num_set (bin->kv, \"mach0.entry\", entry->offset, 0);\n\t\t\t\tentry->addr = (ut64)bin->sects[i].addr;\n\t\t\t\tif (!entry->addr) { // workaround for object files\n\t\t\t\t\tentry->addr = entry->offset;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbin->entry = entry->addr;\n\t}\n\n\treturn entry;\n}",
        "output": "1",
        "idx": 4206
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "EXPORT const Dwg_RGB_Palette *dwg_rgb_palette (void)\n{\n  return rgb_palette;\n}",
        "output": "0",
        "idx": 1165
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sctp_setsockopt_hmac_ident(struct sock *sk,\n\t\t\t\t      char __user *optval,\n\t\t\t\t      unsigned int optlen)\n{\n\tstruct net *net = sock_net(sk);\n\tstruct sctp_hmacalgo *hmacs;\n\tu32 idents;\n\tint err;\n\n\tif (!net->sctp.auth_enable)\n\t\treturn -EACCES;\n\n\tif (optlen < sizeof(struct sctp_hmacalgo))\n\t\treturn -EINVAL;\n\n\thmacs= memdup_user(optval, optlen);\n\tif (IS_ERR(hmacs))\n\t\treturn PTR_ERR(hmacs);\n\n\tidents = hmacs->shmac_num_idents;\n\tif (idents == 0 || idents > SCTP_AUTH_NUM_HMACS ||\n\t    (idents * sizeof(u16)) > (optlen - sizeof(struct sctp_hmacalgo))) {\n\t\terr = -EINVAL;\n\t\tgoto out;\n\t}\n\n\terr = sctp_auth_ep_set_hmacs(sctp_sk(sk)->ep, hmacs);\nout:\n\tkfree(hmacs);\n\treturn err;\n}",
        "output": "0",
        "idx": 2910
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t hpet_get_ticks(void)\n\n{\n\n    uint64_t ticks;\n\n    ticks = ns_to_ticks(qemu_get_clock(vm_clock) + hpet_statep->hpet_offset);\n\n    return ticks;\n\n}\n",
        "output": "1",
        "idx": 4851
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *jas_malloc(size_t size)\n{\n#if defined(MEMALLOC_ALIGN2)\n\tvoid *ptr;\nabort();\n\tif (posix_memalign(&ptr, MEMALLOC_ALIGNMENT, size)) {\n\t\treturn 0;\n\t}\n\treturn ptr;\n#endif\n\treturn malloc(size);\n}",
        "output": "1",
        "idx": 3003
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t cirrus_linear_bitblt_read(void *opaque,\n\n                                          target_phys_addr_t addr,\n\n                                          unsigned size)\n\n{\n\n    CirrusVGAState *s = opaque;\n\n    uint32_t ret;\n\n\n\n    /* XXX handle bitblt */\n\n    (void)s;\n\n    ret = 0xff;\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 4839
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Router::RouteConfigProvider* routeConfigProvider() override {\n    if (use_srds_) {\n      return nullptr;\n    }\n    return &route_config_provider_;\n  }",
        "output": "0",
        "idx": 1448
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const char *enc_untrusted_inet_ntop(int af, const void *src, char *dst,\n                                    socklen_t size) {\n  if (!src || !dst) {\n    errno = EFAULT;\n    return nullptr;\n  }\n  size_t src_size = 0;\n  if (af == AF_INET) {\n    src_size = sizeof(struct in_addr);\n  } else if (af == AF_INET6) {\n    src_size = sizeof(struct in6_addr);\n  } else {\n    errno = EAFNOSUPPORT;\n    return nullptr;\n  }\n\n  MessageWriter input;\n  input.Push<int>(TokLinuxAfFamily(af));\n  input.PushByReference(Extent{reinterpret_cast<const char *>(src), src_size});\n  input.Push(size);\n  MessageReader output;\n\n  const auto status = NonSystemCallDispatcher(\n      ::asylo::host_call::kInetNtopHandler, &input, &output);\n  CheckStatusAndParamCount(status, output, \"enc_untrusted_inet_ntop\", 2);\n\n  auto result = output.next();\n  int klinux_errno = output.next<int>();\n  if (result.empty()) {\n    errno = FromkLinuxErrorNumber(klinux_errno);\n    return nullptr;\n  }\n\n  memcpy(dst, result.data(),\n         std::min(static_cast<size_t>(size),\n                  static_cast<size_t>(INET6_ADDRSTRLEN)));\n  return dst;\n}",
        "output": "1",
        "idx": 6052
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static sPAPRDRConnector *spapr_phb_get_pci_drc(sPAPRPHBState *phb,\n\n                                               PCIDevice *pdev)\n\n{\n\n    uint32_t busnr = pci_bus_num(PCI_BUS(qdev_get_parent_bus(DEVICE(pdev))));\n\n    return spapr_dr_connector_by_id(SPAPR_DR_CONNECTOR_TYPE_PCI,\n\n                                    (phb->index << 16) |\n\n                                    (busnr << 8) |\n\n                                    pdev->devfn);\n\n}\n",
        "output": "1",
        "idx": 1410
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool asn1_write_OctetString(struct asn1_data *data, const void *p, size_t length)\n{\n\tasn1_push_tag(data, ASN1_OCTET_STRING);\n\tasn1_write(data, p, length);\n\tasn1_pop_tag(data);\n\treturn !data->has_error;\n}",
        "output": "1",
        "idx": 5543
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){\n  Token s;\n  assert( zC!=0 );\n  sqlite3TokenInit(&s, (char*)zC);\n  return sqlite3ExprAddCollateToken(pParse, pExpr, &s, 0);\n}",
        "output": "0",
        "idx": 118
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void phys_page_set(target_phys_addr_t index, target_phys_addr_t nb,\n\n                          uint16_t leaf)\n\n{\n\n    /* Wildly overreserve - it doesn't matter much. */\n\n    phys_map_node_reserve(3 * P_L2_LEVELS);\n\n\n\n    phys_page_set_level(&phys_map, &index, &nb, leaf, P_L2_LEVELS - 1);\n\n}\n",
        "output": "0",
        "idx": 3439
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_chr_fe_add_watch(CharDriverState *s, GIOCondition cond,\n\n                          GIOFunc func, void *user_data)\n\n{\n\n    GSource *src;\n\n    guint tag;\n\n\n\n    if (s->chr_add_watch == NULL) {\n\n        return -ENOSYS;\n\n    }\n\n\n\n    src = s->chr_add_watch(s, cond);\n\n    if (!src) {\n\n        return -EINVAL;\n\n    }\n\n\n\n    g_source_set_callback(src, (GSourceFunc)func, user_data, NULL);\n\n    tag = g_source_attach(src, NULL);\n\n    g_source_unref(src);\n\n\n\n    return tag;\n\n}\n",
        "output": "0",
        "idx": 5030
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int indeo3_decode_end(AVCodecContext *avctx)\n{\n    Indeo3DecodeContext *s = avctx->priv_data;\n    iv_free_func(s);\n    return 0;\n}",
        "output": "1",
        "idx": 2992
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dotraplinkage void __kprobes do_int3(struct pt_regs *regs, long error_code)\n{\n#ifdef CONFIG_KGDB_LOW_LEVEL_TRAP\n\tif (kgdb_ll_trap(DIE_INT3, \"int3\", regs, error_code, 3, SIGTRAP)\n\t\t\t== NOTIFY_STOP)\n\t\treturn;\n#endif /* CONFIG_KGDB_LOW_LEVEL_TRAP */\n#ifdef CONFIG_KPROBES\n\tif (notify_die(DIE_INT3, \"int3\", regs, error_code, 3, SIGTRAP)\n\t\t\t== NOTIFY_STOP)\n\t\treturn;\n#else\n\tif (notify_die(DIE_TRAP, \"int3\", regs, error_code, 3, SIGTRAP)\n\t\t\t== NOTIFY_STOP)\n\t\treturn;\n#endif\n\n\tpreempt_conditional_sti(regs);\n\tdo_trap(3, SIGTRAP, \"int3\", regs, error_code, NULL);\n\tpreempt_conditional_cli(regs);\n}",
        "output": "1",
        "idx": 2013
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "extract_lladdr_from_llao_aligned(uip_lladdr_t *dest) {\n  if(dest != NULL && nd6_opt_llao != NULL) {\n    memcpy(dest, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], UIP_LLADDR_LEN);\n    return 1;\n  }\n  return 0;\n}",
        "output": "1",
        "idx": 1741
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_dcbz(DisasContext *ctx)\n\n{\n\n    TCGv tcgv_addr;\n\n    TCGv_i32 tcgv_is_dcbzl;\n\n    int is_dcbzl = ctx->opcode & 0x00200000 ? 1 : 0;\n\n\n\n    gen_set_access_type(ctx, ACCESS_CACHE);\n\n    tcgv_addr = tcg_temp_new();\n\n    tcgv_is_dcbzl = tcg_const_i32(is_dcbzl);\n\n\n\n    gen_addr_reg_index(ctx, tcgv_addr);\n\n    gen_helper_dcbz(cpu_env, tcgv_addr, tcgv_is_dcbzl);\n\n\n\n    tcg_temp_free(tcgv_addr);\n\n    tcg_temp_free_i32(tcgv_is_dcbzl);\n\n}\n",
        "output": "1",
        "idx": 3241
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void setup_nofile_rlimit(unsigned long rlimit_nofile)\n{\n    struct rlimit rlim = {\n        .rlim_cur = rlimit_nofile,\n        .rlim_max = rlimit_nofile,\n    };\n\n    if (rlimit_nofile == 0) {\n        return; /* nothing to do */\n    }\n\n    if (setrlimit(RLIMIT_NOFILE, &rlim) < 0) {\n        /* Ignore SELinux denials */\n        if (errno == EPERM) {\n            return;\n        }\n\n        fuse_log(FUSE_LOG_ERR, \"setrlimit(RLIMIT_NOFILE): %m\\n\");\n        exit(1);\n    }\n}",
        "output": "0",
        "idx": 220
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int find_optimal_param(uint32_t sum, int n)\n\n{\n\n    int k, k_opt;\n\n    uint32_t nbits[MAX_RICE_PARAM+1];\n\n\n\n    k_opt = 0;\n\n    nbits[0] = UINT32_MAX;\n\n    for(k=0; k<=MAX_RICE_PARAM; k++) {\n\n        nbits[k] = rice_encode_count(sum, n, k);\n\n        if(nbits[k] < nbits[k_opt]) {\n\n            k_opt = k;\n\n        }\n\n    }\n\n    return k_opt;\n\n}\n",
        "output": "0",
        "idx": 779
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tcp_cwnd_reduction(struct sock *sk, const int prior_unsacked,\n\t\t\t       int fast_rexmit)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tint sndcnt = 0;\n\tint delta = tp->snd_ssthresh - tcp_packets_in_flight(tp);\n\tint newly_acked_sacked = prior_unsacked -\n\t\t\t\t (tp->packets_out - tp->sacked_out);\n\n\ttp->prr_delivered += newly_acked_sacked;\n\tif (tcp_packets_in_flight(tp) > tp->snd_ssthresh) {\n\t\tu64 dividend = (u64)tp->snd_ssthresh * tp->prr_delivered +\n\t\t\t       tp->prior_cwnd - 1;\n\t\tsndcnt = div_u64(dividend, tp->prior_cwnd) - tp->prr_out;\n\t} else {\n\t\tsndcnt = min_t(int, delta,\n\t\t\t       max_t(int, tp->prr_delivered - tp->prr_out,\n\t\t\t\t     newly_acked_sacked) + 1);\n\t}\n\n\tsndcnt = max(sndcnt, (fast_rexmit ? 1 : 0));\n\ttp->snd_cwnd = tcp_packets_in_flight(tp) + sndcnt;\n}",
        "output": "0",
        "idx": 6001
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int dsa_test()\n{\n    Source source;\n    FileSource(\"../certs/dsa1024.der\", source);\n    if (source.size() == 0) {\n        FileSource(\"../../certs/dsa1024.der\", source);  // for testsuite\n        if (source.size() == 0) {\n            FileSource(\"../../../certs/dsa1024.der\", source); // win32 Debug dir\n            if (source.size() == 0)\n                err_sys(\"where's your certs dir?\", -89);\n        }\n    }\n\n    const char msg[] = \"this is the message\";\n    byte signature[40];\n\n    DSA_PrivateKey priv(source);\n    DSA_Signer signer(priv);\n\n    SHA sha;\n    byte digest[SHA::DIGEST_SIZE];\n    sha.Update((byte*)msg, sizeof(msg));\n    sha.Final(digest);\n\n    signer.Sign(digest, signature, rng);\n\n    byte encoded[sizeof(signature) + 6];\n    byte decoded[40];\n\n    word32 encSz = EncodeDSA_Signature(signer.GetR(), signer.GetS(), encoded);\n    DecodeDSA_Signature(decoded, encoded, encSz);\n\n    DSA_PublicKey pub(priv);\n    DSA_Verifier verifier(pub);\n\n    if (!verifier.Verify(digest, decoded))\n        return -90;\n\n    return 0;\n}",
        "output": "1",
        "idx": 993
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "udisks_log (UDisksLogLevel     level,\n            const gchar       *function,\n            const gchar       *location,\n            const gchar       *format,\n            ...)\n{\n  va_list var_args;\n  gchar *message;\n\n  va_start (var_args, format);\n  message = g_strdup_vprintf (format, var_args);\n  va_end (var_args);\n\n#if GLIB_CHECK_VERSION(2, 50, 0)\n  g_log_structured (\"udisks\", (GLogLevelFlags) level,\n                    \"MESSAGE\", message, \"THREAD_ID\", \"%d\", (gint) syscall (SYS_gettid),\n                    \"CODE_FUNC\", function, \"CODE_FILE\", location);\n#else\n  g_log (\"udisks\", level, \"[%d]: %s [%s, %s()]\", (gint) syscall (SYS_gettid), message, location, function);\n#endif\n\n  g_free (message);\n}",
        "output": "1",
        "idx": 4307
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  output->type = input->type;\n\n  return context->ResizeTensor(context, output,\n                               TfLiteIntArrayCopy(input->dims));\n}",
        "output": "1",
        "idx": 4478
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QemuConsole *qemu_console_lookup_by_device(DeviceState *dev, uint32_t head)\n\n{\n\n    Error *local_err = NULL;\n\n    Object *obj;\n\n    uint32_t h;\n\n    int i;\n\n\n\n    for (i = 0; i < nb_consoles; i++) {\n\n        if (!consoles[i]) {\n\n            continue;\n\n        }\n\n        obj = object_property_get_link(OBJECT(consoles[i]),\n\n                                       \"device\", &local_err);\n\n        if (DEVICE(obj) != dev) {\n\n            continue;\n\n        }\n\n        h = object_property_get_int(OBJECT(consoles[i]),\n\n                                    \"head\", &local_err);\n\n        if (h != head) {\n\n            continue;\n\n        }\n\n        return consoles[i];\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "1",
        "idx": 3336
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cmd_pipe_pane_error_callback(__unused struct bufferevent *bufev,\n    __unused short what, void *data)\n{\n\tstruct window_pane\t*wp = data;\n\n\tlog_debug(\"%%%u pipe error\", wp->id);\n\n\tbufferevent_free(wp->pipe_event);\n\tclose(wp->pipe_fd);\n\twp->pipe_fd = -1;\n\n\tif (window_pane_destroy_ready(wp))\n\t\tserver_destroy_pane(wp, 1);\n}",
        "output": "0",
        "idx": 1305
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BOOL glyph_cache_put(rdpGlyphCache* glyphCache, UINT32 id, UINT32 index, rdpGlyph* glyph)\n{\n\trdpGlyph* prevGlyph;\n\n\tif (id > 9)\n\t{\n\t\tWLog_ERR(TAG, \"invalid glyph cache id: %\" PRIu32 \"\", id);\n\t\treturn FALSE;\n\t}\n\n\tif (index > glyphCache->glyphCache[id].number)\n\t{\n\t\tWLog_ERR(TAG, \"invalid glyph cache index: %\" PRIu32 \" in cache id: %\" PRIu32 \"\", index, id);\n\t\treturn FALSE;\n\t}\n\n\tWLog_Print(glyphCache->log, WLOG_DEBUG, \"GlyphCachePut: id: %\" PRIu32 \" index: %\" PRIu32 \"\", id,\n\t           index);\n\tprevGlyph = glyphCache->glyphCache[id].entries[index];\n\n\tif (prevGlyph)\n\t\tprevGlyph->Free(glyphCache->context, prevGlyph);\n\n\tglyphCache->glyphCache[id].entries[index] = glyph;\n\treturn TRUE;\n}",
        "output": "1",
        "idx": 4571
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "passIsKeyword(const char *token, CharsString *passLine, int *passLinepos) {\n\tint k;\n\tint length = (int)strlen(token);\n\tint ch = passLine->chars[*passLinepos + length + 1];\n\tif (((ch | 32) >= 'a' && (ch | 32) <= 'z') || (ch >= '0' && ch <= '9')) return 0;\n\tfor (k = 0; k < length && passLine->chars[*passLinepos + k + 1] == (widechar)token[k];\n\t\t\tk++)\n\t\t;\n\tif (k == length) {\n\t\t*passLinepos += length + 1;\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
        "output": "0",
        "idx": 2929
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "proxy_C_DecryptVerifyUpdate (CK_X_FUNCTION_LIST *self,\n                             CK_SESSION_HANDLE handle,\n                             CK_BYTE_PTR enc_part,\n                             CK_ULONG enc_part_len,\n                             CK_BYTE_PTR part,\n                             CK_ULONG_PTR part_len)\n{\n\tState *state = (State *)self;\n\tMapping map;\n\tCK_RV rv;\n\n\trv = map_session_to_real (state->px, &handle, &map, NULL);\n\tif (rv != CKR_OK)\n\t\treturn rv;\n\treturn (map.funcs->C_DecryptVerifyUpdate) (handle, enc_part, enc_part_len, part, part_len);\n}",
        "output": "0",
        "idx": 986
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t k90_show_current_profile(struct device *dev,\n\t\t\t\t\tstruct device_attribute *attr,\n\t\t\t\t\tchar *buf)\n{\n\tint ret;\n\tstruct usb_interface *usbif = to_usb_interface(dev->parent);\n\tstruct usb_device *usbdev = interface_to_usbdev(usbif);\n\tint current_profile;\n\tchar data[8];\n\n\tret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0),\n\t\t\t      K90_REQUEST_STATUS,\n\t\t\t      USB_DIR_IN | USB_TYPE_VENDOR |\n\t\t\t      USB_RECIP_DEVICE, 0, 0, data, 8,\n\t\t\t      USB_CTRL_SET_TIMEOUT);\n\tif (ret < 0) {\n\t\tdev_warn(dev, \"Failed to get K90 initial state (error %d).\\n\",\n\t\t\t ret);\n\t\treturn -EIO;\n\t}\n\tcurrent_profile = data[7];\n\tif (current_profile < 1 || current_profile > 3) {\n\t\tdev_warn(dev, \"Read invalid current profile: %02hhx.\\n\",\n\t\t\t data[7]);\n\t\treturn -EIO;\n\t}\n\n\treturn snprintf(buf, PAGE_SIZE, \"%d\\n\", current_profile);\n}",
        "output": "1",
        "idx": 2033
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int imap_exec(struct ImapAccountData *adata, const char *cmdstr, ImapCmdFlags flags)\n{\n  int rc;\n\n  rc = cmd_start(adata, cmdstr, flags);\n  if (rc < 0)\n  {\n    cmd_handle_fatal(adata);\n    return IMAP_EXEC_FATAL;\n  }\n\n  if (flags & IMAP_CMD_QUEUE)\n    return IMAP_EXEC_SUCCESS;\n\n  if ((flags & IMAP_CMD_POLL) && (C_ImapPollTimeout > 0) &&\n      ((mutt_socket_poll(adata->conn, C_ImapPollTimeout)) == 0))\n  {\n    mutt_error(_(\"Connection to %s timed out\"), adata->conn->account.host);\n    cmd_handle_fatal(adata);\n    return IMAP_EXEC_FATAL;\n  }\n\n  /* Allow interruptions, particularly useful if there are network problems. */\n  mutt_sig_allow_interrupt(true);\n  do\n  {\n    rc = imap_cmd_step(adata);\n  } while (rc == IMAP_RES_CONTINUE);\n  mutt_sig_allow_interrupt(false);\n\n  if (rc == IMAP_RES_NO)\n    return IMAP_EXEC_ERROR;\n  if (rc != IMAP_RES_OK)\n  {\n    if (adata->status != IMAP_FATAL)\n      return IMAP_EXEC_ERROR;\n\n    mutt_debug(LL_DEBUG1, \"command failed: %s\\n\", adata->buf);\n    return IMAP_EXEC_FATAL;\n  }\n\n  return IMAP_EXEC_SUCCESS;\n}",
        "output": "1",
        "idx": 357
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint64_t qpci_io_readq(QPCIDevice *dev, void *data)\n\n{\n\n    uintptr_t addr = (uintptr_t)data;\n\n\n\n    if (addr < QPCI_PIO_LIMIT) {\n\n        return dev->bus->pio_readq(dev->bus, addr);\n\n    } else {\n\n        uint64_t val;\n\n        dev->bus->memread(dev->bus, addr, &val, sizeof(val));\n\n        return le64_to_cpu(val);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 237
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pc_dimm_check_memdev_is_busy(Object *obj, const char *name,\n\n                                      Object *val, Error **errp)\n\n{\n\n    MemoryRegion *mr;\n\n\n\n    mr = host_memory_backend_get_memory(MEMORY_BACKEND(val), errp);\n\n    if (memory_region_is_mapped(mr)) {\n\n        char *path = object_get_canonical_path_component(val);\n\n        error_setg(errp, \"can't use already busy memdev: %s\", path);\n\n        g_free(path);\n\n    } else {\n\n        qdev_prop_allow_set_link_before_realize(obj, name, val, errp);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5427
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_jref_idct_add(uint8_t *dest, ptrdiff_t line_size, int16_t *block)\n\n{\n\n    ff_j_rev_dct(block);\n\n    ff_add_pixels_clamped(block, dest, line_size);\n\n}\n",
        "output": "1",
        "idx": 4837
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static unsigned int io_uring_nommu_mmap_capabilities(struct file *file)\n{\n\treturn NOMMU_MAP_DIRECT | NOMMU_MAP_READ | NOMMU_MAP_WRITE;\n}",
        "output": "0",
        "idx": 729
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SAPI_POST_HANDLER_FUNC(php_mb_post_handler)\n{\n\tconst mbfl_encoding *detected;\n\tphp_mb_encoding_handler_info_t info;\n\n\tMBSTRG(http_input_identify_post) = NULL;\n\n\tinfo.data_type              = PARSE_POST;\n\tinfo.separator              = \"&\";\n\tinfo.report_errors          = 0;\n\tinfo.to_encoding            = MBSTRG(internal_encoding);\n\tinfo.to_language            = MBSTRG(language);\n\tinfo.from_encodings         = MBSTRG(http_input_list);\n\tinfo.num_from_encodings     = MBSTRG(http_input_list_size); \n\tinfo.from_language          = MBSTRG(language);\n\n\tdetected = _php_mb_encoding_handler_ex(&info, arg, SG(request_info).post_data TSRMLS_CC);\n\n\tMBSTRG(http_input_identify) = detected;\n\tif (detected) {\n\t\tMBSTRG(http_input_identify_post) = detected;\n\t}\n}",
        "output": "1",
        "idx": 4058
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void bdrv_dirty_iter_init(BlockDriverState *bs,\n                          BdrvDirtyBitmap *bitmap, HBitmapIter *hbi)\n{\n    hbitmap_iter_init(hbi, bitmap->bitmap, 0);\n}",
        "output": "0",
        "idx": 4538
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qemu_kvm_start_vcpu(CPUState *env)\n\n{\n\n    env->thread = g_malloc0(sizeof(QemuThread));\n\n    env->halt_cond = g_malloc0(sizeof(QemuCond));\n\n    qemu_cond_init(env->halt_cond);\n\n    qemu_thread_create(env->thread, qemu_kvm_cpu_thread_fn, env,\n\n                       QEMU_THREAD_DETACHED);\n\n    while (env->created == 0) {\n\n        qemu_cond_wait(&qemu_cpu_cond, &qemu_global_mutex);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 3394
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_parse_path(void)\n\n{\n\n    g_test_trap_subprocess (\"/logging/parse_path/subprocess\", 0, 0);\n\n    g_test_trap_assert_passed();\n\n    g_test_trap_assert_stdout(\"\");\n\n    g_test_trap_assert_stderr(\"\");\n\n}\n",
        "output": "1",
        "idx": 5496
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_mask_parse (const RsvgDefs * defs, const char *str)\n{\n    char *name;\n\n    name = rsvg_get_url_string (str);\n    if (name) {\n        RsvgNode *val;\n        val = rsvg_defs_lookup (defs, name);\n        g_free (name);\n\n        if (val && RSVG_NODE_TYPE (val) == RSVG_NODE_TYPE_MASK)\n            return val;\n    }\n    return NULL;\n}",
        "output": "1",
        "idx": 2839
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void handle_satn_stop(ESPState *s)\n\n{\n\n    if (s->dma && !s->dma_enabled) {\n\n        s->dma_cb = handle_satn_stop;\n\n        return;\n\n    }\n\n    s->cmdlen = get_cmd(s, s->cmdbuf);\n\n    if (s->cmdlen) {\n\n        trace_esp_handle_satn_stop(s->cmdlen);\n\n        s->do_cmd = 1;\n\n        s->rregs[ESP_RSTAT] = STAT_TC | STAT_CD;\n\n        s->rregs[ESP_RINTR] = INTR_BS | INTR_FC;\n\n        s->rregs[ESP_RSEQ] = SEQ_CD;\n\n        esp_raise_irq(s);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 243
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void tqi_calculate_qtable(TqiContext *t, int quant)\n\n{\n\n    const int qscale = (215 - 2*quant)*5;\n\n    int i;\n\n\n\n    t->intra_matrix[0] = (ff_inv_aanscales[0] * ff_mpeg1_default_intra_matrix[0]) >> 11;\n\n    for(i=1; i<64; i++)\n\n        t->intra_matrix[i] = (ff_inv_aanscales[i] * ff_mpeg1_default_intra_matrix[i] * qscale + 32) >> 14;\n\n}\n",
        "output": "1",
        "idx": 5963
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int uio_mmap(struct file *filep, struct vm_area_struct *vma)\n{\n\tstruct uio_listener *listener = filep->private_data;\n\tstruct uio_device *idev = listener->dev;\n\tint mi;\n\tunsigned long requested_pages, actual_pages;\n\tint ret = 0;\n\n\tif (vma->vm_end < vma->vm_start)\n\t\treturn -EINVAL;\n\n\tvma->vm_private_data = idev;\n\n\tmi = uio_find_mem_index(vma);\n\tif (mi < 0)\n\t\treturn -EINVAL;\n\n\trequested_pages = vma_pages(vma);\n\tactual_pages = ((idev->info->mem[mi].addr & ~PAGE_MASK)\n\t\t\t+ idev->info->mem[mi].size + PAGE_SIZE -1) >> PAGE_SHIFT;\n\tif (requested_pages > actual_pages)\n\t\treturn -EINVAL;\n\n\tif (idev->info->mmap) {\n\t\tret = idev->info->mmap(idev->info, vma);\n\t\treturn ret;\n\t}\n\n\tswitch (idev->info->mem[mi].memtype) {\n\t\tcase UIO_MEM_PHYS:\n\t\t\treturn uio_mmap_physical(vma);\n\t\tcase UIO_MEM_LOGICAL:\n\t\tcase UIO_MEM_VIRTUAL:\n\t\t\treturn uio_mmap_logical(vma);\n\t\tdefault:\n\t\t\treturn -EINVAL;\n\t}\n}",
        "output": "0",
        "idx": 5116
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int null_draw_slice(AVFilterLink *link, int y, int h, int slice_dir) { return 0; }\n",
        "output": "0",
        "idx": 5549
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline pid_t getppid(void)\n{ return 1; }",
        "output": "0",
        "idx": 131
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fuse_update_get_attr(struct inode *inode, struct file *file,\n\t\t\t\tstruct kstat *stat, u32 request_mask,\n\t\t\t\tunsigned int flags)\n{\n\tstruct fuse_inode *fi = get_fuse_inode(inode);\n\tint err = 0;\n\tbool sync;\n\n\tif (flags & AT_STATX_FORCE_SYNC)\n\t\tsync = true;\n\telse if (flags & AT_STATX_DONT_SYNC)\n\t\tsync = false;\n\telse if (request_mask & READ_ONCE(fi->inval_mask))\n\t\tsync = true;\n\telse\n\t\tsync = time_before64(fi->i_time, get_jiffies_64());\n\n\tif (sync) {\n\t\tforget_all_cached_acls(inode);\n\t\terr = fuse_do_getattr(inode, stat, file);\n\t} else if (stat) {\n\t\tgeneric_fillattr(inode, stat);\n\t\tstat->mode = fi->orig_i_mode;\n\t\tstat->ino = fi->orig_ino;\n\t}\n\n\treturn err;\n}",
        "output": "0",
        "idx": 2757
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void VectorCopy44(const DDSVector4 source,\n  DDSVector4 *destination)\n{\n  destination->x = source.x;\n  destination->y = source.y;\n  destination->z = source.z;\n  destination->w = source.w;\n}",
        "output": "0",
        "idx": 1373
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_breakpoint_remove_by_ref(CPUState *env, CPUBreakpoint *breakpoint)\n\n{\n\n#if defined(TARGET_HAS_ICE)\n\n    TAILQ_REMOVE(&env->breakpoints, breakpoint, entry);\n\n\n\n    breakpoint_invalidate(env, breakpoint->pc);\n\n\n\n    qemu_free(breakpoint);\n\n#endif\n\n}\n",
        "output": "0",
        "idx": 5354
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void arm_cpu_register_types(void)\n\n{\n\n    int i;\n\n\n\n    type_register_static(&arm_cpu_type_info);\n\n    for (i = 0; i < ARRAY_SIZE(arm_cpus); i++) {\n\n        cpu_register(&arm_cpus[i]);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 12
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline u16 kvm_read_fs(void)\n{\n\tu16 seg;\n\tasm(\"mov %%fs, %0\" : \"=g\"(seg));\n\treturn seg;\n}",
        "output": "1",
        "idx": 1632
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *memalign_array(size_t el_size, size_t align, unsigned int count)\n{\n\tif (count*el_size >= MAX_MALLOC_SIZE) {\n\t\treturn NULL;\n\t}\n\n\treturn memalign(align, el_size*count);\n}",
        "output": "0",
        "idx": 2897
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dequantization_int_97(int x, int y, Jpeg2000Cblk *cblk,\n\n                               Jpeg2000Component *comp,\n\n                               Jpeg2000T1Context *t1, Jpeg2000Band *band)\n\n{\n\n    int i, j;\n\n    int w = cblk->coord[0][1] - cblk->coord[0][0];\n\n    for (j = 0; j < (cblk->coord[1][1] - cblk->coord[1][0]); ++j) {\n\n        int32_t *datap = &comp->i_data[(comp->coord[0][1] - comp->coord[0][0]) * (y + j) + x];\n\n        int *src = t1->data[j];\n\n        for (i = 0; i < w; ++i)\n\n            datap[i] = (src[i] * band->i_stepsize + (1<<14)) >> 15;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4747
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  int num_inputs = NumInputs(node);\n  TF_LITE_ENSURE(context, num_inputs >= 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  output->type = input1->type;\n\n  // Check that all input tensors have the same shape and type.\n  for (int i = kInputTensor1 + 1; i < num_inputs; ++i) {\n    const TfLiteTensor* input = GetInput(context, node, i);\n    TF_LITE_ENSURE(context, HaveSameShapes(input1, input));\n    TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input->type);\n  }\n\n  // Use the first input node's dimension to be the dimension of the output\n  // node.\n  TfLiteIntArray* input1_dims = input1->dims;\n  TfLiteIntArray* output_dims = TfLiteIntArrayCopy(input1_dims);\n  return context->ResizeTensor(context, output, output_dims);\n}",
        "output": "1",
        "idx": 4754
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t error_mem_read(void *opaque, target_phys_addr_t addr,\n\n                               unsigned size)\n\n{\n\n    abort();\n\n}\n",
        "output": "0",
        "idx": 6207
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_y_current(yankreg_T *yreg)\n{\n    y_current = yreg;\n}",
        "output": "0",
        "idx": 5510
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vtd_int_remap(X86IOMMUState *iommu, MSIMessage *src,\n\n                         MSIMessage *dst, uint16_t sid)\n\n{\n\n    return vtd_interrupt_remap_msi(INTEL_IOMMU_DEVICE(iommu), src, dst);\n\n}\n",
        "output": "0",
        "idx": 3736
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_CASE(\"Visit test\", \"[general]\")\n{\n    Definition ROOT, TAG, TAG_NAME, WS;\n\n    ROOT     <= seq(WS, zom(TAG));\n    TAG      <= seq(chr('['), TAG_NAME, chr(']'), WS);\n    TAG_NAME <= oom(seq(npd(chr(']')), dot()));\n    WS       <= zom(cls(\" \\t\"));\n\n    AssignIDToDefinition defIds;\n    ROOT.accept(defIds);\n\n    REQUIRE(defIds.ids.size() == 4);\n}",
        "output": "1",
        "idx": 2557
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg)\n{\n\treturn security_ops->file_fcntl(file, cmd, arg);\n}",
        "output": "0",
        "idx": 4983
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DEFUN (neighbor_strict_capability,\n       neighbor_strict_capability_cmd,\n       NEIGHBOR_CMD \"strict-capability-match\",\n       NEIGHBOR_STR\n       NEIGHBOR_ADDR_STR\n       \"Strict capability negotiation match\\n\")\n{\n  return peer_flag_set_vty (vty, argv[0], PEER_FLAG_STRICT_CAP_MATCH);\n}",
        "output": "0",
        "idx": 2979
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ahci_dma_prepare_buf(IDEDMA *dma, int is_write)\n{\n    AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);\n    IDEState *s = &ad->port.ifs[0];\n\n    ahci_populate_sglist(ad, &s->sg, s->io_buffer_offset);\n    s->io_buffer_size = s->sg.size;\n\n    DPRINTF(ad->port_no, \"len=%#x\\n\", s->io_buffer_size);\n    return s->io_buffer_size != 0;\n}",
        "output": "1",
        "idx": 1668
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cryptodev_builtin_cleanup(\n\n             CryptoDevBackend *backend,\n\n             Error **errp)\n\n{\n\n    CryptoDevBackendBuiltin *builtin =\n\n                      CRYPTODEV_BACKEND_BUILTIN(backend);\n\n    size_t i;\n\n    int queues = backend->conf.peers.queues;\n\n    CryptoDevBackendClient *cc;\n\n\n\n    for (i = 0; i < MAX_NUM_SESSIONS; i++) {\n\n        if (builtin->sessions[i] != NULL) {\n\n            cryptodev_builtin_sym_close_session(\n\n                    backend, i, 0, errp);\n\n        }\n\n    }\n\n\n\n    assert(queues == 1);\n\n\n\n    for (i = 0; i < queues; i++) {\n\n        cc = backend->conf.peers.ccs[i];\n\n        if (cc) {\n\n            cryptodev_backend_free_client(cc);\n\n            backend->conf.peers.ccs[i] = NULL;\n\n        }\n\n    }\n\n\n\n    cryptodev_backend_set_ready(backend, false);\n\n}\n",
        "output": "0",
        "idx": 981
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  uint64_t crop_left() const { return crop_left_; }",
        "output": "0",
        "idx": 1557
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int compress_coeffs(int *coef, int order, int c_bits)\n\n{\n\n    int i, res = 0;\n\n    const int low_idx   = c_bits ?  4 : 2;\n\n    const int shift_val = c_bits ?  8 : 4;\n\n    const int high_idx  = c_bits ? 11 : 5;\n\n    for (i = 0; i < order; i++)\n\n        if (coef[i] < low_idx || coef[i] > high_idx)\n\n            res++;\n\n    if (res == order)\n\n        for (i = 0; i < order; i++)\n\n            coef[i] -= (coef[i] > high_idx) ? shift_val : 0;\n\n    return res == order;\n\n}\n",
        "output": "0",
        "idx": 292
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *qemu_malloc(size_t size)\n\n{\n\n    if (!size && !allow_zero_malloc()) {\n\n        abort();\n\n    }\n\n    return oom_check(malloc(size ? size : 1));\n\n}\n",
        "output": "1",
        "idx": 680
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "        void stop()\n        {\n#ifdef CROW_ENABLE_SSL\n            if (ssl_used_)\n            {\n                if (ssl_server_) { ssl_server_->stop(); }\n            }\n            else\n#endif\n            {\n                std::vector<crow::websocket::connection*> websockets_to_close = websockets_;\n                for (auto websocket : websockets_to_close)\n                {\n                    CROW_LOG_INFO << \"Quitting Websocket: \" << websocket;\n                    websocket->close(\"Server Application Terminated\");\n                }\n                if (server_) { server_->stop(); }\n            }\n        }",
        "output": "1",
        "idx": 3000
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void process_read_by_type(struct async_read_op *op)\n{\n\tstruct bt_gatt_server *server = op->server;\n\tuint8_t ecode;\n\tstruct gatt_db_attribute *attr;\n\n\tattr = queue_pop_head(op->db_data);\n\n\tif (op->done || !attr) {\n\t\tbt_att_chan_send_rsp(op->chan, BT_ATT_OP_READ_BY_TYPE_RSP,\n\t\t\t\t\t\top->pdu, op->pdu_len);\n\t\tasync_read_op_destroy(op);\n\t\treturn;\n\t}\n\n\tecode = check_permissions(server, attr, BT_ATT_PERM_READ |\n\t\t\t\t\t\tBT_ATT_PERM_READ_AUTHEN |\n\t\t\t\t\t\tBT_ATT_PERM_READ_ENCRYPT);\n\tif (ecode)\n\t\tgoto error;\n\n\tif (gatt_db_attribute_read(attr, 0, op->opcode, server->att,\n\t\t\t\t\tread_by_type_read_complete_cb, op))\n\t\treturn;\n\n\tecode = BT_ATT_ERROR_UNLIKELY;\n\nerror:\n\tbt_att_chan_send_error_rsp(op->chan, BT_ATT_OP_READ_BY_TYPE_REQ,\n\t\t\t\tgatt_db_attribute_get_handle(attr), ecode);\n\tasync_read_op_destroy(op);\n}",
        "output": "1",
        "idx": 2688
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void nvme_req_clear(NvmeRequest *req)\n{\n    req->ns = NULL;\n    req->opaque = NULL;\n    req->aiocb = NULL;\n    memset(&req->cqe, 0x0, sizeof(req->cqe));\n    req->status = NVME_SUCCESS;\n}",
        "output": "0",
        "idx": 5119
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ut64 r_rebase_offset_to_paddr(RKernelCacheObj *obj, struct section_t *sections, ut64 offset) {\n\tut64 vaddr = obj->rebase_info->kernel_base + offset;\n\tint i = 0;\n\tfor (; !sections[i].last; i++) {\n\t\tif (sections[i].addr <= vaddr && vaddr < (sections[i].addr + sections[i].vsize)) {\n\t\t\treturn sections[i].offset + (vaddr - sections[i].addr);\n\t\t}\n\t}\n\treturn offset;\n}",
        "output": "0",
        "idx": 4692
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int fit_image_check_type(const void *fit, int noffset, uint8_t type)\n{\n\tuint8_t image_type;\n\n\tif (fit_image_get_type(fit, noffset, &image_type))\n\t\treturn 0;\n\treturn (type == image_type);\n}",
        "output": "0",
        "idx": 696
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Router::RouteConfigProvider* routeConfigProvider() override {\n    return route_config_provider2_.get();\n  }",
        "output": "0",
        "idx": 3017
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void filter_edges(void *dst1, void *prev1, void *cur1, void *next1,\n\n                         int w, int prefs, int mrefs, int parity, int mode)\n\n{\n\n    uint8_t *dst  = dst1;\n\n    uint8_t *prev = prev1;\n\n    uint8_t *cur  = cur1;\n\n    uint8_t *next = next1;\n\n    int x;\n\n    uint8_t *prev2 = parity ? prev : cur ;\n\n    uint8_t *next2 = parity ? cur  : next;\n\n\n\n    /* Only edge pixels need to be processed here.  A constant value of false\n\n     * for is_not_edge should let the compiler ignore the whole branch. */\n\n    FILTER(0, 3, 0)\n\n\n\n    dst  = (uint8_t*)dst1  + w - 3;\n\n    prev = (uint8_t*)prev1 + w - 3;\n\n    cur  = (uint8_t*)cur1  + w - 3;\n\n    next = (uint8_t*)next1 + w - 3;\n\n    prev2 = (uint8_t*)(parity ? prev : cur);\n\n    next2 = (uint8_t*)(parity ? cur  : next);\n\n\n\n    FILTER(w - 3, w, 0)\n\n}\n",
        "output": "1",
        "idx": 5507
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xen_pt_bar_reg_init(XenPCIPassthroughState *s, XenPTRegInfo *reg,\n\n                               uint32_t real_offset, uint32_t *data)\n\n{\n\n    uint32_t reg_field = 0;\n\n    int index;\n\n\n\n    index = xen_pt_bar_offset_to_index(reg->offset);\n\n    if (index < 0 || index >= PCI_NUM_REGIONS) {\n\n        XEN_PT_ERR(&s->dev, \"Internal error: Invalid BAR index [%d].\\n\", index);\n\n        return -1;\n\n    }\n\n\n\n    /* set BAR flag */\n\n    s->bases[index].bar_flag = xen_pt_bar_reg_parse(s, reg);\n\n    if (s->bases[index].bar_flag == XEN_PT_BAR_FLAG_UNUSED) {\n\n        reg_field = XEN_PT_INVALID_REG;\n\n    }\n\n\n\n    *data = reg_field;\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 6162
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool gfar_add_rx_frag(struct gfar_rx_buff *rxb, u32 lstatus,\n\t\t\t     struct sk_buff *skb, bool first)\n{\n\tint size = lstatus & BD_LENGTH_MASK;\n\tstruct page *page = rxb->page;\n\n\tif (likely(first)) {\n\t\tskb_put(skb, size);\n\t} else {\n\t\t/* the last fragments' length contains the full frame length */\n\t\tif (lstatus & BD_LFLAG(RXBD_LAST))\n\t\t\tsize -= skb->len;\n\n\t\tskb_add_rx_frag(skb, skb_shinfo(skb)->nr_frags, page,\n\t\t\t\trxb->page_offset + RXBUF_ALIGNMENT,\n\t\t\t\tsize, GFAR_RXB_TRUESIZE);\n\t}\n\n\t/* try reuse page */\n\tif (unlikely(page_count(page) != 1 || page_is_pfmemalloc(page)))\n\t\treturn false;\n\n\t/* change offset to the other half */\n\trxb->page_offset ^= GFAR_RXB_TRUESIZE;\n\n\tpage_ref_inc(page);\n\n\treturn true;\n}",
        "output": "1",
        "idx": 6126
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ip_options_get(struct net *net, struct ip_options **optp,\n\t\t   unsigned char *data, int optlen)\n{\n\tstruct ip_options *opt = ip_options_get_alloc(optlen);\n\n\tif (!opt)\n\t\treturn -ENOMEM;\n\tif (optlen)\n\t\tmemcpy(opt->__data, data, optlen);\n\treturn ip_options_get_finish(net, optp, opt, optlen);\n}",
        "output": "1",
        "idx": 316
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_mtsr(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_REG);\n\n#else\n\n    TCGv t0;\n\n    if (unlikely(ctx->pr)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_REG);\n\n        return;\n\n    }\n\n    t0 = tcg_const_tl(SR(ctx->opcode));\n\n    gen_helper_store_sr(cpu_env, t0, cpu_gpr[rS(ctx->opcode)]);\n\n    tcg_temp_free(t0);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 3195
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int do_format(int drive, struct format_descr *tmp_format_req)\n{\n\tint ret;\n\n\tif (lock_fdc(drive))\n\t\treturn -EINTR;\n\n\tset_floppy(drive);\n\tif (!_floppy ||\n\t    _floppy->track > drive_params[current_drive].tracks ||\n\t    tmp_format_req->track >= _floppy->track ||\n\t    tmp_format_req->head >= _floppy->head ||\n\t    (_floppy->sect << 2) % (1 << FD_SIZECODE(_floppy)) ||\n\t    !_floppy->fmt_gap) {\n\t\tprocess_fd_request();\n\t\treturn -EINVAL;\n\t}\n\tformat_req = *tmp_format_req;\n\tformat_errors = 0;\n\tcont = &format_cont;\n\terrors = &format_errors;\n\tret = wait_til_done(redo_format, true);\n\tif (ret == -EINTR)\n\t\treturn -EINTR;\n\tprocess_fd_request();\n\treturn ret;\n}",
        "output": "1",
        "idx": 4081
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold OMXContext *omx_init(void *logctx, const char *libname, const char *prefix)\n\n{\n\n    static const char * const libnames[] = {\n\n        \"libOMX_Core.so\",\n\n        \"libOmxCore.so\",\n\n        NULL\n\n    };\n\n    const char* const* nameptr;\n\n    int ret = AVERROR_ENCODER_NOT_FOUND;\n\n    OMXContext *omx_context;\n\n\n\n    omx_context = av_mallocz(sizeof(*omx_context));\n\n    if (!omx_context)\n\n        return NULL;\n\n    if (libname) {\n\n        ret = omx_try_load(omx_context, logctx, libname, prefix);\n\n        if (ret < 0) {\n\n            av_free(omx_context);\n\n            return NULL;\n\n        }\n\n    } else {\n\n        for (nameptr = libnames; *nameptr; nameptr++)\n\n            if (!(ret = omx_try_load(omx_context, logctx, *nameptr, prefix)))\n\n                break;\n\n        if (!*nameptr) {\n\n            av_free(omx_context);\n\n            return NULL;\n\n        }\n\n    }\n\n\n\n    omx_context->ptr_Init();\n\n    return omx_context;\n\n}\n",
        "output": "1",
        "idx": 4729
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void helper_wrpsr(CPUSPARCState *env, target_ulong new_psr)\n\n{\n\n    if ((new_psr & PSR_CWP) >= env->nwindows) {\n\n        cpu_raise_exception_ra(env, TT_ILL_INSN, GETPC());\n\n    } else {\n\n\n\n        cpu_put_psr(env, new_psr);\n\n\n    }\n\n}",
        "output": "1",
        "idx": 3514
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int thread_execute(AVCodecContext *avctx, action_func* func, void *arg, int *ret, int job_count, int job_size)\n\n{\n\n    SliceThreadContext *c = avctx->internal->thread_ctx;\n\n\n\n    if (!(avctx->active_thread_type&FF_THREAD_SLICE) || avctx->thread_count <= 1)\n\n        return avcodec_default_execute(avctx, func, arg, ret, job_count, job_size);\n\n\n\n    if (job_count <= 0)\n\n        return 0;\n\n\n\n    pthread_mutex_lock(&c->current_job_lock);\n\n\n\n    c->current_job = avctx->thread_count;\n\n    c->job_count = job_count;\n\n    c->job_size = job_size;\n\n    c->args = arg;\n\n    c->func = func;\n\n    c->rets = ret;\n\n    c->current_execute++;\n\n    pthread_cond_broadcast(&c->current_job_cond);\n\n\n\n    thread_park_workers(c, avctx->thread_count);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 412
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void scan_inflight(struct sock *x, void (*func)(struct unix_sock *),\n\t\t\t  struct sk_buff_head *hitlist)\n{\n\tstruct sk_buff *skb;\n\tstruct sk_buff *next;\n\n\tspin_lock(&x->sk_receive_queue.lock);\n\treceive_queue_for_each_skb(x, next, skb) {\n\t\t/*\n\t\t *\tDo we have file descriptors ?\n\t\t */\n\t\tif (UNIXCB(skb).fp) {\n\t\t\tbool hit = false;\n\t\t\t/*\n\t\t\t *\tProcess the descriptors of this socket\n\t\t\t */\n\t\t\tint nfd = UNIXCB(skb).fp->count;\n\t\t\tstruct file **fp = UNIXCB(skb).fp->fp;\n\t\t\twhile (nfd--) {\n\t\t\t\t/*\n\t\t\t\t *\tGet the socket the fd matches\n\t\t\t\t *\tif it indeed does so\n\t\t\t\t */\n\t\t\t\tstruct sock *sk = unix_get_socket(*fp++);\n\t\t\t\tif (sk) {\n\t\t\t\t\thit = true;\n\t\t\t\t\tfunc(unix_sk(sk));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hit && hitlist != NULL) {\n\t\t\t\t__skb_unlink(skb, &x->sk_receive_queue);\n\t\t\t\t__skb_queue_tail(hitlist, skb);\n\t\t\t}\n\t\t}\n\t}\n\tspin_unlock(&x->sk_receive_queue.lock);\n}",
        "output": "1",
        "idx": 402
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int handle_update_file_cred(int dirfd, const char *name, FsCred *credp)\n\n{\n\n    int fd, ret;\n\n    fd = openat(dirfd, name, O_NONBLOCK | O_NOFOLLOW);\n\n    if (fd < 0) {\n\n        return fd;\n\n    }\n\n    ret = fchmod(fd, credp->fc_mode & 07777);\n\n    if (ret < 0) {\n\n        goto err_out;\n\n    }\n\n    ret = fchownat(fd, \"\", credp->fc_uid, credp->fc_gid, AT_EMPTY_PATH);\n\nerr_out:\n\n    close(fd);\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 4695
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pc_compat_0_13(MachineState *machine)\n\n{\n\n    pc_compat_1_2(machine);\n\n    kvmclock_enabled = false;\n\n}\n",
        "output": "0",
        "idx": 3482
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CURLcode hsts_out(struct stsentry *sts, FILE *fp)\n{\n  struct tm stamp;\n  if(sts->expires != TIME_T_MAX) {\n    CURLcode result = Curl_gmtime((time_t)sts->expires, &stamp);\n    if(result)\n      return result;\n    fprintf(fp, \"%s%s \\\"%d%02d%02d %02d:%02d:%02d\\\"\\n\",\n            sts->includeSubDomains ? \".\": \"\", sts->host,\n            stamp.tm_year + 1900, stamp.tm_mon + 1, stamp.tm_mday,\n            stamp.tm_hour, stamp.tm_min, stamp.tm_sec);\n  }\n  else\n    fprintf(fp, \"%s%s \\\"%s\\\"\\n\",\n            sts->includeSubDomains ? \".\": \"\", sts->host, UNLIMITED);\n  return CURLE_OK;\n}",
        "output": "0",
        "idx": 865
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "httpPrintf(http_t     *http,\t\t/* I - HTTP connection */\n           const char *format,\t\t/* I - printf-style format string */\n\t   ...)\t\t\t\t/* I - Additional args as needed */\n{\n  ssize_t\tbytes;\t\t\t/* Number of bytes to write */\n  char\t\tbuf[16384];\t\t/* Buffer for formatted string */\n  va_list\tap;\t\t\t/* Variable argument pointer */\n\n\n  DEBUG_printf((\"2httpPrintf(http=%p, format=\\\"%s\\\", ...)\", (void *)http, format));\n\n  va_start(ap, format);\n  bytes = vsnprintf(buf, sizeof(buf), format, ap);\n  va_end(ap);\n\n  DEBUG_printf((\"3httpPrintf: (\" CUPS_LLFMT \" bytes) %s\", CUPS_LLCAST bytes, buf));\n\n  if (http->data_encoding == HTTP_ENCODING_FIELDS)\n    return ((int)httpWrite2(http, buf, (size_t)bytes));\n  else\n  {\n    if (http->wused)\n    {\n      DEBUG_puts(\"4httpPrintf: flushing existing data...\");\n\n      if (httpFlushWrite(http) < 0)\n\treturn (-1);\n    }\n\n    return ((int)http_write(http, buf, (size_t)bytes));\n  }\n}",
        "output": "1",
        "idx": 622
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "flatpak_run_apply_env_vars (FlatpakBwrap *bwrap, FlatpakContext *context)\n{\n  GHashTableIter iter;\n  gpointer key, value;\n\n  g_hash_table_iter_init (&iter, context->env_vars);\n  while (g_hash_table_iter_next (&iter, &key, &value))\n    {\n      const char *var = key;\n      const char *val = value;\n\n      if (val && val[0] != 0)\n        flatpak_bwrap_set_env (bwrap, var, val, TRUE);\n      else\n        flatpak_bwrap_unset_env (bwrap, var);\n    }\n}",
        "output": "1",
        "idx": 247
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline uint32_t mipsdsp_sub32(int32_t a, int32_t b, CPUMIPSState *env)\n\n{\n\n    int32_t temp;\n\n\n\n    temp = a - b;\n\n    if (MIPSDSP_OVERFLOW(a, -b, temp, 0x80000000)) {\n\n        set_DSPControl_overflow_flag(1, 20, env);\n\n    }\n\n\n\n    return temp;\n\n}\n",
        "output": "1",
        "idx": 302
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "/* {{{ date_period_it_dtor */\nstatic void date_period_it_dtor(zend_object_iterator *iter TSRMLS_DC)\n{\n\tdate_period_it *iterator = (date_period_it *)iter;\n\n\tdate_period_it_invalidate_current(iter TSRMLS_CC);\n\n\tzval_ptr_dtor(&iterator->date_period_zval);\n\n\tefree(iterator);",
        "output": "0",
        "idx": 5681
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void _enqueue(PG *pg, uint64_t priority) {\n    if (!agent_queue.empty() &&\n\tagent_queue.rbegin()->first < priority)\n      agent_valid_iterator = false;  // inserting higher-priority queue\n    set<PGRef>& nq = agent_queue[priority];\n    if (nq.empty())\n      agent_cond.Signal();\n    nq.insert(pg);\n  }",
        "output": "0",
        "idx": 3614
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long long rdbLoadMillisecondTime(rio *rdb, int rdbver) {\n    int64_t t64;\n    if (rioRead(rdb,&t64,8) == 0) return LLONG_MAX;\n    if (rdbver >= 9) /* Check the top comment of this function. */\n        memrev64ifbe(&t64); /* Convert in big endian if the system is BE. */\n    return (long long)t64;\n}",
        "output": "0",
        "idx": 4947
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int raw_reopen_prepare(BDRVReopenState *reopen_state,\n\n                              BlockReopenQueue *queue, Error **errp)\n\n{\n\n    assert(reopen_state != NULL);\n\n    assert(reopen_state->bs != NULL);\n\n\n\n    reopen_state->opaque = g_new0(BDRVRawState, 1);\n\n\n\n    return raw_read_options(\n\n        reopen_state->options,\n\n        reopen_state->bs,\n\n        reopen_state->opaque,\n\n        errp);\n\n}\n",
        "output": "0",
        "idx": 2607
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int virtio_rng_device_exit(DeviceState *qdev)\n\n{\n\n    VirtIORNG *vrng = VIRTIO_RNG(qdev);\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(qdev);\n\n\n\n    timer_del(vrng->rate_limit_timer);\n\n    timer_free(vrng->rate_limit_timer);\n\n    unregister_savevm(qdev, \"virtio-rng\", vrng);\n\n    virtio_cleanup(vdev);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1524
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ppce500_reset_device_tree(void *opaque)\n\n{\n\n    DeviceTreeParams *p = opaque;\n\n    ppce500_load_device_tree(p->machine, &p->params, p->addr, p->initrd_base,\n\n                             p->initrd_size, false);\n\n}\n",
        "output": "0",
        "idx": 3732
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void code_gen_alloc(size_t tb_size)\n\n{\n\n    tcg_ctx.code_gen_buffer_size = size_code_gen_buffer(tb_size);\n\n    tcg_ctx.code_gen_buffer = alloc_code_gen_buffer();\n\n    if (tcg_ctx.code_gen_buffer == NULL) {\n\n        fprintf(stderr, \"Could not allocate dynamic translator buffer\\n\");\n\n        exit(1);\n\n    }\n\n\n\n    qemu_madvise(tcg_ctx.code_gen_buffer, tcg_ctx.code_gen_buffer_size,\n\n                 QEMU_MADV_HUGEPAGE);\n\n\n\n    /* Estimate a good size for the number of TBs we can support.  We\n\n       still haven't deducted the prologue from the buffer size here,\n\n       but that's minimal and won't affect the estimate much.  */\n\n    tcg_ctx.code_gen_max_blocks\n\n        = tcg_ctx.code_gen_buffer_size / CODE_GEN_AVG_BLOCK_SIZE;\n\n    tcg_ctx.tb_ctx.tbs = g_new(TranslationBlock, tcg_ctx.code_gen_max_blocks);\n\n\n\n    qemu_mutex_init(&tcg_ctx.tb_ctx.tb_lock);\n\n}\n",
        "output": "1",
        "idx": 5862
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_get_channel_layout_nb_channels(int64_t channel_layout)\n\n{\n\n    int count;\n\n    uint64_t x = channel_layout;\n\n    for (count = 0; x; count++)\n\n        x &= x-1; // unset lowest set bit\n\n    return count;\n\n}\n",
        "output": "0",
        "idx": 4932
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "evbuffer_add(struct evbuffer *buf, const void *data, size_t datlen)\n{\n\tsize_t need = buf->misalign + buf->off + datlen;\n\tsize_t oldoff = buf->off;\n\n\tif (buf->totallen < need) {\n\t\tif (evbuffer_expand(buf, datlen) == -1)\n\t\t\treturn (-1);\n\t}\n\n\tmemcpy(buf->buffer + buf->off, data, datlen);\n\tbuf->off += datlen;\n\n\tif (datlen && buf->cb != NULL)\n\t\t(*buf->cb)(buf, oldoff, buf->off, buf->cbarg);\n\n\treturn (0);\n}",
        "output": "1",
        "idx": 2902
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_peek_byte(QEMUFile *f, int offset)\n\n{\n\n    int index = f->buf_index + offset;\n\n\n\n    assert(!qemu_file_is_writable(f));\n\n    assert(offset < IO_BUF_SIZE);\n\n\n\n    if (index >= f->buf_size) {\n\n        qemu_fill_buffer(f);\n\n        index = f->buf_index + offset;\n\n        if (index >= f->buf_size) {\n\n            return 0;\n\n        }\n\n    }\n\n    return f->buf[index];\n\n}\n",
        "output": "1",
        "idx": 259
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "report_error (format, va_alist)\n     const char *format;\n     va_dcl\n#endif\n{\n  va_list args;\n\n  error_prolog (1);\n\n  SH_VA_START (args, format);\n\n  vfprintf (stderr, format, args);\n  fprintf (stderr, \"\\n\");\n\n  va_end (args);\n  if (exit_immediately_on_error)\n    exit_shell (1);\n}",
        "output": "1",
        "idx": 949
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LEX::create_unit(SELECT_LEX *first_sel)\n{\n  SELECT_LEX_UNIT *unit;\n  DBUG_ENTER(\"LEX::create_unit\");\n\n  unit = first_sel->master_unit();\n\n  if (!unit && !(unit= alloc_unit()))\n    DBUG_RETURN(NULL);\n\n  unit->register_select_chain(first_sel);\n  if (first_sel->next_select())\n  {\n    unit->reset_distinct();\n    DBUG_ASSERT(!unit->fake_select_lex);\n    if (unit->add_fake_select_lex(thd))\n      DBUG_RETURN(NULL);\n  }\n  DBUG_RETURN(unit);\n}",
        "output": "0",
        "idx": 6115
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_visitor_in_native_list_uint8(TestInputVisitorData *data,\n\n                                             const void *unused)\n\n{\n\n    test_native_list_integer_helper(data, unused,\n\n                                    USER_DEF_NATIVE_LIST_UNION_KIND_U8);\n\n}\n",
        "output": "0",
        "idx": 2968
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_add_response(const char *code, const char *fmt, ...) {\n    va_list args;\n    va_start(args, fmt);\n    size_t sz = sizeof(add_response)/sizeof(add_response[0]);\n    int num = snprintf(add_response, sz, \"%s:\", code);\n    vsnprintf(add_response + num, sz - num, fmt, args);\n    va_end(args);\n    has_add_respose = true;\n}",
        "output": "0",
        "idx": 2935
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t select_lease_time(struct dhcp_packet *packet)\n{\n\tuint32_t lease_time_sec = server_config.max_lease_sec;\n\tuint8_t *lease_time_opt = udhcp_get_option(packet, DHCP_LEASE_TIME);\n\tif (lease_time_opt) {\n\t\tmove_from_unaligned32(lease_time_sec, lease_time_opt);\n\t\tlease_time_sec = ntohl(lease_time_sec);\n\t\tif (lease_time_sec > server_config.max_lease_sec)\n\t\t\tlease_time_sec = server_config.max_lease_sec;\n\t\tif (lease_time_sec < server_config.min_lease_sec)\n\t\t\tlease_time_sec = server_config.min_lease_sec;\n\t}\n\treturn lease_time_sec;\n}",
        "output": "1",
        "idx": 1459
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ntlm_write_message_fields_buffer(wStream* s, NTLM_MESSAGE_FIELDS* fields)\n{\n\tif (fields->Len > 0)\n\t{\n\t\tStream_SetPosition(s, fields->BufferOffset);\n\t\tStream_Write(s, fields->Buffer, fields->Len);\n\t}\n}",
        "output": "1",
        "idx": 69
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int v4l2_encode_init(AVCodecContext *avctx)\n\n{\n\n    V4L2m2mContext *s = avctx->priv_data;\n\n    V4L2Context *capture = &s->capture;\n\n    V4L2Context *output = &s->output;\n\n    int ret;\n\n\n\n    /* common settings output/capture */\n\n    output->height = capture->height = avctx->height;\n\n    output->width = capture->width = avctx->width;\n\n\n\n    /* output context */\n\n    output->av_codec_id = AV_CODEC_ID_RAWVIDEO;\n\n    output->av_pix_fmt = avctx->pix_fmt;\n\n\n\n    /* capture context */\n\n    capture->av_codec_id = avctx->codec_id;\n\n    capture->av_pix_fmt = AV_PIX_FMT_NONE;\n\n\n\n    ret = ff_v4l2_m2m_codec_init(avctx);\n\n    if (ret) {\n\n        av_log(avctx, AV_LOG_ERROR, \"can't configure encoder\\n\");\n\n        return ret;\n\n    }\n\n\n\n    return v4l2_prepare_encoder(s);\n\n}\n",
        "output": "1",
        "idx": 5068
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int megasas_map_dcmd(MegasasState *s, MegasasCmd *cmd)\n\n{\n\n    dma_addr_t iov_pa, iov_size;\n\n\n\n    cmd->flags = le16_to_cpu(cmd->frame->header.flags);\n\n    if (!cmd->frame->header.sge_count) {\n\n        trace_megasas_dcmd_zero_sge(cmd->index);\n\n        cmd->iov_size = 0;\n\n        return 0;\n\n    } else if (cmd->frame->header.sge_count > 1) {\n\n        trace_megasas_dcmd_invalid_sge(cmd->index,\n\n                                       cmd->frame->header.sge_count);\n\n        cmd->iov_size = 0;\n\n        return -1;\n\n    }\n\n    iov_pa = megasas_sgl_get_addr(cmd, &cmd->frame->dcmd.sgl);\n\n    iov_size = megasas_sgl_get_len(cmd, &cmd->frame->dcmd.sgl);\n\n    pci_dma_sglist_init(&cmd->qsg, PCI_DEVICE(s), 1);\n\n    qemu_sglist_add(&cmd->qsg, iov_pa, iov_size);\n\n    cmd->iov_size = iov_size;\n\n    return cmd->iov_size;\n\n}\n",
        "output": "1",
        "idx": 1689
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(pcntl_waitpid)\n{\n\tlong pid, options = 0;\n\tzval *z_status = NULL;\n\tint status;\n\tpid_t child_id;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"lz|l\", &pid, &z_status, &options) == FAILURE)\n\t\treturn;\n\t\n\tconvert_to_long_ex(&z_status);\n\n\tstatus = Z_LVAL_P(z_status);\n\n\tchild_id = waitpid((pid_t) pid, &status, options);\n\n\tif (child_id < 0) {\n\t\tPCNTL_G(last_error) = errno;\n\t}\n\n\tZ_LVAL_P(z_status) = status;\n\n\tRETURN_LONG((long) child_id);\n}",
        "output": "1",
        "idx": 52
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void hpet_init(qemu_irq *irq) {\n\n    int i, iomemtype;\n\n    HPETState *s;\n\n\n\n    DPRINTF (\"hpet_init\\n\");\n\n\n\n    s = qemu_mallocz(sizeof(HPETState));\n\n    hpet_statep = s;\n\n    s->irqs = irq;\n\n    for (i=0; i<HPET_NUM_TIMERS; i++) {\n\n        HPETTimer *timer = &s->timer[i];\n\n        timer->qemu_timer = qemu_new_timer(vm_clock, hpet_timer, timer);\n\n    }\n\n    vmstate_register(-1, &vmstate_hpet, s);\n\n    qemu_register_reset(hpet_reset, s);\n\n    /* HPET Area */\n\n    iomemtype = cpu_register_io_memory(hpet_ram_read,\n\n                                       hpet_ram_write, s);\n\n    cpu_register_physical_memory(HPET_BASE, 0x400, iomemtype);\n\n}\n",
        "output": "1",
        "idx": 1612
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int chown_terminal(int fd, uid_t uid) {\n        struct stat st;\n\n        assert(fd >= 0);\n\n        /* This might fail. What matters are the results. */\n        fchown(fd, uid, -1);\n        fchmod(fd, TTY_MODE);\n\n        if (fstat(fd, &st) < 0)\n                return -errno;\n\n        if (st.st_uid != uid ||\n            st.st_mode != TTY_MODE)\n                return -EPERM;\n\n        return 0;\n}",
        "output": "0",
        "idx": 640
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void vmxnet3_ring_read_curr_cell(Vmxnet3Ring *ring, void *buff)\n\n{\n\n    vmw_shmem_read(vmxnet3_ring_curr_cell_pa(ring), buff, ring->cell_size);\n\n}\n",
        "output": "1",
        "idx": 1286
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, 0);\n\n  switch (input->type) {\n    case kTfLiteFloat32:\n      return EvalImpl<kernel_type, kTfLiteFloat32>(context, node);\n    case kTfLiteUInt8:\n      return EvalImpl<kernel_type, kTfLiteUInt8>(context, node);\n    case kTfLiteInt8:\n      return EvalImpl<kernel_type, kTfLiteInt8>(context, node);\n    case kTfLiteInt16:\n      return EvalImpl<kernel_type, kTfLiteInt16>(context, node);\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n}",
        "output": "1",
        "idx": 1663
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "XML_SetBillionLaughsAttackProtectionMaximumAmplification(\n    XML_Parser parser, float maximumAmplificationFactor) {\n  if ((parser == NULL) || (parser->m_parentParser != NULL)\n      || isnan(maximumAmplificationFactor)\n      || (maximumAmplificationFactor < 1.0f)) {\n    return XML_FALSE;\n  }\n  parser->m_accounting.maximumAmplificationFactor = maximumAmplificationFactor;\n  return XML_TRUE;\n}",
        "output": "0",
        "idx": 1337
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_rdt(E1000State *s, int index, uint32_t val)\n\n{\n\n    s->check_rxov = 0;\n\n    s->mac_reg[index] = val & 0xffff;\n\n    if (e1000_has_rxbufs(s, 1)) {\n\n        qemu_flush_queued_packets(&s->nic->nc);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2558
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int hugetlb_get_quota(struct address_space *mapping, long delta)\n{\n\tint ret = 0;\n\tstruct hugetlbfs_sb_info *sbinfo = HUGETLBFS_SB(mapping->host->i_sb);\n\n\tif (sbinfo->free_blocks > -1) {\n\t\tspin_lock(&sbinfo->stat_lock);\n\t\tif (sbinfo->free_blocks - delta >= 0)\n\t\t\tsbinfo->free_blocks -= delta;\n\t\telse\n\t\t\tret = -ENOMEM;\n\t\tspin_unlock(&sbinfo->stat_lock);\n\t}\n\n\treturn ret;\n}",
        "output": "1",
        "idx": 5118
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qdev_prop_set_defaults(DeviceState *dev, Property *props)\n\n{\n\n    if (!props)\n\n        return;\n\n    while (props->name) {\n\n        if (props->defval) {\n\n            qdev_prop_cpy(dev, props, props->defval);\n\n        }\n\n        props++;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1147
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int bdrv_rd_badreq_sectors(BlockDriverState *bs,\n\n                                  int64_t sector_num, int nb_sectors)\n\n{\n\n    return\n\n        nb_sectors < 0 ||\n\n        sector_num < 0 ||\n\n        nb_sectors > bs->total_sectors ||\n\n        sector_num > bs->total_sectors - nb_sectors;\n\n}\n",
        "output": "1",
        "idx": 4182
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ncp_reply_be16(struct ncp_server *server, int offset)\n{\n\treturn get_unaligned_be16(ncp_reply_data(server, offset));\n}",
        "output": "0",
        "idx": 2666
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gint conv_jistoutf8(gchar *outbuf, gint outlen, const gchar *inbuf)\n{\n\tgchar *eucstr;\n\n\tXalloca(eucstr, outlen, return -1);\n\n\tif (conv_jistoeuc(eucstr, outlen, inbuf) <0)\n\t\treturn -1;\n\tif (conv_euctoutf8(outbuf, outlen, eucstr) < 0)\n\t\treturn -1;\n\treturn 0;\n}",
        "output": "0",
        "idx": 3590
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cJSON_AddItemReferenceToObject( cJSON *object, const char *string, cJSON *item )\n{\n\tcJSON_AddItemToObject( object, string, create_reference( item ) );\n}",
        "output": "1",
        "idx": 3509
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int add_ca_name(STACK_OF(X509_NAME) **sk, const X509 *x)\n{\n    X509_NAME *name;\n\n    if (x == NULL)\n        return 0;\n    if (*sk == NULL && ((*sk = sk_X509_NAME_new_null()) == NULL))\n        return 0;\n\n    if ((name = X509_NAME_dup(X509_get_subject_name(x))) == NULL)\n        return 0;\n\n    if (!sk_X509_NAME_push(*sk, name)) {\n        X509_NAME_free(name);\n        return 0;\n    }\n    return 1;\n}",
        "output": "0",
        "idx": 2522
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sdhci_sysbus_realize(DeviceState *dev, Error ** errp)\n\n{\n\n    SDHCIState *s = SYSBUS_SDHCI(dev);\n\n    SysBusDevice *sbd = SYS_BUS_DEVICE(dev);\n\n\n\n    sdhci_common_realize(s, errp);\n\n    if (errp && *errp) {\n\n        return;\n\n    }\n\n\n\n    if (s->dma_mr) {\n\n\n        address_space_init(s->dma_as, s->dma_mr, \"sdhci-dma\");\n\n    } else {\n\n        /* use system_memory() if property \"dma\" not set */\n\n        s->dma_as = &address_space_memory;\n\n    }\n\n\n\n    sysbus_init_irq(sbd, &s->irq);\n\n    sysbus_init_mmio(sbd, &s->iomem);\n\n}",
        "output": "1",
        "idx": 5097
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __clear_nat_cache_dirty(struct f2fs_nm_info *nm_i,\n\t\tstruct nat_entry_set *set, struct nat_entry *ne)\n{\n\tlist_move_tail(&ne->list, &nm_i->nat_entries);\n\tset_nat_flag(ne, IS_DIRTY, false);\n\tset->entry_cnt--;\n\tnm_i->dirty_nat_cnt--;\n}",
        "output": "0",
        "idx": 2070
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int n_tty_ioctl(struct tty_struct *tty, struct file *file,\n\t\t       unsigned int cmd, unsigned long arg)\n{\n\tstruct n_tty_data *ldata = tty->disc_data;\n\tint retval;\n\n\tswitch (cmd) {\n\tcase TIOCOUTQ:\n\t\treturn put_user(tty_chars_in_buffer(tty), (int __user *) arg);\n\tcase TIOCINQ:\n\t\tdown_write(&tty->termios_rwsem);\n\t\tif (L_ICANON(tty))\n\t\t\tretval = inq_canon(ldata);\n\t\telse\n\t\t\tretval = read_cnt(ldata);\n\t\tup_write(&tty->termios_rwsem);\n\t\treturn put_user(retval, (unsigned int __user *) arg);\n\tdefault:\n\t\treturn n_tty_ioctl_helper(tty, file, cmd, arg);\n\t}\n}",
        "output": "1",
        "idx": 1257
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline uint64_t storage_size_max(void) {\n        if (arg_storage == COREDUMP_STORAGE_EXTERNAL)\n                return arg_external_size_max;\n        if (arg_storage == COREDUMP_STORAGE_JOURNAL)\n                return arg_journal_size_max;\n        assert(arg_storage == COREDUMP_STORAGE_NONE);\n        return 0;\n}",
        "output": "0",
        "idx": 2700
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void opt_pad_color(const char *arg) {\n\n    /* Input is expected to be six hex digits similar to\n\n       how colors are expressed in html tags (but without the #) */\n\n    int rgb = strtol(arg, NULL, 16);\n\n    int r,g,b;\n\n\n\n    r = (rgb >> 16);\n\n    g = ((rgb >> 8) & 255);\n\n    b = (rgb & 255);\n\n\n\n    padcolor[0] = RGB_TO_Y(r,g,b);\n\n    padcolor[1] = RGB_TO_U(r,g,b,0);\n\n    padcolor[2] = RGB_TO_V(r,g,b,0);\n\n}\n",
        "output": "0",
        "idx": 4143
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void l2cap_sock_close_cb(struct l2cap_chan *chan)\n{\n\tstruct sock *sk = chan->data;\n\n\tl2cap_sock_kill(sk);\n}",
        "output": "1",
        "idx": 3019
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST(Context, EmptyHeadersAttributes) {\n  HeadersWrapper<Http::RequestHeaderMap> headers(nullptr);\n  auto header = headers[CelValue::CreateStringView(Referer)];\n  EXPECT_FALSE(header.has_value());\n  EXPECT_EQ(0, headers.size());\n  EXPECT_TRUE(headers.empty());\n}",
        "output": "1",
        "idx": 6138
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void start_children(FFStream *feed)\n{\n    if (no_launch)\n        return;\n    for (; feed; feed = feed->next) {\n        if (feed->child_argv && !feed->pid) {\n            feed->pid_start = time(0);\n            feed->pid = fork();\n            if (feed->pid < 0) {\n                fprintf(stderr, \"Unable to create children\\n\");\n                exit(1);\n            }\n            if (!feed->pid) {\n                /* In child */\n                char pathname[1024];\n                char *slash;\n                int i;\n                for (i = 3; i < 256; i++) {\n                    close(i);\n                }\n                if (!ffserver_debug) {\n                    i = open(\"/dev/null\", O_RDWR);\n                    if (i)\n                        dup2(i, 0);\n                    dup2(i, 1);\n                    dup2(i, 2);\n                    if (i)\n                        close(i);\n                }\n                pstrcpy(pathname, sizeof(pathname), my_program_name);\n                slash = strrchr(pathname, '/');\n                if (!slash) {\n                    slash = pathname;\n                } else {\n                    slash++;\n                }\n                strcpy(slash, \"ffmpeg\");\n                /* This is needed to make relative pathnames work */\n                chdir(my_program_dir);\n                execvp(pathname, feed->child_argv);\n                _exit(1);\n            }\n        }\n    }\n}",
        "output": "1",
        "idx": 5100
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void bdrv_close_all(void)\n\n{\n\n    BlockDriverState *bs;\n\n\n\n    QTAILQ_FOREACH(bs, &bdrv_states, device_list) {\n\n        AioContext *aio_context = bdrv_get_aio_context(bs);\n\n\n\n        aio_context_acquire(aio_context);\n\n        bdrv_close(bs);\n\n        aio_context_release(aio_context);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2644
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void svm_set_supported_cpuid(u32 func, struct kvm_cpuid_entry2 *entry)\n{\n\tswitch (func) {\n\tcase 0x8000000A:\n\t\tentry->eax = 1; /* SVM revision 1 */\n\t\tentry->ebx = 8; /* Lets support 8 ASIDs in case we add proper\n\t\t\t\t   ASID emulation to nested SVM */\n\t\tentry->ecx = 0; /* Reserved */\n\t\tentry->edx = 0; /* Do not support any additional features */\n\n\t\tbreak;\n\t}\n}",
        "output": "0",
        "idx": 2060
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "char* dd_load_text_ext(const struct dump_dir *dd, const char *name, unsigned flags)\n{\n//    if (!dd->locked)\n//        error_msg_and_die(\"dump_dir is not opened\"); /* bug */\n\n    /* Compat with old abrt dumps. Remove in abrt-2.1 */\n    if (strcmp(name, \"release\") == 0)\n        name = FILENAME_OS_RELEASE;\n\n    char *full_path = concat_path_file(dd->dd_dirname, name);\n    char *ret = load_text_file(full_path, flags);\n    free(full_path);\n\n    return ret;\n}",
        "output": "1",
        "idx": 5721
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void isa_bus_irqs(ISABus *bus, qemu_irq *irqs)\n\n{\n\n    if (!bus) {\n\n        hw_error(\"Can't set isa irqs with no isa bus present.\");\n\n    }\n\n    bus->irqs = irqs;\n\n}\n",
        "output": "1",
        "idx": 4556
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SerialState *serial_init(int base, qemu_irq irq, int baudbase,\n\n                         CharDriverState *chr)\n\n{\n\n    SerialState *s;\n\n\n\n    s = qemu_mallocz(sizeof(SerialState));\n\n    if (!s)\n\n        return NULL;\n\n    s->irq = irq;\n\n    s->baudbase = baudbase;\n\n\n\n    s->tx_timer = qemu_new_timer(vm_clock, serial_tx_done, s);\n\n    if (!s->tx_timer)\n\n        return NULL;\n\n\n\n    qemu_register_reset(serial_reset, s);\n\n    serial_reset(s);\n\n\n\n    register_savevm(\"serial\", base, 2, serial_save, serial_load, s);\n\n\n\n    register_ioport_write(base, 8, 1, serial_ioport_write, s);\n\n    register_ioport_read(base, 8, 1, serial_ioport_read, s);\n\n    s->chr = chr;\n\n    qemu_chr_add_handlers(chr, serial_can_receive1, serial_receive1,\n\n                          serial_event, s);\n\n    return s;\n\n}\n",
        "output": "1",
        "idx": 4818
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rndr_quote(struct buf *ob, const struct buf *text, void *opaque)\n{\n\tif (!text || !text->size)\n\t\treturn 0;\n\n\tBUFPUTSL(ob, \"<q>\");\n\tbufput(ob, text->data, text->size);\n\tBUFPUTSL(ob, \"</q>\");\n\n\treturn 1;\n}",
        "output": "1",
        "idx": 852
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void * calloc(size_t n, size_t lb)\n{\n    if (lb && n > SIZE_MAX / lb)\n      return NULL;\n#   if defined(GC_LINUX_THREADS) /* && !defined(USE_PROC_FOR_LIBRARIES) */\n        /* libpthread allocated some memory that is only pointed to by  */\n        /* mmapped thread stacks.  Make sure it's not collectable.      */\n        {\n          static GC_bool lib_bounds_set = FALSE;\n          ptr_t caller = (ptr_t)__builtin_return_address(0);\n          /* This test does not need to ensure memory visibility, since */\n          /* the bounds will be set when/if we create another thread.   */\n          if (!EXPECT(lib_bounds_set, TRUE)) {\n            GC_init_lib_bounds();\n            lib_bounds_set = TRUE;\n          }\n          if (((word)caller >= (word)GC_libpthread_start\n               && (word)caller < (word)GC_libpthread_end)\n              || ((word)caller >= (word)GC_libld_start\n                  && (word)caller < (word)GC_libld_end))\n            return GC_malloc_uncollectable(n*lb);\n          /* The two ranges are actually usually adjacent, so there may */\n          /* be a way to speed this up.                                 */\n        }\n#   endif\n    return((void *)REDIRECT_MALLOC(n*lb));\n}",
        "output": "1",
        "idx": 1503
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void skip_comments(FILE * file) {\n\tint ch;\n\n\twhile (EOF != (ch = get_char(file))) {\n\t\t/* ch is now the first character of a line.\n\t\t */\n\t\twhile (ch == ' ' || ch == '\\t')\n\t\t\tch = get_char(file);\n\n\t\tif (ch == EOF)\n\t\t\tbreak;\n\n\t\t/* ch is now the first non-blank character of a line.\n\t\t */\n\n\t\tif (ch != '\\n' && ch != '#')\n\t\t\tbreak;\n\n\t\t/* ch must be a newline or comment as first non-blank\n\t\t * character on a line.\n\t\t */\n\n\t\twhile (ch != '\\n' && ch != EOF)\n\t\t\tch = get_char(file);\n\n\t\t/* ch is now the newline of a line which we're going to\n\t\t * ignore.\n\t\t */\n\t}\n\tif (ch != EOF)\n\t\tunget_char(ch, file);\n}",
        "output": "1",
        "idx": 340
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int pcnet_can_receive(NetClientState *nc)\n\n{\n\n    PCNetState *s = qemu_get_nic_opaque(nc);\n\n    if (CSR_STOP(s) || CSR_SPND(s))\n\n        return 0;\n\n\n\n    return sizeof(s->buffer)-16;\n\n}\n",
        "output": "0",
        "idx": 3561
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void av_register_output_format(AVOutputFormat *format)\n\n{\n\n    AVOutputFormat **p = last_oformat;\n\n\n\n    format->next = NULL;\n\n    while(*p || avpriv_atomic_ptr_cas((void * volatile *)p, NULL, format))\n\n        p = &(*p)->next;\n\n    last_oformat = &format->next;\n\n}\n",
        "output": "1",
        "idx": 5409
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dump_create_nhwindow(dummy)\nint dummy;\n{\n    return dummy;\n}",
        "output": "0",
        "idx": 4892
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static PixelChannels **AcquirePixelThreadSet(const Image *image)\n{\n  PixelChannels\n    **pixels;\n\n  register ssize_t\n    i;\n\n  size_t\n    number_threads;\n\n  number_threads=(size_t) GetMagickResourceLimit(ThreadResource);\n  pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,\n    sizeof(*pixels));\n  if (pixels == (PixelChannels **) NULL)\n    return((PixelChannels **) NULL);\n  (void) memset(pixels,0,number_threads*sizeof(*pixels));\n  for (i=0; i < (ssize_t) number_threads; i++)\n  {\n    register ssize_t\n      j;\n\n    pixels[i]=(PixelChannels *) AcquireQuantumMemory(image->columns,\n      sizeof(**pixels));\n    if (pixels[i] == (PixelChannels *) NULL)\n      return(DestroyPixelThreadSet(pixels));\n    for (j=0; j < (ssize_t) image->columns; j++)\n    {\n      register ssize_t\n        k;\n\n      for (k=0; k < MaxPixelChannels; k++)\n        pixels[i][j].channel[k]=0.0;\n    }\n  }\n  return(pixels);\n}",
        "output": "1",
        "idx": 3976
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool arm_cpu_has_work(CPUState *cs)\n\n{\n\n    ARMCPU *cpu = ARM_CPU(cs);\n\n\n\n    return !cpu->powered_off\n\n        && cs->interrupt_request &\n\n        (CPU_INTERRUPT_FIQ | CPU_INTERRUPT_HARD\n\n         | CPU_INTERRUPT_VFIQ | CPU_INTERRUPT_VIRQ\n\n         | CPU_INTERRUPT_EXITTB);\n\n}\n",
        "output": "1",
        "idx": 3787
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  explicit DrawBoundingBoxesOp(OpKernelConstruction* context)\n      : OpKernel(context) {}",
        "output": "0",
        "idx": 1050
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int count_paired_channels(uint8_t (*layout_map)[3], int tags, int pos, int *current) {\n\n    int num_pos_channels = 0;\n\n    int first_cpe = 0;\n\n    int sce_parity = 0;\n\n    int i;\n\n    for (i = *current; i < tags; i++) {\n\n        if (layout_map[i][2] != pos)\n\n            break;\n\n        if (layout_map[i][0] == TYPE_CPE) {\n\n            if (sce_parity) {\n\n                if (pos == AAC_CHANNEL_FRONT || !first_cpe) {\n\n                    sce_parity = 0;\n\n                } else {\n\n                    return -1;\n\n                }\n\n            }\n\n            num_pos_channels += 2;\n\n            first_cpe = 1;\n\n        } else {\n\n            num_pos_channels++;\n\n            sce_parity ^= 1;\n\n        }\n\n    }\n\n    if (sce_parity &&\n\n        ((pos == AAC_CHANNEL_FRONT && first_cpe) || pos == AAC_CHANNEL_SIDE))\n\n            return -1;\n\n    *current = i;\n\n    return num_pos_channels;\n\n}\n",
        "output": "0",
        "idx": 4155
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct b43_dmadesc_generic *op64_idx2desc(struct b43_dmaring *ring,\n\t\t\t\t\t  int slot,\n\t\t\t\t\t  struct b43_dmadesc_meta **meta)\n{\n\tstruct b43_dmadesc64 *desc;\n\n\t*meta = &(ring->meta[slot]);\n\tdesc = ring->descbase;\n\tdesc = &(desc[slot]);\n\n\treturn (struct b43_dmadesc_generic *)desc;\n}",
        "output": "0",
        "idx": 3136
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ntop_gettimemsec(lua_State* vm) {\n  struct timeval tp;\n  double ret;\n\n  ntop->getTrace()->traceEvent(TRACE_DEBUG, \"%s() called\", __FUNCTION__);\n\n  gettimeofday(&tp, NULL);\n\n  ret = (((double)tp.tv_usec) / (double)1000) + tp.tv_sec;\n\n  lua_pushnumber(vm, ret);\n  return(CONST_LUA_OK);\n}",
        "output": "0",
        "idx": 4290
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CConfig::Write(CFile& File, unsigned int iIndentation) {\n    CString sIndentation = CString(iIndentation, '\\t');\n\n    for (const auto& it : m_ConfigEntries) {\n        for (const CString& sValue : it.second) {\n            File.Write(sIndentation + it.first + \" = \" + sValue + \"\\n\");\n        }\n    }\n\n    for (const auto& it : m_SubConfigs) {\n        for (const auto& it2 : it.second) {\n            File.Write(\"\\n\");\n\n            File.Write(sIndentation + \"<\" + it.first + \" \" + it2.first + \">\\n\");\n            it2.second.m_pSubConfig->Write(File, iIndentation + 1);\n            File.Write(sIndentation + \"</\" + it.first + \">\\n\");\n        }\n    }\n}",
        "output": "1",
        "idx": 2197
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t show_crash_notes_size(struct device *dev,\n\t\t\t\t     struct device_attribute *attr,\n\t\t\t\t     char *buf)\n{\n\tssize_t rc;\n\n\trc = sprintf(buf, \"%zu\\n\", sizeof(note_buf_t));\n\treturn rc;\n}",
        "output": "1",
        "idx": 3447
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void av_bitstream_filter_close(AVBitStreamFilterContext *bsfc){\n\n\n\n    if(bsfc->filter->close)\n\n        bsfc->filter->close(bsfc);\n\n    av_freep(&bsfc->priv_data);\n\n    av_parser_close(bsfc->parser);\n\n    av_free(bsfc);\n\n}",
        "output": "1",
        "idx": 822
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t qdev_get_prop_mask64(Property *prop)\n\n{\n\n    assert(prop->info == &qdev_prop_bit);\n\n    return 0x1 << prop->bitnr;\n\n}\n",
        "output": "1",
        "idx": 2949
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SPL_METHOD(Array, rewind)\n{\n\tzval *object = getThis();\n\tspl_array_object *intern = (spl_array_object*)zend_object_store_get_object(object TSRMLS_CC);\n\t\n\tif (zend_parse_parameters_none() == FAILURE) {\n\t\treturn;\n\t}\n\n\tspl_array_rewind(intern TSRMLS_CC);\n}",
        "output": "1",
        "idx": 4504
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int drop_sync(QIOChannel *ioc, size_t size, Error **errp)\n\n{\n\n    ssize_t ret = 0;\n\n    char small[1024];\n\n    char *buffer;\n\n\n\n    buffer = sizeof(small) >= size ? small : g_malloc(MIN(65536, size));\n\n    while (size > 0) {\n\n        ssize_t count = MIN(65536, size);\n\n        ret = read_sync(ioc, buffer, MIN(65536, size), errp);\n\n\n\n        if (ret < 0) {\n\n            goto cleanup;\n\n        }\n\n        size -= count;\n\n    }\n\n\n\n cleanup:\n\n    if (buffer != small) {\n\n        g_free(buffer);\n\n    }\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 25
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool esp_mem_accepts(void *opaque, target_phys_addr_t addr,\n\n                            unsigned size, bool is_write)\n\n{\n\n    return (size == 1) || (is_write && size == 4);\n\n}\n",
        "output": "0",
        "idx": 5221
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void raw_close(BlockDriverState *bs)\n\n{\n\n    BDRVRawState *s = bs->opaque;\n\n    if (s->fd >= 0) {\n\n        close(s->fd);\n\n        s->fd = -1;\n\n        if (s->aligned_buf != NULL)\n\n            qemu_free(s->aligned_buf);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 5813
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "brcmf_cfg80211_reconfigure_wep(struct brcmf_if *ifp)\n{\n\tstruct wiphy *wiphy = ifp->drvr->wiphy;\n\ts32 err;\n\tu8 key_idx;\n\tstruct brcmf_wsec_key *key;\n\ts32 wsec;\n\n\tfor (key_idx = 0; key_idx < BRCMF_MAX_DEFAULT_KEYS; key_idx++) {\n\t\tkey = &ifp->vif->profile.key[key_idx];\n\t\tif ((key->algo == CRYPTO_ALGO_WEP1) ||\n\t\t    (key->algo == CRYPTO_ALGO_WEP128))\n\t\t\tbreak;\n\t}\n\tif (key_idx == BRCMF_MAX_DEFAULT_KEYS)\n\t\treturn;\n\n\terr = send_key_to_dongle(ifp, key);\n\tif (err) {\n\t\tbphy_err(wiphy, \"Setting WEP key failed (%d)\\n\", err);\n\t\treturn;\n\t}\n\terr = brcmf_fil_bsscfg_int_get(ifp, \"wsec\", &wsec);\n\tif (err) {\n\t\tbphy_err(wiphy, \"get wsec error (%d)\\n\", err);\n\t\treturn;\n\t}\n\twsec |= WEP_ENABLED;\n\terr = brcmf_fil_bsscfg_int_set(ifp, \"wsec\", wsec);\n\tif (err)\n\t\tbphy_err(wiphy, \"set wsec error (%d)\\n\", err);\n}",
        "output": "0",
        "idx": 4568
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "php_apache_sapi_register_variables(zval *track_vars_array TSRMLS_DC)\n{\n\tphp_struct *ctx = SG(server_context);\n\tconst apr_array_header_t *arr = apr_table_elts(ctx->r->subprocess_env);\n\tchar *key, *val;\n\tint new_val_len;\n\n\tAPR_ARRAY_FOREACH_OPEN(arr, key, val)\n\t\tif (!val) {\n\t\t\tval = \"\";\n\t\t}\n\t\tif (sapi_module.input_filter(PARSE_SERVER, key, &val, strlen(val), &new_val_len TSRMLS_CC)) {\n\t\t\tphp_register_variable_safe(key, val, new_val_len, track_vars_array TSRMLS_CC);\n\t\t}\n\tAPR_ARRAY_FOREACH_CLOSE()\n\n\tif (sapi_module.input_filter(PARSE_SERVER, \"PHP_SELF\", &ctx->r->uri, strlen(ctx->r->uri), &new_val_len TSRMLS_CC)) {\n\t\tphp_register_variable_safe(\"PHP_SELF\", ctx->r->uri, new_val_len, track_vars_array TSRMLS_CC);\n\t}\n}",
        "output": "0",
        "idx": 158
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Item* Item_func_or_sum::build_clone(THD *thd)\n{\n  Item *copy_tmp_args[2]= {0,0};\n  Item **copy_args= copy_tmp_args;\n  if (arg_count > 2)\n  {\n    copy_args= static_cast<Item**>\n      (alloc_root(thd->mem_root, sizeof(Item*) * arg_count));\n    if (unlikely(!copy_args))\n      return 0;\n  }\n  for (uint i= 0; i < arg_count; i++)\n  {\n    Item *arg_clone= args[i]->build_clone(thd);\n    if (unlikely(!arg_clone))\n      return 0;\n    copy_args[i]= arg_clone;\n  }\n  Item_func_or_sum *copy= static_cast<Item_func_or_sum *>(get_copy(thd));\n  if (unlikely(!copy))\n    return 0;\n  if (arg_count > 2)\n    copy->args= copy_args;\n  else if (arg_count > 0)\n  {\n    copy->args= copy->tmp_arg;\n    memcpy(copy->args, copy_args, sizeof(Item *) * arg_count);\n  }\n  return copy;\n}",
        "output": "0",
        "idx": 4300
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static long sysconf_exact(int name, const char *name_str, Error **errp)\n{\n    long ret;\n\n    errno = 0;\n    ret = sysconf(name);\n    if (ret == -1) {\n        if (errno == 0) {\n            error_setg(errp, \"sysconf(%s): value indefinite\", name_str);\n        } else {\n            error_setg_errno(errp, errno, \"sysconf(%s)\", name_str);\n        }\n    }\n    return ret;\n}",
        "output": "0",
        "idx": 552
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fsck_gitmodules_fn(const char *var, const char *value, void *vdata)\n{\n\tstruct fsck_gitmodules_data *data = vdata;\n\tconst char *subsection, *key;\n\tint subsection_len;\n\tchar *name;\n\n\tif (parse_config_key(var, \"submodule\", &subsection, &subsection_len, &key) < 0 ||\n\t    !subsection)\n\t\treturn 0;\n\n\tname = xmemdupz(subsection, subsection_len);\n\tif (check_submodule_name(name) < 0)\n\t\tdata->ret |= report(data->options, data->obj,\n\t\t\t\t    FSCK_MSG_GITMODULES_NAME,\n\t\t\t\t    \"disallowed submodule name: %s\",\n\t\t\t\t    name);\n\tfree(name);\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 1888
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "proto_reg_handoff_e100(void)\n{\n    /* Check all UDP traffic, as the specific UDP port is configurable */\n    heur_dissector_add(\"udp\", dissect_e100, \"E100 over UDP\", \"e100_udp\", proto_e100, HEURISTIC_ENABLE);\n    /* e100 traffic encapsulates traffic from the ethernet frame on */\n    eth_handle = find_dissector(\"eth\");\n}",
        "output": "0",
        "idx": 1908
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int cil_gen_optional(struct cil_db *db, struct cil_tree_node *parse_current, struct cil_tree_node *ast_node)\n{\n\tenum cil_syntax syntax[] = {\n\t\tCIL_SYN_STRING,\n\t\tCIL_SYN_STRING,\n\t\tCIL_SYN_N_LISTS | CIL_SYN_END,\n\t\tCIL_SYN_END\n\t};\n\tint syntax_len = sizeof(syntax)/sizeof(*syntax);\n\tchar *key = NULL;\n\tstruct cil_optional *optional = NULL;\n\tint rc = SEPOL_ERR;\n\n\tif (db == NULL || parse_current == NULL || ast_node == NULL) {\n\t\tgoto exit;\n\t}\n\n\trc = __cil_verify_syntax(parse_current, syntax, syntax_len);\n\tif (rc != SEPOL_OK) {\n\t\tgoto exit;\n\t}\n\n\tcil_optional_init(&optional);\n\n\tkey = parse_current->next->data;\n\n\trc = cil_gen_node(db, ast_node, (struct cil_symtab_datum*)optional, (hashtab_key_t)key, CIL_SYM_BLOCKS, CIL_OPTIONAL);\n\tif (rc != SEPOL_OK)\n\t\tgoto exit;\n\n\treturn SEPOL_OK;\n\nexit:\n\tcil_tree_log(parse_current, CIL_ERR, \"Bad optional\");\n\tcil_destroy_optional(optional);\n\tcil_clear_node(ast_node);\n\treturn rc;\n}",
        "output": "0",
        "idx": 2131
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_METHOD(Phar, isCompressed)\n{\n\tPHAR_ARCHIVE_OBJECT();\n\t\n\tif (zend_parse_parameters_none() == FAILURE) {\n\t\treturn;\n\t}\n\n\tif (phar_obj->arc.archive->flags & PHAR_FILE_COMPRESSED_GZ) {\n\t\tRETURN_LONG(PHAR_ENT_COMPRESSED_GZ);\n\t}\n\n\tif (phar_obj->arc.archive->flags & PHAR_FILE_COMPRESSED_BZ2) {\n\t\tRETURN_LONG(PHAR_ENT_COMPRESSED_BZ2);\n\t}\n\n\tRETURN_FALSE;\n}",
        "output": "0",
        "idx": 3521
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline pgd_t *pgd_alloc(struct mm_struct *mm)\n{\n\tspin_lock_init(&mm->context.list_lock);\n\tINIT_LIST_HEAD(&mm->context.pgtable_list);\n\tINIT_LIST_HEAD(&mm->context.gmap_list);\n\treturn (pgd_t *) crst_table_alloc(mm);\n}",
        "output": "1",
        "idx": 2301
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "proto_read_byte_buffer (p11_rpc_message *msg,\n                        CK_BYTE_PTR *buffer,\n                        CK_ULONG *n_buffer)\n{\n\tuint32_t length;\n\n\tassert (msg != NULL);\n\tassert (buffer != NULL);\n\tassert (n_buffer != NULL);\n\tassert (msg->input != NULL);\n\n\t/* Check that we're supposed to be reading this at this point */\n\tassert (!msg->signature || p11_rpc_message_verify_part (msg, \"fy\"));\n\n\t/* The number of ulongs there's room for on the other end */\n\tif (!p11_rpc_buffer_get_uint32 (msg->input, &msg->parsed, &length))\n\t\treturn PARSE_ERROR;\n\n\t*n_buffer = length;\n\t*buffer = NULL;\n\n\t/* If set to zero, then they just want the length */\n\tif (length == 0)\n\t\treturn CKR_OK;\n\n\t*buffer = p11_rpc_message_alloc_extra (msg, length * sizeof (CK_BYTE));\n\tif (*buffer == NULL)\n\t\treturn CKR_DEVICE_MEMORY;\n\n\treturn CKR_OK;\n}",
        "output": "1",
        "idx": 1996
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(ExprMatchTest, GteWithRHSFieldPathMatchesCorrectly) {\n    createMatcher(fromjson(\"{$expr: {$gte: [3, '$x']}}\"));\n\n    ASSERT_TRUE(matches(BSON(\"x\" << 3)));\n    ASSERT_TRUE(matches(BSON(\"x\" << 1)));\n\n    ASSERT_FALSE(matches(BSON(\"x\" << 10)));\n}",
        "output": "0",
        "idx": 1667
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compile_one_expr_in_str(char_u *p, cctx_T *cctx)\n{\n    char_u\t*block_start;\n    char_u\t*block_end;\n\n    // Skip the opening {.\n    block_start = skipwhite(p + 1);\n    block_end = block_start;\n    if (*block_start != NUL && skip_expr(&block_end, NULL) == FAIL)\n\treturn NULL;\n    block_end = skipwhite(block_end);\n    // The block must be closed by a }.\n    if (*block_end != '}')\n    {\n\tsemsg(_(e_missing_close_curly_str), p);\n\treturn NULL;\n    }\n    if (compile_expr0(&block_start, cctx) == FAIL)\n\treturn NULL;\n    may_generate_2STRING(-1, TRUE, cctx);\n\n    return block_end + 1;\n}",
        "output": "0",
        "idx": 3634
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int common_end(HYuvContext *s)\n\n{\n\n    int i;\n\n\n\n    for(i = 0; i < 3; i++) {\n\n        av_freep(&s->temp[i]);\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3518
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void inode_init_owner(struct inode *inode, const struct inode *dir,\n\t\t\tumode_t mode)\n{\n\tinode->i_uid = current_fsuid();\n\tif (dir && dir->i_mode & S_ISGID) {\n\t\tinode->i_gid = dir->i_gid;\n\t\tif (S_ISDIR(mode))\n\t\t\tmode |= S_ISGID;\n\t} else\n\t\tinode->i_gid = current_fsgid();\n\tinode->i_mode = mode;\n}",
        "output": "1",
        "idx": 59
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sdl_resize(DisplayState *ds)\n\n{\n\n    int flags;\n\n\n\n    //    printf(\"resizing to %d %d\\n\", w, h);\n\n\n\n    flags = SDL_HWSURFACE|SDL_ASYNCBLIT|SDL_HWACCEL;\n\n    if (gui_fullscreen)\n\n        flags |= SDL_FULLSCREEN;\n\n    if (gui_noframe)\n\n        flags |= SDL_NOFRAME;\n\n\n\n again:\n\n    real_screen = SDL_SetVideoMode(ds_get_width(ds), ds_get_height(ds), 0, flags);\n\n    if (!real_screen) {\n\n        fprintf(stderr, \"Could not open SDL display\\n\");\n\n        exit(1);\n\n    }\n\n    if (!real_screen->pixels && (flags & SDL_HWSURFACE) && (flags & SDL_FULLSCREEN)) {\n\n        flags &= ~SDL_HWSURFACE;\n\n        goto again;\n\n    }\n\n\n\n    if (!real_screen->pixels) {\n\n        fprintf(stderr, \"Could not open SDL display\\n\");\n\n        exit(1);\n\n    }\n\n\n\n    sdl_setdata(ds);\n\n}\n",
        "output": "0",
        "idx": 4702
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gboolean\nmono_verifier_is_enabled_for_method (MonoMethod *method)\n{\n\t/* The verifier was disabled at compile time */\n\treturn FALSE;",
        "output": "0",
        "idx": 2309
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __init fwnet_init(void)\n{\n\tint err;\n\n\terr = fw_core_add_descriptor(&rfc2374_unit_directory);\n\tif (err)\n\t\treturn err;\n\n#if IS_ENABLED(CONFIG_IPV6)\n\terr = fw_core_add_descriptor(&rfc3146_unit_directory);\n\tif (err)\n\t\tgoto out;\n#endif\n\n\tfwnet_packet_task_cache = kmem_cache_create(\"packet_task\",\n\t\t\tsizeof(struct fwnet_packet_task), 0, 0, NULL);\n\tif (!fwnet_packet_task_cache) {\n\t\terr = -ENOMEM;\n\t\tgoto out2;\n\t}\n\n\terr = driver_register(&fwnet_driver.driver);\n\tif (!err)\n\t\treturn 0;\n\n\tkmem_cache_destroy(fwnet_packet_task_cache);\nout2:\n#if IS_ENABLED(CONFIG_IPV6)\n\tfw_core_remove_descriptor(&rfc3146_unit_directory);\nout:\n#endif\n\tfw_core_remove_descriptor(&rfc2374_unit_directory);\n\n\treturn err;\n}",
        "output": "0",
        "idx": 5843
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_cond_wait(QemuCond *cond, QemuMutex *mutex)\n\n{\n\n    /*\n\n     * This access is protected under the mutex.\n\n     */\n\n    cond->waiters++;\n\n\n\n    /*\n\n     * Unlock external mutex and wait for signal.\n\n     * NOTE: we've held mutex locked long enough to increment\n\n     * waiters count above, so there's no problem with\n\n     * leaving mutex unlocked before we wait on semaphore.\n\n     */\n\n    qemu_mutex_unlock(mutex);\n\n    WaitForSingleObject(cond->sema, INFINITE);\n\n\n\n    /* Now waiters must rendez-vous with the signaling thread and\n\n     * let it continue.  For cond_broadcast this has heavy contention\n\n     * and triggers thundering herd.  So goes life.\n\n     *\n\n     * Decrease waiters count.  The mutex is not taken, so we have\n\n     * to do this atomically.\n\n     *\n\n     * All waiters contend for the mutex at the end of this function\n\n     * until the signaling thread relinquishes it.  To ensure\n\n     * each waiter consumes exactly one slice of the semaphore,\n\n     * the signaling thread stops until it is told by the last\n\n     * waiter that it can go on.\n\n     */\n\n    if (InterlockedDecrement(&cond->waiters) == cond->target) {\n\n        SetEvent(cond->continue_event);\n\n    }\n\n\n\n    qemu_mutex_lock(mutex);\n\n}\n",
        "output": "1",
        "idx": 5526
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void nft_data_hold(const struct nft_data *data, enum nft_data_types type)\n{\n\tstruct nft_chain *chain;\n\tstruct nft_rule *rule;\n\n\tif (type == NFT_DATA_VERDICT) {\n\t\tswitch (data->verdict.code) {\n\t\tcase NFT_JUMP:\n\t\tcase NFT_GOTO:\n\t\t\tchain = data->verdict.chain;\n\t\t\tchain->use++;\n\n\t\t\tif (!nft_chain_is_bound(chain))\n\t\t\t\tbreak;\n\n\t\t\tchain->table->use++;\n\t\t\tlist_for_each_entry(rule, &chain->rules, list)\n\t\t\t\tchain->use++;\n\n\t\t\tnft_chain_add(chain->table, chain);\n\t\t\tbreak;\n\t\t}\n\t}\n}",
        "output": "0",
        "idx": 1054
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct page *get_node_page_ra(struct page *parent, int start)\n{\n\tstruct f2fs_sb_info *sbi = F2FS_P_SB(parent);\n\tnid_t nid = get_nid(parent, start, false);\n\n\treturn __get_node_page(sbi, nid, parent, start);\n}",
        "output": "0",
        "idx": 5823
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool hugetlbfs_pagecache_present(struct hstate *h,\n\t\t\tstruct vm_area_struct *vma, unsigned long address)\n{\n\tstruct address_space *mapping;\n\tpgoff_t idx;\n\tstruct page *page;\n\n\tmapping = vma->vm_file->f_mapping;\n\tidx = vma_hugecache_offset(h, vma, address);\n\n\tpage = find_get_page(mapping, idx);\n\tif (page)\n\t\tput_page(page);\n\treturn page != NULL;\n}",
        "output": "0",
        "idx": 1331
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "latin_ptr2len(char_u *p)\n{\n return MB_BYTE2LEN(*p);\n}",
        "output": "1",
        "idx": 133
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "videobuf_vm_close(struct vm_area_struct *vma)\n{\n\tstruct videobuf_mapping *map = vma->vm_private_data;\n\tstruct videobuf_queue *q = map->q;\n\tint i;\n\n\tdprintk(2,\"vm_close %p [count=%u,vma=%08lx-%08lx]\\n\",map,\n\t\tmap->count,vma->vm_start,vma->vm_end);\n\n\tmap->count--;\n\tif (0 == map->count) {\n\t\tdprintk(1,\"munmap %p q=%p\\n\",map,q);\n\t\tmutex_lock(&q->lock);\n\t\tfor (i = 0; i < VIDEO_MAX_FRAME; i++) {\n\t\t\tif (NULL == q->bufs[i])\n\t\t\t\tcontinue;\n\n\t\t\tif (q->bufs[i]->map != map)\n\t\t\t\tcontinue;\n\n\t\t\tq->ops->buf_release(q,q->bufs[i]);\n\n\t\t\tq->bufs[i]->map   = NULL;\n\t\t\tq->bufs[i]->baddr = 0;\n\t\t}\n\t\tmutex_unlock(&q->lock);\n\t\tkfree(map);\n\t}\n\treturn;\n}",
        "output": "0",
        "idx": 485
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void add_COM(struct camera_data *cam)\n{\n\tif(cam->COM_len > 0) {\n\t\tcam->workbuff->data[cam->workbuff->length++] = 0xFF;\n\t\tcam->workbuff->data[cam->workbuff->length++] = 0xFE;\n\t\tcam->workbuff->data[cam->workbuff->length++] = 0;\n\t\tcam->workbuff->data[cam->workbuff->length++] = cam->COM_len+2;\n\t\tmemcpy(cam->workbuff->data+cam->workbuff->length,\n\t\t       cam->COM_data, cam->COM_len);\n\t\tcam->workbuff->length += cam->COM_len;\n\t}\n}",
        "output": "0",
        "idx": 3845
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_macaddr_default_if_unset(MACAddr *macaddr)\n\n{\n\n    static int index = 0;\n\n    static const MACAddr zero = { .a = { 0,0,0,0,0,0 } };\n\n\n\n    if (memcmp(macaddr, &zero, sizeof(zero)) != 0)\n\n        return;\n\n    macaddr->a[0] = 0x52;\n\n    macaddr->a[1] = 0x54;\n\n    macaddr->a[2] = 0x00;\n\n    macaddr->a[3] = 0x12;\n\n    macaddr->a[4] = 0x34;\n\n    macaddr->a[5] = 0x56 + index++;\n\n}\n",
        "output": "1",
        "idx": 434
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int64_t sub64(const int64_t a, const int64_t b)\n\n{\n\n\treturn a - b;\n\n}\n",
        "output": "1",
        "idx": 677
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void EvalAddN(TfLiteContext* context, TfLiteNode* node) {\n  // TODO(haoliang): Initialize all_inputs only once during init.\n  VectorOfTensors<T> all_inputs(*context, *node->inputs);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  int num_inputs = NumInputs(node);\n  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);\n  reference_ops::AddN<T>(GetTensorShape(input1), num_inputs, all_inputs.data(),\n                         GetTensorData<T>(output));\n}",
        "output": "1",
        "idx": 4311
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void migrate_fd_cancel(MigrationState *s)\n{\n    int old_state ;\n    QEMUFile *f = migrate_get_current()->to_dst_file;\n    trace_migrate_fd_cancel();\n    if (s->rp_state.from_dst_file) {\n        /* shutdown the rp socket, so causing the rp thread to shutdown */\n        qemu_file_shutdown(s->rp_state.from_dst_file);\n    do {\n        old_state = s->state;\n        if (!migration_is_setup_or_active(old_state)) {\n            break;\n        migrate_set_state(&s->state, old_state, MIGRATION_STATUS_CANCELLING);\n    } while (s->state != MIGRATION_STATUS_CANCELLING);\n    /*\n     * If we're unlucky the migration code might be stuck somewhere in a\n     * send/write while the network has failed and is waiting to timeout;\n     * if we've got shutdown(2) available then we can force it to quit.\n     * The outgoing qemu file gets closed in migrate_fd_cleanup that is\n     * called in a bh, so there is no race against this cancel.\n     */\n    if (s->state == MIGRATION_STATUS_CANCELLING && f) {\n        qemu_file_shutdown(f);",
        "output": "1",
        "idx": 2103
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  bool ms_verify_authorizer(Connection *con, int peer_type,\n\t\t\t\t    int protocol, bufferlist& authorizer,\n\t\t\t\t    bufferlist& authorizer_reply,\n\t\t\t\t    bool& isvalid, CryptoKey& session_key) override {\n    /* always succeed */\n    isvalid = true;\n    return true;\n  };",
        "output": "1",
        "idx": 723
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int t_show(struct seq_file *m, void *v)\n{\n\tstruct tracer *t = v;\n\n\tif (!t)\n\t\treturn 0;\n\n\tseq_puts(m, t->name);\n\tif (t->next)\n\t\tseq_putc(m, ' ');\n\telse\n\t\tseq_putc(m, '\\n');\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 4303
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void MD5::encode(unsigned char *output, UINT4 *input, unsigned int len)\n{\n    unsigned int i, j;\n\n    for (i = 0, j = 0; j < len; i++, j += 4) {\n\toutput[j] = static_cast<unsigned char>(input[i] & 0xff);\n\toutput[j+1] = static_cast<unsigned char>((input[i] >> 8) & 0xff);\n\toutput[j+2] = static_cast<unsigned char>((input[i] >> 16) & 0xff);\n\toutput[j+3] = static_cast<unsigned char>((input[i] >> 24) & 0xff);\n    }\n}",
        "output": "1",
        "idx": 3645
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dns_local_removehost(const char *hostname, const ip_addr_t *addr)\n{\n  int removed = 0;\n  struct local_hostlist_entry *entry = local_hostlist_dynamic;\n  struct local_hostlist_entry *last_entry = NULL;\n  while (entry != NULL) {\n    if (((hostname == NULL) || !strcmp(entry->name, hostname)) &&\n        ((addr == NULL) || ip_addr_cmp(&entry->addr, addr))) {\n      struct local_hostlist_entry *free_entry;\n      if (last_entry != NULL) {\n        last_entry->next = entry->next;\n      } else {\n        local_hostlist_dynamic = entry->next;\n      }\n      free_entry = entry;\n      entry = entry->next;\n      memp_free(MEMP_LOCALHOSTLIST, free_entry);\n      removed++;\n    } else {\n      last_entry = entry;\n      entry = entry->next;\n    }\n  }\n  return removed;\n}",
        "output": "1",
        "idx": 4356
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ip_cancel_eval_core(interp, msg, flag)\n    Tcl_Interp *interp;\n    VALUE msg;\n    int flag;\n{\n#if TCL_MAJOR_VERSION < 8 || (TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION < 6)\n    rb_raise(rb_eNotImpError,\n\t     \"cancel_eval is supported Tcl/Tk8.6 or later.\");\n\n    UNREACHABLE;\n#else\n    Tcl_Obj *msg_obj;\n\n    if (NIL_P(msg)) {\n      msg_obj = NULL;\n    } else {\n      msg_obj = Tcl_NewStringObj(RSTRING_PTR(msg), RSTRING_LEN(msg));\n      Tcl_IncrRefCount(msg_obj);\n    }\n\n    return Tcl_CancelEval(interp, msg_obj, 0, flag);\n#endif\n}",
        "output": "1",
        "idx": 4757
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ax25_kill_by_device(struct net_device *dev)\n{\n\tax25_dev *ax25_dev;\n\tax25_cb *s;\n\tstruct sock *sk;\n\n\tif ((ax25_dev = ax25_dev_ax25dev(dev)) == NULL)\n\t\treturn;\n\n\tspin_lock_bh(&ax25_list_lock);\nagain:\n\tax25_for_each(s, &ax25_list) {\n\t\tif (s->ax25_dev == ax25_dev) {\n\t\t\tsk = s->sk;\n\t\t\tsock_hold(sk);\n\t\t\tspin_unlock_bh(&ax25_list_lock);\n\t\t\tlock_sock(sk);\n\t\t\ts->ax25_dev = NULL;\n\t\t\tax25_dev_put(ax25_dev);\n\t\t\tax25_disconnect(s, ENETUNREACH);\n\t\t\trelease_sock(sk);\n\t\t\tspin_lock_bh(&ax25_list_lock);\n\t\t\tsock_put(sk);\n\t\t\t/* The entry could have been deleted from the\n\t\t\t * list meanwhile and thus the next pointer is\n\t\t\t * no longer valid.  Play it safe and restart\n\t\t\t * the scan.  Forward progress is ensured\n\t\t\t * because we set s->ax25_dev to NULL and we\n\t\t\t * are never passed a NULL 'dev' argument.\n\t\t\t */\n\t\t\tgoto again;\n\t\t}\n\t}\n\tspin_unlock_bh(&ax25_list_lock);\n}",
        "output": "1",
        "idx": 3473
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int query_format(struct vf_instance *vf, unsigned int fmt)\n\n{\n\n        /* FIXME - really any YUV 4:2:0 input format should work */\n\n        switch (fmt) {\n\n        case IMGFMT_YV12:\n\n        case IMGFMT_IYUV:\n\n        case IMGFMT_I420:\n\n                return ff_vf_next_query_format(vf, IMGFMT_YV12);\n\n        }\n\n        return 0;\n\n}\n",
        "output": "1",
        "idx": 5946
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static long kvm_vm_compat_ioctl(struct file *filp,\n\t\t\t   unsigned int ioctl, unsigned long arg)\n{\n\tstruct kvm *kvm = filp->private_data;\n\tint r;\n\n\tif (kvm->mm != current->mm)\n\t\treturn -EIO;\n\tswitch (ioctl) {\n\tcase KVM_GET_DIRTY_LOG: {\n\t\tstruct compat_kvm_dirty_log compat_log;\n\t\tstruct kvm_dirty_log log;\n\n\t\tr = -EFAULT;\n\t\tif (copy_from_user(&compat_log, (void __user *)arg,\n\t\t\t\t   sizeof(compat_log)))\n\t\t\tgoto out;\n\t\tlog.slot\t = compat_log.slot;\n\t\tlog.padding1\t = compat_log.padding1;\n\t\tlog.padding2\t = compat_log.padding2;\n\t\tlog.dirty_bitmap = compat_ptr(compat_log.dirty_bitmap);\n\n\t\tr = kvm_vm_ioctl_get_dirty_log(kvm, &log);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr = kvm_vm_ioctl(filp, ioctl, arg);\n\t}\n\nout:\n\treturn r;\n}",
        "output": "0",
        "idx": 43
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_tlbie(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n#else\n\n    if (unlikely(ctx->pr || !ctx->hv)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n        return;\n\n    }\n\n    if (NARROW_MODE(ctx)) {\n\n        TCGv t0 = tcg_temp_new();\n\n        tcg_gen_ext32u_tl(t0, cpu_gpr[rB(ctx->opcode)]);\n\n        gen_helper_tlbie(cpu_env, t0);\n\n        tcg_temp_free(t0);\n\n    } else {\n\n        gen_helper_tlbie(cpu_env, cpu_gpr[rB(ctx->opcode)]);\n\n    }\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 232
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_bmdma_setup(void)\n\n{\n\n    ide_test_start(\n\n        \"-vnc none \"\n\n        \"-drive file=%s,if=ide,serial=%s,cache=writeback \"\n\n        \"-global ide-hd.ver=%s\",\n\n        tmp_path, \"testdisk\", \"version\");\n\n}\n",
        "output": "1",
        "idx": 3078
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void dump_aml_files(test_data *data)\n\n{\n\n    AcpiSdtTable *sdt;\n\n    GError *error = NULL;\n\n    gint fd;\n\n    ssize_t ret;\n\n    int i;\n\n\n\n    for (i = 0; i < data->ssdt_tables->len; ++i) {\n\n        sdt = &g_array_index(data->ssdt_tables, AcpiSdtTable, i);\n\n        g_assert(sdt->aml);\n\n\n\n        fd = g_file_open_tmp(\"aml-XXXXXX\", &sdt->aml_file, &error);\n\n        g_assert_no_error(error);\n\n\n\n        ret = qemu_write_full(fd, sdt, sizeof(AcpiTableHeader));\n\n        g_assert(ret == sizeof(AcpiTableHeader));\n\n        ret = qemu_write_full(fd, sdt->aml, sdt->aml_len);\n\n        g_assert(ret == sdt->aml_len);\n\n\n\n        close(fd);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1018
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ZEND_FASTCALL  ZEND_FETCH_OBJ_IS_SPEC_VAR_TMP_HANDLER(ZEND_OPCODE_HANDLER_ARGS)\n{\n\treturn zend_fetch_property_address_read_helper_SPEC_VAR_TMP(BP_VAR_IS, ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);\n}",
        "output": "0",
        "idx": 5447
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dvi_document_file_exporter_end (EvFileExporter *exporter)\n{\n\tgchar *command_line;\n\tgint exit_stat;\n\tGError *err = NULL;\n\tgboolean success;\n\t\n\tDviDocument *dvi_document = DVI_DOCUMENT(exporter);\n\t\n\tcommand_line = g_strdup_printf (\"dvipdfm %s -o %s \\\"%s\\\"\", /* dvipdfm -s 1,2,.., -o exporter_filename dvi_filename */\n\t\t\t\t\tdvi_document->exporter_opts->str,\n\t\t\t\t\tdvi_document->exporter_filename,\n\t\t\t\t\tdvi_document->context->filename);\n\t\n\tsuccess = g_spawn_command_line_sync (command_line,\n\t\t\t\t\t     NULL,\n\t\t\t\t\t     NULL,\n\t\t\t\t\t     &exit_stat,\n\t\t\t\t\t     &err);\n\n\tg_free (command_line);\n\n\tif (success == FALSE) {\n\t\tg_warning (\"Error: %s\", err->message);\n\t} else if (!WIFEXITED(exit_stat) || WEXITSTATUS(exit_stat) != EXIT_SUCCESS){\n\t\tg_warning (\"Error: dvipdfm does not end normally or exit with a failure status.\");\n\t}\n\n\tif (err)\n\t\tg_error_free (err);\n}",
        "output": "1",
        "idx": 1125
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nbd_negotiate_handle_export_name(NBDClient *client, uint32_t length)\n\n{\n\n    int rc = -EINVAL;\n\n    char name[256];\n\n\n\n    /* Client sends:\n\n        [20 ..  xx]   export name (length bytes)\n\n     */\n\n    TRACE(\"Checking length\");\n\n    if (length > 255) {\n\n        LOG(\"Bad length received\");\n\n        goto fail;\n\n    }\n\n    if (nbd_negotiate_read(client->ioc, name, length) != length) {\n\n        LOG(\"read failed\");\n\n        goto fail;\n\n    }\n\n    name[length] = '\\0';\n\n\n\n    TRACE(\"Client requested export '%s'\", name);\n\n\n\n    client->exp = nbd_export_find(name);\n\n    if (!client->exp) {\n\n        LOG(\"export not found\");\n\n        goto fail;\n\n    }\n\n\n\n    QTAILQ_INSERT_TAIL(&client->exp->clients, client, next);\n\n    nbd_export_get(client->exp);\n\n    rc = 0;\n\nfail:\n\n    return rc;\n\n}\n",
        "output": "0",
        "idx": 948
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "transform_cipher_param(struct rte_crypto_sym_xform *xform,\n\t\tVhostUserCryptoSessionParam *param)\n{\n\tint ret;\n\n\tret = cipher_algo_transform(param->cipher_algo, &xform->cipher.algo);\n\tif (unlikely(ret < 0))\n\t\treturn ret;\n\n\txform->type = RTE_CRYPTO_SYM_XFORM_CIPHER;\n\txform->cipher.key.length = param->cipher_key_len;\n\tif (xform->cipher.key.length > 0)\n\t\txform->cipher.key.data = param->cipher_key_buf;\n\tif (param->dir == VIRTIO_CRYPTO_OP_ENCRYPT)\n\t\txform->cipher.op = RTE_CRYPTO_CIPHER_OP_ENCRYPT;\n\telse if (param->dir == VIRTIO_CRYPTO_OP_DECRYPT)\n\t\txform->cipher.op = RTE_CRYPTO_CIPHER_OP_DECRYPT;\n\telse {\n\t\tVC_LOG_DBG(\"Bad operation type\");\n\t\treturn -VIRTIO_CRYPTO_BADMSG;\n\t}\n\n\tret = get_iv_len(xform->cipher.algo);\n\tif (unlikely(ret < 0))\n\t\treturn ret;\n\txform->cipher.iv.length = (uint16_t)ret;\n\txform->cipher.iv.offset = IV_OFFSET;\n\treturn 0;\n}",
        "output": "1",
        "idx": 72
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void copy_gigantic_page(struct page *dst, struct page *src)\n{\n\tint i;\n\tstruct hstate *h = page_hstate(src);\n\tstruct page *dst_base = dst;\n\tstruct page *src_base = src;\n\n\tfor (i = 0; i < pages_per_huge_page(h); ) {\n\t\tcond_resched();\n\t\tcopy_highpage(dst, src);\n\n\t\ti++;\n\t\tdst = mem_map_next(dst, dst_base, i);\n\t\tsrc = mem_map_next(src, src_base, i);\n\t}\n}",
        "output": "0",
        "idx": 1239
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BlockStatsList *qmp_query_blockstats(Error **errp)\n{\n    BlockStatsList *head = NULL, **p_next = &head;\n    BlockDriverState *bs = NULL;\n     while ((bs = bdrv_next(bs))) {\n        BlockStatsList *info = g_malloc0(sizeof(*info));\n        info->value = bdrv_query_stats(bs);\n        *p_next = info;\n        p_next = &info->next;\n    }\n    return head;\n}",
        "output": "1",
        "idx": 5011
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int PE_(r_bin_pe_is_stripped_local_syms)(struct PE_(r_bin_pe_obj_t)* bin) {\n\tif (!bin || !bin->nt_headers) {\n\t\treturn false;\n\t}\n\treturn HASCHR (PE_IMAGE_FILE_LOCAL_SYMS_STRIPPED);\n}",
        "output": "0",
        "idx": 3884
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct binder_node *binder_get_node_from_ref(\n\t\tstruct binder_proc *proc,\n\t\tu32 desc, bool need_strong_ref,\n\t\tstruct binder_ref_data *rdata)\n{\n\tstruct binder_node *node;\n\tstruct binder_ref *ref;\n\n\tbinder_proc_lock(proc);\n\tref = binder_get_ref_olocked(proc, desc, need_strong_ref);\n\tif (!ref)\n\t\tgoto err_no_ref;\n\tnode = ref->node;\n\t/*\n\t * Take an implicit reference on the node to ensure\n\t * it stays alive until the call to binder_put_node()\n\t */\n\tbinder_inc_node_tmpref(node);\n\tif (rdata)\n\t\t*rdata = ref->data;\n\tbinder_proc_unlock(proc);\n\n\treturn node;\n\nerr_no_ref:\n\tbinder_proc_unlock(proc);\n\treturn NULL;\n}",
        "output": "0",
        "idx": 5266
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void check_alignment(CPUS390XState *env, uint64_t v,\n\n                                   int wordsize, uintptr_t ra)\n\n{\n\n    if (v % wordsize) {\n\n        CPUState *cs = CPU(s390_env_get_cpu(env));\n\n        cpu_restore_state(cs, ra);\n\n        program_interrupt(env, PGM_SPECIFICATION, 6);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 16
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gs_nulldevice(gs_gstate * pgs)\n{\n    int code = 0;\n\n    if (pgs->device == 0 || !gx_device_is_null(pgs->device)) {\n        gx_device *ndev;\n        code = gs_copydevice(&ndev, (const gx_device *)&gs_null_device,\n                                 pgs->memory);\n\n        if (code < 0)\n            return code;\n        /*\n         * Internal devices have a reference count of 0, not 1,\n         * aside from references from graphics states.\n         */\n        /* There is some strange use of the null device in the code.  I need\n           to sort out how the icc profile is best handled with this device.\n           It seems to inherit properties from the current device if there\n           is one */\n        rc_init(ndev, pgs->memory, 0);\n        if (pgs->device != NULL) {\n            if ((code = dev_proc(pgs->device, get_profile)(pgs->device,\n                                               &(ndev->icc_struct))) < 0)\n                return code;\n            rc_increment(ndev->icc_struct);\n            set_dev_proc(ndev, get_profile, gx_default_get_profile);\n        }\n\n        if ((code = gs_setdevice_no_erase(pgs, ndev)) < 0)\n            gs_free_object(pgs->memory, ndev, \"gs_copydevice(device)\");\n    }\n    return code;\n}",
        "output": "1",
        "idx": 2948
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  explicit FakeServerHandshake(\n      QuicServerConnectionState& conn,\n      std::shared_ptr<FizzServerQuicHandshakeContext> fizzContext,\n      bool chloSync = false,\n      bool cfinSync = false,\n      folly::Optional<uint64_t> clientActiveConnectionIdLimit = folly::none)\n      : FizzServerHandshake(&conn, std::move(fizzContext)),\n        conn_(conn),\n        chloSync_(chloSync),\n        cfinSync_(cfinSync),\n        clientActiveConnectionIdLimit_(clientActiveConnectionIdLimit) {}",
        "output": "0",
        "idx": 5195
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rfbSendBell(rfbScreenInfoPtr rfbScreen)\n{\n    rfbClientIteratorPtr i;\n    rfbClientPtr cl;\n    rfbBellMsg b;\n\n    i = rfbGetClientIterator(rfbScreen);\n    while((cl=rfbClientIteratorNext(i))) {\n\tb.type = rfbBell;\n\tif (rfbWriteExact(cl, (char *)&b, sz_rfbBellMsg) < 0) {\n\t    rfbLogPerror(\"rfbSendBell: write\");\n\t    rfbCloseClient(cl);\n\t}\n    }\n    rfbStatRecordMessageSent(cl, rfbBell, sz_rfbBellMsg, sz_rfbBellMsg);\n    rfbReleaseClientIterator(i);\n}",
        "output": "1",
        "idx": 3286
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long compat_put_bitmap(compat_ulong_t __user *umask, unsigned long *mask,\n\t\t       unsigned long bitmap_size)\n{\n\tunsigned long nr_compat_longs;\n\n\t/* align bitmap up to nearest compat_long_t boundary */\n\tbitmap_size = ALIGN(bitmap_size, BITS_PER_COMPAT_LONG);\n\tnr_compat_longs = BITS_TO_COMPAT_LONGS(bitmap_size);\n\n\tif (!access_ok(umask, bitmap_size / 8))\n\t\treturn -EFAULT;\n\n\tuser_access_begin();\n\twhile (nr_compat_longs > 1) {\n\t\tunsigned long m = *mask++;\n\t\tunsafe_put_user((compat_ulong_t)m, umask++, Efault);\n\t\tunsafe_put_user(m >> BITS_PER_COMPAT_LONG, umask++, Efault);\n\t\tnr_compat_longs -= 2;\n\t}\n\tif (nr_compat_longs)\n\t\tunsafe_put_user((compat_ulong_t)*mask, umask++, Efault);\n\tuser_access_end();\n\treturn 0;\nEfault:\n\tuser_access_end();\n\treturn -EFAULT;\n}",
        "output": "1",
        "idx": 2702
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Item* Item_singlerow_subselect::expr_cache_insert_transformer(THD *tmp_thd,\n                                                              uchar *unused)\n{\n  DBUG_ENTER(\"Item_singlerow_subselect::expr_cache_insert_transformer\");\n\n  DBUG_ASSERT(thd == tmp_thd);\n\n  if (expr_cache)\n    DBUG_RETURN(expr_cache);\n\n  if (expr_cache_is_needed(tmp_thd) &&\n      (expr_cache= set_expr_cache(tmp_thd)))\n  {\n    init_expr_cache_tracker(tmp_thd);\n    DBUG_RETURN(expr_cache);\n  }\n  DBUG_RETURN(this);\n}",
        "output": "1",
        "idx": 5191
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *smalloc(size_t size)\n{\n        void *buf;\n\n        buf = malloc(size);\n        if (!buf)\n                raise(SIGUSR1);\n        return buf;\n}",
        "output": "0",
        "idx": 4368
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ext3_fsblk_t get_sb_block(void **data, struct super_block *sb)\n{\n\text3_fsblk_t\tsb_block;\n\tchar\t\t*options = (char *) *data;\n\n\tif (!options || strncmp(options, \"sb=\", 3) != 0)\n\t\treturn 1;\t/* Default location */\n\toptions += 3;\n\t/*todo: use simple_strtoll with >32bit ext3 */\n\tsb_block = simple_strtoul(options, &options, 0);\n\tif (*options && *options != ',') {\n\t\text3_msg(sb, \"error: invalid sb specification: %s\",\n\t\t       (char *) *data);\n\t\treturn 1;\n\t}\n\tif (*options == ',')\n\t\toptions++;\n\t*data = (void *) options;\n\treturn sb_block;\n}",
        "output": "1",
        "idx": 1884
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ext4_dax_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf)\n{\n\treturn dax_mkwrite(vma, vmf, ext4_get_block_dax,\n\t\t\t\text4_end_io_unwritten);\n}",
        "output": "1",
        "idx": 5320
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int io_prep_fsync(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->file)\n\t\treturn -EBADF;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(sqe->addr || sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 1803
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool e1000_has_rxbufs(E1000State *s, size_t total_size)\n\n{\n\n    int bufs;\n\n    /* Fast-path short packets */\n\n    if (total_size <= s->rxbuf_size) {\n\n        return s->mac_reg[RDH] != s->mac_reg[RDT] || !s->check_rxov;\n\n    }\n\n    if (s->mac_reg[RDH] < s->mac_reg[RDT]) {\n\n        bufs = s->mac_reg[RDT] - s->mac_reg[RDH];\n\n    } else if (s->mac_reg[RDH] > s->mac_reg[RDT] || !s->check_rxov) {\n\n        bufs = s->mac_reg[RDLEN] /  sizeof(struct e1000_rx_desc) +\n\n            s->mac_reg[RDT] - s->mac_reg[RDH];\n\n    } else {\n\n        return false;\n\n    }\n\n    return total_size <= bufs * s->rxbuf_size;\n\n}\n",
        "output": "0",
        "idx": 4637
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void abort_not_in_this_version()\n{\n  die(\"Not available in this version of mysqltest\");\n}",
        "output": "0",
        "idx": 2601
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct omap_rtc_s *omap_rtc_init(MemoryRegion *system_memory,\n\n                                        target_phys_addr_t base,\n\n                                        qemu_irq timerirq, qemu_irq alarmirq,\n\n                                        omap_clk clk)\n\n{\n\n    struct omap_rtc_s *s = (struct omap_rtc_s *)\n\n            g_malloc0(sizeof(struct omap_rtc_s));\n\n\n\n    s->irq = timerirq;\n\n    s->alarm = alarmirq;\n\n    s->clk = qemu_new_timer_ms(rtc_clock, omap_rtc_tick, s);\n\n\n\n    omap_rtc_reset(s);\n\n\n\n    memory_region_init_io(&s->iomem, &omap_rtc_ops, s,\n\n                          \"omap-rtc\", 0x800);\n\n    memory_region_add_subregion(system_memory, base, &s->iomem);\n\n\n\n    return s;\n\n}\n",
        "output": "0",
        "idx": 957
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int config_props(AVFilterLink *link)\n\n{\n\n    UnsharpContext *unsharp = link->dst->priv;\n\n    const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(link->format);\n\n\n\n    unsharp->hsub = desc->log2_chroma_w;\n\n    unsharp->vsub = desc->log2_chroma_h;\n\n\n\n    init_filter_param(link->dst, &unsharp->luma,   \"luma\",   link->w);\n\n    init_filter_param(link->dst, &unsharp->chroma, \"chroma\", SHIFTUP(link->w, unsharp->hsub));\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3987
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int RGWDeleteObj_ObjStore_SWIFT::get_params()\n{\n  const string& mm = s->info.args.get(\"multipart-manifest\");\n  multipart_delete = (mm.compare(\"delete\") == 0);\n\n  return RGWDeleteObj_ObjStore::get_params();\n}",
        "output": "0",
        "idx": 5239
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void xen_blkbk_unmap_and_respond_callback(int result, struct gntab_unmap_queue_data *data)\n{\n\tstruct pending_req *pending_req = (struct pending_req *)(data->data);\n\tstruct xen_blkif_ring *ring = pending_req->ring;\n\tstruct xen_blkif *blkif = ring->blkif;\n\n\t/* BUG_ON used to reproduce existing behaviour,\n\t   but is this the best way to deal with this? */\n\tBUG_ON(result);\n\n\tput_free_pages(ring, data->pages, data->count);\n\tmake_response(ring, pending_req->id,\n\t\t      pending_req->operation, pending_req->status);\n\tfree_req(ring, pending_req);\n\t/*\n\t * Make sure the request is freed before releasing blkif,\n\t * or there could be a race between free_req and the\n\t * cleanup done in xen_blkif_free during shutdown.\n\t *\n\t * NB: The fact that we might try to wake up pending_free_wq\n\t * before drain_complete (in case there's a drain going on)\n\t * it's not a problem with our current implementation\n\t * because we can assure there's no thread waiting on\n\t * pending_free_wq if there's a drain going on, but it has\n\t * to be taken into account if the current model is changed.\n\t */\n\tif (atomic_dec_and_test(&ring->inflight) && atomic_read(&blkif->drain)) {\n\t\tcomplete(&blkif->drain_complete);\n\t}\n\txen_blkif_put(blkif);\n}",
        "output": "0",
        "idx": 5660
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint64_t helper_sublv (uint64_t op1, uint64_t op2)\n\n{\n\n    uint64_t tmp = op1;\n\n    op1 = (uint32_t)(op1 - op2);\n\n    if (unlikely(((~tmp) ^ op1 ^ (-1UL)) & ((~tmp) ^ op2) & (1UL << 31))) {\n\n        helper_excp(EXCP_ARITH, EXCP_ARITH_OVERFLOW);\n\n    }\n\n    return op1;\n\n}\n",
        "output": "1",
        "idx": 1229
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "__nlmsg_put(struct sk_buff *skb, u32 pid, u32 seq, int type, int len, int flags)\n{\n\tstruct nlmsghdr *nlh;\n\tint size = NLMSG_LENGTH(len);\n\n\tnlh = (struct nlmsghdr*)skb_put(skb, NLMSG_ALIGN(size));\n\tnlh->nlmsg_type = type;\n\tnlh->nlmsg_len = size;\n\tnlh->nlmsg_flags = flags;\n\tnlh->nlmsg_pid = pid;\n\tnlh->nlmsg_seq = seq;\n\treturn nlh;\n}",
        "output": "1",
        "idx": 3161
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\t\t\t  bool poll_only)\n\t__must_hold(&ctx->completion_lock)\n{\n\tstruct io_kiocb *req = io_poll_find(ctx, sqe_addr, poll_only);\n\n\tif (!req)\n\t\treturn -ENOENT;\n\tio_poll_cancel_req(req);\n\treturn 0;",
        "output": "1",
        "idx": 3569
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "e1000e_set_dbal(E1000ECore *core, int index, uint32_t val)\n{\n    core->mac[index] = val & E1000_XDBAL_MASK;\n}",
        "output": "0",
        "idx": 1883
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void srpt_mad_send_handler(struct ib_mad_agent *mad_agent,\n\t\t\t\t  struct ib_mad_send_wc *mad_wc)\n{\n\tib_destroy_ah(mad_wc->send_buf->ah);\n\tib_free_send_mad(mad_wc->send_buf);\n}",
        "output": "0",
        "idx": 1696
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_write(BlockDriverState *bs, int64_t sector_num,\n               const uint8_t *buf, int nb_sectors)\n{\n    BlockDriver *drv = bs->drv;\n    if (!bs->drv)\n        return -ENOMEDIUM;\n    if (bs->read_only)\n        return -EACCES;\n    if (drv->bdrv_pwrite) {\n        int ret, len, count = 0;\n        len = nb_sectors * 512;\n        do {\n            ret = drv->bdrv_pwrite(bs, sector_num * 512, buf, len - count);\n            if (ret < 0) {\n                printf(\"bdrv_write ret=%d\\n\", ret);\n                return ret;\n            }\n            count += ret;\n            buf += ret;\n        } while (count != len);\n        bs->wr_bytes += (unsigned) len;\n        bs->wr_ops ++;\n        return 0;\n    }\n    return drv->bdrv_write(bs, sector_num, buf, nb_sectors);\n}",
        "output": "1",
        "idx": 4860
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "add_unsupported_rotation_item (GsdXrandrManager *manager)\n{\n        struct GsdXrandrManagerPrivate *priv = manager->priv;\n        GtkWidget *item;\n        GtkWidget *label;\n\n        item = gtk_menu_item_new ();\n\n        label = gtk_label_new (NULL);\n        gtk_label_set_markup (GTK_LABEL (label), _(\"<i>Rotation not supported</i>\"));\n        gtk_container_add (GTK_CONTAINER (item), label);\n\n        gtk_widget_show_all (item);\n        gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);\n}",
        "output": "0",
        "idx": 990
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void term_read(void *opaque, const uint8_t *buf, int size)\n\n{\n\n    int i;\n\n    for(i = 0; i < size; i++)\n\n        term_handle_byte(buf[i]);\n\n}\n",
        "output": "0",
        "idx": 4874
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Field *Type_handler_blob_common::make_conversion_table_field(TABLE *table,\n                                                            uint metadata,\n                                                            const Field *target)\n                                                            const\n{\n  uint pack_length= metadata & 0x00ff;\n  if (pack_length < 1 || pack_length > 4)\n    return NULL; // Broken binary log?\n  return new(table->in_use->mem_root)\n         Field_blob(NULL, (uchar *) \"\", 1, Field::NONE, TMPNAME,\n                    table->s, pack_length, target->charset());\n}",
        "output": "0",
        "idx": 1962
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": " */\nbool skb_gso_validate_mtu(const struct sk_buff *skb, unsigned int mtu)\n{\n\tconst struct skb_shared_info *shinfo = skb_shinfo(skb);\n\tconst struct sk_buff *iter;\n\tunsigned int hlen;\n\n\thlen = skb_gso_network_seglen(skb);\n\n\tif (shinfo->gso_size != GSO_BY_FRAGS)\n\t\treturn hlen <= mtu;\n\n\t/* Undo this so we can re-use header sizes */\n\thlen -= GSO_BY_FRAGS;\n\n\tskb_walk_frags(skb, iter) {\n\t\tif (hlen + skb_headlen(iter) > mtu)\n\t\t\treturn false;\n\t}\n\n\treturn true;",
        "output": "1",
        "idx": 1703
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void json_print_chapter_header(WriterContext *wctx, const char *chapter)\n\n{\n\n    JSONContext *json = wctx->priv;\n\n    char *chapter_esc;\n\n\n\n    if (wctx->nb_chapter)\n\n        printf(\",\");\n\n    json->multiple_entries = !strcmp(chapter, \"packets\") || !strcmp(chapter, \"streams\");\n\n    chapter_esc = json_escape_str(chapter);\n\n    printf(\"\\n  \\\"%s\\\":%s\", chapter_esc ? chapter_esc : \"\",\n\n           json->multiple_entries ? \" [\" : \" \");\n\n    av_free(chapter_esc);\n\n}\n",
        "output": "1",
        "idx": 4261
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_put_h264_qpel4_mc31_msa(uint8_t *dst, const uint8_t *src,\n\n                                ptrdiff_t stride)\n\n{\n\n    avc_luma_hv_qrt_4w_msa(src - 2,\n\n                           src - (stride * 2) +\n\n                           sizeof(uint8_t), stride, dst, stride, 4);\n\n}\n",
        "output": "0",
        "idx": 4174
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int latest_repeatable_unsubmitted_iter(void *data, void *val)\n{\n    stream_iter_ctx *ctx = data;\n    h2_stream *stream = val;\n    \n    if (stream->task && !stream->task->worker_done \n        && h2_task_can_redo(stream->task) \n        && !h2_ihash_get(ctx->m->sredo, stream->id)) {\n        if (!h2_stream_is_ready(stream)) {\n            /* this task occupies a worker, the response has not been submitted \n             * yet, not been cancelled and it is a repeatable request\n             * -> it can be re-scheduled later */\n            if (!ctx->stream \n                || (ctx->stream->task->started_at < stream->task->started_at)) {\n                /* we did not have one or this one was started later */\n                ctx->stream = stream;\n            }\n        }\n    }\n    return 1;\n}",
        "output": "1",
        "idx": 2178
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MagickExport size_t GetQuantumExtent(const Image *image,\n  const QuantumInfo *quantum_info,const QuantumType quantum_type)\n{\n  size_t\n    packet_size;\n\n  assert(quantum_info != (QuantumInfo *) NULL);\n  assert(quantum_info->signature == MagickCoreSignature);\n  packet_size=1;\n  switch (quantum_type)\n  {\n    case GrayAlphaQuantum: packet_size=2; break;\n    case IndexAlphaQuantum: packet_size=2; break;\n    case RGBQuantum: packet_size=3; break;\n    case BGRQuantum: packet_size=3; break;\n    case RGBAQuantum: packet_size=4; break;\n    case RGBOQuantum: packet_size=4; break;\n    case BGRAQuantum: packet_size=4; break;\n    case CMYKQuantum: packet_size=4; break;\n    case CMYKAQuantum: packet_size=5; break;\n    default: break;\n  }\n  if (quantum_info->pack == MagickFalse)\n    return((size_t) (packet_size*image->columns*((quantum_info->depth+7)/8)));\n  return((size_t) ((packet_size*image->columns*quantum_info->depth+7)/8));\n}",
        "output": "1",
        "idx": 4734
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ax25_return_dm(struct net_device *dev, ax25_address *src, ax25_address *dest, ax25_digi *digi)\n{\n\tstruct sk_buff *skb;\n\tchar *dptr;\n\tax25_digi retdigi;\n\n\tif (dev == NULL)\n\t\treturn;\n\n\tif ((skb = alloc_skb(dev->hard_header_len + 1, GFP_ATOMIC)) == NULL)\n\t\treturn;\t/* Next SABM will get DM'd */\n\n\tskb_reserve(skb, dev->hard_header_len);\n\tskb_reset_network_header(skb);\n\n\tax25_digi_invert(digi, &retdigi);\n\n\tdptr = skb_put(skb, 1);\n\n\t*dptr = AX25_DM | AX25_PF;\n\n\t/*\n\t *\tDo the address ourselves\n\t */\n\tdptr  = skb_push(skb, ax25_addr_size(digi));\n\tdptr += ax25_addr_build(dptr, dest, src, &retdigi, AX25_RESPONSE, AX25_MODULUS);\n\n\tax25_queue_xmit(skb, dev);\n}",
        "output": "0",
        "idx": 918
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int handle_request(struct ipa_extdom_ctx *ctx, struct extdom_req *req,\n                   struct berval **berval)\n{\n    int ret;\n\n    switch (req->input_type) {\n    case INP_POSIX_UID:\n        ret = handle_uid_request(req->request_type, req->data.posix_uid.uid,\n                                 req->data.posix_uid.domain_name, berval);\n\n        break;\n    case INP_POSIX_GID:\n        ret = handle_gid_request(req->request_type, req->data.posix_gid.gid,\n                                 req->data.posix_uid.domain_name, berval);\n\n        break;\n    case INP_SID:\n        ret = handle_sid_request(req->request_type, req->data.sid, berval);\n        break;\n    case INP_NAME:\n        ret = handle_name_request(req->request_type, req->data.name.object_name,\n                                  req->data.name.domain_name, berval);\n\n        break;\n    default:\n        ret = LDAP_PROTOCOL_ERROR;\n        goto done;\n    }\n\n\ndone:\n\n    return ret;\n}",
        "output": "1",
        "idx": 4485
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int kvm_handle_invalid_op(struct kvm_vcpu *vcpu)\n{\n\tkvm_queue_exception(vcpu, UD_VECTOR);\n\treturn 1;\n}",
        "output": "0",
        "idx": 5584
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "archive_read_support_format_lha(struct archive *_a)\n{\n\tstruct archive_read *a = (struct archive_read *)_a;\n\tstruct lha *lha;\n\tint r;\n\n\tarchive_check_magic(_a, ARCHIVE_READ_MAGIC,\n\t    ARCHIVE_STATE_NEW, \"archive_read_support_format_lha\");\n\n\tlha = (struct lha *)calloc(1, sizeof(*lha));\n\tif (lha == NULL) {\n\t\tarchive_set_error(&a->archive, ENOMEM,\n\t\t    \"Can't allocate lha data\");\n\t\treturn (ARCHIVE_FATAL);\n\t}\n\tarchive_string_init(&lha->ws);\n\n\tr = __archive_read_register_format(a,\n\t    lha,\n\t    \"lha\",\n\t    archive_read_format_lha_bid,\n\t    archive_read_format_lha_options,\n\t    archive_read_format_lha_read_header,\n\t    archive_read_format_lha_read_data,\n\t    archive_read_format_lha_read_data_skip,\n\t    NULL,\n\t    archive_read_format_lha_cleanup,\n\t    NULL,\n\t    NULL);\n\n\tif (r != ARCHIVE_OK)\n\t\tfree(lha);\n\treturn (ARCHIVE_OK);\n}",
        "output": "0",
        "idx": 1419
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "envlist_create(void)\n\n{\n\n\tenvlist_t *envlist;\n\n\n\n\tif ((envlist = malloc(sizeof (*envlist))) == NULL)\n\n\t\treturn (NULL);\n\n\n\n\tLIST_INIT(&envlist->el_entries);\n\n\tenvlist->el_count = 0;\n\n\n\n\treturn (envlist);\n\n}\n",
        "output": "0",
        "idx": 3544
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool Skin::operator==(const Skin &other) const {\n  return this->extensions == other.extensions && this->extras == other.extras &&\n         this->inverseBindMatrices == other.inverseBindMatrices &&\n         this->joints == other.joints && this->name == other.name &&\n         this->skeleton == other.skeleton;\n}",
        "output": "0",
        "idx": 2100
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const char *gf_filter_get_id(GF_Filter *filter)\n{\n\tif (filter) return filter->id;\n\treturn NULL;\n}",
        "output": "0",
        "idx": 1624
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void br_multicast_del_pg(struct net_bridge *br,\n\t\t\t\tstruct net_bridge_port_group *pg)\n{\n\tstruct net_bridge_mdb_htable *mdb;\n\tstruct net_bridge_mdb_entry *mp;\n\tstruct net_bridge_port_group *p;\n\tstruct net_bridge_port_group __rcu **pp;\n\n\tmdb = mlock_dereference(br->mdb, br);\n\n\tmp = br_mdb_ip_get(mdb, &pg->addr);\n\tif (WARN_ON(!mp))\n\t\treturn;\n\n\tfor (pp = &mp->ports;\n\t     (p = mlock_dereference(*pp, br)) != NULL;\n\t     pp = &p->next) {\n\t\tif (p != pg)\n\t\t\tcontinue;\n\n\t\trcu_assign_pointer(*pp, p->next);\n\t\thlist_del_init(&p->mglist);\n\t\tdel_timer(&p->timer);\n\t\tdel_timer(&p->query_timer);\n\t\tcall_rcu_bh(&p->rcu, br_multicast_free_pg);\n\n\t\tif (!mp->ports && hlist_unhashed(&mp->mglist) &&\n\t\t    netif_running(br->dev))\n\t\t\tmod_timer(&mp->timer, jiffies);\n\n\t\treturn;\n\t}\n\n\tWARN_ON(1);\n}",
        "output": "0",
        "idx": 6105
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void fw_cfg_add_callback(FWCfgState *s, uint16_t key, FWCfgCallback callback,\n\n                         void *callback_opaque, uint8_t *data, size_t len)\n\n{\n\n    int arch = !!(key & FW_CFG_ARCH_LOCAL);\n\n\n\n    assert(key & FW_CFG_WRITE_CHANNEL);\n\n\n\n    key &= FW_CFG_ENTRY_MASK;\n\n\n\n    assert(key < FW_CFG_MAX_ENTRY && len <= 65535);\n\n\n\n    s->entries[arch][key].data = data;\n\n    s->entries[arch][key].len = len;\n\n    s->entries[arch][key].callback_opaque = callback_opaque;\n\n    s->entries[arch][key].callback = callback;\n\n}\n",
        "output": "1",
        "idx": 464
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int htc_setup_complete(struct htc_target *target)\n{\n\tstruct sk_buff *skb;\n\tstruct htc_comp_msg *comp_msg;\n\tint ret = 0;\n\tunsigned long time_left;\n\n\tskb = alloc_skb(50 + sizeof(struct htc_frame_hdr), GFP_ATOMIC);\n\tif (!skb) {\n\t\tdev_err(target->dev, \"failed to allocate send buffer\\n\");\n\t\treturn -ENOMEM;\n\t}\n\tskb_reserve(skb, sizeof(struct htc_frame_hdr));\n\n\tcomp_msg = skb_put(skb, sizeof(struct htc_comp_msg));\n\tcomp_msg->msg_id = cpu_to_be16(HTC_MSG_SETUP_COMPLETE_ID);\n\n\ttarget->htc_flags |= HTC_OP_START_WAIT;\n\n\tret = htc_issue_send(target, skb, skb->len, 0, ENDPOINT0);\n\tif (ret)\n\t\tgoto err;\n\n\ttime_left = wait_for_completion_timeout(&target->cmd_wait, HZ);\n\tif (!time_left) {\n\t\tdev_err(target->dev, \"HTC start timeout\\n\");\n\t\treturn -ETIMEDOUT;\n\t}\n\n\treturn 0;\n\nerr:\n\tkfree_skb(skb);\n\treturn -EINVAL;\n}",
        "output": "1",
        "idx": 5243
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void rdp_read_flow_control_pdu(wStream* s, UINT16* type)\n{\n\t/*\n\t * Read flow control PDU - documented in FlowPDU section in T.128\n\t * http://www.itu.int/rec/T-REC-T.128-199802-S/en\n\t * The specification for the PDU has pad8bits listed BEFORE pduTypeFlow.\n\t * However, so far pad8bits has always been observed to arrive AFTER pduTypeFlow.\n\t * Switched the order of these two fields to match this observation.\n\t */\n\tUINT8 pduType;\n\tStream_Read_UINT8(s, pduType); /* pduTypeFlow */\n\t*type = pduType;\n\tStream_Seek_UINT8(s);  /* pad8bits */\n\tStream_Seek_UINT8(s);  /* flowIdentifier */\n\tStream_Seek_UINT8(s);  /* flowNumber */\n\tStream_Seek_UINT16(s); /* pduSource */\n}",
        "output": "1",
        "idx": 664
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int try_rgrow_left(MAIN_WINDOW_REC *window, int count)\n{\n\tMAIN_WINDOW_REC *grow_win;\n\n\tgrow_win = mainwindows_find_left(window, FALSE);\n\tif (grow_win != NULL) {\n\t\tgrow_win->last_column += count;\n\t\twindow->first_column += count;\n\t\tmainwindows_rresize_two(grow_win, window, count);\n\t\treturn TRUE;\n\t}\n\n\treturn FALSE;\n}",
        "output": "0",
        "idx": 5467
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  Compound_Selector_Ptr Simple_Selector::unify_with(Compound_Selector_Ptr rhs)\n  {\n    for (size_t i = 0, L = rhs->length(); i < L; ++i)\n    { if (to_string() == rhs->at(i)->to_string()) return rhs; }\n\n    // check for pseudo elements because they are always last\n    size_t i, L;\n    bool found = false;\n    if (typeid(*this) == typeid(Pseudo_Selector) || typeid(*this) == typeid(Wrapped_Selector))\n    {\n      for (i = 0, L = rhs->length(); i < L; ++i)\n      {\n        if ((Cast<Pseudo_Selector>((*rhs)[i]) || Cast<Wrapped_Selector>((*rhs)[i])) && (*rhs)[L-1]->is_pseudo_element())\n        { found = true; break; }\n      }\n    }\n    else\n    {\n      for (i = 0, L = rhs->length(); i < L; ++i)\n      {\n        if (Cast<Pseudo_Selector>((*rhs)[i]) || Cast<Wrapped_Selector>((*rhs)[i]))\n        { found = true; break; }\n      }\n    }\n    if (!found)\n    {\n      rhs->append(this);\n      return rhs;\n    }\n    rhs->elements().insert(rhs->elements().begin() + i, this);\n    return rhs;\n  }",
        "output": "1",
        "idx": 438
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "glue(glue(cirrus_bitblt_rop_fwd_transp_, ROP_NAME),_8)(CirrusVGAState *s,\n\t\t\t\t\t\t       uint8_t *dst,const uint8_t *src,\n\t\t\t\t\t\t       int dstpitch,int srcpitch,\n\t\t\t\t\t\t       int bltwidth,int bltheight)\n{\n    int x,y;\n    uint8_t p;\n    dstpitch -= bltwidth;\n    srcpitch -= bltwidth;\n\n    if (bltheight > 1 && (dstpitch < 0 || srcpitch < 0)) {\n        return;\n    }\n\n    for (y = 0; y < bltheight; y++) {\n        for (x = 0; x < bltwidth; x++) {\n\t    p = *dst;\n            ROP_OP(&p, *src);\n\t    if (p != s->vga.gr[0x34]) *dst = p;\n            dst++;\n            src++;\n        }\n        dst += dstpitch;\n        src += srcpitch;\n    }\n}",
        "output": "1",
        "idx": 2740
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cJSON_AddItemReferenceToArray( cJSON *array, cJSON *item )\n{\n\tcJSON_AddItemToArray( array, create_reference( item ) );\n}",
        "output": "1",
        "idx": 799
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int _hostsock_ioctl(oe_fd_t* sock_, unsigned long request, uint64_t arg)\n{\n    int ret = -1;\n    sock_t* sock = _cast_sock(sock_);\n\n    oe_errno = 0;\n\n    if (!sock)\n        OE_RAISE_ERRNO(OE_EINVAL);\n\n    if (oe_syscall_ioctl_ocall(&ret, sock->host_fd, request, arg, 0, NULL) !=\n        OE_OK)\n        OE_RAISE_ERRNO(OE_EINVAL);\n\ndone:\n\n    return ret;\n}",
        "output": "0",
        "idx": 2981
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint8_t *av_packet_new_side_data(AVPacket *pkt, enum AVPacketSideDataType type,\n\n                                 int size)\n\n{\n\n    int elems = pkt->side_data_elems;\n\n\n\n    if ((unsigned)elems + 1 > INT_MAX / sizeof(*pkt->side_data))\n\n        return NULL;\n\n    if ((unsigned)size > INT_MAX - FF_INPUT_BUFFER_PADDING_SIZE)\n\n        return NULL;\n\n\n\n    pkt->side_data = av_realloc(pkt->side_data,\n\n                                (elems + 1) * sizeof(*pkt->side_data));\n\n    if (!pkt->side_data)\n\n        return NULL;\n\n\n\n    pkt->side_data[elems].data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE);\n\n    if (!pkt->side_data[elems].data)\n\n        return NULL;\n\n    pkt->side_data[elems].size = size;\n\n    pkt->side_data[elems].type = type;\n\n    pkt->side_data_elems++;\n\n\n\n    return pkt->side_data[elems].data;\n\n}\n",
        "output": "1",
        "idx": 1102
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MODULE_ENTRY (fill_info) (GdkPixbufFormat *info)\n{\n\tstatic const GdkPixbufModulePattern signature[] = {\n\t\t{ \"\\xff\\xd8\", NULL, 100 },\n\t\t{ NULL, NULL, 0 }\n\t};\n\tstatic const gchar *mime_types[] = {\n\t\t\"image/jpeg\",\n\t\tNULL\n\t};\n\tstatic const gchar *extensions[] = {\n\t\t\"jpeg\",\n\t\t\"jpe\",\n\t\t\"jpg\",\n\t\tNULL\n\t};\n\n\tinfo->name = \"jpeg\";\n\tinfo->signature = (GdkPixbufModulePattern *) signature;\n\tinfo->description = NC_(\"image format\", \"JPEG\");\n\tinfo->mime_types = (gchar **) mime_types;\n\tinfo->extensions = (gchar **) extensions;\n\tinfo->flags = GDK_PIXBUF_FORMAT_WRITABLE | GDK_PIXBUF_FORMAT_THREADSAFE;\n\tinfo->license = \"LGPL\";\n}",
        "output": "0",
        "idx": 1393
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,\n                                      unsigned char **p,\n                                      unsigned char *end )\n{\n    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;\n    size_t  len;\n    ((void) ssl);\n\n    /*\n     * PSK parameters:\n     *\n     * opaque psk_identity_hint<0..2^16-1>;\n     */\n    len = (*p)[0] << 8 | (*p)[1];\n    *p += 2;\n\n    if( (*p) + len > end )\n    {\n        MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message \"\n                                    \"(psk_identity_hint length)\" ) );\n        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );\n    }\n\n    /*\n     * Note: we currently ignore the PKS identity hint, as we only allow one\n     * PSK to be provisionned on the client. This could be changed later if\n     * someone needs that feature.\n     */\n    *p += len;\n    ret = 0;\n\n    return( ret );\n}",
        "output": "1",
        "idx": 4883
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int select_watchdog(const char *p)\n\n{\n\n    WatchdogTimerModel *model;\n\n\n\n    if (watchdog) {\n\n        fprintf(stderr,\n\n                 \"qemu: only one watchdog option may be given\\n\");\n\n        return 1;\n\n    }\n\n\n\n    /* -watchdog ? lists available devices and exits cleanly. */\n\n    if (strcmp(p, \"?\") == 0) {\n\n        LIST_FOREACH(model, &watchdog_list, entry) {\n\n            fprintf(stderr, \"\\t%s\\t%s\\n\",\n\n                     model->wdt_name, model->wdt_description);\n\n        }\n\n        return 2;\n\n    }\n\n\n\n    LIST_FOREACH(model, &watchdog_list, entry) {\n\n        if (strcasecmp(model->wdt_name, p) == 0) {\n\n            watchdog = model;\n\n            return 0;\n\n        }\n\n    }\n\n\n\n    fprintf(stderr, \"Unknown -watchdog device. Supported devices are:\\n\");\n\n    LIST_FOREACH(model, &watchdog_list, entry) {\n\n        fprintf(stderr, \"\\t%s\\t%s\\n\",\n\n                 model->wdt_name, model->wdt_description);\n\n    }\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 1758
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int set_qf_name(struct super_block *sb, int qtype, substring_t *args)\n{\n\tstruct ext4_sb_info *sbi = EXT4_SB(sb);\n\tchar *qname;\n\n\tif (sb_any_quota_loaded(sb) &&\n\t\t!sbi->s_qf_names[qtype]) {\n\t\text4_msg(sb, KERN_ERR,\n\t\t\t\"Cannot change journaled \"\n\t\t\t\"quota options when quota turned on\");\n\t\treturn 0;\n\t}\n\tqname = match_strdup(args);\n\tif (!qname) {\n\t\text4_msg(sb, KERN_ERR,\n\t\t\t\"Not enough memory for storing quotafile name\");\n\t\treturn 0;\n\t}\n\tif (sbi->s_qf_names[qtype] &&\n\t\tstrcmp(sbi->s_qf_names[qtype], qname)) {\n\t\text4_msg(sb, KERN_ERR,\n\t\t\t\"%s quota file already specified\", QTYPE2NAME(qtype));\n\t\tkfree(qname);\n\t\treturn 0;\n\t}\n\tsbi->s_qf_names[qtype] = qname;\n\tif (strchr(sbi->s_qf_names[qtype], '/')) {\n\t\text4_msg(sb, KERN_ERR,\n\t\t\t\"quotafile must be on filesystem root\");\n\t\tkfree(sbi->s_qf_names[qtype]);\n\t\tsbi->s_qf_names[qtype] = NULL;\n\t\treturn 0;\n\t}\n\tset_opt(sb, QUOTA);\n\treturn 1;\n}",
        "output": "0",
        "idx": 6108
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ConvertLoopSlice(ModSample &src, ModSample &dest, SmpLength start, SmpLength len, bool loop)\n{\n\tif(!src.HasSampleData()) return;\n\n\tdest.FreeSample();\n\tdest = src;\n\tdest.nLength = len;\n\tdest.pSample = nullptr;\n\n\tif(!dest.AllocateSample())\n\t{\n\t\treturn;\n\t}\n\n\t// only preserve cue points if the target sample length is the same\n\tif(len != src.nLength)\n\t\tMemsetZero(dest.cues);\n\n\tstd::memcpy(dest.pSample8, src.pSample8 + start, len);\n\tdest.uFlags.set(CHN_LOOP, loop);\n\tif(loop)\n\t{\n\t\tdest.nLoopStart = 0;\n\t\tdest.nLoopEnd = len;\n\t} else\n\t{\n\t\tdest.nLoopStart = 0;\n\t\tdest.nLoopEnd = 0;\n\t}\n}",
        "output": "1",
        "idx": 5330
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t drop_sync(QIOChannel *ioc, size_t size)\n\n{\n\n    ssize_t ret = 0;\n\n    char small[1024];\n\n    char *buffer;\n\n\n\n    buffer = sizeof(small) < size ? small : g_malloc(MIN(65536, size));\n\n    while (size > 0) {\n\n        ssize_t count = read_sync(ioc, buffer, MIN(65536, size));\n\n\n\n        if (count <= 0) {\n\n            goto cleanup;\n\n        }\n\n        assert(count <= size);\n\n        size -= count;\n\n        ret += count;\n\n    }\n\n\n\n cleanup:\n\n    if (buffer != small) {\n\n        g_free(buffer);\n\n    }\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 1508
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static sctp_disposition_t sctp_sf_violation_chunk(\n\t\t\t\t     struct net *net,\n\t\t\t\t     const struct sctp_endpoint *ep,\n\t\t\t\t     const struct sctp_association *asoc,\n\t\t\t\t     const sctp_subtype_t type,\n\t\t\t\t     void *arg,\n\t\t\t\t     sctp_cmd_seq_t *commands)\n{\n\tstatic const char err_str[] = \"The following chunk violates protocol:\";\n\n\tif (!asoc)\n\t\treturn sctp_sf_violation(net, ep, asoc, type, arg, commands);\n\n\treturn sctp_sf_abort_violation(net, ep, asoc, arg, commands, err_str,\n\t\t\t\t\tsizeof(err_str));\n}",
        "output": "0",
        "idx": 408
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "   Does a self test of the module \"module\" */\nPHP_FUNCTION(mcrypt_module_self_test)\n{\n\tMCRYPT_GET_MODE_DIR_ARGS(algorithms_dir);\n\t\n\tif (mcrypt_module_self_test(module, dir) == 0) {\n\t\tRETURN_TRUE;\n\t} else {\n\t\tRETURN_FALSE;\n\t}",
        "output": "1",
        "idx": 5917
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void unassigned_mem_writel(void *opaque, target_phys_addr_t addr, uint32_t val)\n\n{\n\n#ifdef DEBUG_UNASSIGNED\n\n    printf(\"Unassigned mem write \" TARGET_FMT_plx \" = 0x%x\\n\", addr, val);\n\n#endif\n\n#if defined(TARGET_ALPHA) || defined(TARGET_SPARC) || defined(TARGET_MICROBLAZE)\n\n    do_unassigned_access(addr, 1, 0, 0, 4);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 1724
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int emulate_store_desc_ptr(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t  void (*get)(struct x86_emulate_ctxt *ctxt,\n\t\t\t\t\t      struct desc_ptr *ptr))\n{\n\tstruct desc_ptr desc_ptr;\n\n\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n\t\tctxt->op_bytes = 8;\n\tget(ctxt, &desc_ptr);\n\tif (ctxt->op_bytes == 2) {\n\t\tctxt->op_bytes = 4;\n\t\tdesc_ptr.address &= 0x00ffffff;\n\t}\n\t/* Disable writeback. */\n\tctxt->dst.type = OP_NONE;\n\treturn segmented_write_std(ctxt, ctxt->dst.addr.mem,\n\t\t\t\t   &desc_ptr, 2 + ctxt->op_bytes);\n}",
        "output": "0",
        "idx": 4145
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "class_dir_create_and_add(struct class *class, struct kobject *parent_kobj)\n{\n\tstruct class_dir *dir;\n\tint retval;\n\n\tdir = kzalloc(sizeof(*dir), GFP_KERNEL);\n\tif (!dir)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tdir->class = class;\n\tkobject_init(&dir->kobj, &class_dir_ktype);\n\n\tdir->kobj.kset = &class->p->glue_dirs;\n\n\tretval = kobject_add(&dir->kobj, parent_kobj, \"%s\", class->name);\n\tif (retval < 0) {\n\t\tkobject_put(&dir->kobj);\n\t\treturn ERR_PTR(retval);\n\t}\n\treturn &dir->kobj;\n}",
        "output": "0",
        "idx": 2055
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void auth_request_success_continue(struct auth_policy_check_ctx *ctx)\n{\n\tstruct auth_request *request = ctx->request;\n\ti_assert(request->state == AUTH_REQUEST_STATE_MECH_CONTINUE);\n\n\ttimeout_remove(&request->to_penalty);\n\n\tif (request->failed || !request->passdb_success) {\n\t\t/* password was valid, but some other check failed. */\n\t\tauth_request_fail(request);\n\t\treturn;\n\t}\n\tauth_request_set_auth_successful(request);\n\n\t/* log before delay */\n\tauth_request_log_finished(request);\n\n\tif (request->delay_until > ioloop_time) {\n\t\tunsigned int delay_secs = request->delay_until - ioloop_time;\n\t\trequest->to_penalty = timeout_add(delay_secs * 1000,\n\t\t\tauth_request_success_continue, ctx);\n\t\treturn;\n\t}\n\n\tif (ctx->success_data->used > 0 && !request->fields.final_resp_ok) {\n\t\t/* we'll need one more SASL round, since client doesn't support\n\t\t   the final SASL response */\n\t\tauth_request_handler_reply_continue(request,\n\t\t\tctx->success_data->data, ctx->success_data->used);\n\t\treturn;\n\t}\n\n\tauth_request_set_state(request, AUTH_REQUEST_STATE_FINISHED);\n\tauth_request_refresh_last_access(request);\n\tauth_request_handler_reply(request, AUTH_CLIENT_RESULT_SUCCESS,\n\t\tctx->success_data->data, ctx->success_data->used);\n}",
        "output": "0",
        "idx": 4022
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPM2B_PUBLIC_KEY_RSA_Marshal(TPM2B_PUBLIC_KEY_RSA *source, BYTE **buffer, INT32 *size)\n{\n    UINT16 written = 0;\n    written += TPM2B_Marshal(&source->b, buffer, size);\n    return written;\n}",
        "output": "1",
        "idx": 4297
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "__xfrm4_selector_match(const struct xfrm_selector *sel, const struct flowi *fl)\n{\n\tconst struct flowi4 *fl4 = &fl->u.ip4;\n\n\treturn  addr4_match(fl4->daddr, sel->daddr.a4, sel->prefixlen_d) &&\n\t\taddr4_match(fl4->saddr, sel->saddr.a4, sel->prefixlen_s) &&\n\t\t!((xfrm_flowi_dport(fl, &fl4->uli) ^ sel->dport) & sel->dport_mask) &&\n\t\t!((xfrm_flowi_sport(fl, &fl4->uli) ^ sel->sport) & sel->sport_mask) &&\n\t\t(fl4->flowi4_proto == sel->proto || !sel->proto) &&\n\t\t(fl4->flowi4_oif == sel->ifindex || !sel->ifindex);\n}",
        "output": "0",
        "idx": 3401
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int crypto_rng_init_tfm(struct crypto_tfm *tfm)\n{\n\tstruct crypto_rng *rng = __crypto_rng_cast(tfm);\n\tstruct rng_alg *alg = crypto_rng_alg(rng);\n\tstruct old_rng_alg *oalg = crypto_old_rng_alg(rng);\n\n\tif (oalg->rng_make_random) {\n\t\trng->generate = generate;\n\t\trng->seed = rngapi_reset;\n\t\trng->seedsize = oalg->seedsize;\n\t\treturn 0;\n\t}\n\n\trng->generate = alg->generate;\n\trng->seed = alg->seed;\n\trng->seedsize = alg->seedsize;\n\n\treturn 0;\n}",
        "output": "1",
        "idx": 2962
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_physical_memory_unmap(void *buffer, target_phys_addr_t len,\n\n                               int is_write, target_phys_addr_t access_len)\n\n{\n\n    if (buffer != bounce.buffer) {\n\n        if (is_write) {\n\n            ram_addr_t addr1 = qemu_ram_addr_from_host(buffer);\n\n            while (access_len) {\n\n                unsigned l;\n\n                l = TARGET_PAGE_SIZE;\n\n                if (l > access_len)\n\n                    l = access_len;\n\n                if (!cpu_physical_memory_is_dirty(addr1)) {\n\n                    /* invalidate code */\n\n                    tb_invalidate_phys_page_range(addr1, addr1 + l, 0);\n\n                    /* set dirty bit */\n\n                    phys_ram_dirty[addr1 >> TARGET_PAGE_BITS] |=\n\n                        (0xff & ~CODE_DIRTY_FLAG);\n\n                }\n\n                addr1 += l;\n\n                access_len -= l;\n\n            }\n\n        }\n\n        return;\n\n    }\n\n    if (is_write) {\n\n        cpu_physical_memory_write(bounce.addr, bounce.buffer, access_len);\n\n    }\n\n    qemu_vfree(bounce.buffer);\n\n    bounce.buffer = NULL;\n\n    cpu_notify_map_clients();\n\n}\n",
        "output": "0",
        "idx": 1924
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "spnego_gss_process_context_token(\n\t\t\t\tOM_uint32\t*minor_status,\n\t\t\t\tconst gss_ctx_id_t context_handle,\n\t\t\t\tconst gss_buffer_t token_buffer)\n{\n\tOM_uint32 ret;\n\tret = gss_process_context_token(minor_status,\n\t\t\t\t\tcontext_handle,\n\t\t\t\t\ttoken_buffer);\n\n\treturn (ret);\n}",
        "output": "1",
        "idx": 3657
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int lance_init(SysBusDevice *dev)\n\n{\n\n    SysBusPCNetState *d = FROM_SYSBUS(SysBusPCNetState, dev);\n\n    PCNetState *s = &d->state;\n\n\n\n    memory_region_init_io(&s->mmio, &lance_mem_ops, s, \"lance-mmio\", 4);\n\n\n\n    qdev_init_gpio_in(&dev->qdev, parent_lance_reset, 1);\n\n\n\n    sysbus_init_mmio_region(dev, &s->mmio);\n\n\n\n    sysbus_init_irq(dev, &s->irq);\n\n\n\n    s->phys_mem_read = ledma_memory_read;\n\n    s->phys_mem_write = ledma_memory_write;\n\n    return pcnet_common_init(&dev->qdev, s, &net_lance_info);\n\n}\n",
        "output": "1",
        "idx": 403
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void task_numa_free(struct task_struct *p)\n{\n}",
        "output": "1",
        "idx": 2354
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int local_mksock(FsContext *ctx2, const char *path)\n\n{\n\n    struct sockaddr_un addr;\n\n    int s;\n\n\n\n    addr.sun_family = AF_UNIX;\n\n    snprintf(addr.sun_path, 108, \"%s\", rpath(ctx2, path));\n\n\n\n    s = socket(PF_UNIX, SOCK_STREAM, 0);\n\n    if (s == -1) {\n\n        return -1;\n\n    }\n\n\n\n    if (bind(s, (struct sockaddr *)&addr, sizeof(addr))) {\n\n        close(s);\n\n        return -1;\n\n    }\n\n\n\n    close(s);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4745
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dirvote_clear_votes(int all_votes)\n{\n  if (!previous_vote_list)\n    previous_vote_list = smartlist_create();\n  if (!pending_vote_list)\n    pending_vote_list = smartlist_create();\n\n  /* All \"previous\" votes are now junk. */\n  SMARTLIST_FOREACH(previous_vote_list, pending_vote_t *, v, {\n      cached_dir_decref(v->vote_body);\n      v->vote_body = NULL;\n      networkstatus_vote_free(v->vote);\n      tor_free(v);\n    });\n  smartlist_clear(previous_vote_list);\n\n  if (all_votes) {\n    /* If we're dumping all the votes, we delete the pending ones. */\n    SMARTLIST_FOREACH(pending_vote_list, pending_vote_t *, v, {\n        cached_dir_decref(v->vote_body);\n        v->vote_body = NULL;\n        networkstatus_vote_free(v->vote);\n        tor_free(v);\n      });\n  } else {\n    /* Otherwise, we move them into \"previous\". */\n    smartlist_add_all(previous_vote_list, pending_vote_list);\n  }\n  smartlist_clear(pending_vote_list);\n\n  if (pending_consensus_signature_list) {\n    SMARTLIST_FOREACH(pending_consensus_signature_list, char *, cp,\n                      tor_free(cp));\n    smartlist_clear(pending_consensus_signature_list);\n  }\n  tor_free(pending_consensus_signatures);\n  dirvote_clear_pending_consensuses();\n}",
        "output": "0",
        "idx": 4982
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "VirtQueue *virtio_add_queue(VirtIODevice *vdev, int queue_size,\n\n                            VirtIOHandleOutput handle_output)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < VIRTIO_QUEUE_MAX; i++) {\n\n        if (vdev->vq[i].vring.num == 0)\n\n            break;\n\n    }\n\n\n\n    if (i == VIRTIO_QUEUE_MAX || queue_size > VIRTQUEUE_MAX_SIZE)\n\n        abort();\n\n\n\n    vdev->vq[i].vring.num = queue_size;\n\n    vdev->vq[i].vring.num_default = queue_size;\n\n    vdev->vq[i].vring.align = VIRTIO_PCI_VRING_ALIGN;\n\n    vdev->vq[i].handle_output = handle_output;\n\n    vdev->vq[i].handle_aio_output = NULL;\n\n\n\n    return &vdev->vq[i];\n\n}\n",
        "output": "0",
        "idx": 5725
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_nabs(DisasContext *ctx)\n\n{\n\n    int l1 = gen_new_label();\n\n    int l2 = gen_new_label();\n\n    tcg_gen_brcondi_tl(TCG_COND_GT, cpu_gpr[rA(ctx->opcode)], 0, l1);\n\n    tcg_gen_mov_tl(cpu_gpr[rD(ctx->opcode)], cpu_gpr[rA(ctx->opcode)]);\n\n    tcg_gen_br(l2);\n\n    gen_set_label(l1);\n\n    tcg_gen_neg_tl(cpu_gpr[rD(ctx->opcode)], cpu_gpr[rA(ctx->opcode)]);\n\n    gen_set_label(l2);\n\n    if (unlikely(Rc(ctx->opcode) != 0))\n\n        gen_set_Rc0(ctx, cpu_gpr[rD(ctx->opcode)]);\n\n}\n",
        "output": "0",
        "idx": 1028
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    static longT _distance_sep_mdt(const longT i, const longT u, const longT *const g) {\n      return (u - i<=g[u] - g[i]?999999999:(g[u] - g[i] + u + i)/2);\n    }",
        "output": "0",
        "idx": 889
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Status AuthorizationManager::_initializeUserFromPrivilegeDocument(User* user,\n                                                                  const BSONObj& privDoc) {\n    V2UserDocumentParser parser;\n    std::string userName = parser.extractUserNameFromUserDocument(privDoc);\n    if (userName != user->getName().getUser()) {\n        return Status(ErrorCodes::BadValue,\n                      mongoutils::str::stream() << \"User name from privilege document \\\"\"\n                                                << userName\n                                                << \"\\\" doesn't match name of provided User \\\"\"\n                                                << user->getName().getUser()\n                                                << \"\\\"\");\n    }\n\n    Status status = parser.initializeUserCredentialsFromUserDocument(user, privDoc);\n    if (!status.isOK()) {\n        return status;\n    }\n    status = parser.initializeUserRolesFromUserDocument(privDoc, user);\n    if (!status.isOK()) {\n        return status;\n    }\n    status = parser.initializeUserIndirectRolesFromUserDocument(privDoc, user);\n    if (!status.isOK()) {\n        return status;\n    }\n    status = parser.initializeUserPrivilegesFromUserDocument(privDoc, user);\n    if (!status.isOK()) {\n        return status;\n    }\n    status = parser.initializeAuthenticationRestrictionsFromUserDocument(privDoc, user);\n    if (!status.isOK()) {\n        return status;\n    }\n\n    return Status::OK();\n}",
        "output": "1",
        "idx": 1163
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_owner_password_V4(std::string& user_password,\n                        std::string const& owner_password,\n                        QPDF::EncryptionData const& data)\n{\n    // Algorithm 3.7 from the PDF 1.7 Reference Manual\n\n    unsigned char key[OU_key_bytes_V4];\n    compute_O_rc4_key(user_password, owner_password, data, key);\n    unsigned char O_data[key_bytes];\n    memcpy(O_data, QUtil::unsigned_char_pointer(data.getO()), key_bytes);\n    std::string k1(reinterpret_cast<char*>(key), OU_key_bytes_V4);\n    pad_short_parameter(k1, data.getLengthBytes());\n    iterate_rc4(O_data, key_bytes, QUtil::unsigned_char_pointer(k1),\n                data.getLengthBytes(),\n                (data.getR() >= 3) ? 20 : 1, true);\n    std::string new_user_password =\n        std::string(reinterpret_cast<char*>(O_data), key_bytes);\n    bool result = false;\n    if (check_user_password(new_user_password, data))\n    {\n        result = true;\n        user_password = new_user_password;\n    }\n    return result;\n}",
        "output": "1",
        "idx": 3158
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gd_set_keycode_type(GtkDisplayState *s)\n{\n#ifdef GDK_WINDOWING_X11\n    GdkDisplay *display = gtk_widget_get_display(s->window);\n    if (GDK_IS_X11_DISPLAY(display)) {\n        Display *x11_display = gdk_x11_display_get_xdisplay(display);\n        XkbDescPtr desc = XkbGetKeyboard(x11_display, XkbGBN_AllComponentsMask,\n                                         XkbUseCoreKbd);\n        char *keycodes = NULL;\n        if (desc && desc->names) {\n            keycodes = XGetAtomName(x11_display, desc->names->keycodes);\n        if (keycodes == NULL) {\n            fprintf(stderr, \"could not lookup keycode name\\n\");\n        } else if (strstart(keycodes, \"evdev\", NULL)) {\n            s->has_evdev = true;\n        } else if (!strstart(keycodes, \"xfree86\", NULL)) {\n            fprintf(stderr, \"unknown keycodes `%s', please report to \"\n                    \"qemu-devel@nongnu.org\\n\", keycodes);\n#endif",
        "output": "1",
        "idx": 2749
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void stub_device_rebind(void)\n{\n#if IS_MODULE(CONFIG_USBIP_HOST)\n\tstruct bus_id_priv *busid_priv;\n\tint i;\n\n\t/* update status to STUB_BUSID_OTHER so probe ignores the device */\n\tspin_lock(&busid_table_lock);\n\tfor (i = 0; i < MAX_BUSID; i++) {\n\t\tif (busid_table[i].name[0] &&\n\t\t    busid_table[i].shutdown_busid) {\n\t\t\tbusid_priv = &(busid_table[i]);\n\t\t\tbusid_priv->status = STUB_BUSID_OTHER;\n\t\t}\n\t}\n\tspin_unlock(&busid_table_lock);\n\n\t/* now run rebind */\n\tfor (i = 0; i < MAX_BUSID; i++) {\n\t\tif (busid_table[i].name[0] &&\n\t\t    busid_table[i].shutdown_busid) {\n\t\t\tbusid_priv = &(busid_table[i]);\n\t\t\tdo_rebind(busid_table[i].name, busid_priv);\n\t\t}\n\t}\n#endif\n}",
        "output": "1",
        "idx": 611
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_conditional_jump(DisasContext * ctx,\n\n\t\t\t\t target_ulong ift, target_ulong ifnott)\n\n{\n\n    int l1;\n\n    TCGv sr;\n\n\n\n    l1 = gen_new_label();\n\n    sr = tcg_temp_new();\n\n    tcg_gen_andi_i32(sr, cpu_sr, SR_T);\n\n    tcg_gen_brcondi_i32(TCG_COND_NE, sr, 0, l1);\n\n    gen_goto_tb(ctx, 0, ifnott);\n\n    gen_set_label(l1);\n\n    gen_goto_tb(ctx, 1, ift);\n\n}\n",
        "output": "0",
        "idx": 1531
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void adu_disconnect(struct usb_interface *interface)\n{\n\tstruct adu_device *dev;\n\n\tdev = usb_get_intfdata(interface);\n\n\tmutex_lock(&dev->mtx);\t/* not interruptible */\n\tdev->udev = NULL;\t/* poison */\n\tusb_deregister_dev(interface, &adu_class);\n\tmutex_unlock(&dev->mtx);\n\n\tmutex_lock(&adutux_mutex);\n\tusb_set_intfdata(interface, NULL);\n\n\t/* if the device is not opened, then we clean up right now */\n\tif (!dev->open_count)\n\t\tadu_delete(dev);\n\n\tmutex_unlock(&adutux_mutex);\n}",
        "output": "1",
        "idx": 6212
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cJSON *cJSON_CreateFloatArray( double *numbers, int count )\n{\n\tint i;\n\tcJSON *n = 0, *p = 0, *a = cJSON_CreateArray();\n\tfor ( i = 0; a && i < count; ++i ) {\n\t\tn = cJSON_CreateFloat( numbers[i] );\n\t\tif ( ! i )\n\t\t\ta->child = n;\n\t\telse\n\t\t\tsuffix_object( p, n );\n\t\tp = n;\n\t}\n\treturn a;\n}",
        "output": "1",
        "idx": 1565
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "e1000e_set_icr(E1000ECore *core, int index, uint32_t val)\n\n{\n\n    if ((core->mac[ICR] & E1000_ICR_ASSERTED) &&\n\n        (core->mac[CTRL_EXT] & E1000_CTRL_EXT_IAME)) {\n\n        trace_e1000e_irq_icr_process_iame();\n\n        e1000e_clear_ims_bits(core, core->mac[IAM]);\n\n    }\n\n\n\n    trace_e1000e_irq_icr_write(val, core->mac[ICR], core->mac[ICR] & ~val);\n\n    core->mac[ICR] &= ~val;\n\n    e1000e_update_interrupt_state(core);\n\n}\n",
        "output": "1",
        "idx": 3964
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_eventfd(int *fds)\n\n{\n\n#if defined(SYS_eventfd)\n\n    int ret;\n\n\n\n    ret = syscall(SYS_eventfd, 0);\n\n    if (ret >= 0) {\n\n        fds[0] = fds[1] = ret;\n\n        return 0;\n\n    } else if (!(ret == -1 && errno == ENOSYS))\n\n        return ret;\n\n#endif\n\n\n\n    return pipe(fds);\n\n}\n",
        "output": "1",
        "idx": 338
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void visit_start_struct(Visitor *v, const char *name, void **obj,\n\n                        size_t size, Error **errp)\n\n{\n\n    Error *err = NULL;\n\n\n\n    if (obj) {\n\n        assert(size);\n\n        assert(v->type != VISITOR_OUTPUT || *obj);\n\n    }\n\n    v->start_struct(v, name, obj, size, &err);\n\n    if (obj && v->type == VISITOR_INPUT) {\n\n        assert(!err != !*obj);\n\n    }\n\n    error_propagate(errp, err);\n\n}\n",
        "output": "1",
        "idx": 4886
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ConnectionHandlerImpl::ActiveTcpListener::onAccept(Network::ConnectionSocketPtr&& socket) {\n  onAcceptWorker(std::move(socket), config_->handOffRestoredDestinationConnections(), false);\n}",
        "output": "1",
        "idx": 2082
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void __kvm_ioapic_update_eoi(struct kvm_ioapic *ioapic, int vector,\n\t\t\t\t     int trigger_mode)\n{\n\tint i;\n\n\tfor (i = 0; i < IOAPIC_NUM_PINS; i++) {\n\t\tunion kvm_ioapic_redirect_entry *ent = &ioapic->redirtbl[i];\n\n\t\tif (ent->fields.vector != vector)\n\t\t\tcontinue;\n\n\t\t/*\n\t\t * We are dropping lock while calling ack notifiers because ack\n\t\t * notifier callbacks for assigned devices call into IOAPIC\n\t\t * recursively. Since remote_irr is cleared only after call\n\t\t * to notifiers if the same vector will be delivered while lock\n\t\t * is dropped it will be put into irr and will be delivered\n\t\t * after ack notifier returns.\n\t\t */\n\t\tspin_unlock(&ioapic->lock);\n\t\tkvm_notify_acked_irq(ioapic->kvm, KVM_IRQCHIP_IOAPIC, i);\n\t\tspin_lock(&ioapic->lock);\n\n\t\tif (trigger_mode != IOAPIC_LEVEL_TRIG)\n\t\t\tcontinue;\n\n\t\tASSERT(ent->fields.trig_mode == IOAPIC_LEVEL_TRIG);\n\t\tent->fields.remote_irr = 0;\n\t\tif (!ent->fields.mask && (ioapic->irr & (1 << i)))\n\t\t\tioapic_service(ioapic, i);\n\t}\n}",
        "output": "0",
        "idx": 4212
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\tif(pThis->pInst != NULL) {\n\t\tpThis->pModule->mod.pm.freeParserInst(pThis->pInst);\n\t}",
        "output": "0",
        "idx": 334
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_bmdma_long_prdt(void)\n\n{\n\n    QPCIDevice *dev;\n\n    QPCIBar bmdma_bar, ide_bar;\n\n    uint8_t status;\n\n\n\n    PrdtEntry prdt[] = {\n\n        {\n\n            .addr = 0,\n\n            .size = cpu_to_le32(0x1000 | PRDT_EOT),\n\n        },\n\n    };\n\n\n\n    dev = get_pci_device(&bmdma_bar, &ide_bar);\n\n\n\n    /* Normal request */\n\n    status = send_dma_request(CMD_READ_DMA, 0, 1,\n\n                              prdt, ARRAY_SIZE(prdt), NULL);\n\n    g_assert_cmphex(status, ==, BM_STS_ACTIVE | BM_STS_INTR);\n\n    assert_bit_clear(qpci_io_readb(dev, ide_bar, reg_status), DF | ERR);\n\n\n\n    /* Abort the request before it completes */\n\n    status = send_dma_request(CMD_READ_DMA | CMDF_ABORT, 0, 1,\n\n                              prdt, ARRAY_SIZE(prdt), NULL);\n\n    g_assert_cmphex(status, ==, BM_STS_INTR);\n\n    assert_bit_clear(qpci_io_readb(dev, ide_bar, reg_status), DF | ERR);\n\n\n}",
        "output": "1",
        "idx": 3263
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsRetVal rsCStrAppendStr(cstr_t *pThis, uchar* psz)\n{\n\treturn rsCStrAppendStrWithLen(pThis, psz, strlen((char*) psz));\n}",
        "output": "0",
        "idx": 684
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void visit_type_uint16(Visitor *v, uint16_t *obj, const char *name, Error **errp)\n\n{\n\n    int64_t value;\n\n    if (!error_is_set(errp)) {\n\n        if (v->type_uint16) {\n\n            v->type_uint16(v, obj, name, errp);\n\n        } else {\n\n            value = *obj;\n\n            v->type_int(v, &value, name, errp);\n\n            if (value < 0 || value > UINT16_MAX) {\n\n                error_set(errp, QERR_INVALID_PARAMETER_VALUE, name ? name : \"null\",\n\n                          \"uint16_t\");\n\n                return;\n\n            }\n\n            *obj = value;\n\n        }\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4830
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_has_zero_init(BlockDriverState *bs)\n\n{\n\n    assert(bs->drv);\n\n\n\n    if (bs->drv->no_zero_init) {\n\n        return 0;\n\n    } else if (bs->file) {\n\n        return bdrv_has_zero_init(bs->file);\n\n    }\n\n\n\n    return 1;\n\n}\n",
        "output": "0",
        "idx": 442
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fsmMkdir(const char *path, mode_t mode)\n{\n    int rc = mkdir(path, (mode & 07777));\n    if (_fsm_debug)\n\trpmlog(RPMLOG_DEBUG, \" %8s (%s, 0%04o) %s\\n\", __func__,\n\t       path, (unsigned)(mode & 07777),\n\t       (rc < 0 ? strerror(errno) : \"\"));\n    if (rc < 0)\trc = RPMERR_MKDIR_FAILED;\n    return rc;\n}",
        "output": "1",
        "idx": 1615
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ga_append(garray_T *gap, int c)\n{\n    if (ga_grow(gap, 1) == OK)\n    {\n\t*((char *)gap->ga_data + gap->ga_len) = c;\n\t++gap->ga_len;\n    }\n}",
        "output": "0",
        "idx": 4915
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp, int flags)\n\n{\n\n    int ret;\n\n    AVStream *st;\n\n\n\n    ff_read_frame_flush(s);\n\n\n\n    if(flags & AVSEEK_FLAG_BYTE)\n\n        return av_seek_frame_byte(s, stream_index, timestamp, flags);\n\n\n\n    if(stream_index < 0){\n\n        stream_index= av_find_default_stream_index(s);\n\n        if(stream_index < 0)\n\n            return -1;\n\n\n\n        st= s->streams[stream_index];\n\n       /* timestamp for default must be expressed in AV_TIME_BASE units */\n\n        timestamp = av_rescale(timestamp, st->time_base.den, AV_TIME_BASE * (int64_t)st->time_base.num);\n\n    }\n\n\n\n    /* first, we try the format specific seek */\n\n    if (s->iformat->read_seek)\n\n        ret = s->iformat->read_seek(s, stream_index, timestamp, flags);\n\n    else\n\n        ret = -1;\n\n    if (ret >= 0) {\n\n        return 0;\n\n    }\n\n\n\n    if(s->iformat->read_timestamp)\n\n        return av_seek_frame_binary(s, stream_index, timestamp, flags);\n\n    else\n\n        return av_seek_frame_generic(s, stream_index, timestamp, flags);\n\n}\n",
        "output": "1",
        "idx": 279
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int virtio_blk_load_device(VirtIODevice *vdev, QEMUFile *f,\n\n                                  int version_id)\n\n{\n\n    VirtIOBlock *s = VIRTIO_BLK(vdev);\n\n\n\n    while (qemu_get_sbyte(f)) {\n\n        VirtIOBlockReq *req = virtio_blk_alloc_request(s);\n\n        qemu_get_buffer(f, (unsigned char *)req->elem,\n\n                        sizeof(VirtQueueElement));\n\n        req->next = s->rq;\n\n        s->rq = req;\n\n\n\n        virtqueue_map_sg(req->elem->in_sg, req->elem->in_addr,\n\n            req->elem->in_num, 1);\n\n        virtqueue_map_sg(req->elem->out_sg, req->elem->out_addr,\n\n            req->elem->out_num, 0);\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5559
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cmsBool CMSEXPORT cmsSaveProfileToMem(cmsHPROFILE hProfile, void *MemPtr, cmsUInt32Number* BytesNeeded)\n{\n    cmsBool rc;\n    cmsIOHANDLER* io;\n    cmsContext ContextID = cmsGetProfileContextID(hProfile);\n\n    // Should we just calculate the needed space?\n    if (MemPtr == NULL) {\n\n           *BytesNeeded =  cmsSaveProfileToIOhandler(hProfile, NULL);\n            return TRUE;\n    }\n\n    // That is a real write operation\n    io =  cmsOpenIOhandlerFromMem(ContextID, MemPtr, *BytesNeeded, \"w\");\n    if (io == NULL) return FALSE;\n\n    rc = (cmsSaveProfileToIOhandler(hProfile, io) != 0);\n    rc &= cmsCloseIOhandler(io);\n\n    return rc;\n}",
        "output": "0",
        "idx": 3319
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int adb_kbd_poll(ADBDevice *d, uint8_t *obuf)\n\n{\n\n    KBDState *s = ADB_KEYBOARD(d);\n\n    int keycode;\n\n    int olen;\n\n\n\n    olen = 0;\n\n    if (s->count == 0) {\n\n        return 0;\n\n    }\n\n    keycode = s->data[s->rptr];\n\n    s->rptr++;\n\n    if (s->rptr == sizeof(s->data)) {\n\n        s->rptr = 0;\n\n    }\n\n    s->count--;\n\n    /*\n\n     * The power key is the only two byte value key, so it is a special case.\n\n     * Since 0x7f is not a used keycode for ADB we overload it to indicate the\n\n     * power button when we're storing keycodes in our internal buffer, and\n\n     * expand it out to two bytes when we send to the guest.\n\n     */\n\n    if (keycode == 0x7f) {\n\n        obuf[0] = 0x7f;\n\n        obuf[1] = 0x7f;\n\n        olen = 2;\n\n    } else {\n\n        obuf[0] = keycode;\n\n        /* NOTE: the power key key-up is the two byte sequence 0xff 0xff;\n\n         * otherwise we could in theory send a second keycode in the second\n\n         * byte, but choose not to bother.\n\n         */\n\n        obuf[1] = 0xff;\n\n        olen = 2;\n\n    }\n\n\n\n    return olen;\n\n}\n",
        "output": "1",
        "idx": 1515
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void intern_stack_overflow(void)\n{\n  caml_gc_message (0x04, \"Stack overflow in un-marshaling value\\n\", 0);\n  intern_free_stack();\n  caml_raise_out_of_memory();\n}",
        "output": "0",
        "idx": 1478
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int handler_a0(deark *c, lctx *d, i64 opcode, i64 data_pos, i64 *bytes_used)\n{\n\ti64 kind;\n\tkind = de_getu16be(data_pos);\n\tde_dbg(c, \"comment kind: %d\", (int)kind);\n\treturn 1;\n}",
        "output": "0",
        "idx": 351
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int cpu_sparc_handle_mmu_fault (CPUState *env, target_ulong address, int rw,\n\n                              int mmu_idx, int is_softmmu)\n\n{\n\n    target_ulong virt_addr, vaddr;\n\n    target_phys_addr_t paddr;\n\n    int error_code = 0, prot, ret = 0, access_index;\n\n\n\n    error_code = get_physical_address(env, &paddr, &prot, &access_index,\n\n                                      address, rw, mmu_idx);\n\n    if (error_code == 0) {\n\n        virt_addr = address & TARGET_PAGE_MASK;\n\n        vaddr = virt_addr + ((address & TARGET_PAGE_MASK) &\n\n                             (TARGET_PAGE_SIZE - 1));\n\n#ifdef DEBUG_MMU\n\n        printf(\"Translate at 0x%\" PRIx64 \" -> 0x%\" PRIx64 \", vaddr 0x%\" PRIx64\n\n               \"\\n\", address, paddr, vaddr);\n\n#endif\n\n        ret = tlb_set_page_exec(env, vaddr, paddr, prot, mmu_idx, is_softmmu);\n\n        return ret;\n\n    }\n\n    // XXX\n\n    return 1;\n\n}\n",
        "output": "0",
        "idx": 4882
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int mnt_context_finalize_umount(struct libmnt_context *cxt)\n{\n\tint rc;\n\n\tassert(cxt);\n\tassert(cxt->fs);\n\tassert((cxt->flags & MNT_FL_PREPARED));\n\tassert((cxt->flags & MNT_FL_MOUNTFLAGS_MERGED));\n\n\trc = mnt_context_prepare_update(cxt);\n\tif (!rc)\n\t\trc = mnt_context_update_tabs(cxt);\n\treturn rc;\n}",
        "output": "0",
        "idx": 3381
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int proxy_authentication(zval* this_ptr, smart_str* soap_headers TSRMLS_DC)\n{\n\tzval **login, **password;\n\n\tif (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_login\", sizeof(\"_proxy_login\"), (void **)&login) == SUCCESS) {\n\t\tunsigned char* buf;\n\t\tint len;\n\t\tsmart_str auth = {0};\n\n\t\tsmart_str_appendl(&auth, Z_STRVAL_PP(login), Z_STRLEN_PP(login));\n\t\tsmart_str_appendc(&auth, ':');\n\t\tif (zend_hash_find(Z_OBJPROP_P(this_ptr), \"_proxy_password\", sizeof(\"_proxy_password\"), (void **)&password) == SUCCESS) {\n\t\t\tsmart_str_appendl(&auth, Z_STRVAL_PP(password), Z_STRLEN_PP(password));\n\t\t}\n\t\tsmart_str_0(&auth);\n\t\tbuf = php_base64_encode((unsigned char*)auth.c, auth.len, &len);\n\t\tsmart_str_append_const(soap_headers, \"Proxy-Authorization: Basic \");\n\t\tsmart_str_appendl(soap_headers, (char*)buf, len);\n\t\tsmart_str_append_const(soap_headers, \"\\r\\n\");\n\t\tefree(buf);\n\t\tsmart_str_free(&auth);\n\t\treturn 1;\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 490
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce)\n{\n    // Update nExtraNonce\n    static uint256 hashPrevBlock;\n    if (hashPrevBlock != pblock->hashPrevBlock)\n    {\n        nExtraNonce = 0;\n        hashPrevBlock = pblock->hashPrevBlock;\n    }\n    ++nExtraNonce;\n    pblock->vtx[0].vin[0].scriptSig = (CScript() << pblock->nTime << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n    assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n\n    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n}",
        "output": "0",
        "idx": 4484
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "query_fs_type (GFile *file,\n\t       GCancellable *cancellable)\n{\n\tGFileInfo *fsinfo;\n\tchar *ret;\n\n\tret = NULL;\n\n\tfsinfo = g_file_query_filesystem_info (file,\n\t\t\t\t\t       G_FILE_ATTRIBUTE_FILESYSTEM_TYPE,\n\t\t\t\t\t       cancellable,\n\t\t\t\t\t       NULL);\n\tif (fsinfo != NULL) {\n\t\tret = g_strdup (g_file_info_get_attribute_string (fsinfo, G_FILE_ATTRIBUTE_FILESYSTEM_TYPE));\n\t\tg_object_unref (fsinfo);\n\t}\n\n\tif (ret == NULL) {\n\t\t/* ensure that we don't attempt to query\n\t\t * the FS type for each file in a given\n\t\t * directory, if it can't be queried. */\n\t\tret = g_strdup (\"\");\n\t}\n\n\treturn ret;\n}",
        "output": "0",
        "idx": 6075
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gs_grab_get_mouse (GSGrab    *grab,\n                   GdkWindow *window,\n                   GdkScreen *screen,\n                   gboolean   hide_cursor)\n{\n        GdkGrabStatus status;\n        GdkCursor    *cursor;\n\n        g_return_val_if_fail (window != NULL, FALSE);\n        g_return_val_if_fail (screen != NULL, FALSE);\n\n        cursor = get_cursor ();\n\n        gs_debug (\"Grabbing mouse widget=%X\", (guint32) GDK_WINDOW_XID (window));\n        status = gdk_pointer_grab (window, TRUE, 0, NULL,\n                                   (hide_cursor ? cursor : NULL),\n                                   GDK_CURRENT_TIME);\n\n        if (status == GDK_GRAB_SUCCESS) {\n                grab->priv->mouse_grab_window = window;\n                grab->priv->mouse_grab_screen = screen;\n                grab->priv->mouse_hide_cursor = hide_cursor;\n        }\n\n        gdk_cursor_unref (cursor);\n\n        return status;\n}",
        "output": "1",
        "idx": 5888
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void addDbAdminAnyDbPrivileges(PrivilegeVector* privileges) {\n    Privilege::addPrivilegeToPrivilegeVector(\n        privileges, Privilege(ResourcePattern::forClusterResource(), ActionType::listDatabases));\n    Privilege::addPrivilegeToPrivilegeVector(\n        privileges, Privilege(ResourcePattern::forAnyNormalResource(), dbAdminRoleActions));\n    ActionSet profileActions = readRoleActions;\n    profileActions.addAction(ActionType::convertToCapped);\n    profileActions.addAction(ActionType::createCollection);\n    profileActions.addAction(ActionType::dropCollection);\n    Privilege::addPrivilegeToPrivilegeVector(\n        privileges,\n        Privilege(ResourcePattern::forCollectionName(\"system.profile\"), profileActions));\n}",
        "output": "1",
        "idx": 4459
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    State()\n        : remote_encode_complete_(false), remote_decode_complete_(false), local_complete_(false),\n          has_1xx_headers_(false), created_filter_chain_(false), is_head_request_(false),\n          is_grpc_request_(false), non_100_response_headers_encoded_(false),\n          under_on_local_reply_(false), decoder_filter_chain_aborted_(false),\n          encoder_filter_chain_aborted_(false), saw_downstream_reset_(false) {}",
        "output": "1",
        "idx": 3366
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_change_block(const char *device, const char *filename)\n\n{\n\n    BlockDriverState *bs;\n\n\n\n    bs = bdrv_find(device);\n\n    if (!bs) {\n\n        term_printf(\"device not found\\n\");\n\n        return;\n\n    }\n\n    if (eject_device(bs, 0) < 0)\n\n        return;\n\n    bdrv_open(bs, filename, 0);\n\n    qemu_key_check(bs, filename);\n\n}\n",
        "output": "1",
        "idx": 2824
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static PyObject *Log_writelines(LogObject *self, PyObject *args)\n{\n    PyObject *sequence = NULL;\n    PyObject *iterator = NULL;\n    PyObject *item = NULL;\n    const char *msg = NULL;\n\n    if (self->expired) {\n        PyErr_SetString(PyExc_RuntimeError, \"log object has expired\");\n        return NULL;\n    }\n\n    if (!PyArg_ParseTuple(args, \"O:writelines\", &sequence))\n        return NULL;\n\n    iterator = PyObject_GetIter(sequence);\n\n    if (iterator == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"argument must be sequence of strings\");\n\n        return NULL;\n    }\n\n    while ((item = PyIter_Next(iterator))) {\n        PyObject *result = NULL;\n        PyObject *args = NULL;\n\n        args = PyTuple_Pack(1, item);\n\n        result = Log_write(self, args);\n\n        Py_DECREF(args);\n        Py_DECREF(item);\n\n        if (!result) {\n            Py_DECREF(iterator);\n\n            PyErr_SetString(PyExc_TypeError,\n                            \"argument must be sequence of strings\");\n\n            return NULL;\n        }\n    }\n\n    Py_DECREF(iterator);\n\n    Py_INCREF(Py_None);\n    return Py_None;\n}",
        "output": "0",
        "idx": 3223
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void iommu_prepare_isa(void)\n{\n\treturn;\n}",
        "output": "0",
        "idx": 5750
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "acl_insert_proxy_user(ACL_PROXY_USER *new_value)\n{\n  DBUG_ENTER(\"acl_insert_proxy_user\");\n  mysql_mutex_assert_owner(&acl_cache->lock);\n  (void) push_dynamic(&acl_proxy_users, (uchar *) new_value);\n  my_qsort((uchar*) dynamic_element(&acl_proxy_users, 0, ACL_PROXY_USER *),\n           acl_proxy_users.elements,\n           sizeof(ACL_PROXY_USER), (qsort_cmp) acl_compare);\n  DBUG_VOID_RETURN;\n}",
        "output": "0",
        "idx": 4139
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "DEFUN (clear_ip_bgp_all_soft_in,\n       clear_ip_bgp_all_soft_in_cmd,\n       \"clear ip bgp * soft in\",\n       CLEAR_STR\n       IP_STR\n       BGP_STR\n       \"Clear all peers\\n\"\n       \"Soft reconfig\\n\"\n       \"Soft reconfig inbound update\\n\")\n{\n  if (argc == 1)\n    return bgp_clear_vty (vty, argv[0], AFI_IP, SAFI_UNICAST, clear_all,\n                          BGP_CLEAR_SOFT_IN, NULL);\n\n  return bgp_clear_vty (vty, NULL, AFI_IP, SAFI_UNICAST, clear_all,\n\t\t\tBGP_CLEAR_SOFT_IN, NULL);\n}",
        "output": "0",
        "idx": 1738
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void spapr_drc_release(sPAPRDRConnector *drc)\n\n{\n\n    sPAPRDRConnectorClass *drck = SPAPR_DR_CONNECTOR_GET_CLASS(drc);\n\n\n\n    drck->release(drc->dev);\n\n\n\n    drc->awaiting_release = false;\n\n    g_free(drc->fdt);\n\n    drc->fdt = NULL;\n\n    drc->fdt_start_offset = 0;\n\n    object_property_del(OBJECT(drc), \"device\", &error_abort);\n\n    drc->dev = NULL;\n\n}\n",
        "output": "0",
        "idx": 6196
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long keyctl_update_key(key_serial_t id,\n\t\t       const void __user *_payload,\n\t\t       size_t plen)\n{\n\tkey_ref_t key_ref;\n\tvoid *payload;\n\tlong ret;\n\n\tret = -EINVAL;\n\tif (plen > PAGE_SIZE)\n\t\tgoto error;\n\n\t/* pull the payload in if one was supplied */\n\tpayload = NULL;\n\tif (_payload) {\n\t\tret = -ENOMEM;\n\t\tpayload = kmalloc(plen, GFP_KERNEL);\n\t\tif (!payload)\n\t\t\tgoto error;\n\n\t\tret = -EFAULT;\n\t\tif (copy_from_user(payload, _payload, plen) != 0)\n\t\t\tgoto error2;\n\t}\n\n\t/* find the target key (which must be writable) */\n\tkey_ref = lookup_user_key(id, 0, KEY_WRITE);\n\tif (IS_ERR(key_ref)) {\n\t\tret = PTR_ERR(key_ref);\n\t\tgoto error2;\n\t}\n\n\t/* update the key */\n\tret = key_update(key_ref, payload, plen);\n\n\tkey_ref_put(key_ref);\n error2:\n\tkfree(payload);\n error:\n\treturn ret;\n\n} /* end keyctl_update_key() */",
        "output": "0",
        "idx": 2943
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ffurl_register_protocol(URLProtocol *protocol)\n\n{\n\n    URLProtocol **p;\n\n    p = &first_protocol;\n\n    while (*p != NULL)\n\n        p = &(*p)->next;\n\n    *p             = protocol;\n\n    protocol->next = NULL;\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5422
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ImageProvider::provideStreamData(int objid, int generation,\n                                 Pipeline* pipeline)\n{\n    std::vector<PointerHolder<Pipeline> > to_delete;\n    Pipeline* p = pipeline;\n\n    if (filter == \"/DCTDecode\")\n    {\n        p = new Pl_DCT(\n            \"image encoder\", pipeline,\n            width, getHeight(), stripes[0].length(), j_color_space);\n        to_delete.push_back(p);\n    }\n    else if (filter == \"/RunLengthDecode\")\n    {\n        p = new Pl_RunLength(\n            \"image encoder\", pipeline, Pl_RunLength::a_encode);\n        to_delete.push_back(p);\n    }\n\n    for (int i = 0; i < n_stripes; ++i)\n    {\n        for (int j = 0; j < width * stripe_height; ++j)\n        {\n            p->write(\n                QUtil::unsigned_char_pointer(stripes[i].c_str()),\n                stripes[i].length());\n        }\n    }\n    p->finish();\n}",
        "output": "1",
        "idx": 2463
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int wake_idle(int cpu, struct task_struct *p)\n{\n\tcpumask_t tmp;\n\tstruct sched_domain *sd;\n\tint i;\n\n\t/*\n\t * If it is idle, then it is the best cpu to run this task.\n\t *\n\t * This cpu is also the best, if it has more than one task already.\n\t * Siblings must be also busy(in most cases) as they didn't already\n\t * pickup the extra load from this cpu and hence we need not check\n\t * sibling runqueue info. This will avoid the checks and cache miss\n\t * penalities associated with that.\n\t */\n\tif (idle_cpu(cpu) || cpu_rq(cpu)->nr_running > 1)\n\t\treturn cpu;\n\n\tfor_each_domain(cpu, sd) {\n\t\tif ((sd->flags & SD_WAKE_IDLE)\n\t\t    || ((sd->flags & SD_WAKE_IDLE_FAR)\n\t\t\t&& !task_hot(p, task_rq(p)->clock, sd))) {\n\t\t\tcpus_and(tmp, sd->span, p->cpus_allowed);\n\t\t\tfor_each_cpu_mask(i, tmp) {\n\t\t\t\tif (idle_cpu(i)) {\n\t\t\t\t\tif (i != task_cpu(p)) {\n\t\t\t\t\t\tschedstat_inc(p,\n\t\t\t\t\t\t       se.nr_wakeups_idle);\n\t\t\t\t\t}\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn cpu;\n}",
        "output": "0",
        "idx": 6110
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t f2fs_sbi_show(struct f2fs_attr *a,\n\t\t\tstruct f2fs_sb_info *sbi, char *buf)\n{\n\tunsigned char *ptr = NULL;\n\tunsigned int *ui;\n\n\tptr = __struct_ptr(sbi, a->struct_type);\n\tif (!ptr)\n\t\treturn -EINVAL;\n\n\tui = (unsigned int *)(ptr + a->offset);\n\n\treturn snprintf(buf, PAGE_SIZE, \"%u\\n\", *ui);\n}",
        "output": "0",
        "idx": 5585
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "lyd_new_output_leaf(struct lyd_node *parent, const struct lys_module *module, const char *name, const char *val_str)\n{\n    const struct lys_node *snode = NULL, *siblings;\n\n    if ((!parent && !module) || !name) {\n        LOGARG;\n        return NULL;\n    }\n\n    siblings = lyd_new_find_schema(parent, module, 1);\n    if (!siblings) {\n        LOGARG;\n        return NULL;\n    }\n\n    if (lys_getnext_data(module, lys_parent(siblings), name, strlen(name), LYS_LEAFLIST | LYS_LEAF, &snode) || !snode) {\n        LOGERR(siblings->module->ctx, LY_EINVAL, \"Failed to find \\\"%s\\\" as a sibling to \\\"%s:%s\\\".\",\n               name, lys_node_module(siblings)->name, siblings->name);\n        return NULL;\n    }\n\n    return _lyd_new_leaf(parent, snode, val_str, 0, 0);\n}",
        "output": "1",
        "idx": 5412
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int signed_shift(int i, int shift) {\n\n    if (shift > 0)\n\n        return i << shift;\n\n    return i >> -shift;\n\n}\n",
        "output": "1",
        "idx": 5405
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void xendev_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n\n\n    dc->props = xendev_properties;\n\n    set_bit(DEVICE_CATEGORY_MISC, dc->categories);\n\n\n\n\n\n\n}",
        "output": "1",
        "idx": 6165
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool cma_release(struct cma *cma, const struct page *pages, unsigned int count)\n{\n\tunsigned long pfn;\n\n\tif (!cma || !pages)\n\t\treturn false;\n\n\tpr_debug(\"%s(page %p)\\n\", __func__, (void *)pages);\n\n\tpfn = page_to_pfn(pages);\n\n\tif (pfn < cma->base_pfn || pfn >= cma->base_pfn + cma->count)\n\t\treturn false;\n\n\tVM_BUG_ON(pfn + count > cma->base_pfn + cma->count);\n\n\tfree_contig_range(pfn, count);\n\tcma_clear_bitmap(cma, pfn, count);\n\ttrace_cma_release(pfn, pages, count);\n\n\treturn true;\n}",
        "output": "0",
        "idx": 3914
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void clear_sdr_rep(IPMIBmcSim *ibs,\n\n                          uint8_t *cmd, unsigned int cmd_len,\n\n                          uint8_t *rsp, unsigned int *rsp_len,\n\n                          unsigned int max_rsp_len)\n\n{\n\n    IPMI_CHECK_CMD_LEN(8);\n\n    IPMI_CHECK_RESERVATION(2, ibs->sdr.reservation);\n\n    if (cmd[4] != 'C' || cmd[5] != 'L' || cmd[6] != 'R') {\n\n        rsp[2] = IPMI_CC_INVALID_DATA_FIELD;\n\n        return;\n\n    }\n\n    if (cmd[7] == 0xaa) {\n\n        ibs->sdr.next_free = 0;\n\n        ibs->sdr.overflow = 0;\n\n        set_timestamp(ibs, ibs->sdr.last_clear);\n\n        IPMI_ADD_RSP_DATA(1); /* Erasure complete */\n\n        sdr_inc_reservation(&ibs->sdr);\n\n    } else if (cmd[7] == 0) {\n\n        IPMI_ADD_RSP_DATA(1); /* Erasure complete */\n\n    } else {\n\n        rsp[2] = IPMI_CC_INVALID_DATA_FIELD;\n\n        return;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4954
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void parse_version(std::string const& full_version_string,\n                          std::string& version, int& extension_level)\n{\n    PointerHolder<char> vp(true, QUtil::copy_string(full_version_string));\n    char* v = vp.getPointer();\n    char* p1 = strchr(v, '.');\n    char* p2 = (p1 ? strchr(1 + p1, '.') : 0);\n    if (p2 && *(p2 + 1))\n    {\n        *p2++ = '\\0';\n        extension_level = atoi(p2);\n    }\n    version = v;\n}",
        "output": "1",
        "idx": 2837
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Pl_PNGFilter::encodeRow()\n{\n    // For now, hard-code to using UP filter.\n    unsigned char ch = 2;\n    getNext()->write(&ch, 1);\n    if (this->prev_row)\n    {\n\tfor (unsigned int i = 0; i < this->bytes_per_row; ++i)\n\t{\n\t    ch = this->cur_row[i] - this->prev_row[i];\n\t    getNext()->write(&ch, 1);\n\t}\n    }\n    else\n    {\n\tgetNext()->write(this->cur_row, this->bytes_per_row);\n    }\n}",
        "output": "1",
        "idx": 1237
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void DMA_run (void)\n\n{\n\n    struct dma_cont *d;\n\n    int icont, ichan;\n\n    int rearm = 0;\n\n    static int running = 0;\n\n\n\n    if (running) {\n\n        rearm = 1;\n\n        goto out;\n\n    } else {\n\n        running = 1;\n\n    }\n\n\n\n    d = dma_controllers;\n\n\n\n    for (icont = 0; icont < 2; icont++, d++) {\n\n        for (ichan = 0; ichan < 4; ichan++) {\n\n            int mask;\n\n\n\n            mask = 1 << ichan;\n\n\n\n            if ((0 == (d->mask & mask)) && (0 != (d->status & (mask << 4)))) {\n\n                channel_run (icont, ichan);\n\n                rearm = 1;\n\n            }\n\n        }\n\n    }\n\n\n\n    running = 0;\n\nout:\n\n    if (rearm)\n\n        qemu_bh_schedule_idle(dma_bh);\n\n}\n",
        "output": "0",
        "idx": 5200
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int avio_open2(AVIOContext **s, const char *filename, int flags,\n\n               const AVIOInterruptCB *int_cb, AVDictionary **options)\n\n{\n\n    AVIOInternal *internal;\n\n    const URLProtocol **protocols;\n\n    URLContext *h;\n\n    int err;\n\n\n\n    protocols = ffurl_get_protocols(NULL, NULL);\n\n    if (!protocols)\n\n        return AVERROR(ENOMEM);\n\n\n\n    err = ffurl_open(&h, filename, flags, int_cb, options, protocols);\n\n    if (err < 0) {\n\n        av_freep(&protocols);\n\n        return err;\n\n    }\n\n\n\n    err = ffio_fdopen(s, h);\n\n    if (err < 0) {\n\n        ffurl_close(h);\n\n        av_freep(&protocols);\n\n        return err;\n\n    }\n\n\n\n    internal = (*s)->opaque;\n\n    internal->protocols = protocols;\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3142
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ArgParser::argPreserveUnreferencedResources()\n{\n    o.preserve_unreferenced_page_resources = true;\n}",
        "output": "0",
        "idx": 616
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void iothread_instance_finalize(Object *obj)\n\n{\n\n    IOThread *iothread = IOTHREAD(obj);\n\n\n\n    iothread_stop(obj, NULL);\n\n    qemu_cond_destroy(&iothread->init_done_cond);\n\n    qemu_mutex_destroy(&iothread->init_done_lock);\n\n\n\n\n    aio_context_unref(iothread->ctx);\n",
        "output": "1",
        "idx": 6032
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ConnectionImpl::StreamImpl::StreamImpl(ConnectionImpl& parent, uint32_t buffer_limit)\n    : parent_(parent), local_end_stream_sent_(false), remote_end_stream_(false),\n      data_deferred_(false), waiting_for_non_informational_headers_(false),\n      pending_receive_buffer_high_watermark_called_(false),\n      pending_send_buffer_high_watermark_called_(false), reset_due_to_messaging_error_(false) {\n  if (buffer_limit > 0) {\n    setWriteBufferWatermarks(buffer_limit / 2, buffer_limit);\n  }\n}",
        "output": "1",
        "idx": 484
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint8_t ide_wait_clear(uint8_t flag)\n\n{\n\n    QPCIDevice *dev;\n\n    QPCIBar bmdma_bar, ide_bar;\n\n    uint8_t data;\n\n    time_t st;\n\n\n\n    dev = get_pci_device(&bmdma_bar, &ide_bar);\n\n\n\n    /* Wait with a 5 second timeout */\n\n    time(&st);\n\n    while (true) {\n\n        data = qpci_io_readb(dev, ide_bar, reg_status);\n\n        if (!(data & flag)) {\n\n\n            return data;\n\n        }\n\n        if (difftime(time(NULL), st) > 5.0) {\n\n            break;\n\n        }\n\n        nsleep(400);\n\n    }\n\n    g_assert_not_reached();\n\n}",
        "output": "1",
        "idx": 3728
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int proxy_fstat(FsContext *fs_ctx, int fid_type,\n\n                       V9fsFidOpenState *fs, struct stat *stbuf)\n\n{\n\n    int fd;\n\n\n\n    if (fid_type == P9_FID_DIR) {\n\n        fd = dirfd(fs->dir);\n\n    } else {\n\n        fd = fs->fd;\n\n    }\n\n    return fstat(fd, stbuf);\n\n}\n",
        "output": "0",
        "idx": 748
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gdk_pixbuf__gif_image_load (FILE *file, GError **error)\n{\n\tGifContext *context;\n\tGdkPixbuf *pixbuf;\n\n\tg_return_val_if_fail (file != NULL, NULL);\n\n\tcontext = new_context ();\n\tcontext->file = file;\n        context->error = error;\n        \n\tif (gif_main_loop (context) == -1 || context->animation->frames == NULL) {\n                if (context->error && *(context->error) == NULL)\n                        g_set_error (context->error,\n                                     GDK_PIXBUF_ERROR,\n                                     GDK_PIXBUF_ERROR_CORRUPT_IMAGE,\n                                     _(\"GIF file was missing some data (perhaps it was truncated somehow?)\"));\n        }\n        \n        pixbuf = gdk_pixbuf_animation_get_static_image (GDK_PIXBUF_ANIMATION (context->animation));\n\n        if (pixbuf)\n                g_object_ref (G_OBJECT (pixbuf));\n\n        g_object_unref (G_OBJECT (context->animation));\n        \n        g_free (context->buf);\n\tg_free (context);\n \n\treturn pixbuf;\n}",
        "output": "1",
        "idx": 5277
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ssl_rsa_decrypt( void *ctx, int mode, size_t *olen,\n                        const unsigned char *input, unsigned char *output,\n                        size_t output_max_len )\n{\n    return rsa_pkcs1_decrypt( (rsa_context *) ctx, mode, olen, input, output,\n                              output_max_len );\n}",
        "output": "1",
        "idx": 4372
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ip_mc_destroy_dev(struct in_device *in_dev)\n{\n\tstruct ip_mc_list *i;\n\n\tASSERT_RTNL();\n\n\t/* Deactivate timers */\n\tip_mc_down(in_dev);\n#ifdef CONFIG_IP_MULTICAST\n\tigmpv3_clear_delrec(in_dev);\n#endif\n\n\twhile ((i = rtnl_dereference(in_dev->mc_list)) != NULL) {\n\t\tin_dev->mc_list = i->next_rcu;\n\t\tin_dev->mc_count--;\n\t\tip_mc_clear_src(i);\n\t\tip_ma_put(i);\n\t}\n}",
        "output": "0",
        "idx": 4563
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int monitor_set_cpu(int cpu_index)\n\n{\n\n    CPUState *cpu;\n\n\n\n    cpu = qemu_get_cpu(cpu_index);\n\n    if (cpu == NULL) {\n\n        return -1;\n\n    }\n\n    cur_mon->mon_cpu = cpu;\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 749
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ipv6_sanity_check(const struct ovs_16aligned_ip6_hdr *nh, size_t size)\n{\n    uint16_t plen;\n\n    if (OVS_UNLIKELY(size < sizeof *nh)) {\n        return false;\n    }\n\n    plen = ntohs(nh->ip6_plen);\n    if (OVS_UNLIKELY(plen + IPV6_HEADER_LEN > size)) {\n        return false;\n    }\n    /* Jumbo Payload option not supported yet. */\n    if (OVS_UNLIKELY(size - (plen + IPV6_HEADER_LEN) > UINT8_MAX)) {\n        return false;\n    }\n\n    return true;\n}",
        "output": "1",
        "idx": 4911
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pix_norm1_altivec(uint8_t *pix, int line_size)\n\n{\n\n    int i, s = 0;\n\n    const vector unsigned int zero =\n\n        (const vector unsigned int) vec_splat_u32(0);\n\n    vector unsigned int sv = (vector unsigned int) vec_splat_u32(0);\n\n    vector signed int sum;\n\n\n\n    for (i = 0; i < 16; i++) {\n\n        /* Read the potentially unaligned pixels. */\n\n        //vector unsigned char pixl = vec_ld(0,  pix);\n\n        //vector unsigned char pixr = vec_ld(15, pix);\n\n        //vector unsigned char pixv = vec_perm(pixl, pixr, perm);\n\n        vector unsigned char pixv = vec_vsx_ld(0,  pix);\n\n\n\n        /* Square the values, and add them to our sum. */\n\n        sv = vec_msum(pixv, pixv, sv);\n\n\n\n        pix += line_size;\n\n    }\n\n    /* Sum up the four partial sums, and put the result into s. */\n\n    sum = vec_sums((vector signed int) sv, (vector signed int) zero);\n\n    sum = vec_splat(sum, 3);\n\n    vec_vsx_st(sum, 0, &s);\n\n    return s;\n\n}\n",
        "output": "1",
        "idx": 13
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  int save_in_field(Field *field, bool no_conversions)\n  {\n    return ref->save_in_field(field, no_conversions);\n  }",
        "output": "0",
        "idx": 5671
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void evaluate_utility_inc(elbg_data *elbg)\n\n{\n\n    int i, inc=0;\n\n\n\n    for (i=0; i < elbg->numCB; i++) {\n\n        if (elbg->numCB*elbg->utility[i] > elbg->error)\n\n            inc += elbg->utility[i];\n\n        elbg->utility_inc[i] = inc;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 4173
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "perf_event_groups_delete(struct perf_event_groups *groups,\n\t\t\t struct perf_event *event)\n{\n\tWARN_ON_ONCE(RB_EMPTY_NODE(&event->group_node) ||\n\t\t     RB_EMPTY_ROOT(&groups->tree));\n\n\trb_erase(&event->group_node, &groups->tree);\n\tinit_event_group(event);\n}",
        "output": "0",
        "idx": 1096
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "const char* ExpressionRange::getOpName() const {\n    return \"$range\";\n}",
        "output": "0",
        "idx": 1511
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "VirtIODevice *virtio_blk_init(DeviceState *dev, BlockConf *conf)\n\n{\n\n    VirtIOBlock *s;\n\n    int cylinders, heads, secs;\n\n    static int virtio_blk_id;\n\n\n\n    s = (VirtIOBlock *)virtio_common_init(\"virtio-blk\", VIRTIO_ID_BLOCK,\n\n                                          sizeof(struct virtio_blk_config),\n\n                                          sizeof(VirtIOBlock));\n\n\n\n    s->vdev.get_config = virtio_blk_update_config;\n\n    s->vdev.get_features = virtio_blk_get_features;\n\n    s->vdev.reset = virtio_blk_reset;\n\n    s->bs = conf->dinfo->bdrv;\n\n    s->conf = conf;\n\n    s->rq = NULL;\n\n    s->sector_mask = (s->conf->logical_block_size / BDRV_SECTOR_SIZE) - 1;\n\n    bdrv_guess_geometry(s->bs, &cylinders, &heads, &secs);\n\n\n\n    s->vq = virtio_add_queue(&s->vdev, 128, virtio_blk_handle_output);\n\n\n\n    qemu_add_vm_change_state_handler(virtio_blk_dma_restart_cb, s);\n\n    register_savevm(\"virtio-blk\", virtio_blk_id++, 2,\n\n                    virtio_blk_save, virtio_blk_load, s);\n\n\n\n    return &s->vdev;\n\n}\n",
        "output": "0",
        "idx": 2010
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zzip_mem_disk_open(char* filename)\n{\n    ZZIP_DISK* disk = zzip_disk_open(filename);\n    if (! disk) { perror(error[_zzip_mem_disk_open_fail]); return 0; }\n    ___ ZZIP_MEM_DISK* dir = calloc(1, sizeof(*dir)); \n    zzip_mem_disk_load(dir, disk);\n    return dir; ____;\n}",
        "output": "1",
        "idx": 4533
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "inline void Http2Stream::EmitStatistics() {\n  if (!HasHttp2Observer(env()))\n    return;\n  Http2StreamPerformanceEntry* entry =\n    new Http2StreamPerformanceEntry(env(), statistics_);\n  env()->SetImmediate([](Environment* env, void* data) {\n    Local<Context> context = env->context();\n    Http2StreamPerformanceEntry* entry =\n      static_cast<Http2StreamPerformanceEntry*>(data);\n    if (HasHttp2Observer(env)) {\n      Local<Object> obj = entry->ToObject();\n      v8::PropertyAttribute attr =\n          static_cast<v8::PropertyAttribute>(v8::ReadOnly | v8::DontDelete);\n      obj->DefineOwnProperty(\n          context,\n          FIXED_ONE_BYTE_STRING(env->isolate(), \"timeToFirstByte\"),\n          Number::New(env->isolate(),\n                      (entry->first_byte() - entry->startTimeNano()) / 1e6),\n          attr);\n      obj->DefineOwnProperty(\n          context,\n          FIXED_ONE_BYTE_STRING(env->isolate(), \"timeToFirstHeader\"),\n          Number::New(env->isolate(),\n                      (entry->first_header() - entry->startTimeNano()) / 1e6),\n          attr);\n      entry->Notify(obj);\n    }\n    delete entry;\n  }, static_cast<void*>(entry));\n}",
        "output": "0",
        "idx": 126
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void av_always_inline filter_mb_edgech( uint8_t *pix, int stride, const int16_t bS[4], unsigned int qp, H264Context *h, int intra ) {\n\n    const int qp_bd_offset = 6 * (h->sps.bit_depth_luma - 8);\n\n    const unsigned int index_a = qp - qp_bd_offset + h->slice_alpha_c0_offset;\n\n    const int alpha = alpha_table[index_a];\n\n    const int beta  = beta_table[qp - qp_bd_offset + h->slice_beta_offset];\n\n    if (alpha ==0 || beta == 0) return;\n\n\n\n    if( bS[0] < 4 || !intra ) {\n\n        int8_t tc[4];\n\n        tc[0] = tc0_table[index_a][bS[0]]+1;\n\n        tc[1] = tc0_table[index_a][bS[1]]+1;\n\n        tc[2] = tc0_table[index_a][bS[2]]+1;\n\n        tc[3] = tc0_table[index_a][bS[3]]+1;\n\n        h->h264dsp.h264_v_loop_filter_chroma(pix, stride, alpha, beta, tc);\n\n    } else {\n\n        h->h264dsp.h264_v_loop_filter_chroma_intra(pix, stride, alpha, beta);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1756
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int socket_get_fd(void *opaque)\n\n{\n\n    QEMUFileSocket *s = opaque;\n\n\n\n    return s->fd;\n\n}\n",
        "output": "1",
        "idx": 671
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pnv_chip_power9_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    PnvChipClass *k = PNV_CHIP_CLASS(klass);\n\n\n\n    k->cpu_model = \"POWER9\";\n\n    k->chip_type = PNV_CHIP_POWER9;\n\n    k->chip_cfam_id = 0x100d104980000000ull; /* P9 Nimbus DD1.0 */\n\n    k->cores_mask = POWER9_CORE_MASK;\n\n    k->core_pir = pnv_chip_core_pir_p9;\n\n\n    dc->desc = \"PowerNV Chip POWER9\";\n\n}",
        "output": "1",
        "idx": 3702
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void prb_close_block(struct tpacket_kbdq_core *pkc1,\n\t\tstruct tpacket_block_desc *pbd1,\n\t\tstruct packet_sock *po, unsigned int stat)\n{\n\t__u32 status = TP_STATUS_USER | stat;\n\n\tstruct tpacket3_hdr *last_pkt;\n\tstruct tpacket_hdr_v1 *h1 = &pbd1->hdr.bh1;\n\n\tif (po->stats.stats3.tp_drops)\n\t\tstatus |= TP_STATUS_LOSING;\n\n\tlast_pkt = (struct tpacket3_hdr *)pkc1->prev;\n\tlast_pkt->tp_next_offset = 0;\n\n\t/* Get the ts of the last pkt */\n\tif (BLOCK_NUM_PKTS(pbd1)) {\n\t\th1->ts_last_pkt.ts_sec = last_pkt->tp_sec;\n\t\th1->ts_last_pkt.ts_nsec\t= last_pkt->tp_nsec;\n\t} else {\n\t\t/* Ok, we tmo'd - so get the current time */\n\t\tstruct timespec ts;\n\t\tgetnstimeofday(&ts);\n\t\th1->ts_last_pkt.ts_sec = ts.tv_sec;\n\t\th1->ts_last_pkt.ts_nsec\t= ts.tv_nsec;\n\t}\n\n\tsmp_wmb();\n\n\t/* Flush the block */\n\tprb_flush_block(pkc1, pbd1, status);\n\n\tpkc1->kactive_blk_num = GET_NEXT_PRB_BLK_NUM(pkc1);\n}",
        "output": "0",
        "idx": 3587
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "fill_threshhold_buffer(byte *dest_strip, byte *src_strip, int src_width,\n                       int left_offset, int left_width, int num_tiles,\n                       int right_width)\n{\n    byte *ptr_out_temp = dest_strip;\n    int ii;\n\n    /* Left part */\n    memcpy(dest_strip, src_strip + left_offset, left_width);\n    ptr_out_temp += left_width;\n    /* Now the full parts */\n    for (ii = 0; ii < num_tiles; ii++){\n        memcpy(ptr_out_temp, src_strip, src_width);\n        ptr_out_temp += src_width;\n    }\n    /* Now the remainder */\n    memcpy(ptr_out_temp, src_strip, right_width);\n#ifdef PACIFY_VALGRIND\n    ptr_out_temp += right_width;\n    ii = (dest_strip-ptr_out_temp) % (LAND_BITS-1);\n    if (ii > 0)\n        memset(ptr_out_temp, 0, ii);\n#endif\n}",
        "output": "1",
        "idx": 5569
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct key *key_get_instantiation_authkey(key_serial_t target_id)\n{\n\tchar description[16];\n\tstruct keyring_search_context ctx = {\n\t\t.index_key.type\t\t= &key_type_request_key_auth,\n\t\t.index_key.description\t= description,\n\t\t.cred\t\t\t= current_cred(),\n\t\t.match_data.cmp\t\t= user_match,\n\t\t.match_data.raw_data\t= description,\n\t\t.match_data.lookup_type\t= KEYRING_SEARCH_LOOKUP_DIRECT,\n\t};\n\tstruct key *authkey;\n\tkey_ref_t authkey_ref;\n\n\tsprintf(description, \"%x\", target_id);\n\n\tauthkey_ref = search_process_keyrings(&ctx);\n\n\tif (IS_ERR(authkey_ref)) {\n\t\tauthkey = ERR_CAST(authkey_ref);\n\t\tif (authkey == ERR_PTR(-EAGAIN))\n\t\t\tauthkey = ERR_PTR(-ENOKEY);\n\t\tgoto error;\n\t}\n\n\tauthkey = key_ref_to_ptr(authkey_ref);\n\tif (test_bit(KEY_FLAG_REVOKED, &authkey->flags)) {\n\t\tkey_put(authkey);\n\t\tauthkey = ERR_PTR(-EKEYREVOKED);\n\t}\n\nerror:\n\treturn authkey;\n}",
        "output": "1",
        "idx": 5829
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void flush_arg_page(struct linux_binprm *bprm, unsigned long pos,\n\t\tstruct page *page)\n{\n}",
        "output": "0",
        "idx": 2132
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int gif_read_header(AVFormatContext * s1,\n\n                           AVFormatParameters * ap)\n\n{\n\n    GifState *s = s1->priv_data;\n\n    ByteIOContext *f = s1->pb;\n\n    AVStream *st;\n\n\n\n    s->f = f;\n\n    if (gif_read_header1(s) < 0)\n\n        return -1;\n\n\n\n    /* allocate image buffer */\n\n    s->image_linesize = s->screen_width * 3;\n\n    s->image_buf = av_malloc(s->screen_height * s->image_linesize);\n\n    if (!s->image_buf)\n\n        return AVERROR(ENOMEM);\n\n    s->pix_fmt = PIX_FMT_RGB24;\n\n    /* now we are ready: build format streams */\n\n    st = av_new_stream(s1, 0);\n\n    if (!st)\n\n        return -1;\n\n\n\n    st->codec->codec_type = CODEC_TYPE_VIDEO;\n\n    st->codec->codec_id = CODEC_ID_RAWVIDEO;\n\n    st->codec->time_base.den = 5;\n\n    st->codec->time_base.num = 1;\n\n    /* XXX: check if screen size is always valid */\n\n    st->codec->width = s->screen_width;\n\n    st->codec->height = s->screen_height;\n\n    st->codec->pix_fmt = PIX_FMT_RGB24;\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5955
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PPC_OP(addme)\n\n{\n\n    T1 = T0;\n\n    T0 += xer_ca + (-1);\n\n    if (T1 != 0)\n\n        xer_ca = 1;\n\n    RETURN();\n\n}\n",
        "output": "1",
        "idx": 4431
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int get_physical_address(CPUState * env, target_ulong * physical,\n\n\t\t\t int *prot, target_ulong address,\n\n\t\t\t int rw, int access_type)\n\n{\n\n    /* P1, P2 and P4 areas do not use translation */\n\n    if ((address >= 0x80000000 && address < 0xc0000000) ||\n\n\taddress >= 0xe0000000) {\n\n\tif (!(env->sr & SR_MD)\n\n\t    && (address < 0xe0000000 || address > 0xe4000000)) {\n\n\t    /* Unauthorized access in user mode (only store queues are available) */\n\n\t    fprintf(stderr, \"Unauthorized access\\n\");\n\n\t    return (rw & PAGE_WRITE) ? MMU_DTLB_MISS_WRITE :\n\n\t\tMMU_DTLB_MISS_READ;\n\n\t}\n\n\t/* Mask upper 3 bits */\n\n\t*physical = address & 0x1FFFFFFF;\n\n\t*prot = PAGE_READ | PAGE_WRITE;\n\n\treturn MMU_OK;\n\n    }\n\n\n\n    /* If MMU is disabled, return the corresponding physical page */\n\n    if (!env->mmucr & MMUCR_AT) {\n\n\t*physical = address & 0x1FFFFFFF;\n\n\t*prot = PAGE_READ | PAGE_WRITE;\n\n\treturn MMU_OK;\n\n    }\n\n\n\n    /* We need to resort to the MMU */\n\n    return get_mmu_address(env, physical, prot, address, rw, access_type);\n\n}\n",
        "output": "0",
        "idx": 5275
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "horAcc32(TIFF* tif, uint8* cp0, tmsize_t cc)\n{\n\ttmsize_t stride = PredictorState(tif)->stride;\n\tuint32* wp = (uint32*) cp0;\n\ttmsize_t wc = cc / 4;\n\n\tassert((cc%(4*stride))==0);\n\n\tif (wc > stride) {\n\t\twc -= stride;\n\t\tdo {\n\t\t\tREPEAT4(stride, wp[stride] += wp[0]; wp++)\n\t\t\twc -= stride;\n\t\t} while (wc > 0);\n\t}\n}",
        "output": "1",
        "idx": 985
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int qemu_file_get_error(QEMUFile *f)\n\n{\n\n    return f->last_error;\n\n}\n",
        "output": "1",
        "idx": 685
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void check_exception(sPAPREnvironment *spapr,\n\n                            uint32_t token, uint32_t nargs,\n\n                            target_ulong args,\n\n                            uint32_t nret, target_ulong rets)\n\n{\n\n    uint32_t mask, buf, len;\n\n    uint64_t xinfo;\n\n\n\n    if ((nargs < 6) || (nargs > 7) || nret != 1) {\n\n        rtas_st(rets, 0, -3);\n\n        return;\n\n    }\n\n\n\n    xinfo = rtas_ld(args, 1);\n\n    mask = rtas_ld(args, 2);\n\n    buf = rtas_ld(args, 4);\n\n    len = rtas_ld(args, 5);\n\n    if (nargs == 7) {\n\n        xinfo |= (uint64_t)rtas_ld(args, 6) << 32;\n\n    }\n\n\n\n    if ((mask & EVENT_MASK_EPOW) && pending_epow) {\n\n        if (sizeof(*pending_epow) < len) {\n\n            len = sizeof(*pending_epow);\n\n        }\n\n\n\n        cpu_physical_memory_write(buf, pending_epow, len);\n\n        g_free(pending_epow);\n\n        pending_epow = NULL;\n\n        rtas_st(rets, 0, 0);\n\n    } else {\n\n        rtas_st(rets, 0, 1);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 857
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void parse_rtcp_bye(pjmedia_rtcp_session *sess,\n\t\t\t   const void *pkt,\n\t\t\t   pj_size_t size)\n{\n    pj_str_t reason = {\"-\", 1};\n\n    /* Check and get BYE reason */\n    if (size > 8) {\n\treason.slen = PJ_MIN(sizeof(sess->stat.peer_sdes_buf_),\n                             *((pj_uint8_t*)pkt+8));\n\tpj_memcpy(sess->stat.peer_sdes_buf_, ((pj_uint8_t*)pkt+9),\n\t\t  reason.slen);\n\treason.ptr = sess->stat.peer_sdes_buf_;\n    }\n\n    /* Just print RTCP BYE log */\n    PJ_LOG(5, (sess->name, \"Received RTCP BYE, reason: %.*s\",\n\t       reason.slen, reason.ptr));\n}",
        "output": "1",
        "idx": 426
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void t1_check_unusual_charstring(void)\n{\n    char *p = strstr(t1_line_array, charstringname) + strlen(charstringname);\n    int i;\n    /* if no number follows \"/CharStrings\", let's read the next line */\n    if (sscanf(p, \"%i\", &i) != 1) {\n        /* pdftex_warn(\"no number found after `%s', I assume it's on the next line\",\n                    charstringname); */\n        strcpy(t1_buf_array, t1_line_array);\n\n        /* t1_getline always appends EOL to t1_line_array; let's change it to\n         * space before appending the next line\n         */\n        *(strend(t1_buf_array) - 1) = ' ';\n\n        t1_getline();\n        strcat(t1_buf_array, t1_line_array);\n        strcpy(t1_line_array, t1_buf_array);\n        t1_line_ptr = eol(t1_line_array);\n    }\n}",
        "output": "1",
        "idx": 272
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ide_dma_cancel(BMDMAState *bm)\n\n{\n\n    if (bm->status & BM_STATUS_DMAING) {\n\n        bm->status &= ~BM_STATUS_DMAING;\n\n        /* cancel DMA request */\n\n        bm->unit = -1;\n\n        bm->dma_cb = NULL;\n\n        if (bm->aiocb) {\n\n#ifdef DEBUG_AIO\n\n            printf(\"aio_cancel\\n\");\n\n#endif\n\n            bdrv_aio_cancel(bm->aiocb);\n\n            bm->aiocb = NULL;\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 509
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct wildmat *split_wildmats(char *str)\n{\n    const char *prefix;\n    char pattern[MAX_MAILBOX_BUFFER] = \"\", *p, *c;\n    struct wildmat *wild = NULL;\n    int n = 0;\n\n    if ((prefix = config_getstring(IMAPOPT_NEWSPREFIX)))\n\tsnprintf(pattern, sizeof(pattern), \"%s.\", prefix);\n    p = pattern + strlen(pattern);\n\n    /*\n     * split the list of wildmats\n     *\n     * we split them right to left because this is the order in which\n     * we want to test them (per RFC3977 section 4.2)\n     */\n    do {\n\tif ((c = strrchr(str, ',')))\n\t    *c++ = '\\0';\n\telse\n\t    c = str;\n\n\tif (!(n % 10)) /* alloc some more */\n\t    wild = xrealloc(wild, (n + 11) * sizeof(struct wildmat));\n\n\tif (*c == '!') wild[n].not = 1;\t\t/* not */\n\telse if (*c == '@') wild[n].not = -1;\t/* absolute not (feeding) */\n\telse wild[n].not = 0;\n\n\tstrcpy(p, wild[n].not ? c + 1 : c);\n\twild[n++].pat = xstrdup(pattern);\n    } while (c != str);\n    wild[n].pat = NULL;\n\n    return wild;\n}",
        "output": "1",
        "idx": 3075
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kvmclock_reset(struct kvm_vcpu *vcpu)\n{\n\tif (vcpu->arch.time_page) {\n\t\tkvm_release_page_dirty(vcpu->arch.time_page);\n\t\tvcpu->arch.time_page = NULL;\n\t}\n}",
        "output": "1",
        "idx": 4929
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct GuestAgentInfo *qmp_guest_info(Error **errp)\n\n{\n\n    GuestAgentInfo *info = g_malloc0(sizeof(GuestAgentInfo));\n\n\n\n    info->version = g_strdup(QEMU_VERSION);\n\n    qmp_for_each_command(qmp_command_info, info);\n\n    return info;\n\n}\n",
        "output": "1",
        "idx": 1543
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_mul(DisasContext *dc, TCGv dest, TCGv srca, TCGv srcb)\n\n{\n\n    TCGv sr_ov = tcg_temp_new();\n\n    TCGv t0 = tcg_temp_new();\n\n\n\n    tcg_gen_muls2_tl(dest, sr_ov, srca, srcb);\n\n    tcg_gen_sari_tl(t0, dest, TARGET_LONG_BITS - 1);\n\n    tcg_gen_setcond_tl(TCG_COND_NE, sr_ov, sr_ov, t0);\n\n    tcg_temp_free(t0);\n\n\n\n    tcg_gen_deposit_tl(cpu_sr, cpu_sr, sr_ov, ctz32(SR_OV), 1);\n\n\n\n    gen_ove_ov(dc, sr_ov);\n\n    tcg_temp_free(sr_ov);\n\n}\n",
        "output": "1",
        "idx": 1517
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void acpi_pm1_cnt_init(ACPIREGS *ar, qemu_irq cmos_s3)\n\n{\n\n    ar->pm1.cnt.cmos_s3 = cmos_s3;\n\n}\n",
        "output": "0",
        "idx": 1750
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "eap_state_name(esc)\nenum eap_state_code esc;\n{\n\tstatic const char *state_names[] = { EAP_STATES };\n\n\treturn (state_names[(int)esc]);\n}",
        "output": "0",
        "idx": 6160
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void seg_free_context(SegmentContext *seg)\n\n{\n\n    avio_closep(&seg->pb);\n\n    avformat_free_context(seg->avf);\n\n    seg->avf = NULL;\n\n}\n",
        "output": "0",
        "idx": 960
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void usb_msd_send_status(MSDState *s, USBPacket *p)\n\n{\n\n    struct usb_msd_csw csw;\n\n    int len;\n\n\n\n    csw.sig = cpu_to_le32(0x53425355);\n\n    csw.tag = cpu_to_le32(s->tag);\n\n    csw.residue = s->residue;\n\n    csw.status = s->result;\n\n\n\n    len = MIN(sizeof(csw), p->len);\n\n    memcpy(p->data, &csw, len);\n\n}\n",
        "output": "1",
        "idx": 2777
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cgroup_file_notify(struct cgroup_file *cfile)\n{\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&cgroup_file_kn_lock, flags);\n\tif (cfile->kn) {\n\t\tunsigned long last = cfile->notified_at;\n\t\tunsigned long next = last + CGROUP_FILE_NOTIFY_MIN_INTV;\n\n\t\tif (time_in_range(jiffies, last, next)) {\n\t\t\ttimer_reduce(&cfile->notify_timer, next);\n\t\t} else {\n\t\t\tkernfs_notify(cfile->kn);\n\t\t\tcfile->notified_at = jiffies;\n\t\t}\n\t}\n\tspin_unlock_irqrestore(&cgroup_file_kn_lock, flags);\n}",
        "output": "0",
        "idx": 5072
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool can_skip_alu_sanitation(const struct bpf_verifier_env *env,\n\t\t\t\t    const struct bpf_insn *insn)\n{\n\treturn env->allow_ptr_leaks || BPF_SRC(insn->code) == BPF_K;\n}",
        "output": "0",
        "idx": 1954
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "dnExtractRdn( \n\tstruct berval\t*dn, \n\tstruct berval \t*rdn,\n\tvoid *ctx )\n{\n\tLDAPRDN\t\ttmpRDN;\n\tconst char\t*p;\n\tint\t\trc;\n\n\tassert( dn != NULL );\n\tassert( rdn != NULL );\n\n\tif( dn->bv_len == 0 ) {\n\t\treturn LDAP_OTHER;\n\t}\n\n\trc = ldap_bv2rdn_x( dn, &tmpRDN, (char **)&p, LDAP_DN_FORMAT_LDAP, ctx );\n\tif ( rc != LDAP_SUCCESS ) {\n\t\treturn rc;\n\t}\n\n\trc = ldap_rdn2bv_x( tmpRDN, rdn, LDAP_DN_FORMAT_LDAPV3 | LDAP_DN_PRETTY,\n\t\tctx );\n\n\tldap_rdnfree_x( tmpRDN, ctx );\n\treturn rc;\n}",
        "output": "0",
        "idx": 5815
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void flac_lpc_16_c(int32_t *decoded, const int coeffs[32],\n\n                          int pred_order, int qlevel, int len)\n\n{\n\n    int i, j;\n\n\n\n    for (i = pred_order; i < len - 1; i += 2, decoded += 2) {\n\n        int c = coeffs[0];\n\n        int d = decoded[0];\n\n        int s0 = 0, s1 = 0;\n\n        for (j = 1; j < pred_order; j++) {\n\n            s0 += c*d;\n\n            d = decoded[j];\n\n            s1 += c*d;\n\n            c = coeffs[j];\n\n        }\n\n        s0 += c*d;\n\n        d = decoded[j] += s0 >> qlevel;\n\n        s1 += c*d;\n\n        decoded[j + 1] += s1 >> qlevel;\n\n    }\n\n    if (i < len) {\n\n        int sum = 0;\n\n        for (j = 0; j < pred_order; j++)\n\n            sum += coeffs[j] * decoded[j];\n\n        decoded[j] += sum >> qlevel;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 1749
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void HELPER(wsr_lend)(uint32_t v)\n\n{\n\n    if (env->sregs[LEND] != v) {\n\n        tb_invalidate_phys_page_range(\n\n                env->sregs[LEND] - 1, env->sregs[LEND], 0);\n\n        env->sregs[LEND] = v;\n\n        tb_invalidate_phys_page_range(\n\n                env->sregs[LEND] - 1, env->sregs[LEND], 0);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 4596
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void gen_op_fcmps(int fccno, TCGv r_rs1, TCGv r_rs2)\n\n{\n\n    gen_helper_fcmps(cpu_env, r_rs1, r_rs2);\n\n}\n",
        "output": "0",
        "idx": 4279
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "sf_open\t(const char *path, int mode, SF_INFO *sfinfo)\n{\tSF_PRIVATE \t*psf ;\n\n\t/* Ultimate sanity check. */\n\tassert (sizeof (sf_count_t) == 8) ;\n\n\tif ((psf = calloc (1, sizeof (SF_PRIVATE))) == NULL)\n\t{\tsf_errno = SFE_MALLOC_FAILED ;\n\t\treturn\tNULL ;\n\t\t} ;\n\n\tpsf_init_files (psf) ;\n\n\tpsf_log_printf (psf, \"File : %s\\n\", path) ;\n\n\tif (copy_filename (psf, path) != 0)\n\t{\tsf_errno = psf->error ;\n\t\treturn\tNULL ;\n\t\t} ;\n\n\tpsf->file.mode = mode ;\n\tif (strcmp (path, \"-\") == 0)\n\t\tpsf->error = psf_set_stdio (psf) ;\n\telse\n\t\tpsf->error = psf_fopen (psf) ;\n\n\treturn psf_open_file (psf, sfinfo) ;\n} /* sf_open */",
        "output": "1",
        "idx": 2733
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int xv_write_trailer(AVFormatContext *s)\n\n{\n\n    XVContext *xv = s->priv_data;\n\n\n\n    XShmDetach(xv->display, &xv->yuv_shminfo);\n\n    shmdt(xv->yuv_image->data);\n\n    XFree(xv->yuv_image);\n\n\n    XCloseDisplay(xv->display);\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 2263
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "CURLcode Curl_output_negotiate(struct connectdata *conn, bool proxy)\n{\n  struct negotiatedata *neg_ctx = proxy?&conn->data->state.proxyneg:\n    &conn->data->state.negotiate;\n  char *encoded = NULL;\n  size_t len = 0;\n  char *userp;\n  CURLcode error;\n\n  error = Curl_base64_encode(conn->data,\n                             (const char*)neg_ctx->output_token,\n                             neg_ctx->output_token_length,\n                             &encoded, &len);\n  if(error)\n    return error;\n\n  if(len == 0)\n    return CURLE_REMOTE_ACCESS_DENIED;\n\n  userp = aprintf(\"%sAuthorization: %s %s\\r\\n\", proxy ? \"Proxy-\" : \"\",\n                  neg_ctx->protocol, encoded);\n\n  if(proxy)\n    conn->allocptr.proxyuserpwd = userp;\n  else\n    conn->allocptr.userpwd = userp;\n  free(encoded);\n  Curl_cleanup_negotiate (conn->data);\n  return (userp == NULL) ? CURLE_OUT_OF_MEMORY : CURLE_OK;\n}",
        "output": "1",
        "idx": 4578
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "wchar_t* gf_utf8_to_wcs(const char* str)\n{\n\tsize_t source_len;\n\twchar_t* result;\n\tif (str == 0) return 0;\n\tsource_len = strlen(str);\n\tresult = gf_calloc(source_len + 1, sizeof(wchar_t));\n\tif (!result)\n\t\treturn 0;\n\tif (gf_utf8_mbstowcs(result, source_len, &str) == GF_UTF8_FAIL) {\n\t\tgf_free(result);\n\t\treturn 0;\n\t}\n\treturn result;\n}",
        "output": "0",
        "idx": 2399
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "encode_METER(const struct ofpact_meter *meter,\n             enum ofp_version ofp_version, struct ofpbuf *out)\n{\n    if (ofp_version == OFP13_VERSION || ofp_version == OFP14_VERSION) {\n        instruction_put_OFPIT13_METER(out)->meter_id = htonl(meter->meter_id);\n    } else if (ofp_version >= OFP15_VERSION) {\n        put_OFPAT15_METER(out, meter->meter_id);\n    }\n}",
        "output": "0",
        "idx": 5936
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool migrate_zero_blocks(void)\n\n{\n\n    MigrationState *s;\n\n\n\n    s = migrate_get_current();\n\n\n\n    return s->enabled_capabilities[MIGRATION_CAPABILITY_ZERO_BLOCKS];\n\n}\n",
        "output": "1",
        "idx": 3991
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int vp8dx_decode_bool(BOOL_DECODER *br, int probability) {\n  unsigned int bit = 0;\n  VP8_BD_VALUE value;\n  unsigned int split;\n  VP8_BD_VALUE bigsplit;\n  int count;\n  unsigned int range;\n\n  split = 1 + (((br->range - 1) * probability) >> 8);\n\n  if (br->count < 0) vp8dx_bool_decoder_fill(br);\n\n  value = br->value;\n  count = br->count;\n\n  bigsplit = (VP8_BD_VALUE)split << (VP8_BD_VALUE_SIZE - 8);\n\n  range = split;\n\n  if (value >= bigsplit) {\n    range = br->range - split;\n    value = value - bigsplit;\n    bit = 1;\n  }\n\n  {\n    const int shift = vp8_norm[range];\n    range <<= shift;\n    value <<= shift;\n    count -= shift;\n  }\n  br->value = value;\n  br->count = count;\n  br->range = range;\n\n  return bit;\n}",
        "output": "1",
        "idx": 1736
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void Field_timef::store_TIME(const MYSQL_TIME *ltime)\n{\n  longlong tmp= TIME_to_longlong_time_packed(ltime);\n  my_time_packed_to_binary(tmp, ptr, dec);\n}",
        "output": "0",
        "idx": 3272
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void handle_ti(ESPState *s)\n{\n    uint32_t dmalen, minlen;\n\n    if (s->dma && !s->dma_enabled) {\n        s->dma_cb = handle_ti;\n        return;\n    }\n\n    dmalen = s->rregs[ESP_TCLO];\n    dmalen |= s->rregs[ESP_TCMID] << 8;\n    dmalen |= s->rregs[ESP_TCHI] << 16;\n    if (dmalen==0) {\n      dmalen=0x10000;\n    }\n    s->dma_counter = dmalen;\n\n    if (s->do_cmd)\n        minlen = (dmalen < 32) ? dmalen : 32;\n    else if (s->ti_size < 0)\n        minlen = (dmalen < -s->ti_size) ? dmalen : -s->ti_size;\n    else\n        minlen = (dmalen < s->ti_size) ? dmalen : s->ti_size;\n    trace_esp_handle_ti(minlen);\n    if (s->dma) {\n        s->dma_left = minlen;\n        s->rregs[ESP_RSTAT] &= ~STAT_TC;\n        esp_do_dma(s);\n    }\n    if (s->do_cmd) {\n        trace_esp_handle_ti_cmd(s->cmdlen);\n        s->ti_size = 0;\n        s->cmdlen = 0;\n        s->do_cmd = 0;\n        do_cmd(s, s->cmdbuf);\n    }\n}",
        "output": "1",
        "idx": 6061
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gsize calc_float_string_storage(double value)\n\n{\n\n    int whole_value = value;\n\n    gsize i = 0;\n\n    do {\n\n        i++;\n\n    } while (whole_value /= 10);\n\n    return i + 2 + FLOAT_STRING_PRECISION;\n\n}\n",
        "output": "1",
        "idx": 4137
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "HeaderMapImpl::HeaderEntryImpl& HeaderMapImpl::maybeCreateInline(HeaderEntryImpl** entry,\n                                                                 const LowerCaseString& key,\n                                                                 HeaderString&& value) {\n  if (*entry) {\n    value.clear();\n    return **entry;\n  }\n\n  std::list<HeaderEntryImpl>::iterator i = headers_.insert(key, std::move(value));\n  i->entry_ = i;\n  *entry = &(*i);\n  return **entry;\n}",
        "output": "1",
        "idx": 1965
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool virtio_blk_data_plane_create(VirtIODevice *vdev, VirtIOBlkConf *blk,\n                                  VirtIOBlockDataPlane **dataplane)\n{\n    VirtIOBlockDataPlane *s;\n    int fd;\n    *dataplane = NULL;\n    if (!blk->data_plane) {\n        return true;\n    if (blk->scsi) {\n        error_report(\"device is incompatible with x-data-plane, use scsi=off\");\n    if (blk->config_wce) {\n        error_report(\"device is incompatible with x-data-plane, \"\n                     \"use config-wce=off\");\n    fd = raw_get_aio_fd(blk->conf.bs);\n    if (fd < 0) {\n        error_report(\"drive is incompatible with x-data-plane, \"\n                     \"use format=raw,cache=none,aio=native\");\n    s = g_new0(VirtIOBlockDataPlane, 1);\n    s->vdev = vdev;\n    s->fd = fd;\n    s->blk = blk;\n    /* Prevent block operations that conflict with data plane thread */\n    bdrv_set_in_use(blk->conf.bs, 1);\n    *dataplane = s;\n    return true;",
        "output": "1",
        "idx": 645
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void mkv_free(MatroskaMuxContext *mkv) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    if (mkv->main_seekhead) {\n\n        av_freep(&mkv->main_seekhead->entries);\n\n        av_freep(&mkv->main_seekhead);\n\n\n    if (mkv->cues) {\n\n        av_freep(&mkv->cues->entries);\n\n        av_freep(&mkv->cues);\n\n\n    if (mkv->attachments) {\n\n        av_freep(&mkv->attachments->entries);\n\n        av_freep(&mkv->attachments);\n\n\n    av_freep(&mkv->tracks);\n\n    av_freep(&mkv->stream_durations);\n\n    av_freep(&mkv->stream_duration_offsets);\n",
        "output": "1",
        "idx": 2817
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  virtual Type type() const\n  {\n    return TABLE_ARENA;\n  }",
        "output": "1",
        "idx": 4358
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CLASS unpacked_load_raw()\n{\n  int row, col, bits = 0;\n  while (1 << ++bits < maximum)\n    ;\n  read_shorts(raw_image, raw_width * raw_height);\n  if (maximum < 0xffff)\n    for (row = 0; row < raw_height; row++)\n    {\n#ifdef LIBRAW_LIBRARY_BUILD\n      checkCancel();\n#endif\n      for (col = 0; col < raw_width; col++)\n        if ((RAW(row, col) >>= load_flags) >> bits && (unsigned)(row - top_margin) < height &&\n            (unsigned)(col - left_margin) < width)\n          derror();\n    }\n}",
        "output": "0",
        "idx": 4772
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static zval *com_read_dimension(zval *object, zval *offset, int type, zval *rv)\n{\n\tphp_com_dotnet_object *obj;\n\tVARIANT v;\n\n\tZVAL_NULL(rv);\n\n\tobj = CDNO_FETCH(object);\n\n\tif (V_VT(&obj->v) == VT_DISPATCH) {\n\t\tVariantInit(&v);\n\n\t\tif (SUCCESS == php_com_do_invoke_by_id(obj, DISPID_VALUE,\n\t\t\t\tDISPATCH_METHOD|DISPATCH_PROPERTYGET, &v, 1, offset, 0, 0)) {\n\t\t\tphp_com_zval_from_variant(rv, &v, obj->code_page);\n\t\t\tVariantClear(&v);\n\t\t}\n\t} else if (V_ISARRAY(&obj->v)) {\n\t\tconvert_to_long(offset);\n\n\t\tif (SafeArrayGetDim(V_ARRAY(&obj->v)) == 1) {\n\t\t\tif (php_com_safearray_get_elem(&obj->v, &v, (LONG)Z_LVAL_P(offset))) {\n\t\t\t\tphp_com_wrap_variant(rv, &v, obj->code_page);\n\t\t\t\tVariantClear(&v);\n\t\t\t}\n\t\t} else {\n\t\t\tphp_com_saproxy_create(object, rv, offset);\n\t\t}\n\n\t} else {\n\t\tphp_com_throw_exception(E_INVALIDARG, \"this variant is not an array type\");\n\t}\n\n\treturn rv;\n}",
        "output": "0",
        "idx": 5934
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "inline uint8_t* WireFormatLite::WriteInt32NoTagToArray(\n    const RepeatedField<int32_t>& value, uint8_t* target) {\n  return WritePrimitiveNoTagToArray(value, WriteInt32NoTagToArray, target);\n}",
        "output": "0",
        "idx": 4506
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {\n    xmlIDTablePtr table;\n    xmlIDPtr id;\n    xmlChar *ID;\n\n    if (doc == NULL) return(-1);\n    if (attr == NULL) return(-1);\n\n    table = (xmlIDTablePtr) doc->ids;\n    if (table == NULL)\n        return(-1);\n\n    ID = xmlNodeListGetString(doc, attr->children, 1);\n    if (ID == NULL)\n        return(-1);\n\n    id = xmlHashLookup(table, ID);\n    if (id == NULL || id->attr != attr) {\n        xmlFree(ID);\n        return(-1);\n    }\n\n    xmlHashRemoveEntry(table, ID, xmlFreeIDTableEntry);\n    xmlFree(ID);\n    attr->atype = 0;\n    return(0);\n}",
        "output": "1",
        "idx": 352
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_qemu_strtoul_underflow(void)\n\n{\n\n    const char *str = \"-99999999999999999999999999999999999999999999\";\n\n    char f = 'X';\n\n    const char *endptr = &f;\n\n    unsigned long res = 999;\n\n    int err;\n\n\n\n    err  = qemu_strtoul(str, &endptr, 0, &res);\n\n\n\n    g_assert_cmpint(err, ==, -ERANGE);\n\n    g_assert_cmpint(res, ==, -1ul);\n\n    g_assert(endptr == str + strlen(str));\n\n}\n",
        "output": "0",
        "idx": 4458
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void kqemu_reset_modified_ram_pages(void)\n\n{\n\n    int i;\n\n    unsigned long page_index;\n\n\n\n    for(i = 0; i < nb_modified_ram_pages; i++) {\n\n        page_index = modified_ram_pages[i] >> TARGET_PAGE_BITS;\n\n        modified_ram_pages_table[page_index] = 0;\n\n    }\n\n    nb_modified_ram_pages = 0;\n\n}\n",
        "output": "0",
        "idx": 5227
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static loff_t find_tree_dqentry(struct qtree_mem_dqinfo *info,\n\t\t\t\tstruct dquot *dquot, uint blk, int depth)\n{\n\tchar *buf = kmalloc(info->dqi_usable_bs, GFP_NOFS);\n\tloff_t ret = 0;\n\t__le32 *ref = (__le32 *)buf;\n\n\tif (!buf)\n\t\treturn -ENOMEM;\n\tret = read_blk(info, blk, buf);\n\tif (ret < 0) {\n\t\tquota_error(dquot->dq_sb, \"Can't read quota tree block %u\",\n\t\t\t    blk);\n\t\tgoto out_buf;\n\t}\n\tret = 0;\n\tblk = le32_to_cpu(ref[get_index(info, dquot->dq_id, depth)]);\n\tif (!blk)\t/* No reference? */\n\t\tgoto out_buf;\n\tif (depth < info->dqi_qtree_depth - 1)\n\t\tret = find_tree_dqentry(info, dquot, blk, depth+1);\n\telse\n\t\tret = find_block_dqentry(info, dquot, blk);\nout_buf:\n\tkfree(buf);\n\treturn ret;\n}",
        "output": "1",
        "idx": 5907
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void clear_commits(BDRVVVFATState* s)\n\n{\n\n    int i;\n\nDLOG(fprintf(stderr, \"clear_commits (%d commits)\\n\", s->commits.next));\n\n    for (i = 0; i < s->commits.next; i++) {\n\n\tcommit_t* commit = array_get(&(s->commits), i);\n\n\tassert(commit->path || commit->action == ACTION_WRITEOUT);\n\n\tif (commit->action != ACTION_WRITEOUT) {\n\n\t    assert(commit->path);\n\n\t    free(commit->path);\n\n\t} else\n\n\t    assert(commit->path == NULL);\n\n    }\n\n    s->commits.next = 0;\n\n}\n",
        "output": "1",
        "idx": 1944
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(Http1ClientConnectionImplTest, 100Response) {\n  initialize();\n\n  NiceMock<MockResponseDecoder> response_decoder;\n  Http::RequestEncoder& request_encoder = codec_->newStream(response_decoder);\n  TestRequestHeaderMapImpl headers{{\":method\", \"GET\"}, {\":path\", \"/\"}, {\":authority\", \"host\"}};\n  request_encoder.encodeHeaders(headers, true);\n\n  EXPECT_CALL(response_decoder, decode100ContinueHeaders_(_));\n  EXPECT_CALL(response_decoder, decodeData(_, _)).Times(0);\n  Buffer::OwnedImpl initial_response(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\");\n  auto status = codec_->dispatch(initial_response);\n\n  EXPECT_CALL(response_decoder, decodeHeaders_(_, false));\n  EXPECT_CALL(response_decoder, decodeData(_, _)).Times(0);\n  Buffer::OwnedImpl response(\"HTTP/1.1 200 OK\\r\\n\\r\\n\");\n  status = codec_->dispatch(response);\n  EXPECT_TRUE(status.ok());\n}",
        "output": "0",
        "idx": 3250
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void h2_shutw(struct conn_stream *cs, enum cs_shw_mode mode)\n{\n\tstruct h2s *h2s = cs->ctx;\n\n\th2_do_shutw(h2s);\n}",
        "output": "0",
        "idx": 4905
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void mk_request_free(struct session_request *sr)\n{\n    if (sr->fd_file > 0) {\n        mk_vhost_close(sr);\n    }\n\n    if (sr->headers.location) {\n        mk_mem_free(sr->headers.location);\n    }\n\n    if (sr->uri_processed.data != sr->uri.data) {\n        mk_ptr_free(&sr->uri_processed);\n    }\n\n    if (sr->real_path.data != sr->real_path_static) {\n        mk_ptr_free(&sr->real_path);\n    }\n}",
        "output": "1",
        "idx": 5519
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\tswitch (yych) {\n\t\tcase 'a': goto yy44;\n\t\tdefault: goto yy41;\n\t}",
        "output": "1",
        "idx": 56
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  virtual void updateFlatness(GfxState * /*state*/) {}",
        "output": "0",
        "idx": 5827
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "calc_delta_fair(unsigned long delta_exec, struct load_weight *lw)\n{\n\treturn calc_delta_mine(delta_exec, NICE_0_LOAD, lw);\n}",
        "output": "1",
        "idx": 4324
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cssp_gss_report_error(OM_uint32 code, char *str, OM_uint32 major_status, OM_uint32 minor_status)\n{\n\tOM_uint32 msgctx = 0, ms;\n\tgss_buffer_desc status_string;\n\n\tlogger(Core, Debug, \"GSS error [%d:%d:%d]: %s\", (major_status & 0xff000000) >> 24,\t// Calling error\n\t       (major_status & 0xff0000) >> 16,\t// Routine error\n\t       major_status & 0xffff,\t// Supplementary info bits\n\t       str);\n\n\tdo\n\t{\n\t\tms = gss_display_status(&minor_status, major_status,\n\t\t\t\t\tcode, GSS_C_NULL_OID, &msgctx, &status_string);\n\t\tif (ms != GSS_S_COMPLETE)\n\t\t\tcontinue;\n\n\t\tlogger(Core, Debug, \" - %s\", status_string.value);\n\n\t}\n\twhile (ms == GSS_S_COMPLETE && msgctx);\n\n}",
        "output": "0",
        "idx": 2166
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int nfs_access_get_cached(struct inode *inode, struct rpc_cred *cred, struct nfs_access_entry *res)\n{\n\tstruct nfs_inode *nfsi = NFS_I(inode);\n\tstruct nfs_access_entry *cache;\n\tint err = -ENOENT;\n\n\tspin_lock(&inode->i_lock);\n\tif (nfsi->cache_validity & NFS_INO_INVALID_ACCESS)\n\t\tgoto out_zap;\n\tcache = nfs_access_search_rbtree(inode, cred);\n\tif (cache == NULL)\n\t\tgoto out;\n\tif (time_after(jiffies, cache->jiffies + NFS_ATTRTIMEO(inode)))\n\t\tgoto out_stale;\n\tres->jiffies = cache->jiffies;\n\tres->cred = cache->cred;\n\tres->mask = cache->mask;\n\tlist_move_tail(&cache->lru, &nfsi->access_cache_entry_lru);\n\terr = 0;\nout:\n\tspin_unlock(&inode->i_lock);\n\treturn err;\nout_stale:\n\trb_erase(&cache->rb_node, &nfsi->access_cache);\n\tlist_del(&cache->lru);\n\tspin_unlock(&inode->i_lock);\n\tnfs_access_free_entry(cache);\n\treturn -ENOENT;\nout_zap:\n\t/* This will release the spinlock */\n\t__nfs_access_zap_cache(inode);\n\treturn -ENOENT;\n}",
        "output": "0",
        "idx": 1877
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int handle_dots(struct nameidata *nd, int type)\n{\n\tif (type == LAST_DOTDOT) {\n\t\tif (nd->flags & LOOKUP_RCU) {\n\t\t\treturn follow_dotdot_rcu(nd);\n\t\t} else\n\t\t\tfollow_dotdot(nd);\n\t}\n\treturn 0;\n}",
        "output": "1",
        "idx": 1590
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void mono_gc_init (void)\n{\n\tInitializeCriticalSection (&handle_section);\n}",
        "output": "1",
        "idx": 2081
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_child_check_perm(BdrvChild *c, uint64_t perm, uint64_t shared,\n\n                          Error **errp)\n\n{\n\n    return bdrv_check_update_perm(c->bs, perm, shared, c, errp);\n\n}\n",
        "output": "0",
        "idx": 4323
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_iccprofile_item(deark *c, lctx *d, i64 pos, i64 len)\n{\n\ti64 selector;\n\ti64 data_len;\n\n\tif(len<4) return;\n\tselector = de_getu32be(pos);\n\tdata_len = len-4;\n\tde_dbg(c, \"ICC profile segment, selector=%d, data len=%d\", (int)selector,\n\t\t(int)data_len);\n\n\tif(selector!=1) {\n\t\t// If this is not a Continuation segment, close any current file.\n\t\tdbuf_close(d->iccprofile_file);\n\t\td->iccprofile_file = NULL;\n\t}\n\n\tif(selector==0) { // Beginning segment\n\t\td->iccprofile_file = dbuf_create_output_file(c, \"icc\", NULL, DE_CREATEFLAG_IS_AUX);\n\t}\n\n\tif(selector==0 || selector==1) {\n\t\t// Beginning and Continuation segments normally have profile data.\n\t\t// End segments (selector==2) are not allowed to include data.\n\t\tdbuf_copy(c->infile, pos+4, data_len, d->iccprofile_file);\n\t}\n}",
        "output": "1",
        "idx": 1550
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int apply_event_filter(struct trace_event_file *file, char *filter_string)\n{\n\tstruct trace_event_call *call = file->event_call;\n\tstruct event_filter *filter = NULL;\n\tint err;\n\n\tif (!strcmp(strstrip(filter_string), \"0\")) {\n\t\tfilter_disable(file);\n\t\tfilter = event_filter(file);\n\n\t\tif (!filter)\n\t\t\treturn 0;\n\n\t\tevent_clear_filter(file);\n\n\t\t/* Make sure the filter is not being used */\n\t\ttracepoint_synchronize_unregister();\n\t\t__free_filter(filter);\n\n\t\treturn 0;\n\t}\n\n\terr = create_filter(file->tr, call, filter_string, true, &filter);\n\n\t/*\n\t * Always swap the call filter with the new filter\n\t * even if there was an error. If there was an error\n\t * in the filter, we disable the filter and show the error\n\t * string\n\t */\n\tif (filter) {\n\t\tstruct event_filter *tmp;\n\n\t\ttmp = event_filter(file);\n\t\tif (!err)\n\t\t\tevent_set_filtered_flag(file);\n\t\telse\n\t\t\tfilter_disable(file);\n\n\t\tevent_set_filter(file, filter);\n\n\t\tif (tmp) {\n\t\t\t/* Make sure the call is done with the filter */\n\t\t\ttracepoint_synchronize_unregister();\n\t\t\t__free_filter(tmp);\n\t\t}\n\t}\n\n\treturn err;\n}",
        "output": "0",
        "idx": 1798
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int show_filters(void *optctx, const char *opt, const char *arg)\n\n{\n\n    AVFilter av_unused(**filter) = NULL;\n\n\n\n    printf(\"Filters:\\n\");\n\n#if CONFIG_AVFILTER\n\n    while ((filter = av_filter_next(filter)) && *filter)\n\n        printf(\"%-16s %s\\n\", (*filter)->name, (*filter)->description);\n\n#endif\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 3493
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t vmsvga_bios_read(void *opaque, uint32_t address)\n\n{\n\n    printf(\"%s: what are we supposed to return?\\n\", __FUNCTION__);\n\n    return 0xcafe;\n\n}\n",
        "output": "0",
        "idx": 4866
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "FontData::FontData(FontData* data, int32_t offset) {\n  Init(data->array_);\n  Bound(data->bound_offset_ + offset,\n        (data->bound_length_ == GROWABLE_SIZE)\n            ? GROWABLE_SIZE : data->bound_length_ - offset);\n}",
        "output": "1",
        "idx": 6081
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "read_hwclock_file(const char *hwclock_file)\n{\n  FILE *in;\n  char line[256];\n  int i;\n\n  if (!hwclock_file || !hwclock_file[0])\n    return;\n\n  in = fopen(hwclock_file, \"r\");\n  if (!in) {\n    LOG(LOGS_WARN, \"Could not open %s : %s\",\n        hwclock_file, strerror(errno));\n    return;\n  }\n\n  /* Read third line from the file. */\n  for (i = 0; i < 3; i++) {\n    if (!fgets(line, sizeof(line), in))\n      break;\n  }\n\n  fclose(in);\n\n  if (i == 3 && !strncmp(line, \"LOCAL\", 5)) {\n    rtc_on_utc = 0;\n  } else if (i == 3 && !strncmp(line, \"UTC\", 3)) {\n    rtc_on_utc = 1;\n  } else {\n    LOG(LOGS_WARN, \"Could not read RTC LOCAL/UTC setting from %s\", hwclock_file);\n  }\n}",
        "output": "1",
        "idx": 1712
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool virtio_scsi_handle_ctrl_vq(VirtIOSCSI *s, VirtQueue *vq)\n\n{\n\n    VirtIOSCSIReq *req;\n\n    bool progress = false;\n\n\n\n    virtio_scsi_acquire(s);\n\n    while ((req = virtio_scsi_pop_req(s, vq))) {\n\n        progress = true;\n\n        virtio_scsi_handle_ctrl_req(s, req);\n\n    }\n\n    virtio_scsi_release(s);\n\n    return progress;\n\n}\n",
        "output": "1",
        "idx": 4124
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlXPtrNewRangeNodePoint(xmlNodePtr start, xmlXPathObjectPtr end) {\n    xmlXPathObjectPtr ret;\n\n    if (start == NULL)\n\treturn(NULL);\n    if (end == NULL)\n\treturn(NULL);\n    if (start->type != XPATH_POINT)\n\treturn(NULL);\n    if (end->type != XPATH_POINT)\n\treturn(NULL);\n\n    ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));\n    if (ret == NULL) {\n        xmlXPtrErrMemory(\"allocating range\");\n\treturn(NULL);\n    }\n    memset(ret, 0 , (size_t) sizeof(xmlXPathObject));\n    ret->type = XPATH_RANGE;\n    ret->user = start;\n    ret->index = -1;\n    ret->user2 = end->user;\n    ret->index2 = end->index;\n    xmlXPtrRangeCheckOrder(ret);\n    return(ret);\n}",
        "output": "1",
        "idx": 3824
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int blkcg_init_queue(struct request_queue *q)\n{\n\tstruct blkcg_gq *new_blkg, *blkg;\n\tbool preloaded;\n\tint ret;\n\n\tnew_blkg = blkg_alloc(&blkcg_root, q, GFP_KERNEL);\n\tif (!new_blkg)\n\t\treturn -ENOMEM;\n\n\tpreloaded = !radix_tree_preload(GFP_KERNEL);\n\n\t/*\n\t * Make sure the root blkg exists and count the existing blkgs.  As\n\t * @q is bypassing at this point, blkg_lookup_create() can't be\n\t * used.  Open code insertion.\n\t */\n\trcu_read_lock();\n\tspin_lock_irq(q->queue_lock);\n\tblkg = blkg_create(&blkcg_root, q, new_blkg);\n\tspin_unlock_irq(q->queue_lock);\n\trcu_read_unlock();\n\n\tif (preloaded)\n\t\tradix_tree_preload_end();\n\n\tif (IS_ERR(blkg)) {\n\t\tblkg_free(new_blkg);\n\t\treturn PTR_ERR(blkg);\n\t}\n\n\tq->root_blkg = blkg;\n\tq->root_rl.blkg = blkg;\n\n\tret = blk_throtl_init(q);\n\tif (ret) {\n\t\tspin_lock_irq(q->queue_lock);\n\t\tblkg_destroy_all(q);\n\t\tspin_unlock_irq(q->queue_lock);\n\t}\n\treturn ret;\n}",
        "output": "1",
        "idx": 1982
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t eepro100_read4(EEPRO100State * s, uint32_t addr)\n\n{\n\n    uint32_t val;\n\n    if (addr <= sizeof(s->mem) - sizeof(val)) {\n\n        memcpy(&val, &s->mem[addr], sizeof(val));\n\n    }\n\n\n\n    switch (addr) {\n\n    case SCBStatus:\n\n        TRACE(OTHER, logout(\"addr=%s val=0x%08x\\n\", regname(addr), val));\n\n        break;\n\n    case SCBPointer:\n\n#if 0\n\n        val = eepro100_read_pointer(s);\n\n#endif\n\n        TRACE(OTHER, logout(\"addr=%s val=0x%08x\\n\", regname(addr), val));\n\n        break;\n\n    case SCBPort:\n\n        val = eepro100_read_port(s);\n\n        TRACE(OTHER, logout(\"addr=%s val=0x%08x\\n\", regname(addr), val));\n\n        break;\n\n    case SCBCtrlMDI:\n\n        val = eepro100_read_mdi(s);\n\n        break;\n\n    default:\n\n        logout(\"addr=%s val=0x%08x\\n\", regname(addr), val);\n\n        missing(\"unknown longword read\");\n\n    }\n\n    return val;\n\n}\n",
        "output": "1",
        "idx": 2621
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rb_str_dup_frozen(str)\n    VALUE str;\n{\n    if (FL_TEST(str, ELTS_SHARED) && RSTRING(str)->aux.shared) {\n\tVALUE shared = RSTRING(str)->aux.shared;\n\tif (RSTRING(shared)->len == RSTRING(str)->len) {\n\t    OBJ_FREEZE(shared);\n\t    return shared;\n\t}\n    }\n    if (OBJ_FROZEN(str)) return str;\n    str = rb_str_dup(str);\n    OBJ_FREEZE(str);\n    return str;\n}",
        "output": "0",
        "idx": 3338
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BlockDriverAIOCB *bdrv_aio_write(BlockDriverState *bs, int64_t sector_num,\n\n                                 const uint8_t *buf, int nb_sectors,\n\n                                 BlockDriverCompletionFunc *cb, void *opaque)\n\n{\n\n    BlockDriver *drv = bs->drv;\n\n    BlockDriverAIOCB *ret;\n\n\n\n    if (!drv)\n\n        return NULL;\n\n    if (bs->read_only)\n\n        return NULL;\n\n    if (sector_num == 0 && bs->boot_sector_enabled && nb_sectors > 0) {\n\n        memcpy(bs->boot_sector_data, buf, 512);\n\n    }\n\n\n\n    ret = drv->bdrv_aio_write(bs, sector_num, buf, nb_sectors, cb, opaque);\n\n\n\n    if (ret) {\n\n\t/* Update stats even though technically transfer has not happened. */\n\n\tbs->wr_bytes += (unsigned) nb_sectors * SECTOR_SIZE;\n\n\tbs->wr_ops ++;\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 4055
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nfs3svc_decode_createargs(struct svc_rqst *rqstp, __be32 *p,\n\t\t\t\t\tstruct nfsd3_createargs *args)\n{\n\tif (!(p = decode_fh(p, &args->fh))\n\t || !(p = decode_filename(p, &args->name, &args->len)))\n\t\treturn 0;\n\n\tswitch (args->createmode = ntohl(*p++)) {\n\tcase NFS3_CREATE_UNCHECKED:\n\tcase NFS3_CREATE_GUARDED:\n\t\tp = decode_sattr3(p, &args->attrs);\n\t\tbreak;\n\tcase NFS3_CREATE_EXCLUSIVE:\n\t\targs->verf = p;\n\t\tp += 2;\n\t\tbreak;\n\tdefault:\n\t\treturn 0;\n\t}\n\n\treturn xdr_argsize_check(rqstp, p);\n}",
        "output": "0",
        "idx": 6194
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int css_create_css_image(uint8_t cssid, bool default_image)\n\n{\n\n    trace_css_new_image(cssid, default_image ? \"(default)\" : \"\");\n\n    if (cssid > MAX_CSSID) {\n\n        return -EINVAL;\n\n    }\n\n    if (channel_subsys.css[cssid]) {\n\n        return -EBUSY;\n\n    }\n\n    channel_subsys.css[cssid] = g_malloc0(sizeof(CssImage));\n\n    if (default_image) {\n\n        channel_subsys.default_cssid = cssid;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4520
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t platform_mmio_read(ReadWriteHandler *handler, pcibus_t addr, int len)\n\n{\n\n    DPRINTF(\"Warning: attempted read from physical address \"\n\n            \"0x\" TARGET_FMT_plx \" in xen platform mmio space\\n\", addr);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 1495
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  const string name() override { return \"put_bucket_metadata\"; }",
        "output": "0",
        "idx": 5503
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int local_truncate(FsContext *ctx, V9fsPath *fs_path, off_t size)\n\n{\n\n    char buffer[PATH_MAX];\n\n    char *path = fs_path->data;\n\n\n\n    return truncate(rpath(ctx, path, buffer), size);\n\n}\n",
        "output": "0",
        "idx": 634
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void perf_sched_cb_dec(struct pmu *pmu)\n{\n\tstruct perf_cpu_context *cpuctx = this_cpu_ptr(pmu->pmu_cpu_context);\n\n\t--cpuctx->sched_cb_usage;\n}",
        "output": "0",
        "idx": 4129
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MagickPrivate void ConvertRGBToLCHuv(const double red,const double green,\n  const double blue,double *luma,double *chroma,double *hue)\n{\n  double\n    X,\n    Y,\n    Z;\n\n  /*\n    Convert RGB to LCHuv colorspace.\n  */\n  assert(luma != (double *) NULL);\n  assert(chroma != (double *) NULL);\n  assert(hue != (double *) NULL);\n  ConvertRGBToXYZ(red,green,blue,&X,&Y,&Z);\n  ConvertXYZToLCHuv(X,Y,Z,luma,chroma,hue);\n}",
        "output": "0",
        "idx": 1445
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_set_fixed_vector(float *out, const AMRFixed *in, float scale, int size)\n\n{\n\n    int i;\n\n\n\n    for (i=0; i < in->n; i++) {\n\n        int x   = in->x[i], repeats = !((in->no_repeat_mask >> i) & 1);\n\n        float y = in->y[i] * scale;\n\n\n\n\n        do {\n\n            out[x] += y;\n\n            y *= in->pitch_fac;\n\n            x += in->pitch_lag;\n\n        } while (x < size && repeats);\n\n    }\n\n}",
        "output": "1",
        "idx": 6171
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsCStrExtendBuf(cstr_t *pThis, size_t iMinNeeded)\n{\n\tuchar *pNewBuf;\n\tunsigned short iNewSize;\n\tDEFiRet;\n\n\t/* first compute the new size needed */\n\tif(iMinNeeded > RS_STRINGBUF_ALLOC_INCREMENT) {\n\t\t/* we allocate \"n\" ALLOC_INCREMENTs. Usually, that should\n\t\t * leave some room after the absolutely needed one. It also\n\t\t * reduces memory fragmentation. Note that all of this are\n\t\t * integer operations (very important to understand what is\n\t\t * going on)! Parenthesis are for better readibility.\n\t\t */\n\t\tiNewSize = (iMinNeeded / RS_STRINGBUF_ALLOC_INCREMENT + 1) * RS_STRINGBUF_ALLOC_INCREMENT;\n\t} else {\n\t\tiNewSize = pThis->iBufSize + RS_STRINGBUF_ALLOC_INCREMENT;\n\t}\n\tiNewSize += pThis->iBufSize; /* add current size */\n\n\t/* DEV debugging only: dbgprintf(\"extending string buffer, old %d, new %d\\n\", pThis->iBufSize, iNewSize); */\n\tCHKmalloc(pNewBuf = (uchar*) realloc(pThis->pBuf, iNewSize * sizeof(uchar)));\n\tpThis->iBufSize = iNewSize;\n\tpThis->pBuf = pNewBuf;\n\nfinalize_it:\n\tRETiRet;\n}",
        "output": "1",
        "idx": 6031
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "flatpak_proxy_client_finalize (GObject *object)\n{\n  FlatpakProxyClient *client = FLATPAK_PROXY_CLIENT (object);\n\n  client->proxy->clients = g_list_remove (client->proxy->clients, client);\n  g_clear_object (&client->proxy);\n\n  g_hash_table_destroy (client->rewrite_reply);\n  g_hash_table_destroy (client->get_owner_reply);\n  g_hash_table_destroy (client->unique_id_policy);\n\n  free_side (&client->client_side);\n  free_side (&client->bus_side);\n\n  G_OBJECT_CLASS (flatpak_proxy_client_parent_class)->finalize (object);\n}",
        "output": "1",
        "idx": 41
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "swap_pointers(char **a, char **b)\n{\n  char *t = *a;\n  *a = *b;\n  *b = t;\n}",
        "output": "0",
        "idx": 2703
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void bdrv_io_limits_disable(BlockDriverState *bs)\n\n{\n\n    bs->io_limits_enabled = false;\n\n\n\n    bdrv_start_throttled_reqs(bs);\n\n\n\n    throttle_destroy(&bs->throttle_state);\n\n}\n",
        "output": "0",
        "idx": 4930
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_always_inline void iadst4_1d(const dctcoef *in, ptrdiff_t stride,\n\n                                       dctcoef *out, int pass)\n\n{\n\n    int t0, t1, t2, t3;\n\n\n\n    t0 =  5283 * IN(0) + 15212 * IN(2) +  9929 * IN(3);\n\n    t1 =  9929 * IN(0) -  5283 * IN(2) - 15212 * IN(3);\n\n    t2 = 13377 * (IN(0) - IN(2) + IN(3));\n\n    t3 = 13377 * IN(1);\n\n\n\n    out[0] = (t0 + t3      + (1 << 13)) >> 14;\n\n    out[1] = (t1 + t3      + (1 << 13)) >> 14;\n\n    out[2] = (t2           + (1 << 13)) >> 14;\n\n    out[3] = (t0 + t1 - t3 + (1 << 13)) >> 14;\n\n}\n",
        "output": "1",
        "idx": 2857
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* dims = GetInput(context, node, kDimsTensor);\n  const TfLiteTensor* value = GetInput(context, node, kValueTensor);\n\n  // Make sure the 1st input tensor is 1-D.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(dims), 1);\n\n  // Make sure the 1st input tensor is int32 or int64.\n  const auto dtype = dims->type;\n  TF_LITE_ENSURE(context, dtype == kTfLiteInt32 || dtype == kTfLiteInt64);\n\n  // Make sure the 2nd input tensor is a scalar.\n  TF_LITE_ENSURE_EQ(context, NumDimensions(value), 0);\n\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  output->type = value->type;\n\n  if (IsConstantTensor(dims)) {\n    TF_LITE_ENSURE_OK(context, ResizeOutput(context, dims, output));\n  } else {\n    SetTensorToDynamic(output);\n  }\n  return kTfLiteOk;\n}",
        "output": "1",
        "idx": 5790
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sol_probe(AVProbeData *p)\n\n{\n\n    /* check file header */\n\n    uint16_t magic;\n\n    if (p->buf_size <= 14)\n\n        return 0;\n\n    magic=le2me_16(*((uint16_t*)p->buf));\n\n    if ((magic == 0x0B8D || magic == 0x0C0D || magic == 0x0C8D) &&\n\n        p->buf[2] == 'S' && p->buf[3] == 'O' &&\n\n        p->buf[4] == 'L' && p->buf[5] == 0)\n\n        return AVPROBE_SCORE_MAX;\n\n    else\n\n        return 0;\n\n}\n",
        "output": "0",
        "idx": 5657
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void generate_offset_lut(DiracGolombLUT *lut, int off)\n\n{\n\n    int idx;\n\n    for (idx = 0; idx < LUT_SIZE; idx++) {\n\n        DiracGolombLUT *l = &lut[idx];\n\n\n\n        INIT_RESIDUE(res);\n\n        SET_RESIDUE(res, idx, LUT_BITS);\n\n\n\n        l->preamble      = CONVERT_TO_RESIDUE(res >> (RSIZE_BITS - off), off);\n\n        l->preamble_bits = off;\n\n        l->sign = ((l->preamble >> (RSIZE_BITS - l->preamble_bits)) & 1) ? -1 : +1;\n\n\n\n        search_for_golomb(l, res << off, LUT_BITS - off);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2864
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "SCSIDevice *scsi_bus_legacy_add_drive(SCSIBus *bus, DriveInfo *dinfo, int unit)\n\n{\n\n    const char *driver;\n\n    DeviceState *dev;\n\n\n\n    driver = bdrv_is_sg(dinfo->bdrv) ? \"scsi-generic\" : \"scsi-disk\";\n\n    dev = qdev_create(&bus->qbus, driver);\n\n    qdev_prop_set_uint32(dev, \"scsi-id\", unit);\n\n    qdev_prop_set_drive(dev, \"drive\", dinfo);\n\n    if (qdev_init(dev) < 0)\n\n        return NULL;\n\n    return DO_UPCAST(SCSIDevice, qdev, dev);\n\n}\n",
        "output": "0",
        "idx": 2502
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "slhc_remember(struct slcompress *comp, unsigned char *icp, int isize)\n{\n  printk(KERN_DEBUG \"Called IP function on non IP-system: slhc_remember\");\n  return -EINVAL;\n}",
        "output": "0",
        "idx": 5005
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_snapshot_goto(BlockDriverState *bs,\n\n                       const char *snapshot_id)\n\n{\n\n    BlockDriver *drv = bs->drv;\n\n    int ret, open_ret;\n\n\n\n    if (!drv)\n\n        return -ENOMEDIUM;\n\n    if (drv->bdrv_snapshot_goto)\n\n        return drv->bdrv_snapshot_goto(bs, snapshot_id);\n\n\n\n    if (bs->file) {\n\n        drv->bdrv_close(bs);\n\n        ret = bdrv_snapshot_goto(bs->file, snapshot_id);\n\n        open_ret = drv->bdrv_open(bs, NULL, bs->open_flags);\n\n        if (open_ret < 0) {\n\n            bdrv_delete(bs->file);\n\n            bs->drv = NULL;\n\n            return open_ret;\n\n        }\n\n        return ret;\n\n    }\n\n\n\n    return -ENOTSUP;\n\n}\n",
        "output": "0",
        "idx": 2386
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_new_filter_primitive_offset (void)\n{\n    RsvgFilterPrimitiveOffset *filter;\n    filter = g_new (RsvgFilterPrimitiveOffset, 1);\n    _rsvg_node_init (&filter->super.super);\n    filter->super.in = g_string_new (\"none\");\n    filter->super.result = g_string_new (\"none\");\n    filter->super.x.factor = filter->super.y.factor = filter->super.width.factor =\n        filter->super.height.factor = 'n';\n    filter->dy = _rsvg_css_parse_length (\"0\");\n    filter->dx = _rsvg_css_parse_length (\"0\");\n    filter->super.render = &rsvg_filter_primitive_offset_render;\n    filter->super.super.free = &rsvg_filter_primitive_offset_free;\n    filter->super.super.set_atts = rsvg_filter_primitive_offset_set_atts;\n    return (RsvgNode *) filter;\n}",
        "output": "1",
        "idx": 5896
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool FNAME(is_last_gpte)(struct kvm_mmu *mmu,\n\t\t\t\t       unsigned int level, unsigned int gpte)\n{\n\t/*\n\t * For EPT and PAE paging (both variants), bit 7 is either reserved at\n\t * all level or indicates a huge page (ignoring CR3/EPTP).  In either\n\t * case, bit 7 being set terminates the walk.\n\t */\n#if PTTYPE == 32\n\t/*\n\t * 32-bit paging requires special handling because bit 7 is ignored if\n\t * CR4.PSE=0, not reserved.  Clear bit 7 in the gpte if the level is\n\t * greater than the last level for which bit 7 is the PAGE_SIZE bit.\n\t *\n\t * The RHS has bit 7 set iff level < (2 + PSE).  If it is clear, bit 7\n\t * is not reserved and does not indicate a large page at this level,\n\t * so clear PT_PAGE_SIZE_MASK in gpte if that is the case.\n\t */\n\tgpte &= level - (PT32_ROOT_LEVEL + mmu->mmu_role.ext.cr4_pse);\n#endif\n\t/*\n\t * PG_LEVEL_4K always terminates.  The RHS has bit 7 set\n\t * iff level <= PG_LEVEL_4K, which for our purpose means\n\t * level == PG_LEVEL_4K; set PT_PAGE_SIZE_MASK in gpte then.\n\t */\n\tgpte |= level - PG_LEVEL_4K - 1;\n\n\treturn gpte & PT_PAGE_SIZE_MASK;\n}",
        "output": "0",
        "idx": 4896
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void RENAME(lumRangeFromJpeg)(int16_t *dst, int width)\n\n{\n\n    int i;\n\n    for (i = 0; i < width; i++)\n\n        dst[i] = (dst[i]*14071 + 33561947)>>14;\n\n}\n",
        "output": "0",
        "idx": 5816
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPM2B_SENSITIVE_DATA_Marshal(TPM2B_SENSITIVE_DATA *source, BYTE **buffer, INT32 *size)\n{\n    UINT16 written = 0;\n    written += TPM2B_Marshal(&source->b, buffer, size);\n    return written;\n}",
        "output": "1",
        "idx": 789
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "FILE *fdopen_tempfile(struct tempfile *tempfile, const char *mode)\n{\n\tif (!tempfile->active)\n\t\tdie(\"BUG: fdopen_tempfile() called for inactive object\");\n\tif (tempfile->fp)\n\t\tdie(\"BUG: fdopen_tempfile() called for open object\");\n\n\ttempfile->fp = fdopen(tempfile->fd, mode);\n\treturn tempfile->fp;\n}",
        "output": "0",
        "idx": 4436
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int tmp105_tx(I2CSlave *i2c, uint8_t data)\n\n{\n\n    TMP105State *s = (TMP105State *) i2c;\n\n\n\n    if (!s->len ++)\n\n        s->pointer = data;\n\n    else {\n\n        if (s->len <= 2)\n\n            s->buf[s->len - 1] = data;\n\n        tmp105_write(s);\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 3089
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int read_channels(AVFilterContext *ctx, int channels, uint8_t *item_str, int *nb, double **c, double **cache)\n\n{\n\n    char *p, *arg, *old_str, *prev_arg = NULL, *saveptr = NULL;\n\n    int i, ret;\n\n\n\n    p = old_str = av_strdup(item_str);\n\n    if (!p)\n\n        return AVERROR(ENOMEM);\n\n    for (i = 0; i < channels; i++) {\n\n        if (!(arg = av_strtok(p, \"|\", &saveptr)))\n\n            arg = prev_arg;\n\n\n\n        p = NULL;\n\n        count_coefficients(arg, &nb[i]);\n\n        cache[i] = av_calloc(nb[i], sizeof(cache[i]));\n\n        c[i] = av_calloc(nb[i], sizeof(c[i]));\n\n        if (!c[i] || !cache[i])\n\n            return AVERROR(ENOMEM);\n\n\n\n        ret = read_coefficients(ctx, arg, nb[i], c[i]);\n\n        if (ret < 0)\n\n            return ret;\n\n        prev_arg = arg;\n\n    }\n\n\n\n    av_freep(&old_str);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 864
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Box *encs_box_new()\n{\n\tISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_ENCS);\n\tgf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);\n\ttmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;\n\treturn (GF_Box *)tmp;\n}",
        "output": "1",
        "idx": 4277
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void hmp_pci_del(Monitor *mon, const QDict *qdict)\n\n{\n\n    pci_device_hot_remove(mon, qdict_get_str(qdict, \"pci_addr\"));\n\n}\n",
        "output": "1",
        "idx": 1465
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ovs_flow_cmd_dump(struct sk_buff *skb, struct netlink_callback *cb)\n{\n\tstruct ovs_header *ovs_header = genlmsg_data(nlmsg_data(cb->nlh));\n\tstruct table_instance *ti;\n\tstruct datapath *dp;\n\n\trcu_read_lock();\n\tdp = get_dp(sock_net(skb->sk), ovs_header->dp_ifindex);\n\tif (!dp) {\n\t\trcu_read_unlock();\n\t\treturn -ENODEV;\n\t}\n\n\tti = rcu_dereference(dp->table.ti);\n\tfor (;;) {\n\t\tstruct sw_flow *flow;\n\t\tu32 bucket, obj;\n\n\t\tbucket = cb->args[0];\n\t\tobj = cb->args[1];\n\t\tflow = ovs_flow_tbl_dump_next(ti, &bucket, &obj);\n\t\tif (!flow)\n\t\t\tbreak;\n\n\t\tif (ovs_flow_cmd_fill_info(flow, dp, skb,\n\t\t\t\t\t   NETLINK_CB(cb->skb).portid,\n\t\t\t\t\t   cb->nlh->nlmsg_seq, NLM_F_MULTI,\n\t\t\t\t\t   OVS_FLOW_CMD_NEW) < 0)\n\t\t\tbreak;\n\n\t\tcb->args[0] = bucket;\n\t\tcb->args[1] = obj;\n\t}\n\trcu_read_unlock();\n\treturn skb->len;\n}",
        "output": "0",
        "idx": 1406
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void smb_vfs_call_disconnect(struct vfs_handle_struct *handle)\n{\n\tVFS_FIND(disconnect);\n\thandle->fns->disconnect(handle);\n}",
        "output": "0",
        "idx": 2792
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cib_timeout_handler(gpointer data)\n{\n    struct timer_rec_s *timer = data;\n\n    timer_expired = TRUE;\n    crm_err(\"Call %d timed out after %ds\", timer->call_id, timer->timeout);\n\n    /* Always return TRUE, never remove the handler\n     * We do that after the while-loop in cib_native_perform_op()\n     */\n    return TRUE;\n}",
        "output": "1",
        "idx": 1498
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hci_uart_tty_open(struct tty_struct *tty)\n{\n\tstruct hci_uart *hu;\n\n\tBT_DBG(\"tty %p\", tty);\n\n\t/* Error if the tty has no write op instead of leaving an exploitable\n\t * hole\n\t */\n\tif (tty->ops->write == NULL)\n\t\treturn -EOPNOTSUPP;\n\n\thu = kzalloc(sizeof(struct hci_uart), GFP_KERNEL);\n\tif (!hu) {\n\t\tBT_ERR(\"Can't allocate control structure\");\n\t\treturn -ENFILE;\n\t}\n\n\ttty->disc_data = hu;\n\thu->tty = tty;\n\ttty->receive_room = 65536;\n\n\t/* disable alignment support by default */\n\thu->alignment = 1;\n\thu->padding = 0;\n\n\tINIT_WORK(&hu->init_ready, hci_uart_init_work);\n\tINIT_WORK(&hu->write_work, hci_uart_write_work);\n\n\tpercpu_init_rwsem(&hu->proto_lock);\n\n\t/* Flush any pending characters in the driver */\n\ttty_driver_flush_buffer(tty);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 2362
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hash_recvmsg(struct kiocb *unused, struct socket *sock,\n\t\t\tstruct msghdr *msg, size_t len, int flags)\n{\n\tstruct sock *sk = sock->sk;\n\tstruct alg_sock *ask = alg_sk(sk);\n\tstruct hash_ctx *ctx = ask->private;\n\tunsigned ds = crypto_ahash_digestsize(crypto_ahash_reqtfm(&ctx->req));\n\tint err;\n\n\tif (len > ds)\n\t\tlen = ds;\n\telse if (len < ds)\n\t\tmsg->msg_flags |= MSG_TRUNC;\n\n\tlock_sock(sk);\n\tif (ctx->more) {\n\t\tctx->more = 0;\n\t\tahash_request_set_crypt(&ctx->req, NULL, ctx->result, 0);\n\t\terr = af_alg_wait_for_completion(crypto_ahash_final(&ctx->req),\n\t\t\t\t\t\t &ctx->completion);\n\t\tif (err)\n\t\t\tgoto unlock;\n\t}\n\n\terr = memcpy_toiovec(msg->msg_iov, ctx->result, len);\n\nunlock:\n\trelease_sock(sk);\n\n\treturn err ?: len;\n}",
        "output": "1",
        "idx": 5920
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *bson_realloc( void *ptr, int size ) {\n    void *p;\n    p = bson_realloc_func( ptr, size );\n    bson_fatal_msg( !!p, \"realloc() failed\" );\n    return p;\n}",
        "output": "1",
        "idx": 1923
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "sraSpanRemove(sraSpan *span) {\n  span->_prev->_next = span->_next;\n  span->_next->_prev = span->_prev;\n}",
        "output": "1",
        "idx": 4812
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void sigill_handler (int sig)\n\n{\n\n    if (!canjump) {\n\n        signal (sig, SIG_DFL);\n\n        raise (sig);\n\n    }\n\n\n\n    canjump = 0;\n\n    siglongjmp (jmpbuf, 1);\n\n}\n",
        "output": "0",
        "idx": 2585
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int send_data_callback(nghttp2_session *session, nghttp2_frame *frame,\n                              const uint8_t *framehd, size_t length,\n                              nghttp2_data_source *source, void *user_data) {\n  accumulator *acc = ((my_user_data *)user_data)->acc;\n  (void)session;\n  (void)source;\n\n  memcpy(acc->buf + acc->length, framehd, NGHTTP2_FRAME_HDLEN);\n  acc->length += NGHTTP2_FRAME_HDLEN;\n\n  if (frame->data.padlen) {\n    *(acc->buf + acc->length++) = (uint8_t)(frame->data.padlen - 1);\n  }\n\n  acc->length += length;\n\n  if (frame->data.padlen) {\n    acc->length += frame->data.padlen - 1;\n  }\n\n  return 0;\n}",
        "output": "0",
        "idx": 3335
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void ieee80211_destroy_assoc_data(struct ieee80211_sub_if_data *sdata,\n\t\t\t\t\t bool assoc, bool abandon)\n{\n\tstruct ieee80211_mgd_assoc_data *assoc_data = sdata->u.mgd.assoc_data;\n\n\tsdata_assert_lock(sdata);\n\n\tif (!assoc) {\n\t\t/*\n\t\t * we are not associated yet, the only timer that could be\n\t\t * running is the timeout for the association response which\n\t\t * which is not relevant anymore.\n\t\t */\n\t\tdel_timer_sync(&sdata->u.mgd.timer);\n\t\tsta_info_destroy_addr(sdata, assoc_data->bss->bssid);\n\n\t\teth_zero_addr(sdata->u.mgd.bssid);\n\t\tieee80211_bss_info_change_notify(sdata, BSS_CHANGED_BSSID);\n\t\tsdata->u.mgd.flags = 0;\n\t\tsdata->vif.mu_mimo_owner = false;\n\n\t\tmutex_lock(&sdata->local->mtx);\n\t\tieee80211_vif_release_channel(sdata);\n\t\tmutex_unlock(&sdata->local->mtx);\n\n\t\tif (abandon)\n\t\t\tcfg80211_abandon_assoc(sdata->dev, assoc_data->bss);\n\t}\n\n\tkfree(assoc_data);\n\tsdata->u.mgd.assoc_data = NULL;\n}",
        "output": "0",
        "idx": 4197
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cirrus_bitblt_common_patterncopy(CirrusVGAState * s,\n\n\t\t\t\t\t    const uint8_t * src)\n\n{\n\n    uint8_t *dst;\n\n\n\n    dst = s->vga.vram_ptr + (s->cirrus_blt_dstaddr & s->cirrus_addr_mask);\n\n\n\n    if (BLTUNSAFE(s))\n\n        return 0;\n\n\n\n    (*s->cirrus_rop) (s, dst, src,\n\n                      s->cirrus_blt_dstpitch, 0,\n\n                      s->cirrus_blt_width, s->cirrus_blt_height);\n\n    cirrus_invalidate_region(s, s->cirrus_blt_dstaddr,\n\n                             s->cirrus_blt_dstpitch, s->cirrus_blt_width,\n\n                             s->cirrus_blt_height);\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 937
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zfs_ace_v0_set_flags(void *acep, uint16_t flags)\n{\n\t((zfs_oldace_t *)acep)->z_flags = flags;\n}",
        "output": "0",
        "idx": 3723
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int php_stream_temp_seek(php_stream *stream, off_t offset, int whence, off_t *newoffs TSRMLS_DC)\n{\n\tphp_stream_temp_data *ts = (php_stream_temp_data*)stream->abstract;\n\tint ret;\n\n\tassert(ts != NULL);\n\n\tif (!ts->innerstream) {\n\t\t*newoffs = -1;\n\t\treturn -1;\n\t}\n\tret = php_stream_seek(ts->innerstream, offset, whence);\n\t*newoffs = php_stream_tell(ts->innerstream);\n\tstream->eof = ts->innerstream->eof;\n\t\n\treturn ret;\n}",
        "output": "1",
        "idx": 5123
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    int BSONTool::run() {\n        _objcheck = hasParam( \"objcheck\" );\n\n        if ( hasParam( \"filter\" ) )\n            _matcher.reset( new Matcher( fromjson( getParam( \"filter\" ) ) ) );\n\n        return doRun();\n    }",
        "output": "1",
        "idx": 1135
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *_zend_shared_memdup(void *source, size_t size, zend_bool free_source)\n{\n\tvoid *old_p, *retval;\n\n\tif ((old_p = zend_hash_index_find_ptr(&xlat_table, (zend_ulong)source)) != NULL) {\n\t\t/* we already duplicated this pointer */\n\t\treturn old_p;\n\t}\n\tretval = ZCG(mem);\n\tZCG(mem) = (void*)(((char*)ZCG(mem)) + ZEND_ALIGNED_SIZE(size));\n\tmemcpy(retval, source, size);\n\tif (free_source) {\n\t\tefree(source);\n\t}\n\tzend_shared_alloc_register_xlat_entry(source, retval);\n\treturn retval;\n}",
        "output": "1",
        "idx": 931
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gss_complete_auth_token (OM_uint32 *minor_status,\n\t                 const gss_ctx_id_t context_handle,\n\t                 gss_buffer_t input_message_buffer)\n{\n    OM_uint32\t\tstatus;\n    gss_union_ctx_id_t\tctx;\n    gss_mechanism\tmech;\n\n    if (context_handle == GSS_C_NO_CONTEXT)\n\treturn GSS_S_NO_CONTEXT;\n\n    /*\n     * select the approprate underlying mechanism routine and\n     * call it.\n     */\n\n    ctx = (gss_union_ctx_id_t) context_handle;\n    mech = gssint_get_mechanism (ctx->mech_type);\n\n    if (mech != NULL) {\n\tif (mech->gss_complete_auth_token != NULL) {\n\t    status = mech->gss_complete_auth_token(minor_status,\n\t\t\t\t\t\t   ctx->internal_ctx_id,\n\t\t\t\t\t\t   input_message_buffer);\n\t    if (status != GSS_S_COMPLETE)\n\t\tmap_error(minor_status, mech);\n\t} else\n\t    status = GSS_S_COMPLETE;\n    } else\n\tstatus = GSS_S_BAD_MECH;\n\n    return status;\n}",
        "output": "1",
        "idx": 4005
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void chap_binaryhex_to_asciihex(char *dst, char *src, int src_len)\n{\n\tint i;\n\n\tfor (i = 0; i < src_len; i++) {\n\t\tsprintf(&dst[i*2], \"%02x\", (int) src[i] & 0xff);\n\t}\n}",
        "output": "1",
        "idx": 1347
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPM_GENERATED_Unmarshal(TPM_GENERATED *target, BYTE **buffer, INT32 *size)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n\n    if (rc == TPM_RC_SUCCESS) {\n\trc = UINT32_Unmarshal(target, buffer, size);  \n    }\n    if (rc == TPM_RC_SUCCESS) {\n\tif (*target != TPM_GENERATED_VALUE) {\n\t    rc = TPM_RC_VALUE;\n\t}\n    }\n    return rc;\n}",
        "output": "1",
        "idx": 4070
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void gen_movcf_d (DisasContext *ctx, int fs, int fd, int cc, int tf)\n\n{\n\n    int cond;\n\n    TCGv_i32 t0 = tcg_temp_new_i32();\n\n    TCGv_i64 fp0;\n\n    int l1 = gen_new_label();\n\n\n\n    if (tf)\n\n        cond = TCG_COND_EQ;\n\n    else\n\n        cond = TCG_COND_NE;\n\n\n\n    tcg_gen_andi_i32(t0, fpu_fcr31, 1 << get_fp_bit(cc));\n\n    tcg_gen_brcondi_i32(cond, t0, 0, l1);\n\n    tcg_temp_free_i32(t0);\n\n    fp0 = tcg_temp_new_i64();\n\n    gen_load_fpr64(ctx, fp0, fs);\n\n    gen_store_fpr64(ctx, fp0, fd);\n\n    tcg_temp_free_i64(fp0);\n\n    gen_set_label(l1);\n\n}\n",
        "output": "0",
        "idx": 5187
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nfsd4_encode_getfh(struct nfsd4_compoundres *resp, __be32 nfserr, struct svc_fh **fhpp)\n{\n\tstruct xdr_stream *xdr = &resp->xdr;\n\tstruct svc_fh *fhp = *fhpp;\n\tunsigned int len;\n\t__be32 *p;\n\n\tif (!nfserr) {\n\t\tlen = fhp->fh_handle.fh_size;\n\t\tp = xdr_reserve_space(xdr, len + 4);\n\t\tif (!p)\n\t\t\treturn nfserr_resource;\n\t\tp = xdr_encode_opaque(p, &fhp->fh_handle.fh_base, len);\n\t}\n\treturn nfserr;\n}",
        "output": "0",
        "idx": 3981
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void perf_event_for_each(struct perf_event *event,\n\t\t\t\t  void (*func)(struct perf_event *))\n{\n\tstruct perf_event_context *ctx = event->ctx;\n\tstruct perf_event *sibling;\n\n\tWARN_ON_ONCE(ctx->parent_ctx);\n\tmutex_lock(&ctx->mutex);\n\tevent = event->group_leader;\n\n\tperf_event_for_each_child(event, func);\n\tlist_for_each_entry(sibling, &event->sibling_list, group_entry)\n\t\tperf_event_for_each_child(sibling, func);\n\tmutex_unlock(&ctx->mutex);\n}",
        "output": "1",
        "idx": 1921
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool Cipher::neededFeaturesAvailable()\n{\n    QCA::Initializer init;\n\n    if (QCA::isSupported(\"blowfish-ecb\") && QCA::isSupported(\"blowfish-cbc\") && QCA::isSupported(\"dh\"))\n        return true;\n\n    return false;\n}",
        "output": "0",
        "idx": 2205
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void start_frame_overlay(AVFilterLink *inlink, AVFilterBufferRef *inpicref)\n\n{\n\n    AVFilterContext *ctx = inlink->dst;\n\n    OverlayContext *over = ctx->priv;\n\n\n\n    inpicref->pts = av_rescale_q(inpicref->pts, ctx->inputs[OVERLAY]->time_base,\n\n                                 ctx->outputs[0]->time_base);\n\n\n\n    if (!over->overpicref) over->overpicref      = inpicref;\n\n    else                   over->overpicref_next = inpicref;\n\n}\n",
        "output": "1",
        "idx": 1473
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int bdrv_read_unthrottled(BlockDriverState *bs, int64_t sector_num,\n                          uint8_t *buf, int nb_sectors)\n{\n    bool enabled;\n    int ret;\n\n    enabled = bs->io_limits_enabled;\n    bs->io_limits_enabled = false;\n    ret = bdrv_read(bs, sector_num, buf, nb_sectors);\n    bs->io_limits_enabled = enabled;\n    return ret;\n}",
        "output": "0",
        "idx": 5679
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t pci_unin_main_config_readl (void *opaque,\n\n                                            target_phys_addr_t addr)\n\n{\n\n    UNINState *s = opaque;\n\n    uint32_t val;\n\n\n\n    val = s->config_reg;\n\n#ifdef TARGET_WORDS_BIGENDIAN\n\n    val = bswap32(val);\n\n#endif\n\n    UNIN_DPRINTF(\"config_readl addr \" TARGET_FMT_plx \" val %x\\n\", addr, val);\n\n\n\n    return val;\n\n}\n",
        "output": "1",
        "idx": 804
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool object_is_type(Object *obj, const char *typename)\n\n{\n\n    TypeImpl *target_type = type_get_by_name(typename);\n\n    TypeImpl *type = obj->class->type;\n\n    GSList *i;\n\n\n\n    /* Check if typename is a direct ancestor of type */\n\n    while (type) {\n\n        if (type == target_type) {\n\n            return true;\n\n        }\n\n\n\n        type = type_get_parent(type);\n\n    }\n\n\n\n    /* Check if obj has an interface of typename */\n\n    for (i = obj->interfaces; i; i = i->next) {\n\n        Interface *iface = i->data;\n\n\n\n        if (object_is_type(OBJECT(iface), typename)) {\n\n            return true;\n\n        }\n\n    }\n\n\n\n    return false;\n\n}\n",
        "output": "0",
        "idx": 806
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* indices = GetInput(context, node, kIndicesTensor);\n  const TfLiteTensor* values = GetInput(context, node, kValueInputTensor);\n\n  switch (values->type) {\n    case kTfLiteFloat32:\n      return EvalForIndexType<float>(context, node, indices);\n    case kTfLiteInt32:\n      return EvalForIndexType<int32_t>(context, node, indices);\n    case kTfLiteInt64:\n      return EvalForIndexType<int64_t>(context, node, indices);\n    case kTfLiteInt8:\n      return EvalForIndexType<int8_t>(context, node, indices);\n    case kTfLiteUInt8:\n      return EvalForIndexType<uint8_t>(context, node, indices);\n    default:\n      TF_LITE_KERNEL_LOG(\n          context,\n          \"Value type %s is currently not supported by sparse to dense.\",\n          TfLiteTypeGetName(values->type));\n      return kTfLiteError;\n  }\n}",
        "output": "1",
        "idx": 85
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_mutex_unlock_iothread(void) {}\n",
        "output": "1",
        "idx": 3727
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "horDiff16(TIFF* tif, uint8* cp0, tmsize_t cc)\n{\n\tTIFFPredictorState* sp = PredictorState(tif);\n\ttmsize_t stride = sp->stride;\n\tuint16 *wp = (uint16*) cp0;\n\ttmsize_t wc = cc/2;\n\n\tassert((cc%(2*stride))==0);\n\n\tif (wc > stride) {\n\t\twc -= stride;\n\t\twp += wc - 1;\n\t\tdo {\n\t\t\tREPEAT4(stride, wp[stride] = (uint16)(((unsigned int)wp[stride] - (unsigned int)wp[0]) & 0xffff); wp--)\n\t\t\twc -= stride;\n\t\t} while (wc > 0);\n\t}\n}",
        "output": "1",
        "idx": 2713
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qmp_input_stack_object_free(StackObject *tos)\n\n{\n\n    if (tos->h) {\n\n        g_hash_table_unref(tos->h);\n\n    }\n\n\n\n    g_free(tos);\n\n}\n",
        "output": "0",
        "idx": 6024
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void test_qemu_strtol_whitespace(void)\n\n{\n\n    const char *str = \"  \\t  \";\n\n    char f = 'X';\n\n    const char *endptr = &f;\n\n    long res = 999;\n\n    int err;\n\n\n\n    err = qemu_strtol(str, &endptr, 0, &res);\n\n\n\n    g_assert_cmpint(err, ==, 0);\n\n    g_assert_cmpint(res, ==, 0);\n\n    g_assert(endptr == str);\n\n}\n",
        "output": "1",
        "idx": 3238
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int hci_sock_getname(struct socket *sock, struct sockaddr *addr,\n\t\t\t    int *addr_len, int peer)\n{\n\tstruct sockaddr_hci *haddr = (struct sockaddr_hci *) addr;\n\tstruct sock *sk = sock->sk;\n\tstruct hci_dev *hdev = hci_pi(sk)->hdev;\n\n\tBT_DBG(\"sock %p sk %p\", sock, sk);\n\n\tif (!hdev)\n\t\treturn -EBADFD;\n\n\tlock_sock(sk);\n\n\t*addr_len = sizeof(*haddr);\n\thaddr->hci_family = AF_BLUETOOTH;\n\thaddr->hci_dev    = hdev->id;\n\n\trelease_sock(sk);\n\treturn 0;\n}",
        "output": "1",
        "idx": 589
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int unit_reload(Unit *u) {\n        UnitActiveState state;\n        Unit *following;\n\n        assert(u);\n\n        if (u->load_state != UNIT_LOADED)\n                return -EINVAL;\n\n        if (!unit_can_reload(u))\n                return -EBADR;\n\n        state = unit_active_state(u);\n        if (state == UNIT_RELOADING)\n                return -EALREADY;\n\n        if (state != UNIT_ACTIVE) {\n                log_warning_unit(u->id, \"Unit %s cannot be reloaded because it is inactive.\",\n                                 u->id);\n                return -ENOEXEC;\n        }\n\n        following = unit_following(u);\n        if (following) {\n                log_debug_unit(u->id, \"Redirecting reload request from %s to %s.\",\n                               u->id, following->id);\n                return unit_reload(following);\n        }\n\n        unit_status_log_starting_stopping_reloading(u, JOB_RELOAD);\n\n        unit_add_to_dbus_queue(u);\n        return UNIT_VTABLE(u)->reload(u);\n}",
        "output": "0",
        "idx": 925
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int local_statfs(FsContext *s, V9fsPath *fs_path, struct statfs *stbuf)\n\n{\n\n    char buffer[PATH_MAX];\n\n    char *path = fs_path->data;\n\n\n\n    return statfs(rpath(s, path, buffer), stbuf);\n\n}\n",
        "output": "0",
        "idx": 468
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int fbytes(unsigned char *buf, int num)\n{\n    int ret;\n    BIGNUM *tmp = NULL;\n\n    if (fbytes_counter >= 8)\n        return 0;\n    tmp = BN_new();\n    if (!tmp)\n        return 0;\n    if (!BN_dec2bn(&tmp, numbers[fbytes_counter])) {\n        BN_free(tmp);\n        return 0;\n    }\n    fbytes_counter++;\n    if (num != BN_num_bytes(tmp) || !BN_bn2bin(tmp, buf))\n        ret = 0;\n    else\n        ret = 1;\n    if (tmp)\n        BN_free(tmp);\n    return ret;\n}",
        "output": "1",
        "idx": 1362
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void FUNCC(pred16x16_vertical)(uint8_t *_src, int _stride){\n\n    int i;\n\n    pixel *src = (pixel*)_src;\n\n    int stride = _stride/sizeof(pixel);\n\n    const pixel4 a = ((pixel4*)(src-stride))[0];\n\n    const pixel4 b = ((pixel4*)(src-stride))[1];\n\n    const pixel4 c = ((pixel4*)(src-stride))[2];\n\n    const pixel4 d = ((pixel4*)(src-stride))[3];\n\n\n\n    for(i=0; i<16; i++){\n\n        ((pixel4*)(src+i*stride))[0] = a;\n\n        ((pixel4*)(src+i*stride))[1] = b;\n\n        ((pixel4*)(src+i*stride))[2] = c;\n\n        ((pixel4*)(src+i*stride))[3] = d;\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2675
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "floatx80 floatx80_scalbn( floatx80 a, int n STATUS_PARAM )\n\n{\n\n    flag aSign;\n\n    int16 aExp;\n\n    uint64_t aSig;\n\n\n\n    aSig = extractFloatx80Frac( a );\n\n    aExp = extractFloatx80Exp( a );\n\n    aSign = extractFloatx80Sign( a );\n\n\n\n    if ( aExp == 0x7FF ) {\n\n        return a;\n\n    }\n\n    if (aExp == 0 && aSig == 0)\n\n        return a;\n\n\n\n    aExp += n;\n\n    return normalizeRoundAndPackFloatx80( STATUS(floatx80_rounding_precision),\n\n                                          aSign, aExp, aSig, 0 STATUS_VAR );\n\n}\n",
        "output": "1",
        "idx": 5143
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int mpeg_mux_end(AVFormatContext *ctx)\n\n{\n\n    StreamInfo *stream;\n\n    int i;\n\n\n\n    /* flush each packet */\n\n    for(i=0;i<ctx->nb_streams;i++) {\n\n        stream = ctx->streams[i]->priv_data;\n\n        if (stream->buffer_ptr > 0) {\n\n            if (i == (ctx->nb_streams - 1)) \n\n                flush_packet(ctx, i, 1);\n\n            else\n\n                flush_packet(ctx, i, 0);\n\n        }\n\n    }\n\n\n\n    /* write the end header */\n\n    //put_be32(&ctx->pb, ISO_11172_END_CODE);\n\n    //put_flush_packet(&ctx->pb);\n\n\n\n    for(i=0;i<ctx->nb_streams;i++)\n\n        av_freep(&ctx->streams[i]->priv_data);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 797
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct omap_tipb_bridge_s *omap_tipb_bridge_init(\n\n    MemoryRegion *memory, target_phys_addr_t base,\n\n    qemu_irq abort_irq, omap_clk clk)\n\n{\n\n    struct omap_tipb_bridge_s *s = (struct omap_tipb_bridge_s *)\n\n            g_malloc0(sizeof(struct omap_tipb_bridge_s));\n\n\n\n    s->abort = abort_irq;\n\n    omap_tipb_bridge_reset(s);\n\n\n\n    memory_region_init_io(&s->iomem, &omap_tipb_bridge_ops, s,\n\n                          \"omap-tipb-bridge\", 0x100);\n\n    memory_region_add_subregion(memory, base, &s->iomem);\n\n\n\n    return s;\n\n}\n",
        "output": "0",
        "idx": 5192
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int do_recv_NPStream(rpc_message_t *message, void *p_value)\n{\n  int error;\n  uint32_t stream_id;\n\n  if ((error = rpc_message_recv_uint32(message, &stream_id)) < 0)\n\treturn error;\n\n  NPW_StreamInstance *stream = id_lookup(stream_id);\n  *((NPStream **)p_value) = stream ? stream->stream : NULL;\n  return RPC_ERROR_NO_ERROR;\n}",
        "output": "0",
        "idx": 708
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fsmMkfile(rpmfi fi, const char *dest, rpmfiles files,\n\t\t     rpmpsm psm, int nodigest, int *setmeta,\n\t\t     int * firsthardlink)\n{\n    int rc = 0;\n    int numHardlinks = rpmfiFNlink(fi);\n\n    if (numHardlinks > 1) {\n\t/* Create first hardlinked file empty */\n\tif (*firsthardlink < 0) {\n\t    *firsthardlink = rpmfiFX(fi);\n\t    rc = expandRegular(fi, dest, psm, 1, nodigest, 1);\n\t} else {\n\t    /* Create hard links for others */\n\t    char *fn = rpmfilesFN(files, *firsthardlink);\n\t    rc = link(fn, dest);\n\t    if (rc < 0) {\n\t\trc = RPMERR_LINK_FAILED;\n\t    }\n\t    free(fn);\n\t}\n    }\n    /* Write normal files or fill the last hardlinked (already\n       existing) file with content */\n    if (numHardlinks<=1) {\n\tif (!rc)\n\t    rc = expandRegular(fi, dest, psm, 1, nodigest, 0);\n    } else if (rpmfiArchiveHasContent(fi)) {\n\tif (!rc)\n\t    rc = expandRegular(fi, dest, psm, 0, nodigest, 0);\n\t*firsthardlink = -1;\n    } else {\n\t*setmeta = 0;\n    }\n\n    return rc;\n}",
        "output": "0",
        "idx": 2047
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteRegistration* Register_QUANTIZE() { return Register_QUANTIZE_OPT(); }",
        "output": "0",
        "idx": 6025
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "format_rfc1123_time(char *buf, time_t t)\n{\n  struct tm tm;\n\n  tor_gmtime_r(&t, &tm);\n\n  strftime(buf, RFC1123_TIME_LEN+1, \"___, %d ___ %Y %H:%M:%S GMT\", &tm);\n  tor_assert(tm.tm_wday >= 0);\n  tor_assert(tm.tm_wday <= 6);\n  memcpy(buf, WEEKDAY_NAMES[tm.tm_wday], 3);\n  tor_assert(tm.tm_mon >= 0);\n  tor_assert(tm.tm_mon <= 11);\n  memcpy(buf+8, MONTH_NAMES[tm.tm_mon], 3);\n}",
        "output": "0",
        "idx": 1488
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "    difference_type operator-(const const_iterator &rhs) const {\n      if (charPtr_) {\n        return charPtr_ - rhs.charPtr_;\n      }\n      return char16Ptr_ - rhs.char16Ptr_;\n    }",
        "output": "0",
        "idx": 1918
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ppc_hash64_set_external_hpt(PowerPCCPU *cpu, void *hpt, int shift,\n\n                                 Error **errp)\n\n{\n\n    CPUPPCState *env = &cpu->env;\n\n    Error *local_err = NULL;\n\n\n\n    cpu_synchronize_state(CPU(cpu));\n\n\n\n    env->external_htab = hpt;\n\n    ppc_hash64_set_sdr1(cpu, (target_ulong)(uintptr_t)hpt | (shift - 18),\n\n                        &local_err);\n\n    if (local_err) {\n\n        error_propagate(errp, local_err);\n\n        return;\n\n    }\n\n\n\n    /* Not strictly necessary, but makes it clearer that an external\n\n     * htab is in use when debugging */\n\n    env->htab_base = -1;\n\n\n\n    if (kvm_enabled()) {\n\n        if (kvmppc_put_books_sregs(cpu) < 0) {\n\n            error_setg(errp, \"Unable to update SDR1 in KVM\");\n\n        }\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5371
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void Curl_cookie_freelist(struct Cookie *co, bool cookiestoo)\n{\n  struct Cookie *next;\n  while(co) {\n    next = co->next;\n    if(cookiestoo)\n      freecookie(co);\n    else\n      free(co); /* we only free the struct since the \"members\" are all just\n                   pointed out in the main cookie list! */\n    co = next;\n  }\n}",
        "output": "0",
        "idx": 561
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool ccc_match_service(const void *data, const void *match_data)\n{\n\tconst struct ccc_state *ccc = data;\n\tconst struct gatt_db_attribute *attrib = match_data;\n\tuint16_t start, end;\n\n\tif (!gatt_db_attribute_get_service_handles(attrib, &start, &end))\n\t\treturn false;\n\n\treturn ccc->handle >= start && ccc->handle <= end;\n}",
        "output": "0",
        "idx": 6101
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "date_s_iso8601(int argc, VALUE *argv, VALUE klass)\n{\n    VALUE str, sg;\n\n    rb_scan_args(argc, argv, \"02\", &str, &sg);\n\n    switch (argc) {\n      case 0:\n\tstr = rb_str_new2(\"-4712-01-01\");\n      case 1:\n\tsg = INT2FIX(DEFAULT_SG);\n    }\n\n    {\n\tVALUE hash = date_s__iso8601(klass, str);\n\treturn d_new_by_frags(klass, hash, sg);\n    }\n}",
        "output": "1",
        "idx": 4477
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vvfat_close(BlockDriverState *bs)\n\n{\n\n    BDRVVVFATState *s = bs->opaque;\n\n\n\n    vvfat_close_current_file(s);\n\n    array_free(&(s->fat));\n\n    array_free(&(s->directory));\n\n    array_free(&(s->mapping));\n\n    if(s->cluster_buffer)\n\n        free(s->cluster_buffer);\n\n}\n",
        "output": "1",
        "idx": 785
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static RTSPTransportField *find_transport(RTSPMessageHeader *h, enum RTSPLowerTransport lower_transport)\n{\n    RTSPTransportField *th;\n    int i;\n\n    for(i=0;i<h->nb_transports;i++) {\n        th = &h->transports[i];\n        if (th->lower_transport == lower_transport)\n            return th;\n    }\n    return NULL;\n}",
        "output": "0",
        "idx": 1475
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Box *void_New()\n{\n\tISOM_DECL_BOX_ALLOC(GF_Box, GF_ISOM_BOX_TYPE_VOID);\n\treturn tmp;\n}",
        "output": "0",
        "idx": 2649
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void f2fs_replace_block(struct f2fs_sb_info *sbi, struct dnode_of_data *dn,\n\t\t\t\tblock_t old_addr, block_t new_addr,\n\t\t\t\tunsigned char version, bool recover_curseg,\n\t\t\t\tbool recover_newaddr)\n{\n\tstruct f2fs_summary sum;\n\n\tset_summary(&sum, dn->nid, dn->ofs_in_node, version);\n\n\t__f2fs_replace_block(sbi, &sum, old_addr, new_addr,\n\t\t\t\t\trecover_curseg, recover_newaddr);\n\n\tf2fs_update_data_blkaddr(dn, new_addr);\n}",
        "output": "0",
        "idx": 886
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "AVRational av_guess_frame_rate(AVFormatContext *format, AVStream *st, AVFrame *frame)\n\n{\n\n    AVRational fr = st->r_frame_rate;\n\n    AVRational codec_fr = st->codec->framerate;\n\n    AVRational   avg_fr = st->avg_frame_rate;\n\n\n\n    if (avg_fr.num > 0 && avg_fr.den > 0 && fr.num > 0 && fr.den > 0 &&\n\n        av_q2d(avg_fr) < 70 && av_q2d(fr) > 210) {\n\n        fr = avg_fr;\n\n    }\n\n\n\n\n\n    if (st->codec->ticks_per_frame > 1) {\n\n        if (   codec_fr.num > 0 && codec_fr.den > 0 && av_q2d(codec_fr) < av_q2d(fr)*0.7\n\n            && fabs(1.0 - av_q2d(av_div_q(avg_fr, fr))) > 0.1)\n\n            fr = codec_fr;\n\n    }\n\n\n\n    return fr;\n\n}\n",
        "output": "1",
        "idx": 3146
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void __detach_mounts(struct dentry *dentry)\n{\n\tstruct mountpoint *mp;\n\tstruct mount *mnt;\n\n\tnamespace_lock();\n\tmp = lookup_mountpoint(dentry);\n\tif (!mp)\n\t\tgoto out_unlock;\n\n\tlock_mount_hash();\n\twhile (!hlist_empty(&mp->m_list)) {\n\t\tmnt = hlist_entry(mp->m_list.first, struct mount, mnt_mp_list);\n\t\tumount_tree(mnt, 0);\n\t}\n\tunlock_mount_hash();\n\tput_mountpoint(mp);\nout_unlock:\n\tnamespace_unlock();\n}",
        "output": "1",
        "idx": 2472
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint32_t virtio_net_bad_features(VirtIODevice *vdev)\n{\n    uint32_t features = 0;\n\n    /* Linux kernel 2.6.25.  It understood MAC (as everyone must),\n     * but also these: */\n    features |= (1 << VIRTIO_NET_F_MAC);\n    features |= (1 << VIRTIO_NET_F_GUEST_CSUM);\n    features |= (1 << VIRTIO_NET_F_GUEST_TSO4);\n    features |= (1 << VIRTIO_NET_F_GUEST_TSO6);\n    features |= (1 << VIRTIO_NET_F_GUEST_ECN);\n\n    return features & virtio_net_get_features(vdev);\n}",
        "output": "1",
        "idx": 4349
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "gst_asf_demux_get_uint32 (guint8 ** p_data, guint64 * p_size)\n{\n  guint32 ret;\n\n  g_assert (*p_size >= 4);\n  ret = GST_READ_UINT32_LE (*p_data);\n  *p_data += sizeof (guint32);\n  *p_size -= sizeof (guint32);\n  return ret;\n}",
        "output": "0",
        "idx": 3208
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "term_is_gui(char_u *name)\n{\n    return (STRCMP(name, \"builtin_gui\") == 0 || STRCMP(name, \"gui\") == 0);\n}",
        "output": "0",
        "idx": 4038
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "fixup_vorbis_headers(AVFormatContext * as, struct oggvorbis_private *priv,\n\n                     uint8_t **buf)\n\n{\n\n    int i,offset, len, buf_len;\n\n    unsigned char *ptr;\n\n\n\n    len = priv->len[0] + priv->len[1] + priv->len[2];\n\n    buf_len = len + len/255 + 64;\n\n    ptr = *buf = av_realloc(NULL, buf_len);\n\n\n\n    memset(*buf, '\\0', buf_len);\n\n\n\n    ptr[0] = 2;\n\n    offset = 1;\n\n    offset += av_xiphlacing(&ptr[offset], priv->len[0]);\n\n    offset += av_xiphlacing(&ptr[offset], priv->len[1]);\n\n    for (i = 0; i < 3; i++) {\n\n        memcpy(&ptr[offset], priv->packet[i], priv->len[i]);\n\n        offset += priv->len[i];\n\n        av_freep(&priv->packet[i]);\n\n    }\n\n    *buf = av_realloc(*buf, offset + FF_INPUT_BUFFER_PADDING_SIZE);\n\n    return offset;\n\n}",
        "output": "1",
        "idx": 1357
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ZEND_FASTCALL  ZEND_MOD_SPEC_CV_CV_HANDLER(ZEND_OPCODE_HANDLER_ARGS)\n{\n\tzend_op *opline = EX(opline);\n\n\n\tmod_function(&EX_T(opline->result.u.var).tmp_var,\n\t\t_get_zval_ptr_cv(&opline->op1, EX(Ts), BP_VAR_R TSRMLS_CC),\n\t\t_get_zval_ptr_cv(&opline->op2, EX(Ts), BP_VAR_R TSRMLS_CC) TSRMLS_CC);\n\n\n\tZEND_VM_NEXT_OPCODE();\n}",
        "output": "0",
        "idx": 143
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "findmatch(oparg_T *oap, int initc)\n{\n    return findmatchlimit(oap, initc, 0, 0);\n}",
        "output": "0",
        "idx": 4518
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void t_gen_lsl(TCGv d, TCGv a, TCGv b)\n\n{\n\n\tTCGv t0, t_31;\n\n\n\n\tt0 = tcg_temp_new(TCG_TYPE_TL);\n\n\tt_31 = tcg_temp_new(TCG_TYPE_TL);\n\n\ttcg_gen_shl_tl(d, a, b);\n\n\n\n\ttcg_gen_movi_tl(t_31, 31);\n\n\ttcg_gen_sub_tl(t0, t_31, b);\n\n\ttcg_gen_sar_tl(t0, t0, t_31);\n\n\ttcg_gen_and_tl(t0, t0, d);\n\n\ttcg_gen_xor_tl(d, d, t0);\n\n\ttcg_temp_free(t0);\n\n\ttcg_temp_free(t_31);\n\n}\n",
        "output": "1",
        "idx": 2889
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void btrt_box_del(GF_Box *s)\n{\n\tGF_BitRateBox *ptr = (GF_BitRateBox *)s;\n\tif (ptr) gf_free(ptr);\n}",
        "output": "0",
        "idx": 2074
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_METHOD(Phar, createDefaultStub)\n{\n\tchar *index = NULL, *webindex = NULL, *stub, *error;\n\tint index_len = 0, webindex_len = 0;\n\tsize_t stub_len;\n\n\tif (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|pp\", &index, &index_len, &webindex, &webindex_len) == FAILURE) {\n\t\treturn;\n\t}\n\n\tstub = phar_create_default_stub(index, webindex, &stub_len, &error TSRMLS_CC);\n\n\tif (error) {\n\t\tzend_throw_exception_ex(phar_ce_PharException, 0 TSRMLS_CC, \"%s\", error);\n\t\tefree(error);\n\t\treturn;\n\t}\n\tRETURN_STRINGL(stub, stub_len, 0);\n}",
        "output": "0",
        "idx": 4987
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MemoryRegionSection memory_region_find(MemoryRegion *address_space,\n\n                                       target_phys_addr_t addr, uint64_t size)\n\n{\n\n    AddressSpace *as = memory_region_to_address_space(address_space);\n\n    AddrRange range = addrrange_make(int128_make64(addr),\n\n                                     int128_make64(size));\n\n    FlatRange *fr = address_space_lookup(as, range);\n\n    MemoryRegionSection ret = { .mr = NULL, .size = 0 };\n\n\n\n    if (!fr) {\n\n        return ret;\n\n    }\n\n\n\n    while (fr > as->current_map.ranges\n\n           && addrrange_intersects(fr[-1].addr, range)) {\n\n        --fr;\n\n    }\n\n\n\n    ret.mr = fr->mr;\n\n    range = addrrange_intersection(range, fr->addr);\n\n    ret.offset_within_region = fr->offset_in_region;\n\n    ret.offset_within_region += int128_get64(int128_sub(range.start,\n\n                                                        fr->addr.start));\n\n    ret.size = int128_get64(range.size);\n\n    ret.offset_within_address_space = int128_get64(range.start);\n\n    ret.readonly = fr->readonly;\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 1078
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int nbd_parse_offset_hole_payload(NBDStructuredReplyChunk *chunk,\n\n                                         uint8_t *payload, uint64_t orig_offset,\n\n                                         QEMUIOVector *qiov, Error **errp)\n\n{\n\n    uint64_t offset;\n\n    uint32_t hole_size;\n\n\n\n    if (chunk->length != sizeof(offset) + sizeof(hole_size)) {\n\n        error_setg(errp, \"Protocol error: invalid payload for \"\n\n                         \"NBD_REPLY_TYPE_OFFSET_HOLE\");\n\n        return -EINVAL;\n\n    }\n\n\n\n    offset = payload_advance64(&payload);\n\n    hole_size = payload_advance32(&payload);\n\n\n\n    if (offset < orig_offset || hole_size > qiov->size ||\n\n        offset > orig_offset + qiov->size - hole_size) {\n\n        error_setg(errp, \"Protocol error: server sent chunk exceeding requested\"\n\n                         \" region\");\n\n        return -EINVAL;\n\n    }\n\n\n\n    qemu_iovec_memset(qiov, offset - orig_offset, 0, hole_size);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1589
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void test_tls_write_cert_chain(const char *filename,\n\n                               gnutls_x509_crt_t *certs,\n\n                               size_t ncerts)\n\n{\n\n    size_t i;\n\n    size_t capacity = 1024, offset = 0;\n\n    char *buffer = g_new0(char, capacity);\n\n    int err;\n\n\n\n    for (i = 0; i < ncerts; i++) {\n\n        size_t len = capacity - offset;\n\n    retry:\n\n        err = gnutls_x509_crt_export(certs[i], GNUTLS_X509_FMT_PEM,\n\n                                     buffer + offset, &len);\n\n        if (err < 0) {\n\n            if (err == GNUTLS_E_SHORT_MEMORY_BUFFER) {\n\n                buffer = g_renew(char, buffer, offset + len);\n\n                capacity = offset + len;\n\n                goto retry;\n\n            }\n\n            g_critical(\"Failed to export certificate chain %s: %d\",\n\n                       gnutls_strerror(err), err);\n\n            abort();\n\n        }\n\n        offset += len;\n\n    }\n\n\n\n    if (!g_file_set_contents(filename, buffer, offset, NULL)) {\n\n        abort();\n\n    }\n\n\n}",
        "output": "1",
        "idx": 4617
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void FUNCC(pred8x8_horizontal)(uint8_t *_src, int stride){\n\n    int i;\n\n    pixel *src = (pixel*)_src;\n\n    stride /= sizeof(pixel);\n\n\n\n    for(i=0; i<8; i++){\n\n        ((pixel4*)(src+i*stride))[0]=\n\n        ((pixel4*)(src+i*stride))[1]= PIXEL_SPLAT_X4(src[-1+i*stride]);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2449
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cmd_oper_got_pass(const char *password, OPER_PASS_REC *rec)\n{\n        if (*password != '\\0')\n\t\tirc_send_cmdv(rec->server, \"OPER %s %s\", rec->nick, password);\n\tg_free(rec->nick);\n        g_free(rec);\n}",
        "output": "1",
        "idx": 1248
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void cpu_write_xer(CPUPPCState *env, target_ulong xer)\n\n{\n\n    env->so = (xer >> XER_SO) & 1;\n\n    env->ov = (xer >> XER_OV) & 1;\n\n    env->ca = (xer >> XER_CA) & 1;\n\n    env->xer = xer & ~((1u << XER_SO) | (1u << XER_OV) | (1u << XER_CA));\n\n}\n",
        "output": "1",
        "idx": 1595
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void avcodec_default_release_buffer(AVCodecContext *s, AVFrame *pic){\n\n    int i;\n\n    InternalBuffer *buf, *last;\n\n    AVCodecInternal *avci = s->internal;\n\n\n\n    assert(s->codec_type == AVMEDIA_TYPE_VIDEO);\n\n\n\n    assert(pic->type==FF_BUFFER_TYPE_INTERNAL);\n\n    assert(avci->buffer_count);\n\n\n\n    if (avci->buffer) {\n\n        buf = NULL; /* avoids warning */\n\n        for (i = 0; i < avci->buffer_count; i++) { //just 3-5 checks so is not worth to optimize\n\n            buf = &avci->buffer[i];\n\n            if (buf->data[0] == pic->data[0])\n\n                break;\n\n        }\n\n        assert(i < avci->buffer_count);\n\n        avci->buffer_count--;\n\n        last = &avci->buffer[avci->buffer_count];\n\n\n\n        FFSWAP(InternalBuffer, *buf, *last);\n\n    }\n\n\n\n    for (i = 0; i < AV_NUM_DATA_POINTERS; i++) {\n\n        pic->data[i]=NULL;\n\n//        pic->base[i]=NULL;\n\n    }\n\n//printf(\"R%X\\n\", pic->opaque);\n\n\n\n    if(s->debug&FF_DEBUG_BUFFERS)\n\n        av_log(s, AV_LOG_DEBUG, \"default_release_buffer called on pic %p, %d \"\n\n               \"buffers used\\n\", pic, avci->buffer_count);\n\n}\n",
        "output": "0",
        "idx": 269
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int snd_ctl_enum_info(struct snd_ctl_elem_info *info, unsigned int channels,\n\t\t      unsigned int items, const char *const names[])\n{\n\tinfo->type = SNDRV_CTL_ELEM_TYPE_ENUMERATED;\n\tinfo->count = channels;\n\tinfo->value.enumerated.items = items;\n\tif (!items)\n\t\treturn 0;\n\tif (info->value.enumerated.item >= items)\n\t\tinfo->value.enumerated.item = items - 1;\n\tWARN(strlen(names[info->value.enumerated.item]) >= sizeof(info->value.enumerated.name),\n\t     \"ALSA: too long item name '%s'\\n\",\n\t     names[info->value.enumerated.item]);\n\tstrscpy(info->value.enumerated.name,\n\t\tnames[info->value.enumerated.item],\n\t\tsizeof(info->value.enumerated.name));\n\treturn 0;\n}",
        "output": "0",
        "idx": 5299
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void t1_puts(const char *s)\n{\n    if (s != t1_line_array)\n        strcpy(t1_line_array, s);\n    t1_line_ptr = strend(t1_line_array);\n    t1_putline();\n}",
        "output": "0",
        "idx": 5122
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_importer(struct transport *transport, struct child_process *fastimport)\n{\n\tstruct child_process *helper = get_helper(transport);\n\tstruct helper_data *data = transport->data;\n\tint cat_blob_fd, code;\n\tchild_process_init(fastimport);\n\tfastimport->in = helper->out;\n\targv_array_push(&fastimport->args, \"fast-import\");\n\targv_array_push(&fastimport->args, debug ? \"--stats\" : \"--quiet\");\n\n\tif (data->bidi_import) {\n\t\tcat_blob_fd = xdup(helper->in);\n\t\targv_array_pushf(&fastimport->args, \"--cat-blob-fd=%d\", cat_blob_fd);\n\t}\n\tfastimport->git_cmd = 1;\n\n\tcode = start_command(fastimport);\n\treturn code;\n}",
        "output": "1",
        "idx": 4811
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int check_for_evdev(void)\n\n{\n\n    SDL_SysWMinfo info;\n\n    XkbDescPtr desc;\n\n    int has_evdev = 0;\n\n    const char *keycodes;\n\n\n\n    SDL_VERSION(&info.version);\n\n    if (!SDL_GetWMInfo(&info))\n\n        return 0;\n\n\n\n    desc = XkbGetKeyboard(info.info.x11.display,\n\n                          XkbGBN_AllComponentsMask,\n\n                          XkbUseCoreKbd);\n\n    if (desc == NULL || desc->names == NULL)\n\n        return 0;\n\n\n\n    keycodes = XGetAtomName(info.info.x11.display, desc->names->keycodes);\n\n    if (keycodes == NULL)\n\n        fprintf(stderr, \"could not lookup keycode name\\n\");\n\n    else if (strstart(keycodes, \"evdev\", NULL))\n\n        has_evdev = 1;\n\n    else if (!strstart(keycodes, \"xfree86\", NULL))\n\n        fprintf(stderr,\n\n                \"unknown keycodes `%s', please report to qemu-devel@nongnu.org\\n\",\n\n                keycodes);\n\n\n\n    XkbFreeClientMap(desc, XkbGBN_AllComponentsMask, True);\n\n\n\n    return has_evdev;\n\n}\n",
        "output": "1",
        "idx": 5296
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sweep(void)\n{\n\tint modified = 0;\n\tstruct ifsock *ifs, *tmp;\n\n\tLIST_FOREACH_SAFE(ifs, &il, link, tmp) {\n\t\tif (!ifs->stale)\n\t\t\tcontinue;\n\n\t\tmodified++;\n\t\tlogit(LOG_DEBUG, \"Removing stale ifs %s\", inet_ntoa(ifs->addr.sin_addr));\n\n\t\tLIST_REMOVE(ifs, link);\n\t\tclose(ifs->out);\n\t\tfree(ifs);\n\t}\n\n\treturn modified;\n}",
        "output": "0",
        "idx": 3549
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int vaapi_encode_h264_init_fixed_qp(AVCodecContext *avctx)\n\n{\n\n    VAAPIEncodeContext      *ctx = avctx->priv_data;\n\n    VAAPIEncodeH264Context *priv = ctx->priv_data;\n\n    VAAPIEncodeH264Options  *opt = ctx->codec_options;\n\n\n\n    priv->fixed_qp_p = opt->qp;\n\n    if (avctx->i_quant_factor > 0.0)\n\n        priv->fixed_qp_idr = (int)((priv->fixed_qp_p * avctx->i_quant_factor +\n\n                                    avctx->i_quant_offset) + 0.5);\n\n    else\n\n        priv->fixed_qp_idr = priv->fixed_qp_p;\n\n    if (avctx->b_quant_factor > 0.0)\n\n        priv->fixed_qp_b = (int)((priv->fixed_qp_p * avctx->b_quant_factor +\n\n                                  avctx->b_quant_offset) + 0.5);\n\n    else\n\n        priv->fixed_qp_b = priv->fixed_qp_p;\n\n\n\n    av_log(avctx, AV_LOG_DEBUG, \"Using fixed QP = \"\n\n           \"%d / %d / %d for IDR- / P- / B-frames.\\n\",\n\n           priv->fixed_qp_idr, priv->fixed_qp_p, priv->fixed_qp_b);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static struct Curl_easy* gethandleathead(struct curl_llist *pipeline)\n{\n  struct curl_llist_element *curr = pipeline->head;\n#ifdef DEBUGBUILD\n  {\n    struct curl_llist_element *p = pipeline->head;\n    while(p) {\n      struct Curl_easy *e = p->ptr;\n      DEBUGASSERT(GOOD_EASY_HANDLE(e));\n      p = p->next;\n    }\n  }\n#endif\n  if(curr) {\n    return (struct Curl_easy *) curr->ptr;\n  }\n\n  return NULL;\n}",
        "output": "0",
        "idx": 569
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void replay_configure(QemuOpts *opts)\n\n{\n\n    const char *fname;\n\n    const char *rr;\n\n    ReplayMode mode = REPLAY_MODE_NONE;\n\n    Location loc;\n\n\n\n    if (!opts) {\n\n        return;\n\n    }\n\n\n\n    loc_push_none(&loc);\n\n    qemu_opts_loc_restore(opts);\n\n\n\n    rr = qemu_opt_get(opts, \"rr\");\n\n    if (!rr) {\n\n        /* Just enabling icount */\n\n        return;\n\n    } else if (!strcmp(rr, \"record\")) {\n\n        mode = REPLAY_MODE_RECORD;\n\n    } else if (!strcmp(rr, \"replay\")) {\n\n        mode = REPLAY_MODE_PLAY;\n\n    } else {\n\n        error_report(\"Invalid icount rr option: %s\", rr);\n\n        exit(1);\n\n    }\n\n\n\n    fname = qemu_opt_get(opts, \"rrfile\");\n\n    if (!fname) {\n\n        error_report(\"File name not specified for replay\");\n\n        exit(1);\n\n    }\n\n\n\n    replay_enable(fname, mode);\n\n\n\n    loc_pop(&loc);\n\n}\n",
        "output": "1",
        "idx": 4400
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  bool remoteDecodeComplete() const { return state_.remote_decode_complete_; }",
        "output": "1",
        "idx": 3910
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int av_reallocp_array(void *ptr, size_t nmemb, size_t size)\n\n{\n\n    void **ptrptr = ptr;\n\n    void *ret;\n\n    if (size <= 0 || nmemb >= INT_MAX / size)\n\n        return AVERROR(ENOMEM);\n\n    if (nmemb <= 0) {\n\n        av_freep(ptr);\n\n        return 0;\n\n    }\n\n    ret = av_realloc(*ptrptr, nmemb * size);\n\n    if (!ret) {\n\n        av_freep(ptr);\n\n        return AVERROR(ENOMEM);\n\n    }\n\n    *ptrptr = ret;\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5904
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int omap_validate_emiff_addr(struct omap_mpu_state_s *s,\n\n                target_phys_addr_t addr)\n\n{\n\n    return addr >= OMAP_EMIFF_BASE && addr < OMAP_EMIFF_BASE + s->sdram_size;\n\n}\n",
        "output": "0",
        "idx": 233
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void *jas_malloc(size_t size)\n{\n\tvoid *result;\n\tjas_mb_t *mb;\n\tsize_t ext_size;\n\tsize_t mem;\n\n\tJAS_DBGLOG(100, (\"jas_malloc(%zu)\\n\", size));\n#if defined(JAS_MALLOC_RETURN_NULL_PTR_FOR_ZERO_SIZE)\n\tif (!size) {\n\t\treturn 0;\n\t}\n#endif\n\tif (!jas_safe_size_add(size, JAS_MB_SIZE, &ext_size)) {\n\t\tjas_eprintf(\"requested memory size is too large\\n\");\n\t\tresult = 0;\n\t\tmb = 0;\n\t} else if (!jas_safe_size_add(jas_mem, size, &mem) || mem > jas_max_mem) {\n\t\tjas_eprintf(\"maximum memory limit would be exceeded\\n\");\n\t\tresult = 0;\n\t\tmb = 0;\n\t} else {\n\t\tJAS_DBGLOG(100, (\"jas_malloc: ext_size=%zu\\n\", ext_size));\n\t\tif ((mb = malloc(ext_size))) {\n\t\t\tresult = jas_mb_get_data(mb);\n\t\t\tmb->size = size;\n\t\t\tjas_mem = mem;\n\t\t} else {\n\t\t\tresult = 0;\n\t\t}\n\t}\n\tJAS_DBGLOG(99, (\"jas_malloc(%zu) -> %p (mb=%p)\\n\", size, result, mb));\n\tJAS_DBGLOG(102, (\"max_mem=%zu; mem=%zu\\n\", jas_max_mem, jas_mem));\n\treturn result;\n}",
        "output": "1",
        "idx": 381
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ipvideo_decode_block_opcode_0xC(IpvideoContext *s)\n\n{\n\n    int x, y;\n\n\n\n    /* 16-color block encoding: each 2x2 block is a different color */\n\n    CHECK_STREAM_PTR(16);\n\n\n\n    for (y = 0; y < 8; y += 2) {\n\n        for (x = 0; x < 8; x += 2) {\n\n            s->pixel_ptr[x                ] =\n\n            s->pixel_ptr[x + 1            ] =\n\n            s->pixel_ptr[x +     s->stride] =\n\n            s->pixel_ptr[x + 1 + s->stride] = *s->stream_ptr++;\n\n        }\n\n        s->pixel_ptr += s->stride * 2;\n\n    }\n\n\n\n    /* report success */\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4153
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int transcode_subtitles(InputStream *ist, AVPacket *pkt, int *got_output)\n\n{\n\n    AVSubtitle subtitle;\n\n    int i, ret = avcodec_decode_subtitle2(ist->dec_ctx,\n\n                                          &subtitle, got_output, pkt);\n\n    if (ret < 0)\n\n        return ret;\n\n    if (!*got_output)\n\n        return ret;\n\n\n\n    ist->frames_decoded++;\n\n\n\n    for (i = 0; i < nb_output_streams; i++) {\n\n        OutputStream *ost = output_streams[i];\n\n\n\n        if (!check_output_constraints(ist, ost) || !ost->encoding_needed)\n\n            continue;\n\n\n\n        do_subtitle_out(output_files[ost->file_index]->ctx, ost, ist, &subtitle, pkt->pts);\n\n    }\n\n\n\n    avsubtitle_free(&subtitle);\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 2642
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void RateTransposer::setChannels(int nChannels)\r\n{\r\n    assert(nChannels > 0);\r\n\r\n    if (pTransposer->numChannels == nChannels) return;\r\n    pTransposer->setChannels(nChannels);\r\n\r\n    inputBuffer.setChannels(nChannels);\r\n    midBuffer.setChannels(nChannels);\r\n    outputBuffer.setChannels(nChannels);\r\n}\r",
        "output": "1",
        "idx": 5787
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void X509Certificate::InfoAccess(const FunctionCallbackInfo<Value>& args) {\n  Environment* env = Environment::GetCurrent(args);\n  X509Certificate* cert;\n  ASSIGN_OR_RETURN_UNWRAP(&cert, args.Holder());\n  BIOPointer bio(BIO_new(BIO_s_mem()));\n  Local<Value> ret;\n  if (GetInfoString<NID_info_access>(env, bio, cert->get()).ToLocal(&ret))\n    args.GetReturnValue().Set(ret);\n}",
        "output": "1",
        "idx": 1189
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void oz_hcd_get_desc_cnf(void *hport, u8 req_id, int status,\n\tconst u8 *desc, int length, int offset, int total_size);",
        "output": "1",
        "idx": 479
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void jspeiLoadScopesFromVar(JsVar *arr) {\n  execInfo.scopeCount = 0;\n\n  if (jsvIsArray(arr)) {\n    JsvObjectIterator it;\n    jsvObjectIteratorNew(&it, arr);\n    while (jsvObjectIteratorHasValue(&it)) {\n      execInfo.scopes[execInfo.scopeCount++] = jsvObjectIteratorGetValue(&it);\n      jsvObjectIteratorNext(&it);\n    }\n    jsvObjectIteratorFree(&it);\n  } else\n    execInfo.scopes[execInfo.scopeCount++] = jsvLockAgain(arr);\n}",
        "output": "0",
        "idx": 1562
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BOOL nego_read_request(rdpNego* nego, wStream* s)\n{\n\tBYTE li;\n\tBYTE type;\n\tUINT16 length;\n\n\tif (!tpkt_read_header(s, &length))\n\t\treturn FALSE;\n\n\tif (!tpdu_read_connection_request(s, &li, length))\n\t\treturn FALSE;\n\n\tif (li != Stream_GetRemainingLength(s) + 6)\n\t{\n\t\tWLog_ERR(TAG, \"Incorrect TPDU length indicator.\");\n\t\treturn FALSE;\n\t}\n\n\tif (!nego_read_request_token_or_cookie(nego, s))\n\t{\n\t\tWLog_ERR(TAG, \"Failed to parse routing token or cookie.\");\n\t\treturn FALSE;\n\t}\n\n\tif (Stream_GetRemainingLength(s) >= 8)\n\t{\n\t\t/* rdpNegData (optional) */\n\t\tStream_Read_UINT8(s, type); /* Type */\n\n\t\tif (type != TYPE_RDP_NEG_REQ)\n\t\t{\n\t\t\tWLog_ERR(TAG, \"Incorrect negotiation request type %\" PRIu8 \"\", type);\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tnego_process_negotiation_request(nego, s);\n\t}\n\n\treturn tpkt_ensure_stream_consumed(s, length);\n}",
        "output": "1",
        "idx": 3204
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "new_msg_sync_lsdb (u_int32_t seqnum, struct lsa_filter_type *filter)\n{\n  u_char buf[OSPF_API_MAX_MSG_SIZE];\n  struct msg_sync_lsdb *smsg;\n  int len;\n\n  smsg = (struct msg_sync_lsdb *) buf;\n  len = sizeof (struct msg_sync_lsdb) +\n    filter->num_areas * sizeof (struct in_addr);\n  smsg->filter.typemask = htons (filter->typemask);\n  smsg->filter.origin = filter->origin;\n  smsg->filter.num_areas = filter->num_areas;\n  return msg_new (MSG_SYNC_LSDB, smsg, seqnum, len);\n}",
        "output": "1",
        "idx": 6118
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_cleanup_prefix_route(struct inet6_ifaddr *ifp, unsigned long *expires)\n{\n\tstruct inet6_ifaddr *ifa;\n\tstruct inet6_dev *idev = ifp->idev;\n\tunsigned long lifetime;\n\tenum cleanup_prefix_rt_t action = CLEANUP_PREFIX_RT_DEL;\n\n\t*expires = jiffies;\n\n\tlist_for_each_entry(ifa, &idev->addr_list, if_list) {\n\t\tif (ifa == ifp)\n\t\t\tcontinue;\n\t\tif (!ipv6_prefix_equal(&ifa->addr, &ifp->addr,\n\t\t\t\t       ifp->prefix_len))\n\t\t\tcontinue;\n\t\tif (ifa->flags & (IFA_F_PERMANENT | IFA_F_NOPREFIXROUTE))\n\t\t\treturn CLEANUP_PREFIX_RT_NOP;\n\n\t\taction = CLEANUP_PREFIX_RT_EXPIRE;\n\n\t\tspin_lock(&ifa->lock);\n\n\t\tlifetime = addrconf_timeout_fixup(ifa->valid_lft, HZ);\n\t\t/*\n\t\t * Note: Because this address is\n\t\t * not permanent, lifetime <\n\t\t * LONG_MAX / HZ here.\n\t\t */\n\t\tif (time_before(*expires, ifa->tstamp + lifetime * HZ))\n\t\t\t*expires = ifa->tstamp + lifetime * HZ;\n\t\tspin_unlock(&ifa->lock);\n\t}\n\n\treturn action;\n}",
        "output": "0",
        "idx": 4043
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "iscsi_aio_write16_cb(struct iscsi_context *iscsi, int status,\n\n                     void *command_data, void *opaque)\n\n{\n\n    IscsiAIOCB *acb = opaque;\n\n\n\n    trace_iscsi_aio_write16_cb(iscsi, status, acb, acb->canceled);\n\n\n\n    g_free(acb->buf);\n\n\n\n    if (acb->canceled != 0) {\n\n        qemu_aio_release(acb);\n\n        scsi_free_scsi_task(acb->task);\n\n        acb->task = NULL;\n\n        return;\n\n    }\n\n\n\n    acb->status = 0;\n\n    if (status < 0) {\n\n        error_report(\"Failed to write16 data to iSCSI lun. %s\",\n\n                     iscsi_get_error(iscsi));\n\n        acb->status = -EIO;\n\n    }\n\n\n\n    iscsi_schedule_bh(acb);\n\n    scsi_free_scsi_task(acb->task);\n\n    acb->task = NULL;\n\n}\n",
        "output": "1",
        "idx": 5818
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "status WAVEFile::parseList(const Tag &id, uint32_t size)\n{\n\tTag typeID;\n\treadTag(&typeID);\n\tsize-=4;\n\n\tif (typeID == \"adtl\")\n\t{\n\t\t/* Handle adtl sub-chunks. */\n\t\treturn parseADTLSubChunk(typeID, size);\n\t}\n\telse if (typeID == \"INFO\")\n\t{\n\t\t/* Handle INFO sub-chunks. */\n\t\treturn parseINFOSubChunk(typeID, size);\n\t}\n\telse\n\t{\n\t\t/* Skip unhandled sub-chunks. */\n\t\tm_fh->seek(size, File::SeekFromCurrent);\n\t\treturn AF_SUCCEED;\n\t}\n\treturn AF_SUCCEED;\n}",
        "output": "0",
        "idx": 2109
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "float64 helper_fsmuld(CPUSPARCState *env, float32 src1, float32 src2)\n\n{\n\n    float64 ret;\n\n    clear_float_exceptions(env);\n\n    ret = float64_mul(float32_to_float64(src1, &env->fp_status),\n\n                      float32_to_float64(src2, &env->fp_status),\n\n                      &env->fp_status);\n\n    check_ieee_exceptions(env);\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 5218
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int SafeMulDims(const matvar_t *matvar, size_t* nelems)\n{\n    int i;\n\n    for ( i = 0; i < matvar->rank; i++ ) {\n        if ( !psnip_safe_size_mul(nelems, *nelems, matvar->dims[i]) ) {\n            *nelems = 0;\n            return 1;\n        }\n    }\n\n    return 0;\n}",
        "output": "1",
        "idx": 872
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Map1to1(SDL_Palette * src, SDL_Palette * dst, int *identical)\n{\n    Uint8 *map;\n    int i;\n\n    if (identical) {\n        if (src->ncolors <= dst->ncolors) {\n            /* If an identical palette, no need to map */\n            if (src == dst\n                ||\n                (SDL_memcmp\n                 (src->colors, dst->colors,\n                  src->ncolors * sizeof(SDL_Color)) == 0)) {\n                *identical = 1;\n                return (NULL);\n            }\n        }\n        *identical = 0;\n    }\n    map = (Uint8 *) SDL_malloc(src->ncolors);\n    if (map == NULL) {\n        SDL_OutOfMemory();\n        return (NULL);\n    }\n    for (i = 0; i < src->ncolors; ++i) {\n        map[i] = SDL_FindColor(dst,\n                               src->colors[i].r, src->colors[i].g,\n                               src->colors[i].b, src->colors[i].a);\n    }\n    return (map);\n}",
        "output": "1",
        "idx": 3870
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "stream_buffer_dispose (GObject *object)\n{\n\tCamelStreamBufferPrivate *priv;\n\n\tpriv = CAMEL_STREAM_BUFFER (object)->priv;\n\n\tif (priv->stream != NULL) {\n\t\tg_object_unref (priv->stream);\n\t\tpriv->stream = NULL;\n\t}\n\n\t/* Chain up to parent's dispose() method. */\n\tG_OBJECT_CLASS (camel_stream_buffer_parent_class)->dispose (object);\n}",
        "output": "0",
        "idx": 4463
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,\n\n                           uint64_t off, uint32_t max_count)\n\n{\n\n    ssize_t err;\n\n    size_t offset = 7;\n\n    int read_count;\n\n    int64_t xattr_len;\n\n    V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);\n\n    VirtQueueElement *elem = &v->elems[pdu->idx];\n\n\n\n    xattr_len = fidp->fs.xattr.len;\n\n    read_count = xattr_len - off;\n\n    if (read_count > max_count) {\n\n        read_count = max_count;\n\n    } else if (read_count < 0) {\n\n        /*\n\n         * read beyond XATTR value\n\n         */\n\n        read_count = 0;\n\n    }\n\n    err = pdu_marshal(pdu, offset, \"d\", read_count);\n\n    if (err < 0) {\n\n        return err;\n\n    }\n\n    offset += err;\n\n\n\n    err = v9fs_pack(elem->in_sg, elem->in_num, offset,\n\n                    ((char *)fidp->fs.xattr.value) + off,\n\n                    read_count);\n\n    if (err < 0) {\n\n        return err;\n\n    }\n\n    offset += err;\n\n    return offset;\n\n}\n",
        "output": "0",
        "idx": 2353
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ebb_ews_convert_contact_to_xml_cb (ESoapMessage *msg,\n\t\t\t\t   gpointer user_data,\n\t\t\t\t   GError **error)\n{\n\tEContact *contact = user_data;\n\tgint i, element_type;\n\n\t/* Prepare Contact node in the SOAP message */\n\te_soap_message_start_element (msg, \"Contact\", NULL, NULL);\n\n\tfor (i = 0; i < G_N_ELEMENTS (mappings); i++) {\n\t\telement_type = mappings[i].element_type;\n\n\t\tif (element_type == ELEMENT_TYPE_SIMPLE) {\n\t\t\tgchar *val;\n\n\t\t\t/* skip uid while creating contacts */\n\t\t\tif (mappings[i].field_id == E_CONTACT_UID)\n\t\t\t\tcontinue;\n\n\t\t\tval = e_contact_get (contact, mappings[i].field_id);\n\t\t\tif (val && *val)\n\t\t\t\te_ews_message_write_string_parameter (msg, mappings[i].element_name, NULL, val);\n\t\t\tg_free (val);\n\t\t} else\n\t\t\tmappings[i].set_value_in_soap_message (msg, contact);\n\t}\n\n\t/* end of \"Contact\" */\n\te_soap_message_end_element (msg);\n\n\treturn TRUE;\n}",
        "output": "0",
        "idx": 1903
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void replace_all(std::string & subject, const std::string & search, const std::string & replace) {\n\tsize_t pos = 0;\n\twhile ((pos = subject.find(search, pos)) != std::string::npos) {\n\t\tsubject.replace(pos, search.length(), replace);\n\t\tpos += replace.length();\n\t}\n}",
        "output": "1",
        "idx": 35
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ntop_get_ndpi_protocol_category(lua_State* vm) {\n  NetworkInterface *ntop_interface = getCurrentInterface(vm);\n  u_int proto;\n\n  ntop->getTrace()->traceEvent(TRACE_DEBUG, \"%s() called\", __FUNCTION__);\n\n  if(ntop_lua_check(vm, __FUNCTION__, 1, LUA_TNUMBER)) return(CONST_LUA_ERROR);\n  proto = (u_int)lua_tonumber(vm, 1);\n\n  if(ntop_interface) {\n    ndpi_protocol_category_t category = ntop_interface->get_ndpi_proto_category(proto);\n    \n    lua_newtable(vm);\n    lua_push_int32_table_entry(vm, \"id\", category);\n    lua_push_str_table_entry(vm, \"name\", (char*)ndpi_category_str(category));\n  } else\n    lua_pushnil(vm);\n\n  return(CONST_LUA_OK);\n}",
        "output": "0",
        "idx": 4706
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ath6kl_wmi_rx_probe_req_event_rx(struct wmi *wmi, u8 *datap, int len,\n\t\t\t\t\t    struct ath6kl_vif *vif)\n{\n\tstruct wmi_p2p_rx_probe_req_event *ev;\n\tu32 freq;\n\tu16 dlen;\n\n\tif (len < sizeof(*ev))\n\t\treturn -EINVAL;\n\n\tev = (struct wmi_p2p_rx_probe_req_event *) datap;\n\tfreq = le32_to_cpu(ev->freq);\n\tdlen = le16_to_cpu(ev->len);\n\tif (datap + len < ev->data + dlen) {\n\t\tath6kl_err(\"invalid wmi_p2p_rx_probe_req_event: len=%d dlen=%u\\n\",\n\t\t\t   len, dlen);\n\t\treturn -EINVAL;\n\t}\n\tath6kl_dbg(ATH6KL_DBG_WMI,\n\t\t   \"rx_probe_req: len=%u freq=%u probe_req_report=%d\\n\",\n\t\t   dlen, freq, vif->probe_req_report);\n\n\tif (vif->probe_req_report || vif->nw_type == AP_NETWORK)\n\t\tcfg80211_rx_mgmt(&vif->wdev, freq, 0, ev->data, dlen, 0);\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 6187
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void trigger_prot_fault(CPUS390XState *env, target_ulong vaddr,\n\n                               uint64_t mode)\n\n{\n\n    CPUState *cs = CPU(s390_env_get_cpu(env));\n\n    int ilen = ILEN_LATER_INC;\n\n    int bits = trans_bits(env, mode) | 4;\n\n\n\n    DPRINTF(\"%s: vaddr=%016\" PRIx64 \" bits=%d\\n\", __func__, vaddr, bits);\n\n\n\n    stq_phys(cs->as,\n\n             env->psa + offsetof(LowCore, trans_exc_code), vaddr | bits);\n\n    trigger_pgm_exception(env, PGM_PROTECTION, ilen);\n\n}\n",
        "output": "0",
        "idx": 3781
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "GF_Err gf_isom_text_add_karaoke(GF_TextSample *samp, u32 start_time)\n{\n\tif (!samp) return GF_BAD_PARAM;\n\tsamp->cur_karaoke = (GF_TextKaraokeBox *) gf_isom_box_new(GF_ISOM_BOX_TYPE_KROK);\n\tif (!samp->cur_karaoke) return GF_OUT_OF_MEM;\n\tsamp->cur_karaoke->highlight_starttime = start_time;\n\treturn gf_list_add(samp->others, samp->cur_karaoke);\n}",
        "output": "0",
        "idx": 2838
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qxl_render_resize(PCIQXLDevice *qxl)\n\n{\n\n    QXLSurfaceCreate *sc = &qxl->guest_primary.surface;\n\n\n\n    qxl->guest_primary.stride = sc->stride;\n\n    qxl->guest_primary.resized++;\n\n    switch (sc->format) {\n\n    case SPICE_SURFACE_FMT_16_555:\n\n        qxl->guest_primary.bytes_pp = 2;\n\n        qxl->guest_primary.bits_pp = 15;\n\n        break;\n\n    case SPICE_SURFACE_FMT_16_565:\n\n        qxl->guest_primary.bytes_pp = 2;\n\n        qxl->guest_primary.bits_pp = 16;\n\n        break;\n\n    case SPICE_SURFACE_FMT_32_xRGB:\n\n    case SPICE_SURFACE_FMT_32_ARGB:\n\n        qxl->guest_primary.bytes_pp = 4;\n\n        qxl->guest_primary.bits_pp = 32;\n\n        break;\n\n    default:\n\n        fprintf(stderr, \"%s: unhandled format: %x\\n\", __FUNCTION__,\n\n                qxl->guest_primary.surface.format);\n\n        qxl->guest_primary.bytes_pp = 4;\n\n        qxl->guest_primary.bits_pp = 32;\n\n        break;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 5555
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void BrotliContext::resetOut() {\n  avail_out_ = chunk_size_;\n  next_out_ = chunk_ptr_.get();\n}",
        "output": "0",
        "idx": 2820
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void load_tco(const TestData *d)\n\n{\n\n    qpci_io_writew(d->dev, d->tco_io_base + TCO_RLD, 4);\n\n}\n",
        "output": "1",
        "idx": 4649
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Status GetInputList(OpKernelContext* c, int index, const TensorList** list) {\n  if (!TensorShapeUtils::IsScalar(c->input(index).shape())) {\n    return errors::InvalidArgument(\"Input list must be a scalar saw: \",\n                                   c->input(index).shape().DebugString());\n  }\n  const TensorList* l = c->input(index).scalar<Variant>()().get<TensorList>();\n  if (l == nullptr) {\n    return errors::InvalidArgument(\n        \"Input handle is not a list. Saw: '\",\n        c->input(index).scalar<Variant>()().DebugString(), \"'\");\n  }\n  *list = l;\n  return Status::OK();\n}",
        "output": "0",
        "idx": 4732
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static MemTxResult memory_region_oldmmio_read_accessor(MemoryRegion *mr,\n\n                                                       hwaddr addr,\n\n                                                       uint64_t *value,\n\n                                                       unsigned size,\n\n                                                       unsigned shift,\n\n                                                       uint64_t mask,\n\n                                                       MemTxAttrs attrs)\n\n{\n\n    uint64_t tmp;\n\n\n\n    tmp = mr->ops->old_mmio.read[ctz32(size)](mr->opaque, addr);\n\n    if (mr->subpage) {\n\n        trace_memory_region_subpage_read(get_cpu_index(), mr, addr, tmp, size);\n\n\n\n\n\n\n    } else if (TRACE_MEMORY_REGION_OPS_READ_ENABLED) {\n\n        hwaddr abs_addr = memory_region_to_absolute_addr(mr, addr);\n\n        trace_memory_region_ops_read(get_cpu_index(), mr, abs_addr, tmp, size);\n\n    }\n\n    *value |= (tmp & mask) << shift;\n\n    return MEMTX_OK;\n\n}",
        "output": "1",
        "idx": 3685
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "Assign(asdl_seq * targets, expr_ty value, int lineno, int col_offset, int\n       end_lineno, int end_col_offset, PyArena *arena)\n{\n    stmt_ty p;\n    if (!value) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"field value is required for Assign\");\n        return NULL;\n    }\n    p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));\n    if (!p)\n        return NULL;\n    p->kind = Assign_kind;\n    p->v.Assign.targets = targets;\n    p->v.Assign.value = value;\n    p->lineno = lineno;\n    p->col_offset = col_offset;\n    p->end_lineno = end_lineno;\n    p->end_col_offset = end_col_offset;\n    return p;\n}",
        "output": "1",
        "idx": 5202
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "tty_open(struct tty *tty, char **cause)\n{\n\ttty->term = tty_term_find(tty->term_name, tty->fd, cause);\n\tif (tty->term == NULL) {\n\t\ttty_close(tty);\n\t\treturn (-1);\n\t}\n\ttty->flags |= TTY_OPENED;\n\n\ttty->flags &= ~(TTY_NOCURSOR|TTY_FREEZE|TTY_BLOCK|TTY_TIMER);\n\n\tevent_set(&tty->event_in, tty->fd, EV_PERSIST|EV_READ,\n\t    tty_read_callback, tty);\n\ttty->in = evbuffer_new();\n\n\tevent_set(&tty->event_out, tty->fd, EV_WRITE, tty_write_callback, tty);\n\ttty->out = evbuffer_new();\n\n\tevtimer_set(&tty->timer, tty_timer_callback, tty);\n\n\ttty_start_tty(tty);\n\n\ttty_keys_build(tty);\n\n\treturn (0);\n}",
        "output": "1",
        "idx": 4723
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vp8_decode_flush(AVCodecContext *avctx)\n\n{\n\n    vp8_decode_flush_impl(avctx, 0, 0);\n\n}\n",
        "output": "1",
        "idx": 4854
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void fifo_deinit(AVFormatContext *avf)\n\n{\n\n    FifoContext *fifo = avf->priv_data;\n\n\n\n    av_dict_free(&fifo->format_options);\n\n    avformat_free_context(fifo->avf);\n\n    av_thread_message_queue_free(&fifo->queue);\n\n    pthread_mutex_destroy(&fifo->overflow_flag_lock);\n\n}\n",
        "output": "1",
        "idx": 3763
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ObjectClass *object_class_dynamic_cast_assert(ObjectClass *class,\n\n                                              const char *typename,\n\n                                              const char *file, int line,\n\n                                              const char *func)\n\n{\n\n    ObjectClass *ret = object_class_dynamic_cast(class, typename);\n\n\n\n    if (!ret && class) {\n\n        fprintf(stderr, \"%s:%d:%s: Object %p is not an instance of type %s\\n\",\n\n                file, line, func, class, typename);\n\n        abort();\n\n    }\n\n\n\n    return ret;\n\n}\n",
        "output": "1",
        "idx": 1346
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "QUtil::setRandomDataProvider(RandomDataProvider* p)\n{\n    random_data_provider = p;\n}",
        "output": "0",
        "idx": 1310
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qga_vss_fsfreeze(int *nr_volume, Error **errp, bool freeze)\n\n{\n\n    const char *func_name = freeze ? \"requester_freeze\" : \"requester_thaw\";\n\n    QGAVSSRequesterFunc func;\n\n    ErrorSet errset = {\n\n        .error_setg_win32 = error_setg_win32,\n\n        .errp = errp,\n\n    };\n\n\n\n    g_assert(errp);             /* requester.cpp requires it */\n\n    func = (QGAVSSRequesterFunc)GetProcAddress(provider_lib, func_name);\n\n    if (!func) {\n\n        error_setg_win32(errp, GetLastError(), \"failed to load %s from %s\",\n\n                         func_name, QGA_VSS_DLL);\n\n        return;\n\n    }\n\n\n\n    func(nr_volume, &errset);\n\n}\n",
        "output": "1",
        "idx": 4029
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void gen_op_eval_bgu(TCGv dst, TCGv_i32 src)\n\n{\n\n    gen_mov_reg_Z(cpu_tmp0, src);\n\n    gen_mov_reg_C(dst, src);\n\n    tcg_gen_or_tl(dst, dst, cpu_tmp0);\n\n    tcg_gen_xori_tl(dst, dst, 0x1);\n\n}\n",
        "output": "0",
        "idx": 1533
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_op_mull_T0_T1(void)\n\n{\n\n    TCGv tmp1 = tcg_temp_new(TCG_TYPE_I64);\n\n    TCGv tmp2 = tcg_temp_new(TCG_TYPE_I64);\n\n\n\n    tcg_gen_extu_i32_i64(tmp1, cpu_T[0]);\n\n    tcg_gen_extu_i32_i64(tmp2, cpu_T[1]);\n\n    tcg_gen_mul_i64(tmp1, tmp1, tmp2);\n\n    tcg_gen_trunc_i64_i32(cpu_T[0], tmp1);\n\n    tcg_gen_shri_i64(tmp1, tmp1, 32);\n\n    tcg_gen_trunc_i64_i32(cpu_T[1], tmp1);\n\n}\n",
        "output": "0",
        "idx": 1713
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static uint64_t error_mem_read(void *opaque, hwaddr addr,\n\n                               unsigned size)\n\n{\n\n    abort();\n\n}\n",
        "output": "1",
        "idx": 337
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void cpu_sh4_reset(CPUSH4State * env)\n{\n#if defined(CONFIG_USER_ONLY)\n    env->sr = 0;\n#else\n    env->sr = SR_MD | SR_RB | SR_BL | SR_I3 | SR_I2 | SR_I1 | SR_I0;\n#endif\n    env->vbr = 0;\n    env->pc = 0xA0000000;\n#if defined(CONFIG_USER_ONLY)\n    env->fpscr = FPSCR_PR; /* value for userspace according to the kernel */\n    set_float_rounding_mode(float_round_nearest_even, &env->fp_status); /* ?! */\n#else\n    env->fpscr = 0x00040001; /* CPU reset value according to SH4 manual */\n    set_float_rounding_mode(float_round_to_zero, &env->fp_status);\n#endif\n    env->mmucr = 0;",
        "output": "1",
        "idx": 5609
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPM2B_NAME_Marshal(TPM2B_NAME *source, BYTE **buffer, INT32 *size)\n{\n    UINT16 written = 0;\n    written += TPM2B_Marshal(&source->b, buffer, size);\n    return written;\n}",
        "output": "1",
        "idx": 20
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rtas_display_character(sPAPREnvironment *spapr,\n\n                                   uint32_t token, uint32_t nargs,\n\n                                   target_ulong args,\n\n                                   uint32_t nret, target_ulong rets)\n\n{\n\n    uint8_t c = rtas_ld(args, 0);\n\n    VIOsPAPRDevice *sdev = vty_lookup(spapr, 0);\n\n\n\n    if (!sdev) {\n\n        rtas_st(rets, 0, -1);\n\n    } else {\n\n        vty_putchars(sdev, &c, sizeof(c));\n\n        rtas_st(rets, 0, 0);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2128
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static NetSocketState *net_socket_fd_init(VLANState *vlan,\n\n                                          const char *model, const char *name,\n\n                                          int fd, int is_connected)\n\n{\n\n    int so_type=-1, optlen=sizeof(so_type);\n\n\n\n    if(getsockopt(fd, SOL_SOCKET, SO_TYPE, (char *)&so_type,\n\n        (socklen_t *)&optlen)< 0) {\n\n\tfprintf(stderr, \"qemu: error: getsockopt(SO_TYPE) for fd=%d failed\\n\", fd);\n\n\treturn NULL;\n\n    }\n\n    switch(so_type) {\n\n    case SOCK_DGRAM:\n\n        return net_socket_fd_init_dgram(vlan, model, name, fd, is_connected);\n\n    case SOCK_STREAM:\n\n        return net_socket_fd_init_stream(vlan, model, name, fd, is_connected);\n\n    default:\n\n        /* who knows ... this could be a eg. a pty, do warn and continue as stream */\n\n        fprintf(stderr, \"qemu: warning: socket type=%d for fd=%d is not SOCK_DGRAM or SOCK_STREAM\\n\", so_type, fd);\n\n        return net_socket_fd_init_stream(vlan, model, name, fd, is_connected);\n\n    }\n\n    return NULL;\n\n}\n",
        "output": "0",
        "idx": 1399
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static VncJobQueue *vnc_queue_init(void)\n\n{\n\n    VncJobQueue *queue = g_malloc0(sizeof(VncJobQueue));\n\n\n\n    qemu_cond_init(&queue->cond);\n\n    qemu_mutex_init(&queue->mutex);\n\n    QTAILQ_INIT(&queue->jobs);\n\n    return queue;\n\n}\n",
        "output": "1",
        "idx": 2385
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void expire_timers(struct timer_base *base, struct hlist_head *head)\n{\n\twhile (!hlist_empty(head)) {\n\t\tstruct timer_list *timer;\n\t\tvoid (*fn)(unsigned long);\n\t\tunsigned long data;\n\n\t\ttimer = hlist_entry(head->first, struct timer_list, entry);\n\t\ttimer_stats_account_timer(timer);\n\n\t\tbase->running_timer = timer;\n\t\tdetach_timer(timer, true);\n\n\t\tfn = timer->function;\n\t\tdata = timer->data;\n\n\t\tif (timer->flags & TIMER_IRQSAFE) {\n\t\t\tspin_unlock(&base->lock);\n\t\t\tcall_timer_fn(timer, fn, data);\n\t\t\tspin_lock(&base->lock);\n\t\t} else {\n\t\t\tspin_unlock_irq(&base->lock);\n\t\t\tcall_timer_fn(timer, fn, data);\n\t\t\tspin_lock_irq(&base->lock);\n\t\t}\n\t}\n}",
        "output": "1",
        "idx": 5469
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int vmci_transport_send_read(struct sock *sk)\n{\n\treturn vmci_transport_send_control_pkt(\n\t\t\t\t\tsk, VMCI_TRANSPORT_PACKET_TYPE_READ, 0,\n\t\t\t\t\t0, NULL, VSOCK_PROTO_INVALID,\n\t\t\t\t\tVMCI_INVALID_HANDLE);\n}",
        "output": "0",
        "idx": 1849
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteRegistration* Register_TRANSPOSECONV_REF() {\n  static TfLiteRegistration r = {\n      transpose_conv::Init, transpose_conv::Free,\n      transpose_conv::Prepare<transpose_conv::kReference>,\n      transpose_conv::Eval<transpose_conv::kReference>};\n  return &r;\n}",
        "output": "0",
        "idx": 3485
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int fd_close(MigrationState *s)\n\n{\n\n    DPRINTF(\"fd_close\\n\");\n\n    if (s->fd != -1) {\n\n        close(s->fd);\n\n        s->fd = -1;\n\n    }\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2819
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static CharDriverState *qemu_chr_open_mux(CharDriverState *drv)\n\n{\n\n    CharDriverState *chr;\n\n    MuxDriver *d;\n\n\n\n    chr = qemu_chr_alloc();\n\n    d = g_malloc0(sizeof(MuxDriver));\n\n\n\n    chr->opaque = d;\n\n    d->drv = drv;\n\n    d->focus = -1;\n\n    chr->chr_write = mux_chr_write;\n\n    chr->chr_update_read_handler = mux_chr_update_read_handler;\n\n    chr->chr_accept_input = mux_chr_accept_input;\n\n    /* Frontend guest-open / -close notification is not support with muxes */\n\n    chr->chr_set_fe_open = NULL;\n\n    if (drv->chr_add_watch) {\n\n        chr->chr_add_watch = mux_chr_add_watch;\n\n    }\n\n    /* only default to opened state if we've realized the initial\n\n     * set of muxes\n\n     */\n\n    chr->explicit_be_open = muxes_realized ? 0 : 1;\n\n    chr->is_mux = 1;\n\n\n\n    return chr;\n\n}\n",
        "output": "1",
        "idx": 4101
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "MagickExport ChannelType SetImageChannelMask(Image *image,\n  const ChannelType channel_mask)\n{\n  return(SetPixelChannelMask(image,channel_mask));\n}",
        "output": "0",
        "idx": 798
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void *vmstate_base_addr(void *opaque, VMStateField *field, bool alloc)\n\n{\n\n    void *base_addr = opaque + field->offset;\n\n\n\n    if (field->flags & VMS_POINTER) {\n\n        if (alloc && (field->flags & VMS_ALLOC)) {\n\n            gsize size = 0;\n\n            if (field->flags & VMS_VBUFFER) {\n\n                size = vmstate_size(opaque, field);\n\n            } else {\n\n                int n_elems = vmstate_n_elems(opaque, field);\n\n                if (n_elems) {\n\n                    size = n_elems * field->size;\n\n                }\n\n            }\n\n            if (size) {\n\n                *((void **)base_addr + field->start) = g_malloc(size);\n\n            }\n\n        }\n\n        base_addr = *(void **)base_addr + field->start;\n\n    }\n\n\n\n    return base_addr;\n\n}\n",
        "output": "1",
        "idx": 54
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "RZ_API const char *rz_bin_dwarf_get_lang_name(ut64 lang) {\n\tif (lang >= RZ_ARRAY_SIZE(dwarf_langs)) {\n\t\treturn NULL;\n\t}\n\treturn dwarf_langs[lang];\n}",
        "output": "0",
        "idx": 1896
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void free_chunk(struct audit_chunk *chunk)\n{\n\tcall_rcu(&chunk->head, __free_chunk);\n}",
        "output": "1",
        "idx": 4501
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int longLatFromMember(robj *zobj, robj *member, double *xy) {\n    double score = 0;\n\n    if (zsetScore(zobj, member->ptr, &score) == C_ERR) return C_ERR;\n    if (!decodeGeohash(score, xy)) return C_ERR;\n    return C_OK;\n}",
        "output": "0",
        "idx": 5302
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int decode_end(AVCodecContext * avctx)\n\n{\n\n    KmvcContext *const c = (KmvcContext *) avctx->priv_data;\n\n\n\n    if (c->frm0)\n\n        av_free(c->frm0);\n\n    if (c->frm1)\n\n        av_free(c->frm1);\n\n    if (c->pic.data[0])\n\n        avctx->release_buffer(avctx, &c->pic);\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 4640
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pcrypt_free(struct crypto_instance *inst)\n{\n\tstruct pcrypt_instance_ctx *ctx = crypto_instance_ctx(inst);\n\n\tcrypto_drop_aead(&ctx->spawn);\n\tkfree(inst);\n}",
        "output": "1",
        "idx": 1226
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int range_get_symbol(APEContext * ctx,\n\n                                   const uint32_t counts[],\n\n                                   const uint16_t counts_diff[])\n\n{\n\n    int symbol, cf;\n\n\n\n    cf = range_decode_culshift(ctx, 16);\n\n\n\n\n\n\n\n\n\n\n    /* figure out the symbol inefficiently; a binary search would be much better */\n\n    for (symbol = 0; counts[symbol + 1] <= cf; symbol++);\n\n\n\n    range_decode_update(ctx, counts_diff[symbol], counts[symbol]);\n\n\n\n",
        "output": "1",
        "idx": 82
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int Init_v9(void) {\nint i;\n\n\toutput_templates = NULL;\n\n\tcache.lookup_info\t    = (struct element_param_s *)calloc(65536, sizeof(struct element_param_s));\n\tcache.common_extensions = (uint32_t *)malloc((Max_num_extensions+1)*sizeof(uint32_t));\n\tif ( !cache.common_extensions || !cache.lookup_info ) {\n\t\tsyslog(LOG_ERR, \"Process_v9: Panic! malloc(): %s line %d: %s\", __FILE__, __LINE__, strerror (errno));\n\t\treturn 0;\n\t}\n\n\t// init the helper element table\n\tfor (i=1; v9_element_map[i].id != 0; i++ ) {\n\t\tuint32_t Type = v9_element_map[i].id;\n\t\t// multiple same type - save first index only\n\t\t// iterate through same Types afterwards\n\t\tif ( cache.lookup_info[Type].index == 0 ) \n\t\t\tcache.lookup_info[Type].index  = i;\n\t}\n\tcache.max_v9_elements = i;\n\n\tsyslog(LOG_DEBUG,\"Init v9: Max number of v9 tags: %u\", cache.max_v9_elements);\n\n\n\treturn 1;\n\t\n} // End of Init_v9",
        "output": "1",
        "idx": 1010
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static coroutine_fn int quorum_co_flush(BlockDriverState *bs)\n\n{\n\n    BDRVQuorumState *s = bs->opaque;\n\n    QuorumVoteVersion *winner = NULL;\n\n    QuorumVotes error_votes;\n\n    QuorumVoteValue result_value;\n\n    int i;\n\n    int result = 0;\n\n\n\n    QLIST_INIT(&error_votes.vote_list);\n\n    error_votes.compare = quorum_64bits_compare;\n\n\n\n    for (i = 0; i < s->num_children; i++) {\n\n        result = bdrv_co_flush(s->children[i]->bs);\n\n        result_value.l = result;\n\n        quorum_count_vote(&error_votes, &result_value, i);\n\n    }\n\n\n\n    winner = quorum_get_vote_winner(&error_votes);\n\n    result = winner->value.l;\n\n\n\n    quorum_free_vote_list(&error_votes);\n\n\n\n    return result;\n\n}\n",
        "output": "1",
        "idx": 6120
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vnc_disconnect_finish(VncState *vs)\n\n{\n\n    if (vs->input.buffer) qemu_free(vs->input.buffer);\n\n    if (vs->output.buffer) qemu_free(vs->output.buffer);\n\n#ifdef CONFIG_VNC_TLS\n\n    vnc_tls_client_cleanup(vs);\n\n#endif /* CONFIG_VNC_TLS */\n\n#ifdef CONFIG_VNC_SASL\n\n    vnc_sasl_client_cleanup(vs);\n\n#endif /* CONFIG_VNC_SASL */\n\n    audio_del(vs);\n\n\n\n    VncState *p, *parent = NULL;\n\n    for (p = vs->vd->clients; p != NULL; p = p->next) {\n\n        if (p == vs) {\n\n            if (parent)\n\n                parent->next = p->next;\n\n            else\n\n                vs->vd->clients = p->next;\n\n            break;\n\n        }\n\n        parent = p;\n\n    }\n\n    if (!vs->vd->clients)\n\n        dcl->idle = 1;\n\n\n\n    vnc_remove_timer(vs->vd);\n\n    qemu_free(vs);\n\n}\n",
        "output": "0",
        "idx": 5791
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool CModules::GetModPathInfo(CModInfo& ModInfo, const CString& sModule,\n                              const CString& sModPath, CString& sRetMsg) {\n    ModInfo.SetName(sModule);\n    ModInfo.SetPath(sModPath);\n\n    ModHandle p = OpenModule(sModule, sModPath, ModInfo, sRetMsg);\n    if (!p) return false;\n\n    dlclose(p);\n\n    return true;\n}",
        "output": "1",
        "idx": 6116
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TPMI_ALG_MAC_SCHEME_Unmarshal(TPMI_ALG_MAC_SCHEME *target, BYTE **buffer, INT32 *size, BOOL allowNull)\n{\n    TPM_RC rc = TPM_RC_SUCCESS;\n\n    if (rc == TPM_RC_SUCCESS) {\n\trc = TPM_ALG_ID_Unmarshal(target, buffer, size);  \n    }\n    if (rc == TPM_RC_SUCCESS) {\n\tswitch (*target) {\n#if ALG_SHA1\n\t  case TPM_ALG_SHA1:\n#endif\n#if ALG_SHA256\t\n\t  case TPM_ALG_SHA256:\n#endif\n#if ALG_SHA384\n\t  case \tTPM_ALG_SHA384:\n#endif\n#if ALG_SHA512\n\t  case \tTPM_ALG_SHA512:\n#endif\n#if ALG_SM3_256\n\t  case TPM_ALG_SM3_256:\n#endif\n#if ALG_CMAC\n\t  case TPM_ALG_CMAC:\n#endif\n\t    break;\n\t  case TPM_ALG_NULL:\n\t    if (allowNull) {\n\t\tbreak;\n\t    }\n\t  default:\n\t    rc = TPM_RC_SYMMETRIC;\n\t}\n    }\n    return rc;\n}",
        "output": "1",
        "idx": 3779
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int send_full_color_rect(VncState *vs, int x, int y, int w, int h)\n{\n    int stream = 0;\n    ssize_t bytes;\n\n#ifdef CONFIG_VNC_PNG\n    if (tight_can_send_png_rect(vs, w, h)) {\n        return send_png_rect(vs, x, y, w, h, NULL);\n    }\n#endif\n\n    vnc_write_u8(vs, stream << 4); /* no flushing, no filter */\n\n    if (vs->tight.pixel24) {\n        tight_pack24(vs, vs->tight.tight.buffer, w * h, &vs->tight.tight.offset);\n        bytes = 3;\n    } else {\n        bytes = vs->client_pf.bytes_per_pixel;\n    }\n\n    bytes = tight_compress_data(vs, stream, w * h * bytes,\n                                tight_conf[vs->tight.compression].raw_zlib_level,\n                                Z_DEFAULT_STRATEGY);\n\n    return (bytes >= 0);\n}",
        "output": "1",
        "idx": 4225
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ZEND_VM_HELPER(zend_bw_and_helper, ANY, ANY, zval *op_1, zval *op_2)\n{\n\tUSE_OPLINE\n\n\tSAVE_OPLINE();\n\tif (UNEXPECTED(Z_TYPE_INFO_P(op_1) == IS_UNDEF)) {\n\t\top_1 = ZVAL_UNDEFINED_OP1();\n\t}\n\tif (UNEXPECTED(Z_TYPE_INFO_P(op_2) == IS_UNDEF)) {\n\t\top_2 = ZVAL_UNDEFINED_OP2();\n\t}\n\tbitwise_and_function(EX_VAR(opline->result.var), op_1, op_2);\n\tif (OP1_TYPE & (IS_TMP_VAR|IS_VAR)) {\n\t\tzval_ptr_dtor_nogc(op_1);\n\t}\n\tif (OP2_TYPE & (IS_TMP_VAR|IS_VAR)) {\n\t\tzval_ptr_dtor_nogc(op_2);\n\t}\n\tZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();\n}",
        "output": "0",
        "idx": 1011
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "zzip_mem_entry_fopen(ZZIP_MEM_DISK * dir, ZZIP_MEM_ENTRY * entry)\n{\n    /* keep this in sync with zzip_disk_entry_fopen */\n    ZZIP_DISK_FILE *file = malloc(sizeof(ZZIP_MEM_DISK_FILE));\n    if (! file)\n        return file;\n    file->buffer = dir->disk->buffer;\n    file->endbuf = dir->disk->endbuf;\n    file->avail = zzip_mem_entry_usize(entry);\n\n    if (! file->avail || zzip_mem_entry_data_stored(entry))\n        { file->stored = zzip_mem_entry_to_data (entry); return file; }\n\n    file->stored = 0;\n    file->zlib.opaque = 0;\n    file->zlib.zalloc = Z_NULL;\n    file->zlib.zfree = Z_NULL;\n    file->zlib.avail_in = zzip_mem_entry_csize(entry);\n    file->zlib.next_in = zzip_mem_entry_to_data(entry);\n\n    if (! zzip_mem_entry_data_deflated(entry) ||\n        inflateInit2(&file->zlib, -MAX_WBITS) != Z_OK)\n        { free (file); return 0; }\n\n    return file;\n}",
        "output": "1",
        "idx": 3679
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int subpage_register (subpage_t *mmio, uint32_t start, uint32_t end,\n\n                             ram_addr_t memory, ram_addr_t region_offset)\n\n{\n\n    int idx, eidx;\n\n\n\n    if (start >= TARGET_PAGE_SIZE || end >= TARGET_PAGE_SIZE)\n\n        return -1;\n\n    idx = SUBPAGE_IDX(start);\n\n    eidx = SUBPAGE_IDX(end);\n\n#if defined(DEBUG_SUBPAGE)\n\n    printf(\"%s: %p start %08x end %08x idx %08x eidx %08x mem %ld\\n\", __func__,\n\n           mmio, start, end, idx, eidx, memory);\n\n#endif\n\n\n\n    memory = (memory >> IO_MEM_SHIFT) & (IO_MEM_NB_ENTRIES - 1);\n\n    for (; idx <= eidx; idx++) {\n\n        mmio->sub_io_index[idx] = memory;\n\n        mmio->region_offset[idx] = region_offset;\n\n    }\n\n\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 6010
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void finish_object(struct object *obj,\n\t\t\t  struct strbuf *path, const char *name,\n\t\t\t  void *cb_data)\n{\n\tstruct rev_list_info *info = cb_data;\n\tif (obj->type == OBJ_BLOB && !has_object_file(&obj->oid))\n\t\tdie(\"missing blob object '%s'\", oid_to_hex(&obj->oid));\n\tif (info->revs->verify_objects && !obj->parsed && obj->type != OBJ_COMMIT)\n\t\tparse_object(obj->oid.hash);\n}",
        "output": "1",
        "idx": 424
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int xt_compat_add_offset(u_int8_t af, unsigned int offset, int delta)\n{\n\tstruct xt_af *xp = &xt[af];\n\n\tWARN_ON(!mutex_is_locked(&xt[af].compat_mutex));\n\n\tif (WARN_ON(!xp->compat_tab))\n\t\treturn -ENOMEM;\n\n\tif (xp->cur >= xp->number)\n\t\treturn -EINVAL;\n\n\tif (xp->cur)\n\t\tdelta += xp->compat_tab[xp->cur - 1].delta;\n\txp->compat_tab[xp->cur].offset = offset;\n\txp->compat_tab[xp->cur].delta = delta;\n\txp->cur++;\n\treturn 0;\n}",
        "output": "0",
        "idx": 1112
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int blk_get_request(struct XenBlkDev *blkdev, struct ioreq *ioreq, RING_IDX rc)\n\n{\n\n    switch (blkdev->protocol) {\n\n    case BLKIF_PROTOCOL_NATIVE:\n\n        memcpy(&ioreq->req, RING_GET_REQUEST(&blkdev->rings.native, rc),\n\n               sizeof(ioreq->req));\n\n        break;\n\n    case BLKIF_PROTOCOL_X86_32:\n\n        blkif_get_x86_32_req(&ioreq->req,\n\n                             RING_GET_REQUEST(&blkdev->rings.x86_32_part, rc));\n\n        break;\n\n    case BLKIF_PROTOCOL_X86_64:\n\n        blkif_get_x86_64_req(&ioreq->req,\n\n                             RING_GET_REQUEST(&blkdev->rings.x86_64_part, rc));\n\n        break;\n\n    }\n\n\n\n    return 0;\n\n}",
        "output": "1",
        "idx": 1383
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int sctp_getsockopt_maxburst(struct sock *sk, int len,\n\t\t\t\t    char __user *optval,\n\t\t\t\t    int __user *optlen)\n{\n\tstruct sctp_assoc_value params;\n\tstruct sctp_sock *sp;\n\tstruct sctp_association *asoc;\n\n\tif (len == sizeof(int)) {\n\t\tpr_warn(\"Use of int in max_burst socket option deprecated\\n\");\n\t\tpr_warn(\"Use struct sctp_assoc_value instead\\n\");\n\t\tparams.assoc_id = 0;\n\t} else if (len >= sizeof(struct sctp_assoc_value)) {\n\t\tlen = sizeof(struct sctp_assoc_value);\n\t\tif (copy_from_user(&params, optval, len))\n\t\t\treturn -EFAULT;\n\t} else\n\t\treturn -EINVAL;\n\n\tsp = sctp_sk(sk);\n\n\tif (params.assoc_id != 0) {\n\t\tasoc = sctp_id2assoc(sk, params.assoc_id);\n\t\tif (!asoc)\n\t\t\treturn -EINVAL;\n\t\tparams.assoc_value = asoc->max_burst;\n\t} else\n\t\tparams.assoc_value = sp->max_burst;\n\n\tif (len == sizeof(int)) {\n\t\tif (copy_to_user(optval, &params.assoc_value, len))\n\t\t\treturn -EFAULT;\n\t} else {\n\t\tif (copy_to_user(optval, &params, len))\n\t\t\treturn -EFAULT;\n\t}\n\n\treturn 0;\n\n}",
        "output": "0",
        "idx": 3345
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "find_with_resource_array(WinLibrary *fi, WinResource *wr, const char *id)\n{\n    int c, rescnt;\n    WinResource *return_wr;\n\n    wr = list_resources(fi, wr, &rescnt);\n    if (wr == NULL)\n        return NULL;\n\n    for (c = 0 ; c < rescnt ; c++) {\n        if (compare_resource_id (&wr[c], id)) {\n            /* duplicate WinResource and return it */\n            return_wr = xmalloc(sizeof(WinResource));\n            memcpy(return_wr, &wr[c], sizeof(WinResource));\n\n            /* free old WinResource */\n            free(wr);\n            return return_wr;\n        }\n    }\n\n    return NULL;\n}",
        "output": "0",
        "idx": 1434
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "#endif\n\n    // [internal] Sorting function, used by cimg::files().\n    inline int _sort_files(const void* a, const void* b) {",
        "output": "0",
        "idx": 2970
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix) {\n    if (ctxt == NULL)\n\treturn(NULL);\n    if (prefix == NULL)\n\treturn(NULL);\n\n#ifdef XML_XML_NAMESPACE\n    if (xmlStrEqual(prefix, (const xmlChar *) \"xml\"))\n\treturn(XML_XML_NAMESPACE);\n#endif\n\n    if (ctxt->namespaces != NULL) {\n\tint i;\n\n\tfor (i = 0;i < ctxt->nsNr;i++) {\n\t    if ((ctxt->namespaces[i] != NULL) &&\n\t\t(xmlStrEqual(ctxt->namespaces[i]->prefix, prefix)))\n\t\treturn(ctxt->namespaces[i]->href);\n\t}\n    }\n\n    return((const xmlChar *) xmlHashLookup(ctxt->nsHash, prefix));\n}",
        "output": "0",
        "idx": 1398
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void opt_frame_pix_fmt(const char *arg)\n\n{\n\n    if (strcmp(arg, \"list\"))\n\n        frame_pix_fmt = avcodec_get_pix_fmt(arg);\n\n    else {\n\n        list_fmts(avcodec_pix_fmt_string, PIX_FMT_NB);\n\n        av_exit(0);\n\n    }\n\n}\n",
        "output": "1",
        "idx": 2216
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "std::string color_profile_nclx::dump(Indent& indent) const\n{\n  std::ostringstream sstr;\n  sstr << indent << \"colour_primaries: \" << m_colour_primaries << \"\\n\"\n       << indent << \"transfer_characteristics: \" << m_transfer_characteristics << \"\\n\"\n       << indent << \"matrix_coefficients: \" << m_matrix_coefficients << \"\\n\"\n       << indent << \"full_range_flag: \" << m_full_range_flag << \"\\n\";\n  return sstr.str();\n}",
        "output": "0",
        "idx": 4161
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int wsrep_sst_donate(const std::string &msg, const wsrep::gtid &current_gtid,\n                     const bool bypass) {\n  /* This will be reset when sync callback is called.\n   * Should we set wsrep_ready to false here too? */\n  local_status.set(wsrep::server_state::s_donor);\n\n  const char *method = msg.data();\n  size_t method_len = strlen(method);\n  const char *data = method + method_len + 1;\n\n  wsp::env env(NULL);\n  if (env.error()) {\n    WSREP_ERROR(\"wsrep_sst_donate_cb(): env var ctor failed: %d\", -env.error());\n    return WSREP_CB_FAILURE;\n  }\n\n#if 0\n  /* Wait for wsrep-SE to initialize that also signals\n  completion of init_server_component which is important before we initiate\n  any meangiful action especially DONOR action from this node. */\n  while (!wsrep_is_SE_initialized()) {\n    sleep(1);\n    THD *applier_thd = static_cast<THD *>(recv_ctx);\n    if (applier_thd->killed == THD::KILL_CONNECTION) return WSREP_CB_FAILURE;\n  }\n#endif\n\n  int ret;\n  ret = sst_donate_other(method, data, current_gtid, bypass, env());\n\n  return (ret >= 0 ? WSREP_CB_SUCCESS : WSREP_CB_FAILURE);\n}",
        "output": "1",
        "idx": 452
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int aio_epoll(AioContext *ctx, GPollFD *pfds,\n\n                     unsigned npfd, int64_t timeout)\n\n{\n\n    assert(false);\n\n}\n",
        "output": "0",
        "idx": 2124
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  AcceptedSocketImpl(IoHandlePtr&& io_handle, const Address::InstanceConstSharedPtr& local_address,\n                     const Address::InstanceConstSharedPtr& remote_address)\n      : ConnectionSocketImpl(std::move(io_handle), local_address, remote_address) {}",
        "output": "1",
        "idx": 5640
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void udp_chr_close(CharDriverState *chr)\n\n{\n\n    NetCharDriver *s = chr->opaque;\n\n    if (s->tag) {\n\n        g_source_remove(s->tag);\n\n        s->tag = 0;\n\n    }\n\n    if (s->chan) {\n\n        g_io_channel_unref(s->chan);\n\n        closesocket(s->fd);\n\n    }\n\n    g_free(s);\n\n    qemu_chr_be_event(chr, CHR_EVENT_CLOSED);\n\n}\n",
        "output": "1",
        "idx": 5700
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int io_open_default(AVFormatContext *s, AVIOContext **pb,\n                           const char *url, int flags, AVDictionary **options)\n{\n#if FF_API_OLD_OPEN_CALLBACKS\nFF_DISABLE_DEPRECATION_WARNINGS\n    if (s->open_cb)\n        return s->open_cb(s, pb, url, flags, &s->interrupt_callback, options);\nFF_ENABLE_DEPRECATION_WARNINGS\n#endif\n    return ffio_open_whitelist(pb, url, flags, &s->interrupt_callback, options, s->protocol_whitelist, s->protocol_blacklist);\n}",
        "output": "1",
        "idx": 1303
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static u8 i2c_smbus_msg_pec(u8 pec, struct i2c_msg *msg)\n{\n\t/* The address will be sent first */\n\tu8 addr = i2c_8bit_addr_from_msg(msg);\n\tpec = i2c_smbus_pec(pec, &addr, 1);\n\n\t/* The data buffer follows */\n\treturn i2c_smbus_pec(pec, msg->buf, msg->len);\n}",
        "output": "0",
        "idx": 2077
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void input_dev_toggle(struct input_dev *dev, bool activate)\n{\n\tif (!dev->event)\n\t\treturn;\n\n\tINPUT_DO_TOGGLE(dev, LED, led, activate);\n\tINPUT_DO_TOGGLE(dev, SND, snd, activate);\n\n\tif (activate && test_bit(EV_REP, dev->evbit)) {\n\t\tdev->event(dev, EV_REP, REP_PERIOD, dev->rep[REP_PERIOD]);\n\t\tdev->event(dev, EV_REP, REP_DELAY, dev->rep[REP_DELAY]);\n\t}\n}",
        "output": "0",
        "idx": 3084
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void qmp_input_end_list(Visitor *v)\n\n{\n\n    QmpInputVisitor *qiv = to_qiv(v);\n\n\n\n    qmp_input_pop(qiv, &error_abort);\n\n}\n",
        "output": "1",
        "idx": 1113
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "oal_download_response_cb (SoupSession *soup_session,\n                          SoupMessage *soup_message,\n                          gpointer user_data)\n{\n\tGSimpleAsyncResult *simple;\n\tstruct _oal_req_data *data;\n\n\tsimple = G_SIMPLE_ASYNC_RESULT (user_data);\n\tdata = g_simple_async_result_get_op_res_gpointer (simple);\n\n\tif (ews_connection_credentials_failed (data->cnc, soup_message, simple)) {\n\t\tg_unlink (data->cache_filename);\n\t} else if (soup_message->status_code != 200) {\n\t\tg_simple_async_result_set_error (\n\t\t\tsimple, SOUP_HTTP_ERROR,\n\t\t\tsoup_message->status_code,\n\t\t\t\"%d %s\",\n\t\t\tsoup_message->status_code,\n\t\t\tsoup_message->reason_phrase);\n\t\tg_unlink (data->cache_filename);\n\n\t} else if (data->error != NULL) {\n\t\tg_simple_async_result_take_error (simple, data->error);\n\t\tdata->error = NULL;\n\t\tg_unlink (data->cache_filename);\n\t}\n\n\te_ews_debug_dump_raw_soup_response (soup_message);\n\n\tg_simple_async_result_complete_in_idle (simple);\n\te_ews_connection_utils_unref_in_thread (simple);\n}",
        "output": "1",
        "idx": 833
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint64_t ssh_scp_request_get_size64(ssh_scp scp){\n  if(scp==NULL)\n      return 0;\n  return scp->filelen;\n}",
        "output": "1",
        "idx": 1794
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  void timeoutExpired() noexcept override {\n    FAIL() << \"test timed out\";\n    eventBase_->terminateLoopSoon();\n  }",
        "output": "0",
        "idx": 3159
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void timer_stats_hrtimer_set_start_info(struct hrtimer *timer)\n{\n#ifdef CONFIG_TIMER_STATS\n\tif (timer->start_site)\n\t\treturn;\n\ttimer->start_site = __builtin_return_address(0);\n\tmemcpy(timer->start_comm, current->comm, TASK_COMM_LEN);\n\ttimer->start_pid = current->pid;\n#endif\n}",
        "output": "1",
        "idx": 1071
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int load_segment(uint32_t *e1_ptr, uint32_t *e2_ptr,\n\n                               int selector)\n\n{\n\n    SegmentCache *dt;\n\n    int index;\n\n    uint8_t *ptr;\n\n\n\n    if (selector & 0x4)\n\n        dt = &env->ldt;\n\n    else\n\n        dt = &env->gdt;\n\n    index = selector & ~7;\n\n    if ((index + 7) > dt->limit)\n\n        return -1;\n\n    ptr = dt->base + index;\n\n    *e1_ptr = ldl_kernel(ptr);\n\n    *e2_ptr = ldl_kernel(ptr + 4);\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 2182
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool aio_dispatch(AioContext *ctx)\n\n{\n\n    AioHandler *node;\n\n    bool progress = false;\n\n\n\n    /*\n\n     * We have to walk very carefully in case qemu_aio_set_fd_handler is\n\n     * called while we're walking.\n\n     */\n\n    node = QLIST_FIRST(&ctx->aio_handlers);\n\n    while (node) {\n\n        AioHandler *tmp;\n\n        int revents;\n\n\n\n        ctx->walking_handlers++;\n\n\n\n        revents = node->pfd.revents & node->pfd.events;\n\n        node->pfd.revents = 0;\n\n\n\n        if (!node->deleted &&\n\n            (revents & (G_IO_IN | G_IO_HUP | G_IO_ERR)) &&\n\n            node->io_read) {\n\n            node->io_read(node->opaque);\n\n            progress = true;\n\n        }\n\n        if (!node->deleted &&\n\n            (revents & (G_IO_OUT | G_IO_ERR)) &&\n\n            node->io_write) {\n\n            node->io_write(node->opaque);\n\n            progress = true;\n\n        }\n\n\n\n        tmp = node;\n\n        node = QLIST_NEXT(node, node);\n\n\n\n        ctx->walking_handlers--;\n\n\n\n        if (!ctx->walking_handlers && tmp->deleted) {\n\n            QLIST_REMOVE(tmp, node);\n\n            g_free(tmp);\n\n        }\n\n    }\n\n    return progress;\n\n}\n",
        "output": "1",
        "idx": 1764
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int get_coc(Jpeg2000DecoderContext *s, Jpeg2000CodingStyle *c,\n\n                   uint8_t *properties)\n\n{\n\n    int compno;\n\n\n\n    if (s->buf_end - s->buf < 2)\n\n        return AVERROR_INVALIDDATA;\n\n\n\n    compno = bytestream_get_byte(&s->buf);\n\n\n\n    c      += compno;\n\n    c->csty = bytestream_get_byte(&s->buf);\n\n    get_cox(s, c);\n\n\n\n    properties[compno] |= HAD_COC;\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 1359
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool media_is_cd(SCSIDiskState *s)\n\n{\n\n    uint64_t nb_sectors;\n\n    if (s->qdev.type != TYPE_ROM) {\n\n        return false;\n\n    }\n\n    if (!bdrv_is_inserted(s->qdev.conf.bs)) {\n\n        return false;\n\n    }\n\n    bdrv_get_geometry(s->qdev.conf.bs, &nb_sectors);\n\n    return nb_sectors <= CD_MAX_SECTORS;\n\n}\n",
        "output": "0",
        "idx": 2156
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static VALUE from_document(VALUE klass, VALUE document)\n{\n  xmlDocPtr doc;\n  xmlRelaxNGParserCtxtPtr ctx;\n  xmlRelaxNGPtr schema;\n  VALUE errors;\n  VALUE rb_schema;\n\n  Data_Get_Struct(document, xmlDoc, doc);\n\n  /* In case someone passes us a node. ugh. */\n  doc = doc->doc;\n\n  ctx = xmlRelaxNGNewDocParserCtxt(doc);\n\n  errors = rb_ary_new();\n  xmlSetStructuredErrorFunc((void *)errors, Nokogiri_error_array_pusher);\n\n#ifdef HAVE_XMLRELAXNGSETPARSERSTRUCTUREDERRORS\n  xmlRelaxNGSetParserStructuredErrors(\n    ctx,\n    Nokogiri_error_array_pusher,\n    (void *)errors\n  );\n#endif\n\n  schema = xmlRelaxNGParse(ctx);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n  xmlRelaxNGFreeParserCtxt(ctx);\n\n  if(NULL == schema) {\n    xmlErrorPtr error = xmlGetLastError();\n    if(error)\n      Nokogiri_error_raise(NULL, error);\n    else\n      rb_raise(rb_eRuntimeError, \"Could not parse document\");\n\n    return Qnil;\n  }\n\n  rb_schema = Data_Wrap_Struct(klass, 0, dealloc, schema);\n  rb_iv_set(rb_schema, \"@errors\", errors);\n\n  return rb_schema;\n}",
        "output": "1",
        "idx": 3603
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);\n  OpData* data = reinterpret_cast<OpData*>(node->user_data);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));\n  switch (input->type) {  // Already know in/out types are same.\n    case kTfLiteFloat32:\n      AverageEvalFloat<kernel_type>(context, node, params, data, input, output);\n      break;\n    case kTfLiteUInt8:\n      AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,\n                                             output);\n      break;\n    case kTfLiteInt8:\n      AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,\n                                            output);\n      break;\n    case kTfLiteInt16:\n      AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,\n                                             output);\n      break;\n    default:\n      TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",\n                         TfLiteTypeGetName(input->type));\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}",
        "output": "1",
        "idx": 5346
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_net_add_queue(VirtIONet *n, int index)\n\n{\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(n);\n\n\n\n    n->vqs[index].rx_vq = virtio_add_queue(vdev, 256, virtio_net_handle_rx);\n\n    if (n->net_conf.tx && !strcmp(n->net_conf.tx, \"timer\")) {\n\n        n->vqs[index].tx_vq =\n\n            virtio_add_queue(vdev, 256, virtio_net_handle_tx_timer);\n\n        n->vqs[index].tx_timer = timer_new_ns(QEMU_CLOCK_VIRTUAL,\n\n                                              virtio_net_tx_timer,\n\n                                              &n->vqs[index]);\n\n    } else {\n\n        n->vqs[index].tx_vq =\n\n            virtio_add_queue(vdev, 256, virtio_net_handle_tx_bh);\n\n        n->vqs[index].tx_bh = qemu_bh_new(virtio_net_tx_bh, &n->vqs[index]);\n\n    }\n\n\n\n    n->vqs[index].tx_waiting = 0;\n\n    n->vqs[index].n = n;\n\n}\n",
        "output": "1",
        "idx": 5428
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nstatic JSValue js_fileio_destroy(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)\n{\n\tJSFileIOCtx *ioctx = JS_GetOpaque(this_val, fileio_class_id);\n\tif (!ioctx) return JS_UNDEFINED;\n\tif (!ioctx->factory->lock) return JS_UNDEFINED;\n\n\tioctx->factory->lock = GF_FALSE;\n\tioctx->factory->all_refs--;\n\tif (!ioctx->factory->all_refs) {\n\t\tjs_fileio_factory_delete(ctx, ioctx->factory, NULL);\n\t}\n\treturn JS_UNDEFINED;",
        "output": "0",
        "idx": 934
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline void render_line_unrolled(intptr_t x, intptr_t y, int x1,\n\n                                        intptr_t sy, int ady, int adx,\n\n                                        float *buf)\n\n{\n\n    int err = -adx;\n\n    x -= x1 - 1;\n\n    buf += x1 - 1;\n\n    while (++x < 0) {\n\n        err += ady;\n\n        if (err >= 0) {\n\n            err += ady - adx;\n\n            y   += sy;\n\n            buf[x++] = ff_vorbis_floor1_inverse_db_table[y];\n\n        }\n\n        buf[x] = ff_vorbis_floor1_inverse_db_table[y];\n\n    }\n\n    if (x <= 0) {\n\n        if (err + ady >= 0)\n\n            y += sy;\n\n        buf[x] = ff_vorbis_floor1_inverse_db_table[y];\n\n    }\n\n}\n",
        "output": "1",
        "idx": 6157
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_aio_init(void)\n\n{\n\n    struct sigaction act;\n\n\n\n    aio_initialized = 1;\n\n\n\n    sigfillset(&act.sa_mask);\n\n    act.sa_flags = 0; /* do not restart syscalls to interrupt select() */\n\n    act.sa_handler = aio_signal_handler;\n\n    sigaction(aio_sig_num, &act, NULL);\n\n\n\n#if defined(__GLIBC__) && defined(__linux__)\n\n    {\n\n        /* XXX: aio thread exit seems to hang on RedHat 9 and this init\n\n           seems to fix the problem. */\n\n        struct aioinit ai;\n\n        memset(&ai, 0, sizeof(ai));\n\n        ai.aio_threads = 1;\n\n        ai.aio_num = 1;\n\n        ai.aio_idle_time = 365 * 100000;\n\n        aio_init(&ai);\n\n    }\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 1361
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "httpSpecialClientSideHandler(int status,\n                             FdEventHandlerPtr event,\n                             StreamRequestPtr srequest)\n{\n    HTTPConnectionPtr connection = srequest->data;\n    HTTPRequestPtr request = connection->request;\n    int push;\n\n    if((request->object->flags & OBJECT_ABORTED) || \n       !(request->object->flags & OBJECT_INPROGRESS)) {\n        httpClientDiscardBody(connection);\n        httpClientError(request, 503, internAtom(\"Post aborted\"));\n        return 1;\n    }\n        \n    if(status < 0) {\n        do_log_error(L_ERROR, -status, \"Reading from client\");\n        if(status == -EDOGRACEFUL)\n            httpClientFinish(connection, 1);\n        else\n            httpClientFinish(connection, 2);\n        return 1;\n    }\n\n    push = MIN(srequest->offset - connection->reqlen,\n               connection->bodylen - connection->reqoffset);\n    if(push > 0) {\n        connection->reqlen += push;\n        httpSpecialDoSide(request);\n    }\n\n    do_log(L_ERROR, \"Incomplete client request.\\n\");\n    connection->flags &= ~CONN_READER;\n    httpClientRawError(connection, 502,\n                       internAtom(\"Incomplete client request\"), 1);\n    return 1;\n}",
        "output": "1",
        "idx": 4586
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "xfs_iflush_abort(\n\txfs_inode_t\t\t*ip,\n\tbool\t\t\tstale)\n{\n\txfs_inode_log_item_t\t*iip = ip->i_itemp;\n\n\tif (iip) {\n\t\tif (iip->ili_item.li_flags & XFS_LI_IN_AIL) {\n\t\t\txfs_trans_ail_remove(&iip->ili_item,\n\t\t\t\t\t     stale ? SHUTDOWN_LOG_IO_ERROR :\n\t\t\t\t\t\t     SHUTDOWN_CORRUPT_INCORE);\n\t\t}\n\t\tiip->ili_logged = 0;\n\t\t/*\n\t\t * Clear the ili_last_fields bits now that we know that the\n\t\t * data corresponding to them is safely on disk.\n\t\t */\n\t\tiip->ili_last_fields = 0;\n\t\t/*\n\t\t * Clear the inode logging fields so no more flushes are\n\t\t * attempted.\n\t\t */\n\t\tiip->ili_fields = 0;\n\t}\n\t/*\n\t * Release the inode's flush lock since we're done with it.\n\t */\n\txfs_ifunlock(ip);\n}",
        "output": "1",
        "idx": 2788
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qemu_chr_be_event(CharDriverState *s, int event)\n{\n    /* Keep track if the char device is open */\n    switch (event) {\n        case CHR_EVENT_OPENED:\n            s->be_open = 1;\n            break;\n        case CHR_EVENT_CLOSED:\n            s->be_open = 0;\n            break;\n    }\n\n    if (!s->chr_event)\n        return;\n    s->chr_event(s->handler_opaque, event);\n}",
        "output": "1",
        "idx": 1801
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t git_pool__system_page_size(void)\n{\n\tstatic uint32_t size = 0;\n\n\tif (!size) {\n\t\tsize_t page_size;\n\t\tif (git__page_size(&page_size) < 0)\n\t\t\tpage_size = 4096;\n\t\tsize = page_size - 2 * sizeof(void *); /* allow space for malloc overhead */\n\t}\n\n\treturn size;\n}",
        "output": "0",
        "idx": 3179
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rsvg_paint_server_parse (gboolean * inherit, const RsvgDefs * defs, const char *str,\n                         guint32 current_color)\n{\n    char *name;\n    guint32 rgb;\n    if (inherit != NULL)\n        *inherit = 1;\n    if (!strcmp (str, \"none\"))\n        return NULL;\n\n    name = rsvg_get_url_string (str);\n    if (name) {\n        RsvgNode *val;\n        val = rsvg_defs_lookup (defs, name);\n        g_free (name);\n\n        if (val == NULL)\n            return NULL;\n        if (!strcmp (val->type->str, \"linearGradient\"))\n            return rsvg_paint_server_lin_grad ((RsvgLinearGradient *) val);\n        else if (!strcmp (val->type->str, \"radialGradient\"))\n            return rsvg_paint_server_rad_grad ((RsvgRadialGradient *) val);\n        else if (!strcmp (val->type->str, \"pattern\"))\n            return rsvg_paint_server_pattern ((RsvgPattern *) val);\n        else\n            return NULL;\n    } else if (!strcmp (str, \"inherit\")) {\n        if (inherit != NULL)\n            *inherit = 0;\n        return rsvg_paint_server_solid (0);\n    } else if (!strcmp (str, \"currentColor\")) {\n        RsvgPaintServer *ps;\n        ps = rsvg_paint_server_solid_current_colour ();\n        return ps;\n    } else {\n        rgb = rsvg_css_parse_color (str, inherit);\n        return rsvg_paint_server_solid (rgb);\n    }\n}",
        "output": "1",
        "idx": 3205
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ExitStatus trans_fop_dew_0e(DisasContext *ctx, uint32_t insn,\n\n                                   const DisasInsn *di)\n\n{\n\n    unsigned rt = extract32(insn, 0, 5);\n\n    unsigned ra = assemble_ra64(insn);\n\n    return do_fop_dew(ctx, rt, ra, di->f_dew);\n\n}\n",
        "output": "1",
        "idx": 4426
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline Quantum ClampPixel(const MagickRealType value)\n{\n#if !defined(MAGICKCORE_HDRI_SUPPORT)\n  return((Quantum) value);\n#else\n  if (value < 0.0f)\n    return(0.0);\n  if (value >= (MagickRealType) QuantumRange)\n    return((Quantum) QuantumRange);\n  return(value);\n#endif\n}",
        "output": "1",
        "idx": 602
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "pci_emul_deinit(struct vmctx *ctx, struct pci_vdev_ops *ops, int bus, int slot,\n\t\tint func, struct funcinfo *fi)\n{\n\tif (ops->vdev_deinit && fi->fi_devi)\n\t\t(*ops->vdev_deinit)(ctx, fi->fi_devi, fi->fi_param);\n\tif (fi->fi_param)\n\t\tfree(fi->fi_param);\n\n\tif (fi->fi_devi) {\n\t\tpci_lintr_release(fi->fi_devi);\n\t\tpci_emul_free_bars(fi->fi_devi);\n\t\tpci_emul_free_msixcap(fi->fi_devi);\n\t\tfree(fi->fi_devi);\n\t}\n}",
        "output": "0",
        "idx": 866
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "perf_read(struct file *file, char __user *buf, size_t count, loff_t *ppos)\n{\n\tstruct perf_event *event = file->private_data;\n\n\treturn perf_read_hw(event, buf, count);\n}",
        "output": "1",
        "idx": 3567
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int EncryptionUtil::encrypt(EncryptionMode mode, const unsigned char* source,\n                            uint32_t source_length, const unsigned char* key, uint32_t key_length,\n                            const unsigned char* iv, bool padding, unsigned char* encrypt) {\n    const EVP_CIPHER* cipher = get_evp_type(mode);\n    /* The encrypt key to be used for encryption */\n    unsigned char encrypt_key[ENCRYPTION_MAX_KEY_LENGTH / 8];\n    create_key(key, key_length, encrypt_key, mode);\n\n    if (cipher == nullptr || (EVP_CIPHER_iv_length(cipher) > 0 && !iv)) {\n        return AES_BAD_DATA;\n    }\n    EVP_CIPHER_CTX* cipher_ctx = EVP_CIPHER_CTX_new();\n    EVP_CIPHER_CTX_reset(cipher_ctx);\n    int length = 0;\n    int ret = do_encrypt(cipher_ctx, cipher, source, source_length, encrypt_key, iv, padding,\n                         encrypt, &length);\n    EVP_CIPHER_CTX_free(cipher_ctx);\n    if (ret == 0) {\n        ERR_clear_error();\n        return AES_BAD_DATA;\n    } else {\n        return length;\n    }\n}",
        "output": "1",
        "idx": 4205
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int tap_open(char *ifname, int ifname_size, int *vnet_hdr,\n\n             int vnet_hdr_required, int mq_required, Error **errp)\n\n{\n\n    /* FIXME error_setg(errp, ...) on failure */\n\n    char  dev[10]=\"\";\n\n    int fd;\n\n    if( (fd = tap_alloc(dev, sizeof(dev))) < 0 ){\n\n       fprintf(stderr, \"Cannot allocate TAP device\\n\");\n\n       return -1;\n\n    }\n\n    pstrcpy(ifname, ifname_size, dev);\n\n    if (*vnet_hdr) {\n\n        /* Solaris doesn't have IFF_VNET_HDR */\n\n        *vnet_hdr = 0;\n\n\n\n        if (vnet_hdr_required && !*vnet_hdr) {\n\n            error_report(\"vnet_hdr=1 requested, but no kernel \"\n\n                         \"support for IFF_VNET_HDR available\");\n\n            close(fd);\n\n            return -1;\n\n        }\n\n    }\n\n    fcntl(fd, F_SETFL, O_NONBLOCK);\n\n    return fd;\n\n}\n",
        "output": "1",
        "idx": 5052
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void virtio_scsi_complete_req(VirtIOSCSIReq *req)\n\n{\n\n    VirtIOSCSI *s = req->dev;\n\n    VirtQueue *vq = req->vq;\n\n    VirtIODevice *vdev = VIRTIO_DEVICE(s);\n\n\n\n    qemu_iovec_from_buf(&req->resp_iov, 0, &req->resp, req->resp_size);\n\n    virtqueue_push(vq, &req->elem, req->qsgl.size + req->resp_iov.size);\n\n    if (s->dataplane_started && !s->dataplane_fenced) {\n\n        virtio_scsi_dataplane_notify(vdev, req);\n\n    } else {\n\n        virtio_notify(vdev, vq);\n\n    }\n\n\n\n    if (req->sreq) {\n\n        req->sreq->hba_private = NULL;\n\n        scsi_req_unref(req->sreq);\n\n    }\n\n    virtio_scsi_free_req(req);\n\n}\n",
        "output": "1",
        "idx": 4890
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void validate_bootdevices(const char *devices)\n\n{\n\n    /* We just do some generic consistency checks */\n\n    const char *p;\n\n    int bitmap = 0;\n\n\n\n    for (p = devices; *p != '\\0'; p++) {\n\n        /* Allowed boot devices are:\n\n         * a-b: floppy disk drives\n\n         * c-f: IDE disk drives\n\n         * g-m: machine implementation dependent drives\n\n         * n-p: network devices\n\n         * It's up to each machine implementation to check if the given boot\n\n         * devices match the actual hardware implementation and firmware\n\n         * features.\n\n         */\n\n        if (*p < 'a' || *p > 'p') {\n\n            fprintf(stderr, \"Invalid boot device '%c'\\n\", *p);\n\n            exit(1);\n\n        }\n\n        if (bitmap & (1 << (*p - 'a'))) {\n\n            fprintf(stderr, \"Boot device '%c' was given twice\\n\", *p);\n\n            exit(1);\n\n        }\n\n        bitmap |= 1 << (*p - 'a');\n\n    }\n\n}\n",
        "output": "0",
        "idx": 879
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void start_filelist_progress(char *kind)\n{\n\trprintf(FCLIENT, \"%s ... \", kind);\n\toutput_needs_newline = 1;\n\trflush(FINFO);\n}",
        "output": "0",
        "idx": 2204
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int match_ipv6_addrmask(u32 *input, u32 *addr, u32 *mask)\n{\n\tint i, fail = 0;\n\n\tfor (i = 0; i < 4; i++)\n\t\tif (addr[i] != (input[i] & mask[i])) {\n\t\t\tfail = 1;\n\t\t\tbreak;\n\t\t}\n\n\treturn !fail;\n}",
        "output": "0",
        "idx": 372
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "point_filter_func(const ImageRef *ref, Image *img, const void *data, CellPixelSize cell) {\n    return x_filter_func(ref, img, data, cell) && y_filter_func(ref, img, data, cell);\n}",
        "output": "0",
        "idx": 6006
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_PUBLIC_ enum ndr_err_code ndr_push_dns_string(struct ndr_push *ndr,\n\t\t\t\t\t       int ndr_flags,\n\t\t\t\t\t       const char *s)\n{\n\treturn ndr_push_dns_string_list(ndr,\n\t\t\t\t\t&ndr->dns_string_list,\n\t\t\t\t\tndr_flags,\n\t\t\t\t\ts);\n}",
        "output": "1",
        "idx": 4636
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline uint64_t do_fri(CPUPPCState *env, uint64_t arg,\n\n                              int rounding_mode)\n\n{\n\n    CPU_DoubleU farg;\n\n\n\n    farg.ll = arg;\n\n\n\n    if (unlikely(float64_is_signaling_nan(farg.d))) {\n\n        /* sNaN round */\n\n        farg.ll = fload_invalid_op_excp(env, POWERPC_EXCP_FP_VXSNAN |\n\n                                        POWERPC_EXCP_FP_VXCVI);\n\n    } else if (unlikely(float64_is_quiet_nan(farg.d) ||\n\n                        float64_is_infinity(farg.d))) {\n\n        /* qNan / infinity round */\n\n        farg.ll = fload_invalid_op_excp(env, POWERPC_EXCP_FP_VXCVI);\n\n    } else {\n\n        set_float_rounding_mode(rounding_mode, &env->fp_status);\n\n        farg.ll = float64_round_to_int(farg.d, &env->fp_status);\n\n        /* Restore rounding mode from FPSCR */\n\n        fpscr_set_rounding_mode(env);\n\n    }\n\n    return farg.ll;\n\n}\n",
        "output": "0",
        "idx": 3917
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "compute_binder_key(const mac_entry_st *prf,\n\t\t   const uint8_t *key, size_t keylen,\n\t\t   bool resuming,\n\t\t   void *out)\n{\n\tint ret;\n\tconst char ext_label[] = EXT_BINDER_LABEL;\n\tconst size_t ext_label_len = sizeof(ext_label) - 1;\n\tconst char res_label[] = RES_BINDER_LABEL;\n\tconst size_t res_label_len = sizeof(res_label) - 1;\n\tconst char *label = resuming ? res_label : ext_label;\n\tsize_t label_len = resuming ? res_label_len : ext_label_len;\n\tuint8_t tmp_key[MAX_HASH_SIZE];\n\n\t/* Compute HKDF-Extract(0, psk) */\n\tret = _tls13_init_secret2(prf, key, keylen, tmp_key);\n\tif (ret < 0)\n\t\treturn ret;\n\n\t/* Compute Derive-Secret(secret, label, transcript_hash) */\n\tret = _tls13_derive_secret2(prf, label, label_len,\n\t\t\t\t    NULL, 0, tmp_key, out);\n\tif (ret < 0)\n\t\treturn ret;\n\n\treturn 0;\n}",
        "output": "0",
        "idx": 2727
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_mpeg_flush(AVCodecContext *avctx){\n\n    int i;\n\n    MpegEncContext *s = avctx->priv_data;\n\n\n\n    if(s==NULL || s->picture==NULL)\n\n        return;\n\n\n\n    for (i = 0; i < MAX_PICTURE_COUNT; i++)\n\n        ff_mpeg_unref_picture(s, &s->picture[i]);\n\n    s->current_picture_ptr = s->last_picture_ptr = s->next_picture_ptr = NULL;\n\n\n\n    ff_mpeg_unref_picture(s, &s->current_picture);\n\n    ff_mpeg_unref_picture(s, &s->last_picture);\n\n    ff_mpeg_unref_picture(s, &s->next_picture);\n\n\n\n    s->mb_x= s->mb_y= 0;\n\n\n\n    s->parse_context.state= -1;\n\n    s->parse_context.frame_start_found= 0;\n\n    s->parse_context.overread= 0;\n\n    s->parse_context.overread_index= 0;\n\n    s->parse_context.index= 0;\n\n    s->parse_context.last_index= 0;\n\n    s->bitstream_buffer_size=0;\n\n    s->pp_time=0;\n\n}\n",
        "output": "0",
        "idx": 4781
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void rose_start_t3timer(struct sock *sk)\n{\n\tstruct rose_sock *rose = rose_sk(sk);\n\n\tdel_timer(&rose->timer);\n\n\trose->timer.function = rose_timer_expiry;\n\trose->timer.expires  = jiffies + rose->t3;\n\n\tadd_timer(&rose->timer);\n}",
        "output": "1",
        "idx": 6174
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int cdrom_probe_device(const char *filename)\n\n{\n\n    if (strstart(filename, \"/dev/cd\", NULL))\n\n        return 100;\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 2536
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nstatic SDL_INLINE FT_UInt get_char_index(TTF_Font *font, Uint32 ch)\n{\n    Uint32 cache_index_size = sizeof (font->cache_index) / sizeof (font->cache_index[0]);\n\n    if (ch < cache_index_size) {\n        FT_UInt idx = font->cache_index[ch];\n        if (idx) {\n            return idx;\n        }\n        idx = FT_Get_Char_Index(font->face, ch);\n        font->cache_index[ch] = idx;\n        return idx;\n    }\n\n    return FT_Get_Char_Index(font->face, ch);",
        "output": "0",
        "idx": 807
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ldb_lock_backend_callback(struct ldb_request *req,\n\t\t\t\t     struct ldb_reply *ares)\n{\n\tstruct ldb_db_lock_context *lock_context;\n\tint ret;\n\n\tlock_context = talloc_get_type(req->context,\n\t\t\t\t       struct ldb_db_lock_context);\n\n\tif (!ares) {\n\t\treturn ldb_module_done(lock_context->req, NULL, NULL,\n\t\t\t\t\tLDB_ERR_OPERATIONS_ERROR);\n\t}\n\tif (ares->error != LDB_SUCCESS || ares->type == LDB_REPLY_DONE) {\n\t\tret = ldb_module_done(lock_context->req, ares->controls,\n\t\t\t\t      ares->response, ares->error);\n\t\t/*\n\t\t * If this is a LDB_REPLY_DONE or an error, unlock the\n\t\t * DB by calling the destructor on this context\n\t\t */\n\t\ttalloc_free(lock_context);\n\t\treturn ret;\n\t}\n\n\t/* Otherwise pass on the callback */\n\tswitch (ares->type) {\n\tcase LDB_REPLY_ENTRY:\n\t\treturn ldb_module_send_entry(lock_context->req, ares->message,\n\t\t\t\t\t     ares->controls);\n\n\tcase LDB_REPLY_REFERRAL:\n\t\treturn ldb_module_send_referral(lock_context->req,\n\t\t\t\t\t\tares->referral);\n\tdefault:\n\t\t/* Can't happen */\n\t\treturn LDB_ERR_OPERATIONS_ERROR;\n\t}\n}",
        "output": "1",
        "idx": 1293
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline bool extended_addresses_enabled(CPUARMState *env)\n\n{\n\n    return arm_feature(env, ARM_FEATURE_LPAE)\n\n        && (env->cp15.c2_control & (1 << 31));\n\n}\n",
        "output": "1",
        "idx": 888
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void CompactProtocolReader::readStringBody(StrType& str, int32_t size) {\n  if (static_cast<int32_t>(in_.length()) < size) {\n    str.reserve(size); // only reserve for multi iter case below\n  }\n  str.clear();\n  size_t size_left = size;\n  while (size_left > 0) {\n    auto data = in_.peekBytes();\n    auto data_avail = std::min(data.size(), size_left);\n    if (data.empty()) {\n      TProtocolException::throwExceededSizeLimit();\n    }\n\n    str.append((const char*)data.data(), data_avail);\n    size_left -= data_avail;\n    in_.skipNoAdvance(data_avail);\n  }\n}",
        "output": "1",
        "idx": 2310
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "nv_select(cmdarg_T *cap)\n{\n    if (VIsual_active)\n\tVIsual_select = TRUE;\n    else if (VIsual_reselect)\n    {\n\tcap->nchar = 'v';\t    // fake \"gv\" command\n\tcap->arg = TRUE;\n\tnv_g_cmd(cap);\n    }\n}",
        "output": "0",
        "idx": 3734
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void spapr_dt_events(void *fdt, uint32_t check_exception_irq)\n\n{\n\n    int event_sources, epow_events;\n\n    uint32_t irq_ranges[] = {cpu_to_be32(check_exception_irq), cpu_to_be32(1)};\n\n    uint32_t interrupts[] = {cpu_to_be32(check_exception_irq), 0};\n\n\n\n    _FDT(event_sources = fdt_add_subnode(fdt, 0, \"event-sources\"));\n\n\n\n    _FDT(fdt_setprop(fdt, event_sources, \"interrupt-controller\", NULL, 0));\n\n    _FDT(fdt_setprop_cell(fdt, event_sources, \"#interrupt-cells\", 2));\n\n    _FDT(fdt_setprop(fdt, event_sources, \"interrupt-ranges\",\n\n                     irq_ranges, sizeof(irq_ranges)));\n\n\n\n    _FDT(epow_events = fdt_add_subnode(fdt, event_sources, \"epow-events\"));\n\n    _FDT(fdt_setprop(fdt, epow_events, \"interrupts\",\n\n                     interrupts, sizeof(interrupts)));\n\n}\n",
        "output": "0",
        "idx": 2400
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "_TIFFmalloc(tmsize_t s)\n{\n\treturn (malloc((size_t) s));\n}",
        "output": "1",
        "idx": 5208
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void omap_i2c_set_slave_addr(OMAPI2C *s, uint8_t addr)\n\n{\n\n    uint16_t data = addr;\n\n\n\n    memwrite(s->addr + OMAP_I2C_SA, &data, 2);\n\n    memread(s->addr + OMAP_I2C_SA, &data, 2);\n\n    g_assert_cmphex(data, ==, addr);\n\n}\n",
        "output": "1",
        "idx": 1893
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void exit_thread(void)\n{\n\tthread_notify(THREAD_NOTIFY_EXIT, current_thread_info());\n}",
        "output": "0",
        "idx": 6112
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vtd_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n    X86IOMMUClass *x86_class = X86_IOMMU_CLASS(klass);\n\n\n\n    dc->reset = vtd_reset;\n\n    dc->vmsd = &vtd_vmstate;\n\n    dc->props = vtd_properties;\n\n    dc->hotpluggable = false;\n\n    x86_class->realize = vtd_realize;\n\n    x86_class->int_remap = vtd_int_remap;\n\n\n\n\n\n\n}",
        "output": "1",
        "idx": 3044
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int do_io_accounting(struct task_struct *task, char *buffer, int whole)\n{\n\tstruct task_io_accounting acct = task->ioac;\n\tunsigned long flags;\n\n\tif (whole && lock_task_sighand(task, &flags)) {\n\t\tstruct task_struct *t = task;\n\n\t\ttask_io_accounting_add(&acct, &task->signal->ioac);\n\t\twhile_each_thread(task, t)\n\t\t\ttask_io_accounting_add(&acct, &t->ioac);\n\n\t\tunlock_task_sighand(task, &flags);\n\t}\n\treturn sprintf(buffer,\n\t\t\t\"rchar: %llu\\n\"\n\t\t\t\"wchar: %llu\\n\"\n\t\t\t\"syscr: %llu\\n\"\n\t\t\t\"syscw: %llu\\n\"\n\t\t\t\"read_bytes: %llu\\n\"\n\t\t\t\"write_bytes: %llu\\n\"\n\t\t\t\"cancelled_write_bytes: %llu\\n\",\n\t\t\t(unsigned long long)acct.rchar,\n\t\t\t(unsigned long long)acct.wchar,\n\t\t\t(unsigned long long)acct.syscr,\n\t\t\t(unsigned long long)acct.syscw,\n\t\t\t(unsigned long long)acct.read_bytes,\n\t\t\t(unsigned long long)acct.write_bytes,\n\t\t\t(unsigned long long)acct.cancelled_write_bytes);\n}",
        "output": "1",
        "idx": 5511
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void SetLexerLocus( TidyDocImpl* doc, Lexer *lexer )\n{\n    lexer->lines = doc->docIn->curline;\n    lexer->columns = doc->docIn->curcol;\n}",
        "output": "0",
        "idx": 5391
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool qdict_get_try_bool(const QDict *qdict, const char *key, bool def_value)\n\n{\n\n    QObject *obj;\n\n\n\n    obj = qdict_get(qdict, key);\n\n    if (!obj || qobject_type(obj) != QTYPE_QBOOL)\n\n        return def_value;\n\n\n\n    return qbool_get_bool(qobject_to_qbool(obj));\n\n}\n",
        "output": "1",
        "idx": 4743
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void* Init(TfLiteContext* context, const char* buffer, size_t length) {\n  auto* data = new OpData;\n  return data;\n}",
        "output": "0",
        "idx": 5251
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cJSON *cJSON_CreateBool( int b )\n{\n\tcJSON *item = cJSON_New_Item();\n\tif ( item )\n\t\titem->type = b ? cJSON_True : cJSON_False;\n\treturn item;\n}",
        "output": "1",
        "idx": 2771
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TEST_F(ZNCTest, StatusEchoMessage) {\n    auto znc = Run();\n    auto ircd = ConnectIRCd();\n    auto client = LoginClient();\n    client.Write(\"CAP REQ :echo-message\");\n    client.Write(\"PRIVMSG *status :blah\");\n    client.ReadUntil(\":nick!user@irc.znc.in PRIVMSG *status :blah\");\n    client.ReadUntil(\":*status!znc@znc.in PRIVMSG nick :Unknown command\");\n}",
        "output": "1",
        "idx": 1771
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void rds_ib_send_unmap_data(struct rds_ib_connection *ic,\n\t\t\t\t   struct rm_data_op *op,\n\t\t\t\t   int wc_status)\n{\n\tif (op->op_nents)\n\t\tib_dma_unmap_sg(ic->i_cm_id->device,\n\t\t\t\top->op_sg, op->op_nents,\n\t\t\t\tDMA_TO_DEVICE);\n}",
        "output": "0",
        "idx": 2234
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static gboolean qio_channel_websock_handshake_send(QIOChannel *ioc,\n\n                                                   GIOCondition condition,\n\n                                                   gpointer user_data)\n\n{\n\n    QIOTask *task = user_data;\n\n    QIOChannelWebsock *wioc = QIO_CHANNEL_WEBSOCK(\n\n        qio_task_get_source(task));\n\n    Error *err = NULL;\n\n    ssize_t ret;\n\n\n\n    ret = qio_channel_write(wioc->master,\n\n                            (char *)wioc->encoutput.buffer,\n\n                            wioc->encoutput.offset,\n\n                            &err);\n\n\n\n    if (ret < 0) {\n\n        trace_qio_channel_websock_handshake_fail(ioc);\n\n        qio_task_set_error(task, err);\n\n        qio_task_complete(task);\n\n        return FALSE;\n\n    }\n\n\n\n    buffer_advance(&wioc->encoutput, ret);\n\n    if (wioc->encoutput.offset == 0) {\n\n        trace_qio_channel_websock_handshake_complete(ioc);\n\n        qio_task_complete(task);\n\n        return FALSE;\n\n    }\n\n    trace_qio_channel_websock_handshake_pending(ioc, G_IO_OUT);\n\n    return TRUE;\n\n}\n",
        "output": "1",
        "idx": 4355
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void mbedtls_strerror( int ret, char *buf, size_t buflen )\n{\n    ((void) ret);\n\n    if( buflen > 0 )\n        buf[0] = '\\0';\n}",
        "output": "1",
        "idx": 2906
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "struct mm_struct *mm_for_maps(struct task_struct *task)\n{\n\tstruct mm_struct *mm = get_task_mm(task);\n\tif (!mm)\n\t\treturn NULL;\n\tif (mm != current->mm) {\n\t\t/*\n\t\t * task->mm can be changed before security check,\n\t\t * in that case we must notice the change after.\n\t\t */\n\t\tif (!ptrace_may_access(task, PTRACE_MODE_READ) ||\n\t\t    mm != task->mm) {\n\t\t\tmmput(mm);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\tdown_read(&mm->mmap_sem);\n\treturn mm;\n}",
        "output": "1",
        "idx": 246
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int get_file_caps(struct linux_binprm *bprm)\n{\n\tbprm_clear_caps(bprm);\n\treturn 0;\n}",
        "output": "1",
        "idx": 1702
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "bool inode_owner_or_capable(const struct inode *inode)\n{\n\tif (uid_eq(current_fsuid(), inode->i_uid))\n\t\treturn true;\n\tif (inode_capable(inode, CAP_FOWNER))\n\t\treturn true;\n\treturn false;\n}",
        "output": "1",
        "idx": 2267
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void pxa2xx_pic_save(QEMUFile *f, void *opaque)\n\n{\n\n    PXA2xxPICState *s = (PXA2xxPICState *) opaque;\n\n    int i;\n\n\n\n    for (i = 0; i < 2; i ++)\n\n        qemu_put_be32s(f, &s->int_enabled[i]);\n\n    for (i = 0; i < 2; i ++)\n\n        qemu_put_be32s(f, &s->int_pending[i]);\n\n    for (i = 0; i < 2; i ++)\n\n        qemu_put_be32s(f, &s->is_fiq[i]);\n\n    qemu_put_be32s(f, &s->int_idle);\n\n    for (i = 0; i < PXA2XX_PIC_SRCS; i ++)\n\n        qemu_put_be32s(f, &s->priority[i]);\n\n}\n",
        "output": "0",
        "idx": 4132
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "stop_postmaster(void)\n{\n\tif (postmaster_running)\n\t{\n\t\t/* We use pg_ctl to issue the kill and wait for stop */\n\t\tchar\t\tbuf[MAXPGPATH * 2];\n\t\tint\t\t\tr;\n\n\t\t/* On Windows, system() seems not to force fflush, so... */\n\t\tfflush(stdout);\n\t\tfflush(stderr);\n\n\t\tsnprintf(buf, sizeof(buf),\n\t\t\t\t SYSTEMQUOTE \"\\\"%s/pg_ctl\\\" stop -D \\\"%s/data\\\" -s -m fast\" SYSTEMQUOTE,\n\t\t\t\t bindir, temp_install);\n\t\tr = system(buf);\n\t\tif (r != 0)\n\t\t{\n\t\t\tfprintf(stderr, _(\"\\n%s: could not stop postmaster: exit code was %d\\n\"),\n\t\t\t\t\tprogname, r);\n\t\t\t_exit(2);\t\t\t/* not exit(), that could be recursive */\n\t\t}\n\n\t\tpostmaster_running = false;\n\t}\n}",
        "output": "0",
        "idx": 642
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "cJSON *cJSON_CreateFloat( double num )\n{\n\tcJSON *item = cJSON_New_Item();\n\tif ( item ) {\n\t\titem->type = cJSON_Number;\n\t\titem->valuefloat = num;\n\t\titem->valueint = num;\n\t}\n\treturn item;\n}",
        "output": "1",
        "idx": 3135
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "closure (void)\n{\n  int tindex, ntokens, i;\n\n  atom();\n  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)\n    if (tok == REPMN && (minrep || maxrep))\n      {\n        ntokens = nsubtoks(dfa->tindex);\n        tindex = dfa->tindex - ntokens;\n        if (maxrep < 0)\n          addtok(PLUS);\n        if (minrep == 0)\n          addtok(QMARK);\n        for (i = 1; i < minrep; ++i)\n          {\n            copytoks(tindex, ntokens);\n            addtok(CAT);\n          }\n        for (; i < maxrep; ++i)\n          {\n            copytoks(tindex, ntokens);\n            addtok(QMARK);\n            addtok(CAT);\n          }\n        tok = lex();\n      }\n    else if (tok == REPMN)\n      {\n        dfa->tindex -= nsubtoks(dfa->tindex);\n        tok = lex();\n        closure();\n      }\n    else\n      {\n        addtok(tok);\n        tok = lex();\n      }\n}",
        "output": "1",
        "idx": 1206
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int ff_h264_get_profile(SPS *sps)\n\n{\n\n    int profile = sps->profile_idc;\n\n\n\n    switch (sps->profile_idc) {\n\n    case FF_PROFILE_H264_BASELINE:\n\n        // constraint_set1_flag set to 1\n\n        profile |= (sps->constraint_set_flags & 1 << 1) ? FF_PROFILE_H264_CONSTRAINED : 0;\n\n        break;\n\n    case FF_PROFILE_H264_HIGH_10:\n\n    case FF_PROFILE_H264_HIGH_422:\n\n    case FF_PROFILE_H264_HIGH_444_PREDICTIVE:\n\n        // constraint_set3_flag set to 1\n\n        profile |= (sps->constraint_set_flags & 1 << 3) ? FF_PROFILE_H264_INTRA : 0;\n\n        break;\n\n    }\n\n\n\n    return profile;\n\n}\n",
        "output": "0",
        "idx": 1273
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void _note_batch_job_finished(uint32_t job_id)\n{\n\tslurm_mutex_lock(&fini_mutex);\n\tfini_job_id[next_fini_job_inx] = job_id;\n\tif (++next_fini_job_inx >= FINI_JOB_CNT)\n\t\tnext_fini_job_inx = 0;\n\tslurm_mutex_unlock(&fini_mutex);\n}",
        "output": "0",
        "idx": 3282
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void svm_set_idt(struct kvm_vcpu *vcpu, struct desc_ptr *dt)\n{\n\tstruct vcpu_svm *svm = to_svm(vcpu);\n\n\tsvm->vmcb->save.idtr.limit = dt->size;\n\tsvm->vmcb->save.idtr.base = dt->address ;\n\tmark_dirty(svm->vmcb, VMCB_DT);\n}",
        "output": "0",
        "idx": 4285
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void MsgSetHOSTNAME(msg_t *pThis, uchar* pszHOSTNAME, int lenHOSTNAME)\n{\n\tassert(pThis != NULL);\n\n\tfreeHOSTNAME(pThis);\n\n\tpThis->iLenHOSTNAME = lenHOSTNAME;\n\tif(pThis->iLenHOSTNAME < CONF_HOSTNAME_BUFSIZE) {\n\t\t/* small enough: use fixed buffer (faster!) */\n\t\tpThis->pszHOSTNAME = pThis->szHOSTNAME;\n\t} else if((pThis->pszHOSTNAME = (uchar*) MALLOC(pThis->iLenHOSTNAME + 1)) == NULL) {\n\t\t/* truncate message, better than completely loosing it... */\n\t\tpThis->pszHOSTNAME = pThis->szHOSTNAME;\n\t\tpThis->iLenHOSTNAME = CONF_HOSTNAME_BUFSIZE - 1;\n\t}\n\n\tmemcpy(pThis->pszHOSTNAME, pszHOSTNAME, pThis->iLenHOSTNAME);\n\tpThis->pszHOSTNAME[pThis->iLenHOSTNAME] = '\\0'; /* this also works with truncation! */\n}",
        "output": "0",
        "idx": 3212
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "ContentLine_Analyzer::ContentLine_Analyzer(Connection* conn, bool orig)\n: TCP_SupportAnalyzer(\"CONTENTLINE\", conn, orig)\n\t{\n\tInitState();\n\t}",
        "output": "0",
        "idx": 4724
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ftp_write(URLContext *h, const unsigned char *buf, int size)\n\n{\n\n    int err;\n\n    FTPContext *s = h->priv_data;\n\n    int written;\n\n\n\n    av_dlog(h, \"ftp protocol write %d bytes\\n\", size);\n\n\n\n    if (s->state == DISCONNECTED) {\n\n        if ((err = ftp_connect_data_connection(h)) < 0)\n\n            return err;\n\n    }\n\n    if (s->state == READY) {\n\n        if ((err = ftp_store(s)) < 0)\n\n            return err;\n\n    }\n\n    if (s->conn_data && s->state == UPLOADING) {\n\n        written = ffurl_write(s->conn_data, buf, size);\n\n        if (written > 0) {\n\n            s->position += written;\n\n            s->filesize = FFMAX(s->filesize, s->position);\n\n        }\n\n        return written;\n\n    }\n\n\n\n    av_log(h, AV_LOG_ERROR, \"FTP write failed\\n\");\n\n    return AVERROR(EIO);\n\n}\n",
        "output": "0",
        "idx": 2381
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int ahci_dma_rw_buf(IDEDMA *dma, int is_write)\n\n{\n\n    AHCIDevice *ad = DO_UPCAST(AHCIDevice, dma, dma);\n\n    IDEState *s = &ad->port.ifs[0];\n\n    uint8_t *p = s->io_buffer + s->io_buffer_index;\n\n    int l = s->io_buffer_size - s->io_buffer_index;\n\n\n\n    if (ahci_populate_sglist(ad, &s->sg)) {\n\n        return 0;\n\n    }\n\n\n\n    if (is_write) {\n\n        dma_buf_read(p, l, &s->sg);\n\n    } else {\n\n        dma_buf_write(p, l, &s->sg);\n\n    }\n\n\n\n    /* update number of transferred bytes */\n\n    ad->cur_cmd->status = cpu_to_le32(le32_to_cpu(ad->cur_cmd->status) + l);\n\n    s->io_buffer_index += l;\n\n\n\n    DPRINTF(ad->port_no, \"len=%#x\\n\", l);\n\n\n\n    return 1;\n\n}\n",
        "output": "1",
        "idx": 4272
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void page_flush_tb(void)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < V_L1_SIZE; i++) {\n\n        page_flush_tb_1(V_L1_SHIFT / L2_BITS - 1, l1_map + i);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2739
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "target_ulong helper_load_slb_esid(CPUPPCState *env, target_ulong rb)\n\n{\n\n    target_ulong rt;\n\n\n\n    if (ppc_load_slb_esid(env, rb, &rt) < 0) {\n\n        helper_raise_exception_err(env, POWERPC_EXCP_PROGRAM,\n\n                                   POWERPC_EXCP_INVAL);\n\n    }\n\n    return rt;\n\n}\n",
        "output": "1",
        "idx": 179
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "allow_mech_by_default(gss_OID mech)\n{\n    OM_uint32 status, minor;\n    gss_OID_set attrs;\n    int reject = 0, p;\n\n    /* Whether we accept an interposer mech depends on whether we accept the\n     * mech it interposes. */\n    mech = gssint_get_public_oid(mech);\n    if (mech == GSS_C_NO_OID)\n\treturn 0;\n\n    status = gss_inquire_attrs_for_mech(&minor, mech, &attrs, NULL);\n    if (status)\n\treturn 0;\n\n    /* Check for each attribute which would cause us to exclude this mech from\n     * the default credential. */\n    if (generic_gss_test_oid_set_member(&minor, GSS_C_MA_DEPRECATED,\n\t\t\t\t\tattrs, &p) != GSS_S_COMPLETE || p)\n\treject = 1;\n    else if (generic_gss_test_oid_set_member(&minor, GSS_C_MA_NOT_DFLT_MECH,\n\t\t\t\t\t     attrs, &p) != GSS_S_COMPLETE || p)\n\treject = 1;\n\n    (void) gss_release_oid_set(&minor, &attrs);\n    return !reject;\n}",
        "output": "0",
        "idx": 406
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "double Field_short::val_real(void)\n{\n  ASSERT_COLUMN_MARKED_FOR_READ;\n  short j;\n  j=sint2korr(ptr);\n  return unsigned_flag ? (double) (unsigned short) j : (double) j;\n}",
        "output": "0",
        "idx": 4910
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int net_host_check_device(const char *device)\n\n{\n\n    int i;\n\n    const char *valid_param_list[] = { \"tap\", \"socket\", \"dump\"\n\n#ifdef CONFIG_NET_BRIDGE\n\n                                       , \"bridge\"\n\n#endif\n\n#ifdef CONFIG_SLIRP\n\n                                       ,\"user\"\n\n#endif\n\n#ifdef CONFIG_VDE\n\n                                       ,\"vde\"\n\n#endif\n\n    };\n\n    for (i = 0; i < ARRAY_SIZE(valid_param_list); i++) {\n\n        if (!strncmp(valid_param_list[i], device,\n\n                     strlen(valid_param_list[i])))\n\n            return 1;\n\n    }\n\n\n\n    return 0;\n\n}\n",
        "output": "0",
        "idx": 5130
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline int decode_residual_inter(AVSContext *h) {\n\n    int block;\n\n\n\n    /* get coded block pattern */\n\n    int cbp= get_ue_golomb(&h->s.gb);\n\n    if(cbp > 63){\n\n        av_log(h->s.avctx, AV_LOG_ERROR, \"illegal inter cbp\\n\");\n\n        return -1;\n\n    }\n\n    h->cbp = cbp_tab[cbp][1];\n\n\n\n    /* get quantizer */\n\n    if(h->cbp && !h->qp_fixed)\n\n        h->qp = (h->qp + get_se_golomb(&h->s.gb)) & 63;\n\n    for(block=0;block<4;block++)\n\n        if(h->cbp & (1<<block))\n\n            decode_residual_block(h,&h->s.gb,ff_cavs_inter_dec,0,h->qp,\n\n                                  h->cy + h->luma_scan[block], h->l_stride);\n\n    decode_residual_chroma(h);\n\n\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 5554
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "  UnknownRecordContent(const string& zone) : DNSRecordContent(0)\n  {\n    d_record.insert(d_record.end(), zone.begin(), zone.end());\n  }",
        "output": "0",
        "idx": 3351
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void regexp_release(struct regexp *regexp) {\n    if (regexp->re != NULL) {\n        regfree(regexp->re);\n        FREE(regexp->re);\n    }\n}",
        "output": "0",
        "idx": 2946
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "uint32_t PacketReader::get32BitInt()\n{\n  uint32_t ret=0;\n  ret+=d_content.at(d_pos++);\n  ret<<=8;\n  ret+=d_content.at(d_pos++);\n  ret<<=8;\n  ret+=d_content.at(d_pos++);\n  ret<<=8;\n  ret+=d_content.at(d_pos++);\n  \n  return ret;\n}",
        "output": "0",
        "idx": 2628
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "long do_rt_sigreturn(CPUAlphaState *env)\n\n{\n\n    abi_ulong frame_addr = env->ir[IR_A0];\n\n    struct target_rt_sigframe *frame;\n\n    sigset_t set;\n\n\n\n    if (!lock_user_struct(VERIFY_READ, frame, frame_addr, 1)) {\n\n        goto badframe;\n\n    }\n\n    target_to_host_sigset(&set, &frame->uc.tuc_sigmask);\n\n    do_sigprocmask(SIG_SETMASK, &set, NULL);\n\n\n\n    if (restore_sigcontext(env, &frame->uc.tuc_mcontext)) {\n\n        goto badframe;\n\n    }\n\n    if (do_sigaltstack(frame_addr + offsetof(struct target_rt_sigframe,\n\n                                             uc.tuc_stack),\n\n                       0, env->ir[IR_SP]) == -EFAULT) {\n\n        goto badframe;\n\n    }\n\n\n\n    unlock_user_struct(frame, frame_addr, 0);\n\n    return env->ir[IR_V0];\n\n\n\n\n\n badframe:\n\n    unlock_user_struct(frame, frame_addr, 0);\n\n    force_sig(TARGET_SIGSEGV);\n\n}\n",
        "output": "1",
        "idx": 3377
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static ssize_t ucma_bind_ip(struct ucma_file *file, const char __user *inbuf,\n\t\t\t      int in_len, int out_len)\n{\n\tstruct rdma_ucm_bind_ip cmd;\n\tstruct ucma_context *ctx;\n\tint ret;\n\n\tif (copy_from_user(&cmd, inbuf, sizeof(cmd)))\n\t\treturn -EFAULT;\n\n\tif (!rdma_addr_size_in6(&cmd.addr))\n\t\treturn -EINVAL;\n\n\tctx = ucma_get_ctx(file, cmd.id);\n\tif (IS_ERR(ctx))\n\t\treturn PTR_ERR(ctx);\n\n\tmutex_lock(&ctx->mutex);\n\tret = rdma_bind_addr(ctx->cm_id, (struct sockaddr *) &cmd.addr);\n\tmutex_unlock(&ctx->mutex);\n\n\tucma_put_ctx(ctx);\n\treturn ret;\n}",
        "output": "0",
        "idx": 1065
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int intf_find_seq(struct ipmi_smi      *intf,\n\t\t\t unsigned char        seq,\n\t\t\t short                channel,\n\t\t\t unsigned char        cmd,\n\t\t\t unsigned char        netfn,\n\t\t\t struct ipmi_addr     *addr,\n\t\t\t struct ipmi_recv_msg **recv_msg)\n{\n\tint           rv = -ENODEV;\n\tunsigned long flags;\n\n\tif (seq >= IPMI_IPMB_NUM_SEQ)\n\t\treturn -EINVAL;\n\n\tspin_lock_irqsave(&intf->seq_lock, flags);\n\tif (intf->seq_table[seq].inuse) {\n\t\tstruct ipmi_recv_msg *msg = intf->seq_table[seq].recv_msg;\n\n\t\tif ((msg->addr.channel == channel) && (msg->msg.cmd == cmd)\n\t\t\t\t&& (msg->msg.netfn == netfn)\n\t\t\t\t&& (ipmi_addr_equal(addr, &msg->addr))) {\n\t\t\t*recv_msg = msg;\n\t\t\tintf->seq_table[seq].inuse = 0;\n\t\t\trv = 0;\n\t\t}\n\t}\n\tspin_unlock_irqrestore(&intf->seq_lock, flags);\n\n\treturn rv;\n}",
        "output": "0",
        "idx": 4328
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "window_select_shape_events (GSWindow *window)\n{\n#ifdef HAVE_SHAPE_EXT\n        unsigned long events;\n        int           shape_error_base;\n\n        gdk_error_trap_push ();\n\n        if (XShapeQueryExtension (GDK_DISPLAY (), &window->priv->shape_event_base, &shape_error_base)) {\n                events = ShapeNotifyMask;\n                XShapeSelectInput (GDK_DISPLAY (), GDK_WINDOW_XID (GTK_WIDGET (window)->window), events);\n        }\n\n        gdk_display_sync (gdk_display_get_default ());\n        gdk_error_trap_pop ();\n#endif\n}",
        "output": "0",
        "idx": 1388
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline struct shmid_kernel *shm_obtain_object(struct ipc_namespace *ns, int id)\n{\n\tstruct kern_ipc_perm *ipcp = ipc_obtain_object(&shm_ids(ns), id);\n\n\tif (IS_ERR(ipcp))\n\t\treturn ERR_CAST(ipcp);\n\n\treturn container_of(ipcp, struct shmid_kernel, shm_perm);\n}",
        "output": "0",
        "idx": 1122
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PackLinuxElf64::check_pt_dynamic(Elf64_Phdr const *const phdr)\n{\n    upx_uint64_t t = get_te64(&phdr->p_offset), s = sizeof(Elf64_Dyn) + t;\n    upx_uint64_t vaddr = get_te64(&phdr->p_vaddr);\n    upx_uint64_t filesz = get_te64(&phdr->p_filesz), memsz = get_te64(&phdr->p_memsz);\n    upx_uint64_t align = get_te64(&phdr->p_align);\n    if (s < t || (upx_uint64_t)file_size < s\n    ||  (7 & t) || (0xf & (filesz | memsz))  // .balign 8; 16==sizeof(Elf64_Dyn)\n    ||  (-1+ align) & (t ^ vaddr)\n    ||  (unsigned long)file_size <= memsz\n    ||  filesz < sizeof(Elf64_Dyn)\n    ||  memsz  < sizeof(Elf64_Dyn)\n    ||  filesz < memsz) {\n        char msg[50]; snprintf(msg, sizeof(msg), \"bad PT_DYNAMIC phdr[%u]\",\n            (unsigned)(phdr - phdri));\n        throwCantPack(msg);\n    }\n    sz_dynseg = memsz;\n    return t;\n}",
        "output": "1",
        "idx": 4391
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int __btrfs_submit_bio_start(struct inode *inode, int rw,\n\t\t\t\t    struct bio *bio, int mirror_num,\n\t\t\t\t    unsigned long bio_flags,\n\t\t\t\t    u64 bio_offset)\n{\n\tstruct btrfs_root *root = BTRFS_I(inode)->root;\n\tint ret = 0;\n\n\tret = btrfs_csum_one_bio(root, inode, bio, 0, 0);\n\tBUG_ON(ret); /* -ENOMEM */\n\treturn 0;\n}",
        "output": "0",
        "idx": 4080
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static bool aio_epoll_try_enable(AioContext *ctx)\n\n{\n\n    AioHandler *node;\n\n    struct epoll_event event;\n\n\n\n    QLIST_FOREACH(node, &ctx->aio_handlers, node) {\n\n        int r;\n\n        if (node->deleted || !node->pfd.events) {\n\n            continue;\n\n        }\n\n        event.events = epoll_events_from_pfd(node->pfd.events);\n\n        event.data.ptr = node;\n\n        r = epoll_ctl(ctx->epollfd, EPOLL_CTL_ADD, node->pfd.fd, &event);\n\n        if (r) {\n\n            return false;\n\n        }\n\n    }\n\n    ctx->epoll_enabled = true;\n\n    return true;\n\n}\n",
        "output": "0",
        "idx": 277
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "rightTrim(char *s)\n{\n\tchar\t   *sEnd;\n\n\tsEnd = s + strlen(s) - 1;\n\twhile (sEnd >= s && isspace(*sEnd))\n\t\tsEnd--;\n\tif (sEnd < s)\n\t\ts[0] = '\\0';\n\telse\n\t\ts[sEnd - s + 1] = '\\0';\n\treturn s;\n}",
        "output": "0",
        "idx": 1099
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "tcp_sequence_number_analysis_print_zero_window(packet_info * pinfo,\n                          proto_item * flags_item,\n                          struct tcp_acked *ta\n                        )\n{\n    /* TCP Zero Window Probe */\n    if (ta->flags & TCP_A_ZERO_WINDOW_PROBE) {\n        expert_add_info(pinfo, flags_item, &ei_tcp_analysis_zero_window_probe);\n        col_prepend_fence_fstr(pinfo->cinfo, COL_INFO, \"[TCP ZeroWindowProbe] \");\n    }\n    /* TCP Zero Window */\n    if (ta->flags&TCP_A_ZERO_WINDOW) {\n        expert_add_info(pinfo, flags_item, &ei_tcp_analysis_zero_window);\n        col_prepend_fence_fstr(pinfo->cinfo, COL_INFO, \"[TCP ZeroWindow] \");\n    }\n    /* TCP Zero Window Probe Ack */\n    if (ta->flags & TCP_A_ZERO_WINDOW_PROBE_ACK) {\n        expert_add_info(pinfo, flags_item, &ei_tcp_analysis_zero_window_probe_ack);\n        col_prepend_fence_fstr(pinfo->cinfo, COL_INFO,\n                               \"[TCP ZeroWindowProbeAck] \");\n    }\n}",
        "output": "0",
        "idx": 1675
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "size_t qsb_get_length(const QEMUSizedBuffer *qsb)\n\n{\n\n    return qsb->used;\n\n}\n",
        "output": "1",
        "idx": 4221
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "hstrerror(int herr)\n{\n  if (0 <= herr && herr < h_nerr)\n    return h_errlist[herr];\n  else\n    return \"Error number out of range (hstrerror)\";\n}",
        "output": "0",
        "idx": 4007
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "PHP_FUNCTION(bcsqrt)\n{\n\tchar *left;\n\tint left_len;\n\tlong scale_param = 0;\n\tbc_num result;\n\tint scale = BCG(bc_precision), argc = ZEND_NUM_ARGS();\n\n\tif (zend_parse_parameters(argc TSRMLS_CC, \"s|l\", &left, &left_len, &scale_param) == FAILURE) {\n\t\treturn;\n\t}\n\t\n\tif (argc == 2) {\n\t\tscale = (int) ((int)scale_param < 0) ? 0 : scale_param;\n\t}\n\n\tbc_init_num(&result TSRMLS_CC);\n\tphp_str2num(&result, left TSRMLS_CC);\n\t\n\tif (bc_sqrt (&result, scale TSRMLS_CC) != 0) {\n\t\tif (result->n_scale > scale) {\n\t\t\tresult->n_scale = scale;\n\t\t}\n\t\tZ_STRVAL_P(return_value) = bc_num2str(result);\n\t\tZ_STRLEN_P(return_value) = strlen(Z_STRVAL_P(return_value));\n\t\tZ_TYPE_P(return_value) = IS_STRING;\n\t} else {\n\t\tphp_error_docref(NULL TSRMLS_CC, E_WARNING, \"Square root of negative number\");\n\t}\n\n\tbc_free_num(&result);\n\treturn;\n}",
        "output": "1",
        "idx": 3651
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "str_matches_option(const char *s1, const char *optionname)\n{\n        /* Option names are given as \"option:\" We accept either 'option' in\n\t * s1, or 'option:randomjunk'.  The latter form is to implement the\n\t * resolv.conf parser. */\n\tsize_t optlen = strlen(optionname);\n\tif (strlen(s1) == optlen)\n\t\treturn !strncmp(s1, optionname, optlen-1);\n\telse\n\t\treturn !strncmp(s1, optionname, optlen);\n}",
        "output": "0",
        "idx": 329
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void unref_buffer(InputStream *ist, FrameBuffer *buf)\n\n{\n\n    av_assert0(buf->refcount);\n\n    buf->refcount--;\n\n    if (!buf->refcount) {\n\n        buf->next = ist->buffer_pool;\n\n        ist->buffer_pool = buf;\n\n    }\n\n}\n",
        "output": "0",
        "idx": 2123
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\nvoid skb_complete_tx_timestamp(struct sk_buff *skb,\n\t\t\t       struct skb_shared_hwtstamps *hwtstamps)\n{\n\tstruct sock *sk = skb->sk;\n\n\tif (!skb_may_tx_timestamp(sk, false))\n\t\treturn;\n\n\t/* Take a reference to prevent skb_orphan() from freeing the socket,\n\t * but only if the socket refcount is not zero.\n\t */\n\tif (likely(atomic_inc_not_zero(&sk->sk_refcnt))) {\n\t\t*skb_hwtstamps(skb) = *hwtstamps;\n\t\t__skb_complete_tx_timestamp(skb, sk, SCM_TSTAMP_SND);\n\t\tsock_put(sk);\n\t}",
        "output": "1",
        "idx": 3830
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int proc_cwd_link(struct dentry *dentry, struct path *path)\n{\n\tstruct task_struct *task = get_proc_task(d_inode(dentry));\n\tint result = -ENOENT;\n\n\tif (task) {\n\t\ttask_lock(task);\n\t\tif (task->fs) {\n\t\t\tget_fs_pwd(task->fs, path);\n\t\t\tresult = 0;\n\t\t}\n\t\ttask_unlock(task);\n\t\tput_task_struct(task);\n\t}\n\treturn result;\n}",
        "output": "0",
        "idx": 1874
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void do_gdbserver(int argc, const char **argv)\n\n{\n\n    int port;\n\n\n\n    port = DEFAULT_GDBSTUB_PORT;\n\n    if (argc >= 2)\n\n        port = atoi(argv[1]);\n\n    if (gdbserver_start(port) < 0) {\n\n        qemu_printf(\"Could not open gdbserver socket on port %d\\n\", port);\n\n    } else {\n\n        qemu_printf(\"Waiting gdb connection on port %d\\n\", port);\n\n    }\n\n}\n",
        "output": "0",
        "idx": 1745
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vmx_flush_tlb(struct kvm_vcpu *vcpu, bool invalidate_gpa)\n{\n\t__vmx_flush_tlb(vcpu, to_vmx(vcpu)->vpid, invalidate_gpa);\n}",
        "output": "0",
        "idx": 2802
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "LogLuvFixupTags(TIFF* tif)\n{\n\t(void) tif;\n\treturn (1);\n}",
        "output": "0",
        "idx": 1193
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_cold int asink_init(AVFilterContext *ctx, void *opaque)\n\n{\n\n    BufferSinkContext *buf = ctx->priv;\n\n    AVABufferSinkParams *params = opaque;\n\n\n\n    if (params && params->sample_fmts) {\n\n        buf->sample_fmts = ff_copy_int_list(params->sample_fmts);\n\n        if (!buf->sample_fmts)\n\n            return AVERROR(ENOMEM);\n\n    }\n\n    if (params && params->sample_rates) {\n\n        buf->sample_rates = ff_copy_int_list(params->sample_rates);\n\n        if (!buf->sample_rates)\n\n            return AVERROR(ENOMEM);\n\n    }\n\n    if (params && (params->channel_layouts || params->channel_counts)) {\n\n        if (params->all_channel_counts) {\n\n            av_log(ctx, AV_LOG_ERROR,\n\n                   \"Conflicting all_channel_counts and list in parameters\\n\");\n\n            return AVERROR(EINVAL);\n\n        }\n\n        buf->channel_layouts = concat_channels_lists(params->channel_layouts,\n\n                                                     params->channel_counts);\n\n        if (!buf->channel_layouts)\n\n            return AVERROR(ENOMEM);\n\n    }\n\n    if (params)\n\n        buf->all_channel_counts = params->all_channel_counts;\n\n    return common_init(ctx);\n\n}\n",
        "output": "0",
        "idx": 421
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qmp_qmp_capabilities(Error **errp)\n\n{\n\n    cur_mon->qmp.in_command_mode = true;\n\n}\n",
        "output": "1",
        "idx": 4419
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void raven_pcihost_class_init(ObjectClass *klass, void *data)\n\n{\n\n    DeviceClass *dc = DEVICE_CLASS(klass);\n\n\n\n    set_bit(DEVICE_CATEGORY_BRIDGE, dc->categories);\n\n    dc->realize = raven_pcihost_realizefn;\n\n    dc->fw_name = \"pci\";\n\n    dc->no_user = 1;\n\n}\n",
        "output": "1",
        "idx": 5148
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  const TfLiteTensor* input = GetInput(context, node, kInputTensor);\n  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);\n  switch (input->type) {\n    case kTfLiteInt64:\n      reference_ops::Negate(\n          GetTensorShape(input), GetTensorData<int64_t>(input),\n          GetTensorShape(output), GetTensorData<int64_t>(output));\n      break;\n    case kTfLiteInt32:\n      reference_ops::Negate(\n          GetTensorShape(input), GetTensorData<int32_t>(input),\n          GetTensorShape(output), GetTensorData<int32_t>(output));\n      break;\n    case kTfLiteFloat32:\n      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),\n                            GetTensorShape(output),\n                            GetTensorData<float>(output));\n      break;\n    default:\n      context->ReportError(\n          context,\n          \"Neg only currently supports int64, int32, and float32, got %d.\",\n          input->type);\n      return kTfLiteError;\n  }\n  return kTfLiteOk;\n}",
        "output": "1",
        "idx": 5189
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "mrb_include_module(mrb_state *mrb, struct RClass *c, struct RClass *m)\n{\n  struct RClass *ins_pos;\n\n  ins_pos = c;\n  while (m) {\n    struct RClass *p = c, *ic;\n    int superclass_seen = 0;\n\n    if (c->mt == m->mt) {\n      mrb_raise(mrb, E_ARGUMENT_ERROR, \"cyclic include detected\");\n    }\n    while (p) {\n      if (c != p && p->tt == MRB_TT_CLASS) {\n        superclass_seen = 1;\n      }\n      else if (p->mt == m->mt) {\n        if (p->tt == MRB_TT_ICLASS && !superclass_seen) {\n          ins_pos = p;\n        }\n        goto skip;\n      }\n      p = p->super;\n    }\n    ic = (struct RClass*)mrb_obj_alloc(mrb, MRB_TT_ICLASS, mrb->class_class);\n    if (m->tt == MRB_TT_ICLASS) {\n      ic->c = m->c;\n    }\n    else {\n      ic->c = m;\n    }\n    ic->mt = m->mt;\n    ic->iv = m->iv;\n    ic->super = ins_pos->super;\n    ins_pos->super = ic;\n    mrb_field_write_barrier(mrb, (struct RBasic*)ins_pos, (struct RBasic*)ic);\n    ins_pos = ic;\n  skip:\n    m = m->super;\n  }\n}",
        "output": "0",
        "idx": 2753
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "\tswitch (yych) {\n\t\tcase 'a': goto yy8;\n\t\tdefault: goto yy5;\n\t}",
        "output": "1",
        "idx": 5581
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "u64 snmp_get_cpu_field64(void __percpu *mib, int cpu, int offt,\n\t\t\t size_t syncp_offset)\n{\n\tvoid *bhptr;\n\tstruct u64_stats_sync *syncp;\n\tu64 v;\n\tunsigned int start;\n\n\tbhptr = per_cpu_ptr(mib, cpu);\n\tsyncp = (struct u64_stats_sync *)(bhptr + syncp_offset);\n\tdo {\n\t\tstart = u64_stats_fetch_begin_irq(syncp);\n\t\tv = *(((u64 *)bhptr) + offt);\n\t} while (u64_stats_fetch_retry_irq(syncp, start));\n\n\treturn v;\n}",
        "output": "0",
        "idx": 1138
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtio_config_writeb(VirtIODevice *vdev, uint32_t addr, uint32_t data)\n{\n    VirtioDeviceClass *k = VIRTIO_DEVICE_GET_CLASS(vdev);\n    uint8_t val = data;\n\n    if (addr > (vdev->config_len - sizeof(val)))\n        return;\n\n    stb_p(vdev->config + addr, val);\n\n    if (k->set_config) {\n        k->set_config(vdev, vdev->config);\n    }\n}",
        "output": "1",
        "idx": 1836
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void t_gen_cc_jmp(TCGv pc_true, TCGv pc_false)\n\n{\n\n\tTCGv btaken;\n\n\tint l1;\n\n\n\n\tl1 = gen_new_label();\n\n\tbtaken = tcg_temp_new(TCG_TYPE_TL);\n\n\n\n\t/* Conditional jmp.  */\n\n\ttcg_gen_mov_tl(btaken, env_btaken);\n\n\ttcg_gen_mov_tl(env_pc, pc_false);\n\n\ttcg_gen_brcondi_tl(TCG_COND_EQ, btaken, 0, l1);\n\n\ttcg_gen_mov_tl(env_pc, pc_true);\n\n\tgen_set_label(l1);\n\n\n\n\ttcg_temp_free(btaken);\n\n}\n",
        "output": "0",
        "idx": 3442
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "commercial_to_jd(VALUE y, int w, int d, double sg,\n\t\t VALUE *nth, int *ry,\n\t\t int *rjd,\n\t\t int *ns)\n{\n    double style = guess_style(y, sg);\n\n    if (style == 0) {\n\tint jd;\n\n\tc_commercial_to_jd(FIX2INT(y), w, d, sg, &jd, ns);\n\tdecode_jd(INT2FIX(jd), nth, rjd);\n\tif (f_zero_p(*nth))\n\t    *ry = FIX2INT(y);\n\telse {\n\t    VALUE nth2;\n\t    decode_year(y, *ns ? -1 : +1, &nth2, ry);\n\t}\n    }\n    else {\n\tdecode_year(y, style, nth, ry);\n\tc_commercial_to_jd(*ry, w, d, style, rjd, ns);\n    }\n}",
        "output": "0",
        "idx": 506
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "inline void Tanh(const float* input_data, const Dims<4>& input_dims,\n                 float* output_data, const Dims<4>& output_dims) {\n  Tanh(DimsToShape(input_dims), input_data, DimsToShape(output_dims),\n       output_data);\n}",
        "output": "0",
        "idx": 3299
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void gen_dcread(DisasContext *ctx)\n\n{\n\n#if defined(CONFIG_USER_ONLY)\n\n    gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n#else\n\n    TCGv EA, val;\n\n    if (unlikely(ctx->pr)) {\n\n        gen_inval_exception(ctx, POWERPC_EXCP_PRIV_OPC);\n\n        return;\n\n    }\n\n    gen_set_access_type(ctx, ACCESS_CACHE);\n\n    EA = tcg_temp_new();\n\n    gen_addr_reg_index(ctx, EA);\n\n    val = tcg_temp_new();\n\n    gen_qemu_ld32u(ctx, val, EA);\n\n    tcg_temp_free(val);\n\n    tcg_gen_mov_tl(cpu_gpr[rD(ctx->opcode)], EA);\n\n    tcg_temp_free(EA);\n\n#endif\n\n}\n",
        "output": "1",
        "idx": 821
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline unsigned long zap_pud_range(struct mmu_gather *tlb,\n\t\t\t\tstruct vm_area_struct *vma, pgd_t *pgd,\n\t\t\t\tunsigned long addr, unsigned long end,\n\t\t\t\tstruct zap_details *details)\n{\n\tpud_t *pud;\n\tunsigned long next;\n\n\tpud = pud_offset(pgd, addr);\n\tdo {\n\t\tnext = pud_addr_end(addr, end);\n\t\tif (pud_none_or_clear_bad(pud))\n\t\t\tcontinue;\n\t\tnext = zap_pmd_range(tlb, vma, pud, addr, next, details);\n\t} while (pud++, addr = next, addr != end);\n\n\treturn addr;\n}",
        "output": "0",
        "idx": 5307
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void compactxref(fz_context *ctx, pdf_document *doc, pdf_write_state *opts)\n{\n\tint num, newnum;\n\tint xref_len = pdf_xref_len(ctx, doc);\n\n\t/*\n\t * Update renumber_map in-place, clustering all used\n\t * objects together at low object ids. Objects that\n\t * already should be renumbered will have their new\n\t * object ids be updated to reflect the compaction.\n\t */\n\n\tnewnum = 1;\n\tfor (num = 1; num < xref_len; num++)\n\t{\n\t\t/* If it's not used, map it to zero */\n\t\tif (!opts->use_list[opts->renumber_map[num]])\n\t\t{\n\t\t\topts->renumber_map[num] = 0;\n\t\t}\n\t\t/* If it's not moved, compact it. */\n\t\telse if (opts->renumber_map[num] == num)\n\t\t{\n\t\t\topts->rev_renumber_map[newnum] = opts->rev_renumber_map[num];\n\t\t\topts->renumber_map[num] = newnum++;\n\t\t}\n\t\t/* Otherwise it's used, and moved. We know that it must have\n\t\t * moved down, so the place it's moved to will be in the right\n\t\t * place already. */\n\t\telse\n\t\t{\n\t\t\topts->renumber_map[num] = opts->renumber_map[opts->renumber_map[num]];\n\t\t}\n\t}\n}",
        "output": "1",
        "idx": 192
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "int spapr_rtas_register(const char *name, spapr_rtas_fn fn)\n\n{\n\n    int i;\n\n\n\n    for (i = 0; i < (rtas_next - rtas_table); i++) {\n\n        if (strcmp(name, rtas_table[i].name) == 0) {\n\n            fprintf(stderr, \"RTAS call \\\"%s\\\" registered twice\\n\", name);\n\n            exit(1);\n\n        }\n\n    }\n\n\n\n    assert(rtas_next < (rtas_table + TOKEN_MAX));\n\n\n\n    rtas_next->name = name;\n\n    rtas_next->fn = fn;\n\n\n\n    return (rtas_next++ - rtas_table) + TOKEN_BASE;\n\n}\n",
        "output": "1",
        "idx": 5236
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int pppol2tp_recvmsg(struct kiocb *iocb, struct socket *sock,\n\t\t\t    struct msghdr *msg, size_t len,\n\t\t\t    int flags)\n{\n\tint err;\n\tstruct sk_buff *skb;\n\tstruct sock *sk = sock->sk;\n\n\terr = -EIO;\n\tif (sk->sk_state & PPPOX_BOUND)\n\t\tgoto end;\n\n\tmsg->msg_namelen = 0;\n\n\terr = 0;\n\tskb = skb_recv_datagram(sk, flags & ~MSG_DONTWAIT,\n\t\t\t\tflags & MSG_DONTWAIT, &err);\n\tif (skb) {\n\t\terr = memcpy_toiovec(msg->msg_iov, (unsigned char *) skb->data,\n\t\t\t\t     skb->len);\n\t\tif (err < 0)\n\t\t\tgoto do_skb_free;\n\t\terr = skb->len;\n\t}\ndo_skb_free:\n\tkfree_skb(skb);\nend:\n\treturn err;\n}",
        "output": "1",
        "idx": 3488
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "BlockDriverAIOCB *bdrv_aio_writev(BlockDriverState *bs, int64_t sector_num,\n                                  QEMUIOVector *iov, int nb_sectors,\n                                  BlockDriverCompletionFunc *cb, void *opaque)\n{\n    return bdrv_aio_rw_vector(bs, sector_num, iov, nb_sectors,\n                              cb, opaque, 1);\n}",
        "output": "1",
        "idx": 322
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "For(expr_ty target, expr_ty iter, asdl_seq * body, asdl_seq * orelse, int\n    lineno, int col_offset, int end_lineno, int end_col_offset, PyArena *arena)\n{\n    stmt_ty p;\n    if (!target) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"field target is required for For\");\n        return NULL;\n    }\n    if (!iter) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"field iter is required for For\");\n        return NULL;\n    }\n    p = (stmt_ty)PyArena_Malloc(arena, sizeof(*p));\n    if (!p)\n        return NULL;\n    p->kind = For_kind;\n    p->v.For.target = target;\n    p->v.For.iter = iter;\n    p->v.For.body = body;\n    p->v.For.orelse = orelse;\n    p->lineno = lineno;\n    p->col_offset = col_offset;\n    p->end_lineno = end_lineno;\n    p->end_col_offset = end_col_offset;\n    return p;\n}",
        "output": "1",
        "idx": 5988
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "set_num_723(unsigned char *p, uint16_t value)\n{\n\tarchive_le16enc(p, value);\n\tarchive_be16enc(p+2, value);\n}",
        "output": "0",
        "idx": 3668
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static void vnc_desktop_resize(VncState *vs)\n\n{\n\n    DisplaySurface *ds = vs->vd->ds;\n\n\n\n    if (vs->csock == -1 || !vnc_has_feature(vs, VNC_FEATURE_RESIZE)) {\n\n        return;\n\n    }\n\n    if (vs->client_width == surface_width(ds) &&\n\n        vs->client_height == surface_height(ds)) {\n\n        return;\n\n    }\n\n    vs->client_width = surface_width(ds);\n\n    vs->client_height = surface_height(ds);\n\n    vnc_lock_output(vs);\n\n    vnc_write_u8(vs, VNC_MSG_SERVER_FRAMEBUFFER_UPDATE);\n\n    vnc_write_u8(vs, 0);\n\n    vnc_write_u16(vs, 1); /* number of rects */\n\n    vnc_framebuffer_update(vs, 0, 0, vs->client_width, vs->client_height,\n\n                           VNC_ENCODING_DESKTOPRESIZE);\n\n    vnc_unlock_output(vs);\n\n    vnc_flush(vs);\n\n}\n",
        "output": "1",
        "idx": 253
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int filter_frame(AVFilterLink *link, AVFrame *frame)\n\n{\n\n    AVFilterContext *ctx = link->dst;\n\n    AudioFIRContext *s = ctx->priv;\n\n    AVFilterLink *outlink = ctx->outputs[0];\n\n    int ret = 0;\n\n\n\n    av_audio_fifo_write(s->fifo[0], (void **)frame->extended_data,\n\n                        frame->nb_samples);\n\n    if (s->pts == AV_NOPTS_VALUE)\n\n        s->pts = frame->pts;\n\n\n\n    av_frame_free(&frame);\n\n\n\n    if (!s->have_coeffs && s->eof_coeffs) {\n\n        ret = convert_coeffs(ctx);\n\n        if (ret < 0)\n\n            return ret;\n\n    }\n\n\n\n    if (s->have_coeffs) {\n\n        while (av_audio_fifo_size(s->fifo[0]) >= s->part_size) {\n\n            ret = fir_frame(s, outlink);\n\n            if (ret < 0)\n\n                break;\n\n        }\n\n    }\n\n    return ret;\n\n}\n",
        "output": "0",
        "idx": 511
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static inline FILE *xfmkstemp(char **tmpname, char *dir)\n{\n\tint fd;\n\tFILE *ret;\n\n\tfd = xmkstemp(tmpname, dir);\n\tif (fd == -1)\n\t\treturn NULL;\n\n\tif (!(ret = fdopen(fd, \"w+\" UL_CLOEXECSTR))) {\n\t\tclose(fd);\n\t\treturn NULL;\n\t}\n\treturn ret;\n}",
        "output": "1",
        "idx": 1627
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "l2tp_proto_ver_print(netdissect_options *ndo, const uint16_t *dat)\n{\n\tND_PRINT((ndo, \"%u.%u\", (EXTRACT_16BITS(dat) >> 8),\n\t    (EXTRACT_16BITS(dat) & 0xff)));\n}",
        "output": "1",
        "idx": 1601
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "check_user_copy_file (const char *srcfile,\n                      const char *destfile,\n                      uid_t       user,\n                      gssize      max_file_size)\n{\n        struct stat srcfileinfo;\n        struct stat destfileinfo;\n\n        if (max_file_size < 0) {\n                max_file_size = G_MAXSIZE;\n        }\n\n        /* Exists/Readable? */\n        if (g_stat (srcfile, &srcfileinfo) < 0) {\n                g_debug (\"File does not exist\");\n                return FALSE;\n        }\n\n        /* Is newer than the file already in the cache? */\n        if (destfile != NULL && g_stat (destfile, &destfileinfo) == 0) {\n                if (srcfileinfo.st_mtime <= destfileinfo.st_mtime) {\n                        g_debug (\"Destination file is newer\");\n                        return FALSE;\n                }\n        }\n\n        /* Is a regular file */\n        if (G_UNLIKELY (!S_ISREG (srcfileinfo.st_mode))) {\n                g_debug (\"File is not a regular file\");\n                return FALSE;\n        }\n\n        /* Owned by user? */\n        if (G_UNLIKELY (srcfileinfo.st_uid != user)) {\n                g_debug (\"File is not owned by user\");\n                return FALSE;\n        }\n\n        /* Size is kosher? */\n        if (G_UNLIKELY (srcfileinfo.st_size > max_file_size)) {\n                g_debug (\"File is too large\");\n                return FALSE;\n        }\n\n        return TRUE;\n}",
        "output": "0",
        "idx": 5483
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void ff_jpeg2000_cleanup(Jpeg2000Component *comp, Jpeg2000CodingStyle *codsty)\n{\n    int reslevelno, bandno, precno;\n    for (reslevelno = 0;\n         comp->reslevel && reslevelno < codsty->nreslevels;\n         reslevelno++) {\n        Jpeg2000ResLevel *reslevel = comp->reslevel + reslevelno;\n\n        for (bandno = 0; bandno < reslevel->nbands; bandno++) {\n            Jpeg2000Band *band = reslevel->band + bandno;\n            for (precno = 0; precno < reslevel->num_precincts_x * reslevel->num_precincts_y; precno++) {\n                Jpeg2000Prec *prec = band->prec + precno;\n                av_freep(&prec->zerobits);\n                av_freep(&prec->cblkincl);\n                av_freep(&prec->cblk);\n            }\n\n            av_freep(&band->prec);\n        }\n        av_freep(&reslevel->band);\n    }\n\n    ff_dwt_destroy(&comp->dwt);\n    av_freep(&comp->reslevel);\n    av_freep(&comp->i_data);\n    av_freep(&comp->f_data);\n}",
        "output": "1",
        "idx": 394
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static av_always_inline void thread_park_workers(SliceThreadContext *c, int thread_count)\n\n{\n\n    while (c->current_job != thread_count + c->job_count)\n\n        pthread_cond_wait(&c->last_job_cond, &c->current_job_lock);\n\n    pthread_mutex_unlock(&c->current_job_lock);\n\n}\n",
        "output": "1",
        "idx": 6063
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void virtio_9p_push_and_notify(V9fsPDU *pdu)\n\n{\n\n    V9fsState *s = pdu->s;\n\n    V9fsVirtioState *v = container_of(s, V9fsVirtioState, state);\n\n    VirtQueueElement *elem = &v->elems[pdu->idx];\n\n\n\n    /* push onto queue and notify */\n\n    virtqueue_push(v->vq, elem, pdu->size);\n\n\n\n    /* FIXME: we should batch these completions */\n\n    virtio_notify(VIRTIO_DEVICE(v), v->vq);\n\n}\n",
        "output": "0",
        "idx": 845
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static GArray *nvdimm_build_device_structure(void)\n\n{\n\n    GSList *device_list = nvdimm_get_plugged_device_list();\n\n    GArray *structures = g_array_new(false, true /* clear */, 1);\n\n\n\n    for (; device_list; device_list = device_list->next) {\n\n        DeviceState *dev = device_list->data;\n\n\n\n        /* build System Physical Address Range Structure. */\n\n        nvdimm_build_structure_spa(structures, dev);\n\n\n\n        /*\n\n         * build Memory Device to System Physical Address Range Mapping\n\n         * Structure.\n\n         */\n\n        nvdimm_build_structure_memdev(structures, dev);\n\n\n\n        /* build NVDIMM Control Region Structure. */\n\n        nvdimm_build_structure_dcr(structures, dev);\n\n    }\n\n    g_slist_free(device_list);\n\n\n\n    return structures;\n\n}\n",
        "output": "0",
        "idx": 4433
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "void qpci_msix_disable(QPCIDevice *dev)\n\n{\n\n    uint8_t addr;\n\n    uint16_t val;\n\n\n\n    g_assert(dev->msix_enabled);\n\n    addr = qpci_find_capability(dev, PCI_CAP_ID_MSIX);\n\n    g_assert_cmphex(addr, !=, 0);\n\n    val = qpci_config_readw(dev, addr + PCI_MSIX_FLAGS);\n\n    qpci_config_writew(dev, addr + PCI_MSIX_FLAGS,\n\n                                                val & ~PCI_MSIX_FLAGS_ENABLE);\n\n\n\n    qpci_iounmap(dev, dev->msix_table);\n\n    qpci_iounmap(dev, dev->msix_pba);\n\n    dev->msix_enabled = 0;\n\n    dev->msix_table = NULL;\n\n    dev->msix_pba = NULL;\n\n}\n",
        "output": "1",
        "idx": 979
    },
    {
        "instruction": "Detect whether the following code contains vulnerabilities.",
        "input": "static int skip_data_stream_element(AACContext *ac, GetBitContext *gb)\n\n{\n\n    int byte_align = get_bits1(gb);\n\n    int count = get_bits(gb, 8);\n\n    if (count == 255)\n\n        count += get_bits(gb, 8);\n\n    if (byte_align)\n\n        align_get_bits(gb);\n\n\n\n    if (get_bits_left(gb) < 8 * count) {\n\n        av_log(ac->avctx, AV_LOG_ERROR, overread_err);\n\n        return -1;\n\n    }\n\n    skip_bits_long(gb, 8 * count);\n\n    return 0;\n\n}\n",
        "output": "1",
        "idx": 4750
    }
]